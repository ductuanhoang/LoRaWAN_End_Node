
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126e8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f00  08012820  08012820  00022820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013720  08013720  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08013720  08013720  00023720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013728  08013728  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013728  08013728  00023728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013730  08013730  00023730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08013738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000ef0  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001348  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001460  20001460  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001460  20001460  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005a28c  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b8aa  00000000  00000000  0009888e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00025378  00000000  00000000  000a4138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002c70  00000000  00000000  000c94b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002ed0  00000000  00000000  000cc120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002b44a  00000000  00000000  000ceff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004d485  00000000  00000000  000fa43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e01e5  00000000  00000000  001478bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00227aa4  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007b24  00000000  00000000  00227af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08012808 	.word	0x08012808

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08012808 	.word	0x08012808

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC_Init+0x50>)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC_Init+0x54>)
 8000eb2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ec8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	f001 fe0d 	bl	8002b0c <HAL_ADC_Init>
 8000ef2:	b900      	cbnz	r0, 8000ef6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ef4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ef6:	f000 fb25 	bl	8001544 <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_ADC_Init+0x48>
 8000efc:	20000134 	.word	0x20000134
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_ADC_MspInit+0x28>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_MspInit+0xa>
 8000f0c:	4770      	bx	lr
{
 8000f0e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f24:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012400 	.word	0x40012400

08000f30 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_ADC_MspDeInit+0x18>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f38:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	e7f7      	b.n	8000f38 <HAL_ADC_MspDeInit+0x8>
 8000f48:	40012400 	.word	0x40012400

08000f4c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f5a:	f7ff ffa7 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f60:	f002 fa0e 	bl	8003380 <HAL_ADCEx_Calibration_Start>
 8000f64:	b9f8      	cbnz	r0, 8000fa6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f66:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f72:	f001 ff45 	bl	8002e00 <HAL_ADC_ConfigChannel>
 8000f76:	b9c8      	cbnz	r0, 8000fac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f905 	bl	8003188 <HAL_ADC_Start>
 8000f7e:	b9c0      	cbnz	r0, 8000fb2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	4620      	mov	r0, r4
 8000f88:	f001 fed8 	bl	8002d3c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 f9d7 	bl	8003340 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f001 ff31 	bl	8002dfa <HAL_ADC_GetValue>
 8000f98:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f970 	bl	8003280 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fa6:	f000 facd 	bl	8001544 <Error_Handler>
 8000faa:	e7dc      	b.n	8000f66 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fac:	f000 faca 	bl	8001544 <Error_Handler>
 8000fb0:	e7e2      	b.n	8000f78 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fb2:	f000 fac7 	bl	8001544 <Error_Handler>
 8000fb6:	e7e3      	b.n	8000f80 <ADC_ReadChannels+0x34>
 8000fb8:	20000134 	.word	0x20000134

08000fbc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SYS_InitMeasurement+0x8>)
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <SYS_InitMeasurement+0xc>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000134 	.word	0x20000134
 8000fc8:	40012400 	.word	0x40012400

08000fcc <SYS_GetBatteryLevel>:
{
 8000fcc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <SYS_GetBatteryLevel+0x38>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fd4:	b1a0      	cbz	r0, 8001000 <SYS_GetBatteryLevel+0x34>
 8000fd6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SYS_GetBatteryLevel+0x3c>)
 8000fda:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d007      	beq.n	8000ff6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fe6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000fea:	fb03 f000 	mul.w	r0, r3, r0
 8000fee:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ff2:	b280      	uxth	r0, r0
 8000ff4:	e005      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <SYS_GetBatteryLevel+0x40>)
 8000ff8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	e000      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001000:	2000      	movs	r0, #0
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	b4002000 	.word	0xb4002000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	004c08d8 	.word	0x004c08d8

08001010 <SYS_GetTemperatureLevel>:
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800101a:	f7ff ffd7 	bl	8000fcc <SYS_GetBatteryLevel>
 800101e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <SYS_GetTemperatureLevel+0x98>)
 8001022:	f7ff ff93 	bl	8000f4c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SYS_GetTemperatureLevel+0x9c>)
 8001028:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800102c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001030:	428a      	cmp	r2, r1
 8001032:	d01d      	beq.n	8001070 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001034:	fb00 f304 	mul.w	r3, r0, r4
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	4c1d      	ldr	r4, [pc, #116]	; (80010b0 <SYS_GetTemperatureLevel+0xa0>)
 800103c:	fba4 0303 	umull	r0, r3, r4, r3
 8001040:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001050:	331e      	adds	r3, #30
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001066:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800106a:	b200      	sxth	r0, r0
 800106c:	b002      	add	sp, #8
 800106e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001070:	fb00 f404 	mul.w	r4, r0, r4
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SYS_GetTemperatureLevel+0xa4>)
 8001076:	fba3 2304 	umull	r2, r3, r3, r4
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001080:	0ae4      	lsrs	r4, r4, #11
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fb03 f404 	mul.w	r4, r3, r4
 800108a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800108e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <SYS_GetTemperatureLevel+0xa8>)
 8001094:	fb83 2304 	smull	r2, r3, r3, r4
 8001098:	17e4      	asrs	r4, r4, #31
 800109a:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 800109e:	341e      	adds	r4, #30
 80010a0:	b224      	sxth	r4, r4
 80010a2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010a6:	e7d7      	b.n	8001058 <SYS_GetTemperatureLevel+0x48>
 80010a8:	b0001000 	.word	0xb0001000
 80010ac:	1fff7500 	.word	0x1fff7500
 80010b0:	09ee009f 	.word	0x09ee009f
 80010b4:	00100101 	.word	0x00100101
 80010b8:	68db8bad 	.word	0x68db8bad

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b500      	push	{lr}
 80010be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010c6:	f042 0204 	orr.w	r2, r2, #4
 80010ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ce:	f002 0204 	and.w	r2, r2, #4
 80010d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2102      	movs	r1, #2
 80010ec:	200f      	movs	r0, #15
 80010ee:	f002 f9f9 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f002 fa2e 	bl	8003554 <HAL_NVIC_EnableIRQ>

}
 80010f8:	b003      	add	sp, #12
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4

080010fe <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80010fe:	2300      	movs	r3, #0
 8001100:	e001      	b.n	8001106 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001102:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001104:	3308      	adds	r3, #8
 8001106:	428b      	cmp	r3, r1
 8001108:	d20a      	bcs.n	8001120 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800110a:	6842      	ldr	r2, [r0, #4]
 800110c:	f8d0 c000 	ldr.w	ip, [r0]
 8001110:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001114:	bf08      	it	eq
 8001116:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 800111a:	d0f2      	beq.n	8001102 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800111c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800111e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001120:	2000      	movs	r0, #0
 8001122:	4770      	bx	lr

08001124 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001124:	b130      	cbz	r0, 8001134 <FLASH_IF_INT_Read+0x10>
{
 8001126:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001128:	b139      	cbz	r1, 800113a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800112a:	b292      	uxth	r2, r2
 800112c:	f010 fe22 	bl	8011d74 <UTIL_MEM_cpy_8>
  return ret_status;
 8001130:	2000      	movs	r0, #0
}
 8001132:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001134:	f06f 0005 	mvn.w	r0, #5
}
 8001138:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800113a:	f06f 0005 	mvn.w	r0, #5
 800113e:	e7f8      	b.n	8001132 <FLASH_IF_INT_Read+0xe>

08001140 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001140:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001142:	f002 fcd7 	bl	8003af4 <HAL_FLASH_Unlock>
 8001146:	b978      	cbnz	r0, 8001168 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <FLASH_IF_INT_Clear_Error+0x30>)
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001156:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001158:	f002 fce4 	bl	8003b24 <HAL_FLASH_Lock>
 800115c:	b908      	cbnz	r0, 8001162 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800115e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001160:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001162:	f06f 0004 	mvn.w	r0, #4
 8001166:	e7fb      	b.n	8001160 <FLASH_IF_INT_Clear_Error+0x20>
 8001168:	f06f 0004 	mvn.w	r0, #4
 800116c:	e7f8      	b.n	8001160 <FLASH_IF_INT_Clear_Error+0x20>
 800116e:	bf00      	nop
 8001170:	58004000 	.word	0x58004000

08001174 <FLASH_IF_INT_Erase>:
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800117c:	2800      	cmp	r0, #0
 800117e:	d039      	beq.n	80011f4 <FLASH_IF_INT_Erase+0x80>
 8001180:	460e      	mov	r6, r1
 8001182:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001184:	f7ff ffdc 	bl	8001140 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001188:	4605      	mov	r5, r0
 800118a:	b110      	cbz	r0, 8001192 <FLASH_IF_INT_Erase+0x1e>
}
 800118c:	4628      	mov	r0, r5
 800118e:	b004      	add	sp, #16
 8001190:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001192:	f002 fcaf 	bl	8003af4 <HAL_FLASH_Unlock>
 8001196:	bb80      	cbnz	r0, 80011fa <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001198:	2302      	movs	r3, #2
 800119a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800119c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <FLASH_IF_INT_Erase+0x8c>)
 80011a2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <FLASH_IF_INT_Erase+0x90>)
 80011a8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80011ac:	fbb3 fcf1 	udiv	ip, r3, r1
 80011b0:	fb01 331c 	mls	r3, r1, ip, r3
 80011b4:	0adb      	lsrs	r3, r3, #11
 80011b6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80011b8:	4434      	add	r4, r6
 80011ba:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 80011be:	3c01      	subs	r4, #1
 80011c0:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80011c4:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80011c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80011cc:	fb02 4411 	mls	r4, r2, r1, r4
 80011d0:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 80011d4:	3401      	adds	r4, #1
 80011d6:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80011d8:	a903      	add	r1, sp, #12
 80011da:	4668      	mov	r0, sp
 80011dc:	f002 fd6e 	bl	8003cbc <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80011e0:	b118      	cbz	r0, 80011ea <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d004      	beq.n	80011f0 <FLASH_IF_INT_Erase+0x7c>
 80011e6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80011ea:	f002 fc9b 	bl	8003b24 <HAL_FLASH_Lock>
 80011ee:	e7cd      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80011f0:	2501      	movs	r5, #1
 80011f2:	e7fa      	b.n	80011ea <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80011f4:	f06f 0505 	mvn.w	r5, #5
 80011f8:	e7c8      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80011fa:	f06f 0504 	mvn.w	r5, #4
 80011fe:	e7c5      	b.n	800118c <FLASH_IF_INT_Erase+0x18>
 8001200:	1fff7000 	.word	0x1fff7000
 8001204:	03fffc00 	.word	0x03fffc00

08001208 <FLASH_IF_INT_Write>:
{
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	b089      	sub	sp, #36	; 0x24
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001212:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 80a9 	beq.w	800136c <FLASH_IF_INT_Write+0x164>
 800121a:	4683      	mov	fp, r0
 800121c:	2900      	cmp	r1, #0
 800121e:	f000 80a9 	beq.w	8001374 <FLASH_IF_INT_Write+0x16c>
 8001222:	f012 0f07 	tst.w	r2, #7
 8001226:	f040 80a9 	bne.w	800137c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800122a:	f010 0307 	ands.w	r3, r0, #7
 800122e:	9305      	str	r3, [sp, #20]
 8001230:	f040 80a8 	bne.w	8001384 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001234:	f7ff ff84 	bl	8001140 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001238:	9002      	str	r0, [sp, #8]
 800123a:	b118      	cbz	r0, 8001244 <FLASH_IF_INT_Write+0x3c>
}
 800123c:	9802      	ldr	r0, [sp, #8]
 800123e:	b009      	add	sp, #36	; 0x24
 8001240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001244:	f002 fc56 	bl	8003af4 <HAL_FLASH_Unlock>
 8001248:	2800      	cmp	r0, #0
 800124a:	f040 809f 	bne.w	800138c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800124e:	9c03      	ldr	r4, [sp, #12]
 8001250:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <FLASH_IF_INT_Write+0x18c>)
 8001256:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 800125a:	494f      	ldr	r1, [pc, #316]	; (8001398 <FLASH_IF_INT_Write+0x190>)
 800125c:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 8001260:	fbb3 f2f1 	udiv	r2, r3, r1
 8001264:	fb01 3212 	mls	r2, r1, r2, r3
 8001268:	0ad3      	lsrs	r3, r2, #11
 800126a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800126c:	9b04      	ldr	r3, [sp, #16]
 800126e:	18e3      	adds	r3, r4, r3
 8001270:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001274:	3b01      	subs	r3, #1
 8001276:	fbb3 f0f1 	udiv	r0, r3, r1
 800127a:	fb01 3310 	mls	r3, r1, r0, r3
 800127e:	0adb      	lsrs	r3, r3, #11
 8001280:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001284:	3301      	adds	r3, #1
 8001286:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001288:	2b01      	cmp	r3, #1
 800128a:	d906      	bls.n	800129a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800128c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001290:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 8001294:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001298:	e02f      	b.n	80012fa <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800129a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800129e:	e7f9      	b.n	8001294 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80012a0:	46c8      	mov	r8, r9
          current_source = uSource;
 80012a2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80012a4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80012a6:	9d05      	ldr	r5, [sp, #20]
 80012a8:	4545      	cmp	r5, r8
 80012aa:	d215      	bcs.n	80012d8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80012ac:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80012ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012b2:	4621      	mov	r1, r4
 80012b4:	2001      	movs	r0, #1
 80012b6:	f002 fc79 	bl	8003bac <HAL_FLASH_Program>
 80012ba:	b950      	cbnz	r0, 80012d2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80012bc:	6820      	ldr	r0, [r4, #0]
 80012be:	6862      	ldr	r2, [r4, #4]
 80012c0:	59e9      	ldr	r1, [r5, r7]
 80012c2:	6873      	ldr	r3, [r6, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	bf08      	it	eq
 80012c8:	4288      	cmpeq	r0, r1
 80012ca:	d141      	bne.n	8001350 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80012cc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80012ce:	3508      	adds	r5, #8
 80012d0:	e7ea      	b.n	80012a8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80012d2:	f06f 0303 	mvn.w	r3, #3
 80012d6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d13f      	bne.n	800135e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80012de:	44cb      	add	fp, r9
        uSource += length;
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	444b      	add	r3, r9
 80012e4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80012e6:	9b04      	ldr	r3, [sp, #16]
 80012e8:	eba3 0909 	sub.w	r9, r3, r9
 80012ec:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80012f0:	bf28      	it	cs
 80012f2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80012f6:	f10a 0a01 	add.w	sl, sl, #1
 80012fa:	9b06      	ldr	r3, [sp, #24]
 80012fc:	9a07      	ldr	r2, [sp, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	4553      	cmp	r3, sl
 8001302:	d92c      	bls.n	800135e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001304:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001308:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800130a:	4649      	mov	r1, r9
 800130c:	9803      	ldr	r0, [sp, #12]
 800130e:	f7ff fef6 	bl	80010fe <FLASH_IF_INT_IsEmpty>
 8001312:	2800      	cmp	r0, #0
 8001314:	d0c4      	beq.n	80012a0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	b1e8      	cbz	r0, 8001358 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800131c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001320:	4621      	mov	r1, r4
 8001322:	f7ff feff 	bl	8001124 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f3cb 030a 	ubfx	r3, fp, #0, #11
 800132e:	fa1f f289 	uxth.w	r2, r9
 8001332:	9901      	ldr	r1, [sp, #4]
 8001334:	4418      	add	r0, r3
 8001336:	f010 fd1d 	bl	8011d74 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800133a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff ff18 	bl	8001174 <FLASH_IF_INT_Erase>
 8001344:	b970      	cbnz	r0, 8001364 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <FLASH_IF_INT_Write+0x194>)
 8001348:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800134a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800134e:	e7aa      	b.n	80012a6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001350:	f06f 0303 	mvn.w	r3, #3
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	e7bf      	b.n	80012d8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001358:	f06f 0305 	mvn.w	r3, #5
 800135c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800135e:	f002 fbe1 	bl	8003b24 <HAL_FLASH_Lock>
 8001362:	e76b      	b.n	800123c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001364:	f06f 0301 	mvn.w	r3, #1
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	e7f8      	b.n	800135e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800136c:	f06f 0305 	mvn.w	r3, #5
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	e763      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001374:	f06f 0305 	mvn.w	r3, #5
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	e75f      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 800137c:	f06f 0305 	mvn.w	r3, #5
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	e75b      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001384:	f06f 0305 	mvn.w	r3, #5
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	e757      	b.n	800123c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800138c:	f06f 0304 	mvn.w	r3, #4
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	e753      	b.n	800123c <FLASH_IF_INT_Write+0x34>
 8001394:	1fff7000 	.word	0x1fff7000
 8001398:	03fffc00 	.word	0x03fffc00
 800139c:	20000198 	.word	0x20000198

080013a0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <FLASH_IF_Init+0x8>)
 80013a2:	6018      	str	r0, [r3, #0]
}
 80013a4:	2000      	movs	r0, #0
 80013a6:	4770      	bx	lr
 80013a8:	20000198 	.word	0x20000198

080013ac <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80013b0:	d30e      	bcc.n	80013d0 <FLASH_IF_Write+0x24>
{
 80013b2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <FLASH_IF_Write+0x30>)
 80013b6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <FLASH_IF_Write+0x34>)
 80013bc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80013c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4298      	cmp	r0, r3
 80013c8:	d805      	bhi.n	80013d6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80013ca:	f7ff ff1d 	bl	8001208 <FLASH_IF_INT_Write>
}
 80013ce:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013d4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	e7f8      	b.n	80013ce <FLASH_IF_Write+0x22>
 80013dc:	1fff7000 	.word	0x1fff7000
 80013e0:	03fffc00 	.word	0x03fffc00

080013e4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80013e8:	d30e      	bcc.n	8001408 <FLASH_IF_Read+0x24>
{
 80013ea:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <FLASH_IF_Read+0x30>)
 80013ee:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <FLASH_IF_Read+0x34>)
 80013f4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80013f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4299      	cmp	r1, r3
 8001400:	d805      	bhi.n	800140e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001402:	f7ff fe8f 	bl	8001124 <FLASH_IF_INT_Read>
}
 8001406:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
}
 800140c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	e7f8      	b.n	8001406 <FLASH_IF_Read+0x22>
 8001414:	1fff7000 	.word	0x1fff7000
 8001418:	03fffc00 	.word	0x03fffc00

0800141c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800141c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001420:	d30e      	bcc.n	8001440 <FLASH_IF_Erase+0x24>
{
 8001422:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <FLASH_IF_Erase+0x30>)
 8001426:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <FLASH_IF_Erase+0x34>)
 800142c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001430:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001434:	3b01      	subs	r3, #1
 8001436:	4298      	cmp	r0, r3
 8001438:	d805      	bhi.n	8001446 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800143a:	f7ff fe9b 	bl	8001174 <FLASH_IF_INT_Erase>
}
 800143e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001444:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295
 800144a:	e7f8      	b.n	800143e <FLASH_IF_Erase+0x22>
 800144c:	1fff7000 	.word	0x1fff7000
 8001450:	03fffc00 	.word	0x03fffc00

08001454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	2400      	movs	r4, #0
 800145c:	9403      	str	r4, [sp, #12]
 800145e:	9404      	str	r4, [sp, #16]
 8001460:	9405      	str	r4, [sp, #20]
 8001462:	9406      	str	r4, [sp, #24]
 8001464:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800146c:	f042 0202 	orr.w	r2, r2, #2
 8001470:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f002 0202 	and.w	r2, r2, #2
 8001478:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800147a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800147c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147e:	f042 0204 	orr.w	r2, r2, #4
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001486:	f002 0204 	and.w	r2, r2, #4
 800148a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800148c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800148e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800149e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80014a0:	4e26      	ldr	r6, [pc, #152]	; (800153c <MX_GPIO_Init+0xe8>)
 80014a2:	4622      	mov	r2, r4
 80014a4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80014a8:	4630      	mov	r0, r6
 80014aa:	f002 fd97 	bl	8003fdc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80014ae:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80014b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2501      	movs	r5, #1
 80014b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2302      	movs	r3, #2
 80014bc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	a903      	add	r1, sp, #12
 80014c0:	4630      	mov	r0, r6
 80014c2:	f002 fc3b 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80014c6:	f04f 0803 	mov.w	r8, #3
 80014ca:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ce:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80014d2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	a903      	add	r1, sp, #12
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f002 fc2e 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80014e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	a903      	add	r1, sp, #12
 80014f0:	4630      	mov	r0, r6
 80014f2:	f002 fc23 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80014fe:	a903      	add	r1, sp, #12
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <MX_GPIO_Init+0xec>)
 8001502:	f002 fc1b 	bl	8003d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001506:	4622      	mov	r2, r4
 8001508:	4621      	mov	r1, r4
 800150a:	2006      	movs	r0, #6
 800150c:	f001 ffea 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001510:	2006      	movs	r0, #6
 8001512:	f002 f81f 	bl	8003554 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001516:	4622      	mov	r2, r4
 8001518:	4621      	mov	r1, r4
 800151a:	2007      	movs	r0, #7
 800151c:	f001 ffe2 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001520:	2007      	movs	r0, #7
 8001522:	f002 f817 	bl	8003554 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001526:	4622      	mov	r2, r4
 8001528:	4621      	mov	r1, r4
 800152a:	2016      	movs	r0, #22
 800152c:	f001 ffda 	bl	80034e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001530:	2016      	movs	r0, #22
 8001532:	f002 f80f 	bl	8003554 <HAL_NVIC_EnableIRQ>

}
 8001536:	b008      	add	sp, #32
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800

08001544 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x2>

08001548 <SystemClock_Config>:
{
 8001548:	b510      	push	{r4, lr}
 800154a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154c:	2248      	movs	r2, #72	; 0x48
 800154e:	2100      	movs	r1, #0
 8001550:	a808      	add	r0, sp, #32
 8001552:	f011 f8d1 	bl	80126f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001556:	2400      	movs	r4, #0
 8001558:	9401      	str	r4, [sp, #4]
 800155a:	9402      	str	r4, [sp, #8]
 800155c:	9403      	str	r4, [sp, #12]
 800155e:	9404      	str	r4, [sp, #16]
 8001560:	9405      	str	r4, [sp, #20]
 8001562:	9406      	str	r4, [sp, #24]
 8001564:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001566:	f002 fd55 	bl	8004014 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001572:	f023 0318 	bic.w	r3, r3, #24
 8001576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001594:	2324      	movs	r3, #36	; 0x24
 8001596:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001598:	2381      	movs	r3, #129	; 0x81
 800159a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015a0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015a2:	23b0      	movs	r3, #176	; 0xb0
 80015a4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	a808      	add	r0, sp, #32
 80015aa:	f002 fecd 	bl	8004348 <HAL_RCC_OscConfig>
 80015ae:	b970      	cbnz	r0, 80015ce <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015b0:	234f      	movs	r3, #79	; 0x4f
 80015b2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	2102      	movs	r1, #2
 80015c2:	a801      	add	r0, sp, #4
 80015c4:	f003 f9f2 	bl	80049ac <HAL_RCC_ClockConfig>
 80015c8:	b918      	cbnz	r0, 80015d2 <SystemClock_Config+0x8a>
}
 80015ca:	b01a      	add	sp, #104	; 0x68
 80015cc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80015ce:	f7ff ffb9 	bl	8001544 <Error_Handler>
    Error_Handler();
 80015d2:	f7ff ffb7 	bl	8001544 <Error_Handler>

080015d6 <main>:
{
 80015d6:	b508      	push	{r3, lr}
  HAL_Init();
 80015d8:	f001 fa4a 	bl	8002a70 <HAL_Init>
  SystemClock_Config();
 80015dc:	f7ff ffb4 	bl	8001548 <SystemClock_Config>
  MX_GPIO_Init();
 80015e0:	f7ff ff38 	bl	8001454 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015e4:	f000 fcfc 	bl	8001fe0 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80015e8:	f000 fd00 	bl	8001fec <MX_LoRaWAN_Process>
  while (1)
 80015ec:	e7fc      	b.n	80015e8 <main+0x12>
	...

080015f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f0:	b500      	push	{lr}
 80015f2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015f4:	222c      	movs	r2, #44	; 0x2c
 80015f6:	2100      	movs	r1, #0
 80015f8:	a801      	add	r0, sp, #4
 80015fa:	f011 f87d 	bl	80126f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <MX_RTC_Init+0x74>)
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_RTC_Init+0x78>)
 8001602:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001604:	231f      	movs	r3, #31
 8001606:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800160c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800160e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001614:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001616:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800161e:	f003 fd2b 	bl	8005078 <HAL_RTC_Init>
 8001622:	b9a8      	cbnz	r0, 8001650 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_RTC_Init+0x74>)
 8001626:	f003 fe69 	bl	80052fc <HAL_RTCEx_SetSSRU_IT>
 800162a:	b9a0      	cbnz	r0, 8001656 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800162c:	2200      	movs	r2, #0
 800162e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001630:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001632:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001634:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001638:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001640:	a901      	add	r1, sp, #4
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_RTC_Init+0x74>)
 8001644:	f003 fd7e 	bl	8005144 <HAL_RTC_SetAlarm_IT>
 8001648:	b940      	cbnz	r0, 800165c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800164a:	b00d      	add	sp, #52	; 0x34
 800164c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001650:	f7ff ff78 	bl	8001544 <Error_Handler>
 8001654:	e7e6      	b.n	8001624 <MX_RTC_Init+0x34>
    Error_Handler();
 8001656:	f7ff ff75 	bl	8001544 <Error_Handler>
 800165a:	e7e7      	b.n	800162c <MX_RTC_Init+0x3c>
    Error_Handler();
 800165c:	f7ff ff72 	bl	8001544 <Error_Handler>
}
 8001660:	e7f3      	b.n	800164a <MX_RTC_Init+0x5a>
 8001662:	bf00      	nop
 8001664:	2000019c 	.word	0x2000019c
 8001668:	40002800 	.word	0x40002800

0800166c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800166c:	b510      	push	{r4, lr}
 800166e:	b090      	sub	sp, #64	; 0x40
 8001670:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001672:	2238      	movs	r2, #56	; 0x38
 8001674:	2100      	movs	r1, #0
 8001676:	a802      	add	r0, sp, #8
 8001678:	f011 f83e 	bl	80126f8 <memset>
  if(rtcHandle->Instance==RTC)
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_RTC_MspInit+0x7c>)
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001684:	b010      	add	sp, #64	; 0x40
 8001686:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001692:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001694:	a802      	add	r0, sp, #8
 8001696:	f003 fadd 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	bb08      	cbnz	r0, 80016e0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	4611      	mov	r1, r2
 80016c2:	2002      	movs	r0, #2
 80016c4:	f001 ff0e 	bl	80034e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f001 ff43 	bl	8003554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	4611      	mov	r1, r2
 80016d2:	202a      	movs	r0, #42	; 0x2a
 80016d4:	f001 ff06 	bl	80034e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016d8:	202a      	movs	r0, #42	; 0x2a
 80016da:	f001 ff3b 	bl	8003554 <HAL_NVIC_EnableIRQ>
}
 80016de:	e7d1      	b.n	8001684 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80016e0:	f7ff ff30 	bl	8001544 <Error_Handler>
 80016e4:	e7da      	b.n	800169c <HAL_RTC_MspInit+0x30>
 80016e6:	bf00      	nop
 80016e8:	40002800 	.word	0x40002800

080016ec <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80016ec:	4770      	bx	lr

080016ee <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80016ee:	4770      	bx	lr

080016f0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80016f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80016f2:	f001 f9d3 	bl	8002a9c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016f6:	2001      	movs	r0, #1
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <PWR_EnterStopMode+0x14>)
 80016fa:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80016fe:	f002 fced 	bl	80040dc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001702:	bd08      	pop	{r3, pc}
 8001704:	58000400 	.word	0x58000400

08001708 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800170a:	f001 f9ce 	bl	8002aaa <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800170e:	bd08      	pop	{r3, pc}

08001710 <PWR_ExitStopMode>:
{
 8001710:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001712:	f001 f9ca 	bl	8002aaa <HAL_ResumeTick>
  vcom_Resume();
 8001716:	f000 fc23 	bl	8001f60 <vcom_Resume>
}
 800171a:	bd08      	pop	{r3, pc}

0800171c <PWR_EnterSleepMode>:
{
 800171c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800171e:	f001 f9bd 	bl	8002a9c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001722:	2101      	movs	r1, #1
 8001724:	2000      	movs	r0, #0
 8001726:	f002 fc7d 	bl	8004024 <HAL_PWR_EnterSLEEPMode>
}
 800172a:	bd08      	pop	{r3, pc}

0800172c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	4770      	bx	lr

0800172e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172e:	e7fe      	b.n	800172e <NMI_Handler>

08001730 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <HardFault_Handler>

08001732 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <MemManage_Handler>

08001734 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <BusFault_Handler>

08001736 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <UsageFault_Handler>

08001738 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173c:	4770      	bx	lr

0800173e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	4770      	bx	lr

08001740 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001742:	4802      	ldr	r0, [pc, #8]	; (800174c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001744:	f003 fe06 	bl	8005354 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001748:	bd08      	pop	{r3, pc}
 800174a:	bf00      	nop
 800174c:	2000019c 	.word	0x2000019c

08001750 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001750:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001752:	2001      	movs	r0, #1
 8001754:	f002 fc50 	bl	8003ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001758:	bd08      	pop	{r3, pc}

0800175a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800175a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800175c:	2002      	movs	r0, #2
 800175e:	f002 fc4b 	bl	8003ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001762:	bd08      	pop	{r3, pc}

08001764 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001766:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Channel5_IRQHandler+0xc>)
 8001768:	f002 f912 	bl	8003990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800176c:	bd08      	pop	{r3, pc}
 800176e:	bf00      	nop
 8001770:	200001e8 	.word	0x200001e8

08001774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001776:	2040      	movs	r0, #64	; 0x40
 8001778:	f002 fc3e 	bl	8003ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800177c:	bd08      	pop	{r3, pc}
	...

08001780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <USART2_IRQHandler+0xc>)
 8001784:	f004 faa4 	bl	8005cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop
 800178c:	20000248 	.word	0x20000248

08001790 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001792:	4802      	ldr	r0, [pc, #8]	; (800179c <RTC_Alarm_IRQHandler+0xc>)
 8001794:	f003 fbe8 	bl	8004f68 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001798:	bd08      	pop	{r3, pc}
 800179a:	bf00      	nop
 800179c:	2000019c 	.word	0x2000019c

080017a0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <SUBGHZ_Radio_IRQHandler+0xc>)
 80017a4:	f004 f88a 	bl	80058bc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80017a8:	bd08      	pop	{r3, pc}
 80017aa:	bf00      	nop
 80017ac:	200001d4 	.word	0x200001d4

080017b0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80017b0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_SUBGHZ_Init+0x18>)
 80017b4:	2308      	movs	r3, #8
 80017b6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017b8:	f003 fe02 	bl	80053c0 <HAL_SUBGHZ_Init>
 80017bc:	b900      	cbnz	r0, 80017c0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017c0:	f7ff fec0 	bl	8001544 <Error_Handler>
}
 80017c4:	e7fb      	b.n	80017be <MX_SUBGHZ_Init+0xe>
 80017c6:	bf00      	nop
 80017c8:	200001d4 	.word	0x200001d4

080017cc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80017cc:	b500      	push	{lr}
 80017ce:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80017dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	4611      	mov	r1, r2
 80017ea:	2032      	movs	r0, #50	; 0x32
 80017ec:	f001 fe7a 	bl	80034e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80017f0:	2032      	movs	r0, #50	; 0x32
 80017f2:	f001 feaf 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80017f6:	b003      	add	sp, #12
 80017f8:	f85d fb04 	ldr.w	pc, [sp], #4

080017fc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80017fc:	b40c      	push	{r2, r3}
 80017fe:	b500      	push	{lr}
 8001800:	b083      	sub	sp, #12
 8001802:	ab04      	add	r3, sp, #16
 8001804:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001808:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800180a:	f010 fe8d 	bl	8012528 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800180e:	b003      	add	sp, #12
 8001810:	f85d eb04 	ldr.w	lr, [sp], #4
 8001814:	b002      	add	sp, #8
 8001816:	4770      	bx	lr

08001818 <TimestampNow>:
{
 8001818:	b530      	push	{r4, r5, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	4604      	mov	r4, r0
 800181e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001820:	a802      	add	r0, sp, #8
 8001822:	f010 fbf7 	bl	8012014 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001826:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	9b02      	ldr	r3, [sp, #8]
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <TimestampNow+0x2c>)
 8001830:	2110      	movs	r1, #16
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff ffe2 	bl	80017fc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001838:	4620      	mov	r0, r4
 800183a:	f7fe fc9d 	bl	8000178 <strlen>
 800183e:	8028      	strh	r0, [r5, #0]
}
 8001840:	b005      	add	sp, #20
 8001842:	bd30      	pop	{r4, r5, pc}
 8001844:	0801289c 	.word	0x0801289c

08001848 <SystemApp_Init>:
{
 8001848:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800184a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184e:	6893      	ldr	r3, [r2, #8]
 8001850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001854:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001856:	f010 fc61 	bl	801211c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800185a:	2401      	movs	r4, #1
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <SystemApp_Init+0x4c>)
 800185e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001860:	f000 f8bc 	bl	80019dc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001864:	f010 f8fc 	bl	8011a60 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <SystemApp_Init+0x50>)
 800186a:	f010 f913 	bl	8011a94 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <SystemApp_Init+0x54>)
 8001870:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001874:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001876:	2002      	movs	r0, #2
 8001878:	f010 f912 	bl	8011aa0 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800187c:	f7ff fb9e 	bl	8000fbc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001880:	f000 f90c 	bl	8001a9c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001884:	f010 fa1c 	bl	8011cc0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001888:	4621      	mov	r1, r4
 800188a:	4620      	mov	r0, r4
 800188c:	f010 fa38 	bl	8011d00 <UTIL_LPM_SetOffMode>
}
 8001890:	bd10      	pop	{r4, pc}
 8001892:	bf00      	nop
 8001894:	200001e0 	.word	0x200001e0
 8001898:	08001819 	.word	0x08001819
 800189c:	58004000 	.word	0x58004000

080018a0 <UTIL_SEQ_Idle>:
{
 80018a0:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80018a2:	f010 fa43 	bl	8011d2c <UTIL_LPM_EnterLowPower>
}
 80018a6:	bd08      	pop	{r3, pc}

080018a8 <GetBatteryLevel>:
{
 80018a8:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80018aa:	f7ff fb8f 	bl	8000fcc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80018ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018b2:	4298      	cmp	r0, r3
 80018b4:	d80d      	bhi.n	80018d2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80018b6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80018ba:	d30c      	bcc.n	80018d6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80018bc:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80018c0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80018c4:	0040      	lsls	r0, r0, #1
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <GetBatteryLevel+0x34>)
 80018c8:	fba3 3000 	umull	r3, r0, r3, r0
 80018cc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80018d0:	e000      	b.n	80018d4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80018d2:	20fe      	movs	r0, #254	; 0xfe
}
 80018d4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7fc      	b.n	80018d4 <GetBatteryLevel+0x2c>
 80018da:	bf00      	nop
 80018dc:	1b4e81b5 	.word	0x1b4e81b5

080018e0 <GetTemperatureLevel>:
{
 80018e0:	b500      	push	{lr}
 80018e2:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80018e4:	4668      	mov	r0, sp
 80018e6:	f000 f8bd 	bl	8001a64 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80018ea:	9801      	ldr	r0, [sp, #4]
 80018ec:	f7ff f916 	bl	8000b1c <__aeabi_f2iz>
}
 80018f0:	b200      	sxth	r0, r0
 80018f2:	b007      	add	sp, #28
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <GetUniqueId>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <GetUniqueId+0x68>)
 80018fe:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001906:	d013      	beq.n	8001930 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001908:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800190a:	0a1a      	lsrs	r2, r3, #8
 800190c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 800190e:	0c1a      	lsrs	r2, r3, #16
 8001910:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001912:	0e1b      	lsrs	r3, r3, #24
 8001914:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <GetUniqueId+0x68>)
 8001918:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 800191c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800191e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001922:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001924:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001926:	0c1a      	lsrs	r2, r3, #16
 8001928:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800192a:	0e1b      	lsrs	r3, r3, #24
 800192c:	7003      	strb	r3, [r0, #0]
}
 800192e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001930:	f001 f8c2 	bl	8002ab8 <HAL_GetUIDw0>
 8001934:	4605      	mov	r5, r0
 8001936:	f001 f8cb 	bl	8002ad0 <HAL_GetUIDw2>
 800193a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800193c:	f001 f8c2 	bl	8002ac4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001940:	0e2b      	lsrs	r3, r5, #24
 8001942:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001944:	0c2b      	lsrs	r3, r5, #16
 8001946:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001948:	0a2b      	lsrs	r3, r5, #8
 800194a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800194c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800194e:	0e03      	lsrs	r3, r0, #24
 8001950:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001952:	0c03      	lsrs	r3, r0, #16
 8001954:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001956:	0a03      	lsrs	r3, r0, #8
 8001958:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800195a:	7020      	strb	r0, [r4, #0]
 800195c:	e7e7      	b.n	800192e <GetUniqueId+0x36>
 800195e:	bf00      	nop
 8001960:	1fff7000 	.word	0x1fff7000

08001964 <GetDevAddr>:
{
 8001964:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <GetDevAddr+0x2c>)
 8001968:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 800196c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d000      	beq.n	8001976 <GetDevAddr+0x12>
}
 8001974:	bd38      	pop	{r3, r4, r5, pc}
 8001976:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001978:	f001 f89e 	bl	8002ab8 <HAL_GetUIDw0>
 800197c:	4605      	mov	r5, r0
 800197e:	f001 f8a1 	bl	8002ac4 <HAL_GetUIDw1>
 8001982:	4045      	eors	r5, r0
 8001984:	f001 f8a4 	bl	8002ad0 <HAL_GetUIDw2>
 8001988:	4045      	eors	r5, r0
 800198a:	6025      	str	r5, [r4, #0]
}
 800198c:	e7f2      	b.n	8001974 <GetDevAddr+0x10>
 800198e:	bf00      	nop
 8001990:	1fff7000 	.word	0x1fff7000

08001994 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001994:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f010 f99b 	bl	8011cd4 <UTIL_LPM_SetStopMode>
}
 800199e:	bd08      	pop	{r3, pc}

080019a0 <UTIL_ADV_TRACE_PostSendHook>:
{
 80019a0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2002      	movs	r0, #2
 80019a6:	f010 f995 	bl	8011cd4 <UTIL_LPM_SetStopMode>
}
 80019aa:	bd08      	pop	{r3, pc}

080019ac <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80019ac:	2000      	movs	r0, #0
 80019ae:	4770      	bx	lr

080019b0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019b0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_GetTick+0x14>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b90b      	cbnz	r3, 80019bc <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80019b8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80019ba:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80019bc:	f000 f89a 	bl	8001af4 <TIMER_IF_GetTimerValue>
 80019c0:	e7fb      	b.n	80019ba <HAL_GetTick+0xa>
 80019c2:	bf00      	nop
 80019c4:	200001e0 	.word	0x200001e0

080019c8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019c8:	b500      	push	{lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019ce:	9801      	ldr	r0, [sp, #4]
 80019d0:	f000 f976 	bl	8001cc0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019d4:	b003      	add	sp, #12
 80019d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019dc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80019e0:	f001 f87c 	bl	8002adc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80019e4:	f001 f882 	bl	8002aec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80019e8:	f001 f888 	bl	8002afc <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80019ec:	2400      	movs	r4, #0
 80019ee:	9403      	str	r4, [sp, #12]
 80019f0:	9404      	str	r4, [sp, #16]
 80019f2:	9405      	str	r4, [sp, #20]
 80019f4:	9406      	str	r4, [sp, #24]
 80019f6:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a06:	f042 0202 	orr.w	r2, r2, #2
 8001a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0e:	f002 0202 	and.w	r2, r2, #2
 8001a12:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a14:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a18:	f042 0202 	orr.w	r2, r2, #2
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a26:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a28:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001a2c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a2e:	4d0c      	ldr	r5, [pc, #48]	; (8001a60 <DBG_Init+0x84>)
 8001a30:	a903      	add	r1, sp, #12
 8001a32:	4628      	mov	r0, r5
 8001a34:	f002 f982 	bl	8003d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a38:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001a3c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a3e:	a903      	add	r1, sp, #12
 8001a40:	4628      	mov	r0, r5
 8001a42:	f002 f97b 	bl	8003d3c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a46:	4622      	mov	r2, r4
 8001a48:	4639      	mov	r1, r7
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f002 fac6 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a50:	4622      	mov	r2, r4
 8001a52:	4631      	mov	r1, r6
 8001a54:	4628      	mov	r0, r5
 8001a56:	f002 fac1 	bl	8003fdc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001a5a:	b009      	add	sp, #36	; 0x24
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400

08001a64 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001a68:	f7ff fad2 	bl	8001010 <SYS_GetTemperatureLevel>
 8001a6c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001a70:	f7fe feb0 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <EnvSensors_Read+0x28>)
 8001a76:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001a78:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <EnvSensors_Read+0x2c>)
 8001a7c:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <EnvSensors_Read+0x30>)
 8001a80:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <EnvSensors_Read+0x34>)
 8001a84:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001a86:	2000      	movs	r0, #0
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop
 8001a8c:	42480000 	.word	0x42480000
 8001a90:	447a0000 	.word	0x447a0000
 8001a94:	003e090d 	.word	0x003e090d
 8001a98:	000503ab 	.word	0x000503ab

08001a9c <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	4770      	bx	lr

08001aa0 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <TIMER_IF_SetTimerContext+0x1c>)
 8001aa2:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001aa4:	e001      	b.n	8001aaa <TIMER_IF_SetTimerContext+0xa>
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <TIMER_IF_SetTimerContext+0x1c>)
 8001aa8:	6898      	ldr	r0, [r3, #8]
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <TIMER_IF_SetTimerContext+0x1c>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	d1f9      	bne.n	8001aa6 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001ab2:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <TIMER_IF_SetTimerContext+0x20>)
 8001ab6:	6018      	str	r0, [r3, #0]
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40002800 	.word	0x40002800
 8001ac0:	200001e4 	.word	0x200001e4

08001ac4 <TIMER_IF_GetTimerContext>:
}
 8001ac4:	4b01      	ldr	r3, [pc, #4]	; (8001acc <TIMER_IF_GetTimerContext+0x8>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200001e4 	.word	0x200001e4

08001ad0 <TIMER_IF_GetTimerElapsedTime>:
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ad2:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ad4:	e001      	b.n	8001ada <TIMER_IF_GetTimerElapsedTime+0xa>
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ad8:	6898      	ldr	r0, [r3, #8]
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4283      	cmp	r3, r0
 8001ae0:	d1f9      	bne.n	8001ad6 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001ae2:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	1ac0      	subs	r0, r0, r3
 8001aea:	4770      	bx	lr
 8001aec:	40002800 	.word	0x40002800
 8001af0:	200001e4 	.word	0x200001e4

08001af4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <TIMER_IF_GetTimerValue+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b153      	cbz	r3, 8001b10 <TIMER_IF_GetTimerValue+0x1c>
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <TIMER_IF_GetTimerValue+0x24>)
 8001afc:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001afe:	e001      	b.n	8001b04 <TIMER_IF_GetTimerValue+0x10>
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <TIMER_IF_GetTimerValue+0x24>)
 8001b02:	6898      	ldr	r0, [r3, #8]
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <TIMER_IF_GetTimerValue+0x24>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4283      	cmp	r3, r0
 8001b0a:	d1f9      	bne.n	8001b00 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001b0c:	43c0      	mvns	r0, r0
 8001b0e:	4770      	bx	lr
  uint32_t ret = 0;
 8001b10:	2000      	movs	r0, #0
}
 8001b12:	4770      	bx	lr
 8001b14:	200001e1 	.word	0x200001e1
 8001b18:	40002800 	.word	0x40002800

08001b1c <TIMER_IF_GetMinimumTimeout>:
}
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	4770      	bx	lr

08001b20 <TIMER_IF_Convert_ms2Tick>:
{
 8001b20:	b508      	push	{r3, lr}
 8001b22:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b28:	2300      	movs	r3, #0
 8001b2a:	0280      	lsls	r0, r0, #10
 8001b2c:	0d89      	lsrs	r1, r1, #22
 8001b2e:	f7ff f83b 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001b32:	bd08      	pop	{r3, pc}

08001b34 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b34:	0ec2      	lsrs	r2, r0, #27
 8001b36:	0143      	lsls	r3, r0, #5
 8001b38:	1a1b      	subs	r3, r3, r0
 8001b3a:	f162 0200 	sbc.w	r2, r2, #0
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	181b      	adds	r3, r3, r0
 8001b48:	f142 0000 	adc.w	r0, r2, #0
 8001b4c:	00c0      	lsls	r0, r0, #3
 8001b4e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b52:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001b56:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001b5a:	4770      	bx	lr

08001b5c <TIMER_IF_StopTimer>:
{
 8001b5c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <TIMER_IF_StopTimer+0x20>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b64:	4c06      	ldr	r4, [pc, #24]	; (8001b80 <TIMER_IF_StopTimer+0x24>)
 8001b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f003 f9bc 	bl	8004ee8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001b76:	2000      	movs	r0, #0
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40002800 	.word	0x40002800
 8001b80:	2000019c 	.word	0x2000019c

08001b84 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001b84:	b508      	push	{r3, lr}
 8001b86:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001b8c:	f003 fbf7 	bl	800537e <HAL_RTCEx_BKUPWrite>
}
 8001b90:	bd08      	pop	{r3, pc}
 8001b92:	bf00      	nop
 8001b94:	2000019c 	.word	0x2000019c

08001b98 <TIMER_IF_Init>:
{
 8001b98:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <TIMER_IF_Init+0x40>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b10b      	cbz	r3, 8001ba4 <TIMER_IF_Init+0xc>
}
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ba4:	4c0d      	ldr	r4, [pc, #52]	; (8001bdc <TIMER_IF_Init+0x44>)
 8001ba6:	f04f 35ff 	mov.w	r5, #4294967295
 8001baa:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001bac:	f7ff fd20 	bl	80015f0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001bb0:	f7ff ffd4 	bl	8001b5c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f003 f995 	bl	8004ee8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bbe:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f003 fb7b 	bl	80052bc <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff ffdc 	bl	8001b84 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001bcc:	f7ff ff68 	bl	8001aa0 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001bd0:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <TIMER_IF_Init+0x40>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	e7e3      	b.n	8001ba0 <TIMER_IF_Init+0x8>
 8001bd8:	200001e1 	.word	0x200001e1
 8001bdc:	2000019c 	.word	0x2000019c

08001be0 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001be0:	b508      	push	{r3, lr}
 8001be2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001be4:	2100      	movs	r1, #0
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001be8:	f003 fbc9 	bl	800537e <HAL_RTCEx_BKUPWrite>
}
 8001bec:	bd08      	pop	{r3, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000019c 	.word	0x2000019c

08001bf4 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001bf4:	b508      	push	{r3, lr}
 8001bf6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001bfc:	f003 fbbf 	bl	800537e <HAL_RTCEx_BKUPWrite>
}
 8001c00:	bd08      	pop	{r3, pc}
 8001c02:	bf00      	nop
 8001c04:	2000019c 	.word	0x2000019c

08001c08 <TIMER_IF_StartTimer>:
{
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001c0e:	222c      	movs	r2, #44	; 0x2c
 8001c10:	2100      	movs	r1, #0
 8001c12:	a801      	add	r0, sp, #4
 8001c14:	f010 fd70 	bl	80126f8 <memset>
  TIMER_IF_StopTimer();
 8001c18:	f7ff ffa0 	bl	8001b5c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <TIMER_IF_StartTimer+0x48>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c22:	2300      	movs	r3, #0
 8001c24:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c26:	43e4      	mvns	r4, r4
 8001c28:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c2a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c30:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c36:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	a901      	add	r1, sp, #4
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <TIMER_IF_StartTimer+0x4c>)
 8001c3e:	f003 fa81 	bl	8005144 <HAL_RTC_SetAlarm_IT>
 8001c42:	b910      	cbnz	r0, 8001c4a <TIMER_IF_StartTimer+0x42>
}
 8001c44:	2000      	movs	r0, #0
 8001c46:	b00c      	add	sp, #48	; 0x30
 8001c48:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c4a:	f7ff fc7b 	bl	8001544 <Error_Handler>
 8001c4e:	e7f9      	b.n	8001c44 <TIMER_IF_StartTimer+0x3c>
 8001c50:	200001e4 	.word	0x200001e4
 8001c54:	2000019c 	.word	0x2000019c

08001c58 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001c58:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001c5e:	f003 fb95 	bl	800538c <HAL_RTCEx_BKUPRead>
}
 8001c62:	bd08      	pop	{r3, pc}
 8001c64:	2000019c 	.word	0x2000019c

08001c68 <TIMER_IF_GetTime>:
{
 8001c68:	b538      	push	{r3, r4, r5, lr}
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <TIMER_IF_GetTime+0x34>)
 8001c6e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c70:	e001      	b.n	8001c76 <TIMER_IF_GetTime+0xe>
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <TIMER_IF_GetTime+0x34>)
 8001c74:	689c      	ldr	r4, [r3, #8]
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <TIMER_IF_GetTime+0x34>)
 8001c78:	6892      	ldr	r2, [r2, #8]
 8001c7a:	42a2      	cmp	r2, r4
 8001c7c:	d1f9      	bne.n	8001c72 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001c7e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c80:	f7ff ffea 	bl	8001c58 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c84:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c86:	0aa4      	lsrs	r4, r4, #10
 8001c88:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c8c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001c90:	f7ff ff50 	bl	8001b34 <TIMER_IF_Convert_Tick2ms>
 8001c94:	8028      	strh	r0, [r5, #0]
}
 8001c96:	4620      	mov	r0, r4
 8001c98:	bd38      	pop	{r3, r4, r5, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40002800 	.word	0x40002800

08001ca0 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001ca0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4801      	ldr	r0, [pc, #4]	; (8001cac <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001ca6:	f003 fb71 	bl	800538c <HAL_RTCEx_BKUPRead>
}
 8001caa:	bd08      	pop	{r3, pc}
 8001cac:	2000019c 	.word	0x2000019c

08001cb0 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001cb0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4801      	ldr	r0, [pc, #4]	; (8001cbc <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001cb6:	f003 fb69 	bl	800538c <HAL_RTCEx_BKUPRead>
}
 8001cba:	bd08      	pop	{r3, pc}
 8001cbc:	2000019c 	.word	0x2000019c

08001cc0 <TIMER_IF_DelayMs>:
{
 8001cc0:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001cc2:	f7ff ff2d 	bl	8001b20 <TIMER_IF_Convert_ms2Tick>
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001cc8:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cca:	e001      	b.n	8001cd0 <TIMER_IF_DelayMs+0x10>
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001cd2:	6892      	ldr	r2, [r2, #8]
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d1f9      	bne.n	8001ccc <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001cd8:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cda:	e00a      	b.n	8001cf2 <TIMER_IF_DelayMs+0x32>
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001ce2:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1f9      	bne.n	8001cdc <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001ce8:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	4283      	cmp	r3, r0
 8001cee:	d203      	bcs.n	8001cf8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001cf0:	bf00      	nop
 8001cf2:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <TIMER_IF_DelayMs+0x3c>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cf6:	e7f3      	b.n	8001ce0 <TIMER_IF_DelayMs+0x20>
}
 8001cf8:	bd08      	pop	{r3, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40002800 	.word	0x40002800

08001d00 <HAL_RTC_AlarmAEventCallback>:
{
 8001d00:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001d02:	f010 fb2f 	bl	8012364 <UTIL_TIMER_IRQ_Handler>
}
 8001d06:	bd08      	pop	{r3, pc}

08001d08 <HAL_RTCEx_SSRUEventCallback>:
{
 8001d08:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001d0a:	f7ff ffa5 	bl	8001c58 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001d0e:	3001      	adds	r0, #1
 8001d10:	f7ff ff38 	bl	8001b84 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001d14:	bd08      	pop	{r3, pc}
	...

08001d18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d18:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d1a:	4817      	ldr	r0, [pc, #92]	; (8001d78 <MX_USART2_UART_Init+0x60>)
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_USART2_UART_Init+0x64>)
 8001d1e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001d20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d24:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	2300      	movs	r3, #0
 8001d28:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d2e:	220c      	movs	r2, #12
 8001d30:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d32:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d38:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3c:	f004 fe84 	bl	8006a48 <HAL_UART_Init>
 8001d40:	b970      	cbnz	r0, 8001d60 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d42:	2100      	movs	r1, #0
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <MX_USART2_UART_Init+0x60>)
 8001d46:	f005 f834 	bl	8006db2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d4a:	b960      	cbnz	r0, 8001d66 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <MX_USART2_UART_Init+0x60>)
 8001d50:	f005 f854 	bl	8006dfc <HAL_UARTEx_SetRxFifoThreshold>
 8001d54:	b950      	cbnz	r0, 8001d6c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <MX_USART2_UART_Init+0x60>)
 8001d58:	f005 f807 	bl	8006d6a <HAL_UARTEx_EnableFifoMode>
 8001d5c:	b948      	cbnz	r0, 8001d72 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d5e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d60:	f7ff fbf0 	bl	8001544 <Error_Handler>
 8001d64:	e7ed      	b.n	8001d42 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001d66:	f7ff fbed 	bl	8001544 <Error_Handler>
 8001d6a:	e7ef      	b.n	8001d4c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001d6c:	f7ff fbea 	bl	8001544 <Error_Handler>
 8001d70:	e7f1      	b.n	8001d56 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001d72:	f7ff fbe7 	bl	8001544 <Error_Handler>
}
 8001d76:	e7f2      	b.n	8001d5e <MX_USART2_UART_Init+0x46>
 8001d78:	20000248 	.word	0x20000248
 8001d7c:	40004400 	.word	0x40004400

08001d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d80:	b530      	push	{r4, r5, lr}
 8001d82:	b097      	sub	sp, #92	; 0x5c
 8001d84:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	2100      	movs	r1, #0
 8001d88:	9111      	str	r1, [sp, #68]	; 0x44
 8001d8a:	9112      	str	r1, [sp, #72]	; 0x48
 8001d8c:	9113      	str	r1, [sp, #76]	; 0x4c
 8001d8e:	9114      	str	r1, [sp, #80]	; 0x50
 8001d90:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d92:	2238      	movs	r2, #56	; 0x38
 8001d94:	a803      	add	r0, sp, #12
 8001d96:	f010 fcaf 	bl	80126f8 <memset>
  if(uartHandle->Instance==USART2)
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_UART_MspInit+0xd4>)
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001da2:	b017      	add	sp, #92	; 0x5c
 8001da4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_UART_MspInit+0xd8>)
 8001dac:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dae:	a803      	add	r0, sp, #12
 8001db0:	f002 ff50 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d144      	bne.n	8001e42 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dc2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dc6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dca:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001dcc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001dde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001de0:	230c      	movs	r3, #12
 8001de2:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2500      	movs	r5, #0
 8001dea:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df0:	2307      	movs	r3, #7
 8001df2:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	a911      	add	r1, sp, #68	; 0x44
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f001 ff9f 	bl	8003d3c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0xdc>)
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UART_MspInit+0xe0>)
 8001e02:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e04:	2314      	movs	r3, #20
 8001e06:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e14:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e16:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e18:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e1a:	f001 fc2b 	bl	8003674 <HAL_DMA_Init>
 8001e1e:	b998      	cbnz	r0, 8001e48 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e20:	2110      	movs	r1, #16
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <HAL_UART_MspInit+0xdc>)
 8001e24:	f001 fe28 	bl	8003a78 <HAL_DMA_ConfigChannelAttributes>
 8001e28:	b988      	cbnz	r0, 8001e4e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_UART_MspInit+0xdc>)
 8001e2c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e2e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2102      	movs	r1, #2
 8001e34:	2025      	movs	r0, #37	; 0x25
 8001e36:	f001 fb55 	bl	80034e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e3a:	2025      	movs	r0, #37	; 0x25
 8001e3c:	f001 fb8a 	bl	8003554 <HAL_NVIC_EnableIRQ>
}
 8001e40:	e7af      	b.n	8001da2 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001e42:	f7ff fb7f 	bl	8001544 <Error_Handler>
 8001e46:	e7b7      	b.n	8001db8 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001e48:	f7ff fb7c 	bl	8001544 <Error_Handler>
 8001e4c:	e7e8      	b.n	8001e20 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001e4e:	f7ff fb79 	bl	8001544 <Error_Handler>
 8001e52:	e7ea      	b.n	8001e2a <HAL_UART_MspInit+0xaa>
 8001e54:	40004400 	.word	0x40004400
 8001e58:	000c0004 	.word	0x000c0004
 8001e5c:	200001e8 	.word	0x200001e8
 8001e60:	40020058 	.word	0x40020058

08001e64 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001e64:	6802      	ldr	r2, [r0, #0]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_UART_MspDeInit+0x34>)
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d000      	beq.n	8001e6e <HAL_UART_MspDeInit+0xa>
 8001e6c:	4770      	bx	lr
{
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001e7e:	210c      	movs	r1, #12
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f002 f82c 	bl	8003ee0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e88:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001e8a:	f001 fc65 	bl	8003758 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001e8e:	2025      	movs	r0, #37	; 0x25
 8001e90:	f001 fb6e 	bl	8003570 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	40004400 	.word	0x40004400

08001e9c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <vcom_Init+0x20>)
 8001ea0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001ea2:	f7ff f90b 	bl	80010bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ea6:	f7ff ff37 	bl	8001d18 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <vcom_Init+0x24>)
 8001eac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001eb8:	2000      	movs	r0, #0
 8001eba:	bd08      	pop	{r3, pc}
 8001ebc:	200002e0 	.word	0x200002e0
 8001ec0:	58000800 	.word	0x58000800

08001ec4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001ec4:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ecc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <vcom_DeInit+0x28>)
 8001edc:	f7ff ffc2 	bl	8001e64 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f001 fb45 	bl	8003570 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	bd08      	pop	{r3, pc}
 8001eea:	bf00      	nop
 8001eec:	20000248 	.word	0x20000248

08001ef0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001ef0:	b508      	push	{r3, lr}
 8001ef2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4802      	ldr	r0, [pc, #8]	; (8001f00 <vcom_Trace_DMA+0x10>)
 8001ef8:	f003 fe26 	bl	8005b48 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001efc:	2000      	movs	r0, #0
 8001efe:	bd08      	pop	{r3, pc}
 8001f00:	20000248 	.word	0x20000248

08001f04 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001f04:	b510      	push	{r4, lr}
 8001f06:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <vcom_ReceiveInit+0x50>)
 8001f0a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f10:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001f12:	ab02      	add	r3, sp, #8
 8001f14:	e913 0006 	ldmdb	r3, {r1, r2}
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <vcom_ReceiveInit+0x54>)
 8001f1a:	f004 fece 	bl	8006cba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <vcom_ReceiveInit+0x54>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001f28:	d1f9      	bne.n	8001f1e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001f30:	d0fb      	beq.n	8001f2a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f38:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001f3a:	4c07      	ldr	r4, [pc, #28]	; (8001f58 <vcom_ReceiveInit+0x54>)
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f004 fefd 	bl	8006d3c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f42:	2201      	movs	r2, #1
 8001f44:	4905      	ldr	r1, [pc, #20]	; (8001f5c <vcom_ReceiveInit+0x58>)
 8001f46:	4620      	mov	r0, r4
 8001f48:	f004 fe50 	bl	8006bec <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	bf00      	nop
 8001f54:	200002dc 	.word	0x200002dc
 8001f58:	20000248 	.word	0x20000248
 8001f5c:	200002e4 	.word	0x200002e4

08001f60 <vcom_Resume>:

void vcom_Resume(void)
{
 8001f60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <vcom_Resume+0x20>)
 8001f64:	f004 fd70 	bl	8006a48 <HAL_UART_Init>
 8001f68:	b920      	cbnz	r0, 8001f74 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <vcom_Resume+0x24>)
 8001f6c:	f001 fb82 	bl	8003674 <HAL_DMA_Init>
 8001f70:	b918      	cbnz	r0, 8001f7a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001f72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f74:	f7ff fae6 	bl	8001544 <Error_Handler>
 8001f78:	e7f7      	b.n	8001f6a <vcom_Resume+0xa>
    Error_Handler();
 8001f7a:	f7ff fae3 	bl	8001544 <Error_Handler>
}
 8001f7e:	e7f8      	b.n	8001f72 <vcom_Resume+0x12>
 8001f80:	20000248 	.word	0x20000248
 8001f84:	200001e8 	.word	0x200001e8

08001f88 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_UART_TxCpltCallback+0x18>)
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d000      	beq.n	8001f94 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001f92:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_UART_TxCpltCallback+0x1c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2000      	movs	r0, #0
 8001f9a:	4798      	blx	r3
}
 8001f9c:	e7f9      	b.n	8001f92 <HAL_UART_TxCpltCallback+0xa>
 8001f9e:	bf00      	nop
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	200002e0 	.word	0x200002e0

08001fa8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_UART_RxCpltCallback+0x2c>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d000      	beq.n	8001fb2 <HAL_UART_RxCpltCallback+0xa>
 8001fb0:	4770      	bx	lr
{
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_UART_RxCpltCallback+0x30>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b12b      	cbz	r3, 8001fc8 <HAL_UART_RxCpltCallback+0x20>
 8001fbc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001fc0:	b912      	cbnz	r2, 8001fc8 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_UART_RxCpltCallback+0x34>)
 8001fc6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4904      	ldr	r1, [pc, #16]	; (8001fdc <HAL_UART_RxCpltCallback+0x34>)
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f004 fe0d 	bl	8006bec <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	200002dc 	.word	0x200002dc
 8001fdc:	200002e4 	.word	0x200002e4

08001fe0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001fe2:	f7ff fc31 	bl	8001848 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001fe6:	f000 fb8d 	bl	8002704 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001fea:	bd08      	pop	{r3, pc}

08001fec <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	f00f ff07 	bl	8011e04 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001ff6:	bd08      	pop	{r3, pc}

08001ff8 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8001ff8:	4770      	bx	lr
	...

08001ffc <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001ffc:	4b01      	ldr	r3, [pc, #4]	; (8002004 <OnTxFrameCtrlChanged+0x8>)
 8001ffe:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000058 	.word	0x20000058

08002008 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <OnPingSlotPeriodicityChanged+0x8>)
 800200a:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000058 	.word	0x20000058

08002014 <OnBeaconStatusChange>:
  if (params != NULL)
 8002014:	2800      	cmp	r0, #0
 8002016:	d03f      	beq.n	8002098 <OnBeaconStatusChange+0x84>
{
 8002018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800201c:	b08c      	sub	sp, #48	; 0x30
 800201e:	4603      	mov	r3, r0
    switch (params->State)
 8002020:	7842      	ldrb	r2, [r0, #1]
 8002022:	2a02      	cmp	r2, #2
 8002024:	d00a      	beq.n	800203c <OnBeaconStatusChange+0x28>
 8002026:	2a03      	cmp	r2, #3
 8002028:	d02f      	beq.n	800208a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <OnBeaconStatusChange+0x88>)
 800202c:	2200      	movs	r2, #0
 800202e:	4611      	mov	r1, r2
 8002030:	2002      	movs	r0, #2
 8002032:	f00f fd89 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8002036:	b00c      	add	sp, #48	; 0x30
 8002038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 800203c:	7c02      	ldrb	r2, [r0, #16]
 800203e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002042:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002046:	7d5c      	ldrb	r4, [r3, #21]
 8002048:	7d9d      	ldrb	r5, [r3, #22]
 800204a:	7dde      	ldrb	r6, [r3, #23]
 800204c:	7e1f      	ldrb	r7, [r3, #24]
 800204e:	f893 c019 	ldrb.w	ip, [r3, #25]
 8002052:	f893 e01a 	ldrb.w	lr, [r3, #26]
 8002056:	f893 801b 	ldrb.w	r8, [r3, #27]
 800205a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800205e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002062:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002066:	9708      	str	r7, [sp, #32]
 8002068:	9607      	str	r6, [sp, #28]
 800206a:	9506      	str	r5, [sp, #24]
 800206c:	9405      	str	r4, [sp, #20]
 800206e:	685c      	ldr	r4, [r3, #4]
 8002070:	9404      	str	r4, [sp, #16]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	9002      	str	r0, [sp, #8]
 8002078:	9101      	str	r1, [sp, #4]
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <OnBeaconStatusChange+0x8c>)
 800207e:	2200      	movs	r2, #0
 8002080:	4611      	mov	r1, r2
 8002082:	2002      	movs	r0, #2
 8002084:	f00f fd60 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002088:	e7d5      	b.n	8002036 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <OnBeaconStatusChange+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	4611      	mov	r1, r2
 8002090:	2002      	movs	r0, #2
 8002092:	f00f fd59 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8002096:	e7ce      	b.n	8002036 <OnBeaconStatusChange+0x22>
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	080128f8 	.word	0x080128f8
 80020a0:	08012910 	.word	0x08012910
 80020a4:	08012984 	.word	0x08012984

080020a8 <OnClassChange>:
{
 80020a8:	b500      	push	{lr}
 80020aa:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <OnClassChange+0x1c>)
 80020ae:	5c1b      	ldrb	r3, [r3, r0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <OnClassChange+0x20>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	4611      	mov	r1, r2
 80020b8:	2002      	movs	r0, #2
 80020ba:	f00f fd45 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 80020be:	b003      	add	sp, #12
 80020c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020c4:	080129c0 	.word	0x080129c0
 80020c8:	080129a4 	.word	0x080129a4

080020cc <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80020cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80020ce:	2801      	cmp	r0, #1
 80020d0:	d006      	beq.n	80020e0 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <OnNvmDataChange+0x24>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	4611      	mov	r1, r2
 80020d8:	2002      	movs	r0, #2
 80020da:	f00f fd35 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80020de:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <OnNvmDataChange+0x28>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	4611      	mov	r1, r2
 80020e6:	2002      	movs	r0, #2
 80020e8:	f00f fd2e 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 80020ec:	e7f7      	b.n	80020de <OnNvmDataChange+0x12>
 80020ee:	bf00      	nop
 80020f0:	080129d8 	.word	0x080129d8
 80020f4:	080129c4 	.word	0x080129c4

080020f8 <OnTxTimerEvent>:
{
 80020f8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80020fa:	2100      	movs	r1, #0
 80020fc:	2002      	movs	r0, #2
 80020fe:	f00f fe4d 	bl	8011d9c <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002102:	4802      	ldr	r0, [pc, #8]	; (800210c <OnTxTimerEvent+0x14>)
 8002104:	f010 f8ce 	bl	80122a4 <UTIL_TIMER_Start>
}
 8002108:	bd08      	pop	{r3, pc}
 800210a:	bf00      	nop
 800210c:	2000043c 	.word	0x2000043c

08002110 <OnMacProcessNotify>:
{
 8002110:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002112:	2100      	movs	r1, #0
 8002114:	2001      	movs	r0, #1
 8002116:	f00f fe41 	bl	8011d9c <UTIL_SEQ_SetTask>
}
 800211a:	bd08      	pop	{r3, pc}

0800211c <OnSystemReset>:
{
 800211c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800211e:	f005 fb31 	bl	8007784 <LmHandlerHalt>
 8002122:	b100      	cbz	r0, 8002126 <OnSystemReset+0xa>
}
 8002124:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002126:	f004 ff8b 	bl	8007040 <LmHandlerJoinStatus>
 800212a:	2801      	cmp	r0, #1
 800212c:	d1fa      	bne.n	8002124 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800212e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002132:	4905      	ldr	r1, [pc, #20]	; (8002148 <OnSystemReset+0x2c>)
 8002134:	68ca      	ldr	r2, [r1, #12]
 8002136:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <OnSystemReset+0x30>)
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002144:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002146:	e7fd      	b.n	8002144 <OnSystemReset+0x28>
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0004 	.word	0x05fa0004

08002150 <OnTxPeriodicityChanged>:
{
 8002150:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <OnTxPeriodicityChanged+0x28>)
 8002154:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002156:	b910      	cbnz	r0, 800215e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002158:	f242 7210 	movw	r2, #10000	; 0x2710
 800215c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800215e:	4c07      	ldr	r4, [pc, #28]	; (800217c <OnTxPeriodicityChanged+0x2c>)
 8002160:	4620      	mov	r0, r4
 8002162:	f010 f845 	bl	80121f0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <OnTxPeriodicityChanged+0x28>)
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	4620      	mov	r0, r4
 800216c:	f010 f8e0 	bl	8012330 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002170:	4620      	mov	r0, r4
 8002172:	f010 f897 	bl	80122a4 <UTIL_TIMER_Start>
}
 8002176:	bd10      	pop	{r4, pc}
 8002178:	20000070 	.word	0x20000070
 800217c:	2000043c 	.word	0x2000043c

08002180 <OnTxData>:
  if ((params != NULL))
 8002180:	2800      	cmp	r0, #0
 8002182:	d042      	beq.n	800220a <OnTxData+0x8a>
{
 8002184:	b510      	push	{r4, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800218a:	7803      	ldrb	r3, [r0, #0]
 800218c:	b90b      	cbnz	r3, 8002192 <OnTxData+0x12>
}
 800218e:	b004      	add	sp, #16
 8002190:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002198:	481c      	ldr	r0, [pc, #112]	; (800220c <OnTxData+0x8c>)
 800219a:	f001 ff1f 	bl	8003fdc <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800219e:	481c      	ldr	r0, [pc, #112]	; (8002210 <OnTxData+0x90>)
 80021a0:	f010 f880 	bl	80122a4 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <OnTxData+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	4611      	mov	r1, r2
 80021aa:	2002      	movs	r0, #2
 80021ac:	f00f fccc 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80021b0:	7c23      	ldrb	r3, [r4, #16]
 80021b2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80021b6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80021ba:	9103      	str	r1, [sp, #12]
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	68e3      	ldr	r3, [r4, #12]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <OnTxData+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	4611      	mov	r1, r2
 80021ca:	2003      	movs	r0, #3
 80021cc:	f00f fcbc 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <OnTxData+0x9c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	4611      	mov	r1, r2
 80021d6:	2003      	movs	r0, #3
 80021d8:	f00f fcb6 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80021dc:	7a23      	ldrb	r3, [r4, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10c      	bne.n	80021fc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80021e2:	7a63      	ldrb	r3, [r4, #9]
 80021e4:	b143      	cbz	r3, 80021f8 <OnTxData+0x78>
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <OnTxData+0xa0>)
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <OnTxData+0xa4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	4611      	mov	r1, r2
 80021f0:	2003      	movs	r0, #3
 80021f2:	f00f fca9 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 80021f6:	e7ca      	b.n	800218e <OnTxData+0xe>
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <OnTxData+0xa8>)
 80021fa:	e7f5      	b.n	80021e8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <OnTxData+0xac>)
 80021fe:	2200      	movs	r2, #0
 8002200:	4611      	mov	r1, r2
 8002202:	2003      	movs	r0, #3
 8002204:	f00f fca0 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8002208:	e7c1      	b.n	800218e <OnTxData+0xe>
 800220a:	4770      	bx	lr
 800220c:	48000400 	.word	0x48000400
 8002210:	20000424 	.word	0x20000424
 8002214:	080129f8 	.word	0x080129f8
 8002218:	08012a2c 	.word	0x08012a2c
 800221c:	08012a60 	.word	0x08012a60
 8002220:	080129f4 	.word	0x080129f4
 8002224:	08012a70 	.word	0x08012a70
 8002228:	080129ec 	.word	0x080129ec
 800222c:	08012a84 	.word	0x08012a84

08002230 <OnJoinRequest>:
  if (joinParams != NULL)
 8002230:	2800      	cmp	r0, #0
 8002232:	d039      	beq.n	80022a8 <OnJoinRequest+0x78>
{
 8002234:	b510      	push	{r4, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800223a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800223e:	b9fb      	cbnz	r3, 8002280 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002240:	481a      	ldr	r0, [pc, #104]	; (80022ac <OnJoinRequest+0x7c>)
 8002242:	f00f ffd5 	bl	80121f0 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4818      	ldr	r0, [pc, #96]	; (80022b0 <OnJoinRequest+0x80>)
 800224e:	f001 fec5 	bl	8003fdc <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <OnJoinRequest+0x84>)
 8002254:	2200      	movs	r2, #0
 8002256:	4611      	mov	r1, r2
 8002258:	2002      	movs	r0, #2
 800225a:	f00f fc75 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800225e:	79e3      	ldrb	r3, [r4, #7]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d006      	beq.n	8002272 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <OnJoinRequest+0x88>)
 8002266:	2200      	movs	r2, #0
 8002268:	4611      	mov	r1, r2
 800226a:	2002      	movs	r0, #2
 800226c:	f00f fc6c 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 8002270:	e00c      	b.n	800228c <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <OnJoinRequest+0x8c>)
 8002274:	2200      	movs	r2, #0
 8002276:	4611      	mov	r1, r2
 8002278:	2002      	movs	r0, #2
 800227a:	f00f fc65 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 800227e:	e005      	b.n	800228c <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED 1\r\n");
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <OnJoinRequest+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	4611      	mov	r1, r2
 8002286:	2002      	movs	r0, #2
 8002288:	f00f fc5e 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800228c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002290:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <OnJoinRequest+0x94>)
 800229a:	2200      	movs	r2, #0
 800229c:	4611      	mov	r1, r2
 800229e:	2003      	movs	r0, #3
 80022a0:	f00f fc52 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 80022a4:	b002      	add	sp, #8
 80022a6:	bd10      	pop	{r4, pc}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200003dc 	.word	0x200003dc
 80022b0:	48000400 	.word	0x48000400
 80022b4:	08012a94 	.word	0x08012a94
 80022b8:	08012acc 	.word	0x08012acc
 80022bc:	08012aac 	.word	0x08012aac
 80022c0:	08012aec 	.word	0x08012aec
 80022c4:	08012b08 	.word	0x08012b08

080022c8 <OnStopJoinTimerEvent>:
{
 80022c8:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <OnStopJoinTimerEvent+0x3c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d013      	beq.n	80022fa <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80022d2:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <OnStopJoinTimerEvent+0x40>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022da:	4620      	mov	r0, r4
 80022dc:	f001 fe7e 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e6:	4620      	mov	r0, r4
 80022e8:	f001 fe78 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f2:	4620      	mov	r0, r4
 80022f4:	f001 fe72 	bl	8003fdc <HAL_GPIO_WritePin>
}
 80022f8:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80022fa:	2100      	movs	r1, #0
 80022fc:	2008      	movs	r0, #8
 80022fe:	f00f fd4d 	bl	8011d9c <UTIL_SEQ_SetTask>
 8002302:	e7e6      	b.n	80022d2 <OnStopJoinTimerEvent+0xa>
 8002304:	20000000 	.word	0x20000000
 8002308:	48000400 	.word	0x48000400

0800230c <OnRxTimerLedEvent>:
{
 800230c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002314:	4801      	ldr	r0, [pc, #4]	; (800231c <OnRxTimerLedEvent+0x10>)
 8002316:	f001 fe61 	bl	8003fdc <HAL_GPIO_WritePin>
}
 800231a:	bd08      	pop	{r3, pc}
 800231c:	48000400 	.word	0x48000400

08002320 <OnTxTimerLedEvent>:
{
 8002320:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002328:	4801      	ldr	r0, [pc, #4]	; (8002330 <OnTxTimerLedEvent+0x10>)
 800232a:	f001 fe57 	bl	8003fdc <HAL_GPIO_WritePin>
}
 800232e:	bd08      	pop	{r3, pc}
 8002330:	48000400 	.word	0x48000400

08002334 <OnRxData>:
  if (params != NULL)
 8002334:	2900      	cmp	r1, #0
 8002336:	d06e      	beq.n	8002416 <OnRxData+0xe2>
{
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002346:	4834      	ldr	r0, [pc, #208]	; (8002418 <OnRxData+0xe4>)
 8002348:	f001 fe48 	bl	8003fdc <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800234c:	4833      	ldr	r0, [pc, #204]	; (800241c <OnRxData+0xe8>)
 800234e:	f00f ffa9 	bl	80122a4 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002352:	782e      	ldrb	r6, [r5, #0]
 8002354:	2e00      	cmp	r6, #0
 8002356:	d042      	beq.n	80023de <OnRxData+0xaa>
      if (appData != NULL)
 8002358:	2c00      	cmp	r4, #0
 800235a:	d03f      	beq.n	80023dc <OnRxData+0xa8>
        RxPort = appData->Port;
 800235c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800235e:	6863      	ldr	r3, [r4, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d03c      	beq.n	80023de <OnRxData+0xaa>
          switch (appData->Port)
 8002364:	2e02      	cmp	r6, #2
 8002366:	d016      	beq.n	8002396 <OnRxData+0x62>
 8002368:	2e03      	cmp	r6, #3
 800236a:	d138      	bne.n	80023de <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800236c:	7862      	ldrb	r2, [r4, #1]
 800236e:	2a01      	cmp	r2, #1
 8002370:	d135      	bne.n	80023de <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d006      	beq.n	8002386 <OnRxData+0x52>
 8002378:	2b02      	cmp	r3, #2
 800237a:	d008      	beq.n	800238e <OnRxData+0x5a>
 800237c:	bb7b      	cbnz	r3, 80023de <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800237e:	2000      	movs	r0, #0
 8002380:	f004 fe70 	bl	8007064 <LmHandlerRequestClass>
                    break;
 8002384:	e02b      	b.n	80023de <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002386:	2001      	movs	r0, #1
 8002388:	f004 fe6c 	bl	8007064 <LmHandlerRequestClass>
                    break;
 800238c:	e027      	b.n	80023de <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800238e:	2002      	movs	r0, #2
 8002390:	f004 fe68 	bl	8007064 <LmHandlerRequestClass>
                    break;
 8002394:	e023      	b.n	80023de <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002396:	7862      	ldrb	r2, [r4, #1]
 8002398:	2a01      	cmp	r2, #1
 800239a:	d120      	bne.n	80023de <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <OnRxData+0xec>)
 80023a4:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80023a6:	b963      	cbnz	r3, 80023c2 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <OnRxData+0xf0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	4611      	mov	r1, r2
 80023ae:	2003      	movs	r0, #3
 80023b0:	f00f fbca 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80023b4:	2200      	movs	r2, #0
 80023b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ba:	4817      	ldr	r0, [pc, #92]	; (8002418 <OnRxData+0xe4>)
 80023bc:	f001 fe0e 	bl	8003fdc <HAL_GPIO_WritePin>
 80023c0:	e00d      	b.n	80023de <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <OnRxData+0xf4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	4611      	mov	r1, r2
 80023c8:	2003      	movs	r0, #3
 80023ca:	f00f fbbd 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d4:	4810      	ldr	r0, [pc, #64]	; (8002418 <OnRxData+0xe4>)
 80023d6:	f001 fe01 	bl	8003fdc <HAL_GPIO_WritePin>
 80023da:	e000      	b.n	80023de <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80023dc:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80023de:	7c2b      	ldrb	r3, [r5, #16]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d901      	bls.n	80023e8 <OnRxData+0xb4>
}
 80023e4:	b006      	add	sp, #24
 80023e6:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80023e8:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80023ec:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80023f0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80023f4:	9005      	str	r0, [sp, #20]
 80023f6:	9104      	str	r1, [sp, #16]
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <OnRxData+0xf8>)
 80023fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023fe:	9303      	str	r3, [sp, #12]
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	9601      	str	r6, [sp, #4]
 8002404:	68eb      	ldr	r3, [r5, #12]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <OnRxData+0xfc>)
 800240a:	2200      	movs	r2, #0
 800240c:	4611      	mov	r1, r2
 800240e:	2003      	movs	r0, #3
 8002410:	f00f fb9a 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8002414:	e7e6      	b.n	80023e4 <OnRxData+0xb0>
 8002416:	4770      	bx	lr
 8002418:	48000400 	.word	0x48000400
 800241c:	200003f4 	.word	0x200003f4
 8002420:	200003da 	.word	0x200003da
 8002424:	08012b34 	.word	0x08012b34
 8002428:	08012b40 	.word	0x08012b40
 800242c:	08012d34 	.word	0x08012d34
 8002430:	08012b4c 	.word	0x08012b4c

08002434 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800243a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <OnStoreContextRequest+0x20>)
 8002440:	f7fe ffec 	bl	800141c <FLASH_IF_Erase>
 8002444:	b100      	cbz	r0, 8002448 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002446:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002448:	462a      	mov	r2, r5
 800244a:	4621      	mov	r1, r4
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <OnStoreContextRequest+0x20>)
 800244e:	f7fe ffad 	bl	80013ac <FLASH_IF_Write>
}
 8002452:	e7f8      	b.n	8002446 <OnStoreContextRequest+0x12>
 8002454:	0803f000 	.word	0x0803f000

08002458 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002458:	b508      	push	{r3, lr}
 800245a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800245c:	4901      	ldr	r1, [pc, #4]	; (8002464 <OnRestoreContextRequest+0xc>)
 800245e:	f7fe ffc1 	bl	80013e4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002462:	bd08      	pop	{r3, pc}
 8002464:	0803f000 	.word	0x0803f000

08002468 <StopJoin>:
{
 8002468:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800246a:	4c1e      	ldr	r4, [pc, #120]	; (80024e4 <StopJoin+0x7c>)
 800246c:	2201      	movs	r2, #1
 800246e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002472:	4620      	mov	r0, r4
 8002474:	f001 fdb2 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800247e:	4620      	mov	r0, r4
 8002480:	f001 fdac 	bl	8003fdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248a:	4620      	mov	r0, r4
 800248c:	f001 fda6 	bl	8003fdc <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002490:	4815      	ldr	r0, [pc, #84]	; (80024e8 <StopJoin+0x80>)
 8002492:	f00f fead 	bl	80121f0 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002496:	f005 f96d 	bl	8007774 <LmHandlerStop>
 800249a:	b148      	cbz	r0, 80024b0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <StopJoin+0x84>)
 800249e:	2200      	movs	r2, #0
 80024a0:	4611      	mov	r1, r2
 80024a2:	2002      	movs	r0, #2
 80024a4:	f00f fb50 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80024a8:	4811      	ldr	r0, [pc, #68]	; (80024f0 <StopJoin+0x88>)
 80024aa:	f00f fefb 	bl	80122a4 <UTIL_TIMER_Start>
}
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <StopJoin+0x8c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	4611      	mov	r1, r2
 80024b6:	2002      	movs	r0, #2
 80024b8:	f00f fb46 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80024bc:	4c0e      	ldr	r4, [pc, #56]	; (80024f8 <StopJoin+0x90>)
 80024be:	2501      	movs	r5, #1
 80024c0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <StopJoin+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	4611      	mov	r1, r2
 80024c8:	2002      	movs	r0, #2
 80024ca:	f00f fb3d 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80024ce:	480c      	ldr	r0, [pc, #48]	; (8002500 <StopJoin+0x98>)
 80024d0:	f004 ffd8 	bl	8007484 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80024d4:	4629      	mov	r1, r5
 80024d6:	7820      	ldrb	r0, [r4, #0]
 80024d8:	f004 fe1e 	bl	8007118 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <StopJoin+0x80>)
 80024de:	f00f fee1 	bl	80122a4 <UTIL_TIMER_Start>
 80024e2:	e7e1      	b.n	80024a8 <StopJoin+0x40>
 80024e4:	48000400 	.word	0x48000400
 80024e8:	2000043c 	.word	0x2000043c
 80024ec:	08012b94 	.word	0x08012b94
 80024f0:	2000040c 	.word	0x2000040c
 80024f4:	08012bb4 	.word	0x08012bb4
 80024f8:	20000000 	.word	0x20000000
 80024fc:	08012bc8 	.word	0x08012bc8
 8002500:	20000058 	.word	0x20000058

08002504 <StoreContext>:
{
 8002504:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002506:	f005 f9c7 	bl	8007898 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800250a:	f110 0f08 	cmn.w	r0, #8
 800250e:	d003      	beq.n	8002518 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002510:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002514:	d007      	beq.n	8002526 <StoreContext+0x22>
}
 8002516:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <StoreContext+0x30>)
 800251a:	2200      	movs	r2, #0
 800251c:	4611      	mov	r1, r2
 800251e:	2002      	movs	r0, #2
 8002520:	f00f fb12 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 8002524:	e7f7      	b.n	8002516 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <StoreContext+0x34>)
 8002528:	2200      	movs	r2, #0
 800252a:	4611      	mov	r1, r2
 800252c:	2002      	movs	r0, #2
 800252e:	f00f fb0b 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8002532:	e7f0      	b.n	8002516 <StoreContext+0x12>
 8002534:	08012be8 	.word	0x08012be8
 8002538:	08012c00 	.word	0x08012c00

0800253c <SendTxData>:
{
 800253c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253e:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002540:	f7ff f9b2 	bl	80018a8 <GetBatteryLevel>
 8002544:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002546:	f004 fe61 	bl	800720c <LmHandlerIsBusy>
 800254a:	b188      	cbz	r0, 8002570 <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800254c:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800254e:	4c5a      	ldr	r4, [pc, #360]	; (80026b8 <SendTxData+0x17c>)
 8002550:	4620      	mov	r0, r4
 8002552:	f00f fe4d 	bl	80121f0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002556:	4b59      	ldr	r3, [pc, #356]	; (80026bc <SendTxData+0x180>)
 8002558:	6819      	ldr	r1, [r3, #0]
 800255a:	42a9      	cmp	r1, r5
 800255c:	bf38      	it	cc
 800255e:	4629      	movcc	r1, r5
 8002560:	4620      	mov	r0, r4
 8002562:	f00f fee5 	bl	8012330 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002566:	4620      	mov	r0, r4
 8002568:	f00f fe9c 	bl	80122a4 <UTIL_TIMER_Start>
}
 800256c:	b009      	add	sp, #36	; 0x24
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002570:	a802      	add	r0, sp, #8
 8002572:	f7ff fa77 	bl	8001a64 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002576:	9400      	str	r4, [sp, #0]
 8002578:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <SendTxData+0x184>)
 800257a:	2201      	movs	r2, #1
 800257c:	2100      	movs	r1, #0
 800257e:	2002      	movs	r0, #2
 8002580:	f00f fae2 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002584:	9803      	ldr	r0, [sp, #12]
 8002586:	f7fe fac9 	bl	8000b1c <__aeabi_f2iz>
 800258a:	b200      	sxth	r0, r0
 800258c:	9000      	str	r0, [sp, #0]
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <SendTxData+0x188>)
 8002590:	2201      	movs	r2, #1
 8002592:	2100      	movs	r1, #0
 8002594:	2002      	movs	r0, #2
 8002596:	f00f fad7 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 800259a:	4c4b      	ldr	r4, [pc, #300]	; (80026c8 <SendTxData+0x18c>)
 800259c:	2302      	movs	r3, #2
 800259e:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80025a0:	494a      	ldr	r1, [pc, #296]	; (80026cc <SendTxData+0x190>)
 80025a2:	9804      	ldr	r0, [sp, #16]
 80025a4:	f7fe f96a 	bl	800087c <__aeabi_fmul>
 80025a8:	f7fe fade 	bl	8000b68 <__aeabi_f2uiz>
 80025ac:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 80025ae:	9803      	ldr	r0, [sp, #12]
 80025b0:	f7fe fab4 	bl	8000b1c <__aeabi_f2iz>
 80025b4:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80025b6:	4946      	ldr	r1, [pc, #280]	; (80026d0 <SendTxData+0x194>)
 80025b8:	9802      	ldr	r0, [sp, #8]
 80025ba:	f7fe f95f 	bl	800087c <__aeabi_fmul>
 80025be:	4943      	ldr	r1, [pc, #268]	; (80026cc <SendTxData+0x190>)
 80025c0:	f7fe fa10 	bl	80009e4 <__aeabi_fdiv>
 80025c4:	f7fe fad0 	bl	8000b68 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 80025c8:	6863      	ldr	r3, [r4, #4]
 80025ca:	4a42      	ldr	r2, [pc, #264]	; (80026d4 <SendTxData+0x198>)
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80025d0:	6863      	ldr	r3, [r4, #4]
 80025d2:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80025d6:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	0a2a      	lsrs	r2, r5, #8
 80025e4:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <SendTxData+0x19c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d002      	beq.n	80025f8 <SendTxData+0xbc>
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d000      	beq.n	80025f8 <SendTxData+0xbc>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80025f6:	b9d3      	cbnz	r3, 800262e <SendTxData+0xf2>
      AppData.Buffer[i++] = 0;
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <SendTxData+0x18c>)
 80025fa:	6851      	ldr	r1, [r2, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 8002600:	6851      	ldr	r1, [r2, #4]
 8002602:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 8002604:	6852      	ldr	r2, [r2, #4]
 8002606:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 8002608:	7253      	strb	r3, [r2, #9]
 800260a:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <SendTxData+0x18c>)
 800260e:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <SendTxData+0x1a0>)
 8002612:	7a5b      	ldrb	r3, [r3, #9]
 8002614:	bb3b      	cbnz	r3, 8002666 <SendTxData+0x12a>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002616:	2200      	movs	r2, #0
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <SendTxData+0x19c>)
 800261a:	78d9      	ldrb	r1, [r3, #3]
 800261c:	482a      	ldr	r0, [pc, #168]	; (80026c8 <SendTxData+0x18c>)
 800261e:	f004 fe13 	bl	8007248 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002622:	b370      	cbz	r0, 8002682 <SendTxData+0x146>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002624:	f110 0f06 	cmn.w	r0, #6
 8002628:	d033      	beq.n	8002692 <SendTxData+0x156>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800262a:	2500      	movs	r5, #0
 800262c:	e78f      	b.n	800254e <SendTxData+0x12>
      latitude = sensor_data.latitude;
 800262e:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 8002630:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002632:	4e25      	ldr	r6, [pc, #148]	; (80026c8 <SendTxData+0x18c>)
 8002634:	6877      	ldr	r7, [r6, #4]
 8002636:	f7ff f937 	bl	80018a8 <GetBatteryLevel>
 800263a:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800263c:	6873      	ldr	r3, [r6, #4]
 800263e:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002642:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002644:	6873      	ldr	r3, [r6, #4]
 8002646:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800264a:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800264c:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800264e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002652:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002654:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002658:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800265a:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800265c:	2200      	movs	r2, #0
 800265e:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002660:	739a      	strb	r2, [r3, #14]
 8002662:	220f      	movs	r2, #15
 8002664:	e7d2      	b.n	800260c <SendTxData+0xd0>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002666:	f004 fceb 	bl	8007040 <LmHandlerJoinStatus>
 800266a:	2801      	cmp	r0, #1
 800266c:	d1d3      	bne.n	8002616 <SendTxData+0xda>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800266e:	481b      	ldr	r0, [pc, #108]	; (80026dc <SendTxData+0x1a0>)
 8002670:	f00f fdbe 	bl	80121f0 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800267a:	4819      	ldr	r0, [pc, #100]	; (80026e0 <SendTxData+0x1a4>)
 800267c:	f001 fcae 	bl	8003fdc <HAL_GPIO_WritePin>
 8002680:	e7c9      	b.n	8002616 <SendTxData+0xda>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <SendTxData+0x1a8>)
 8002684:	2201      	movs	r2, #1
 8002686:	2100      	movs	r1, #0
 8002688:	4610      	mov	r0, r2
 800268a:	f00f fa5d 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800268e:	2500      	movs	r5, #0
 8002690:	e75d      	b.n	800254e <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002692:	f004 fccf 	bl	8007034 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002696:	4605      	mov	r5, r0
 8002698:	2800      	cmp	r0, #0
 800269a:	f43f af58 	beq.w	800254e <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <SendTxData+0x1ac>)
 80026a0:	fba3 2300 	umull	r2, r3, r3, r0
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <SendTxData+0x1b0>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	2100      	movs	r1, #0
 80026ae:	4610      	mov	r0, r2
 80026b0:	f00f fa4a 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 80026b4:	e74b      	b.n	800254e <SendTxData+0x12>
 80026b6:	bf00      	nop
 80026b8:	2000043c 	.word	0x2000043c
 80026bc:	20000070 	.word	0x20000070
 80026c0:	08012c18 	.word	0x08012c18
 80026c4:	08012c24 	.word	0x08012c24
 80026c8:	20000004 	.word	0x20000004
 80026cc:	41200000 	.word	0x41200000
 80026d0:	42c80000 	.word	0x42c80000
 80026d4:	200003da 	.word	0x200003da
 80026d8:	20000058 	.word	0x20000058
 80026dc:	200003dc 	.word	0x200003dc
 80026e0:	48000400 	.word	0x48000400
 80026e4:	08012c30 	.word	0x08012c30
 80026e8:	10624dd3 	.word	0x10624dd3
 80026ec:	08012c40 	.word	0x08012c40

080026f0 <OnJoinTimerLedEvent>:
{
 80026f0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80026f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026f6:	4802      	ldr	r0, [pc, #8]	; (8002700 <OnJoinTimerLedEvent+0x10>)
 80026f8:	f001 fc75 	bl	8003fe6 <HAL_GPIO_TogglePin>
}
 80026fc:	bd08      	pop	{r3, pc}
 80026fe:	bf00      	nop
 8002700:	48000400 	.word	0x48000400

08002704 <LoRaWAN_Init>:
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002708:	2400      	movs	r4, #0
 800270a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800270c:	9402      	str	r4, [sp, #8]
 800270e:	2703      	movs	r7, #3
 8002710:	9701      	str	r7, [sp, #4]
 8002712:	2601      	movs	r6, #1
 8002714:	9600      	str	r6, [sp, #0]
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <LoRaWAN_Init+0x150>)
 8002718:	4622      	mov	r2, r4
 800271a:	4621      	mov	r1, r4
 800271c:	2002      	movs	r0, #2
 800271e:	f00f fa13 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002722:	9402      	str	r4, [sp, #8]
 8002724:	2305      	movs	r3, #5
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2502      	movs	r5, #2
 800272a:	9500      	str	r5, [sp, #0]
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <LoRaWAN_Init+0x154>)
 800272e:	4622      	mov	r2, r4
 8002730:	4621      	mov	r1, r4
 8002732:	4628      	mov	r0, r5
 8002734:	f00f fa08 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002738:	9402      	str	r4, [sp, #8]
 800273a:	9701      	str	r7, [sp, #4]
 800273c:	9600      	str	r6, [sp, #0]
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <LoRaWAN_Init+0x158>)
 8002740:	4622      	mov	r2, r4
 8002742:	4621      	mov	r1, r4
 8002744:	4628      	mov	r0, r5
 8002746:	f00f f9ff 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800274a:	a905      	add	r1, sp, #20
 800274c:	4620      	mov	r0, r4
 800274e:	f004 fffb 	bl	8007748 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002752:	9b05      	ldr	r3, [sp, #20]
 8002754:	0e1a      	lsrs	r2, r3, #24
 8002756:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800275a:	9102      	str	r1, [sp, #8]
 800275c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <LoRaWAN_Init+0x15c>)
 8002766:	4622      	mov	r2, r4
 8002768:	4621      	mov	r1, r4
 800276a:	4628      	mov	r0, r5
 800276c:	f00f f9ec 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002770:	a905      	add	r1, sp, #20
 8002772:	4630      	mov	r0, r6
 8002774:	f004 ffe8 	bl	8007748 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002778:	9b05      	ldr	r3, [sp, #20]
 800277a:	0e1a      	lsrs	r2, r3, #24
 800277c:	b2d9      	uxtb	r1, r3
 800277e:	9103      	str	r1, [sp, #12]
 8002780:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002784:	9102      	str	r1, [sp, #8]
 8002786:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	4b35      	ldr	r3, [pc, #212]	; (8002864 <LoRaWAN_Init+0x160>)
 8002790:	4622      	mov	r2, r4
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f00f f9d7 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800279a:	9400      	str	r4, [sp, #0]
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <LoRaWAN_Init+0x164>)
 800279e:	4622      	mov	r2, r4
 80027a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027a4:	4831      	ldr	r0, [pc, #196]	; (800286c <LoRaWAN_Init+0x168>)
 80027a6:	f00f fcc5 	bl	8012134 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80027aa:	9400      	str	r4, [sp, #0]
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <LoRaWAN_Init+0x16c>)
 80027ae:	4622      	mov	r2, r4
 80027b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027b4:	482f      	ldr	r0, [pc, #188]	; (8002874 <LoRaWAN_Init+0x170>)
 80027b6:	f00f fcbd 	bl	8012134 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027ba:	9400      	str	r4, [sp, #0]
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <LoRaWAN_Init+0x174>)
 80027be:	4632      	mov	r2, r6
 80027c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027c4:	482d      	ldr	r0, [pc, #180]	; (800287c <LoRaWAN_Init+0x178>)
 80027c6:	f00f fcb5 	bl	8012134 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7fe fde8 	bl	80013a0 <FLASH_IF_Init>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d13b      	bne.n	800284c <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80027d4:	2400      	movs	r4, #0
 80027d6:	9400      	str	r4, [sp, #0]
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <LoRaWAN_Init+0x17c>)
 80027da:	4622      	mov	r2, r4
 80027dc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027e0:	4828      	ldr	r0, [pc, #160]	; (8002884 <LoRaWAN_Init+0x180>)
 80027e2:	f00f fca7 	bl	8012134 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80027e6:	4a28      	ldr	r2, [pc, #160]	; (8002888 <LoRaWAN_Init+0x184>)
 80027e8:	4621      	mov	r1, r4
 80027ea:	2001      	movs	r0, #1
 80027ec:	f00f fba2 	bl	8011f34 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <LoRaWAN_Init+0x188>)
 80027f2:	4621      	mov	r1, r4
 80027f4:	2002      	movs	r0, #2
 80027f6:	f00f fb9d 	bl	8011f34 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <LoRaWAN_Init+0x18c>)
 80027fc:	4621      	mov	r1, r4
 80027fe:	2004      	movs	r0, #4
 8002800:	f00f fb98 	bl	8011f34 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <LoRaWAN_Init+0x190>)
 8002806:	4621      	mov	r1, r4
 8002808:	2008      	movs	r0, #8
 800280a:	f00f fb93 	bl	8011f34 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 800280e:	f000 f861 	bl	80028d4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002812:	4921      	ldr	r1, [pc, #132]	; (8002898 <LoRaWAN_Init+0x194>)
 8002814:	4821      	ldr	r0, [pc, #132]	; (800289c <LoRaWAN_Init+0x198>)
 8002816:	f004 ff57 	bl	80076c8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800281a:	4821      	ldr	r0, [pc, #132]	; (80028a0 <LoRaWAN_Init+0x19c>)
 800281c:	f004 fe32 	bl	8007484 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002820:	4816      	ldr	r0, [pc, #88]	; (800287c <LoRaWAN_Init+0x178>)
 8002822:	f00f fd3f 	bl	80122a4 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002826:	4621      	mov	r1, r4
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <LoRaWAN_Init+0x1a0>)
 800282a:	7818      	ldrb	r0, [r3, #0]
 800282c:	f004 fc74 	bl	8007118 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002830:	4d1d      	ldr	r5, [pc, #116]	; (80028a8 <LoRaWAN_Init+0x1a4>)
 8002832:	9400      	str	r4, [sp, #0]
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <LoRaWAN_Init+0x1a8>)
 8002836:	4622      	mov	r2, r4
 8002838:	491d      	ldr	r1, [pc, #116]	; (80028b0 <LoRaWAN_Init+0x1ac>)
 800283a:	6809      	ldr	r1, [r1, #0]
 800283c:	4628      	mov	r0, r5
 800283e:	f00f fc79 	bl	8012134 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002842:	4628      	mov	r0, r5
 8002844:	f00f fd2e 	bl	80122a4 <UTIL_TIMER_Start>
}
 8002848:	b007      	add	sp, #28
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 800284c:	f7fe fe7a 	bl	8001544 <Error_Handler>
 8002850:	e7c0      	b.n	80027d4 <LoRaWAN_Init+0xd0>
 8002852:	bf00      	nop
 8002854:	08012c60 	.word	0x08012c60
 8002858:	08012c84 	.word	0x08012c84
 800285c:	08012ca8 	.word	0x08012ca8
 8002860:	08012ccc 	.word	0x08012ccc
 8002864:	08012cf0 	.word	0x08012cf0
 8002868:	08002321 	.word	0x08002321
 800286c:	20000424 	.word	0x20000424
 8002870:	0800230d 	.word	0x0800230d
 8002874:	200003f4 	.word	0x200003f4
 8002878:	080026f1 	.word	0x080026f1
 800287c:	200003dc 	.word	0x200003dc
 8002880:	080022c9 	.word	0x080022c9
 8002884:	2000040c 	.word	0x2000040c
 8002888:	08007025 	.word	0x08007025
 800288c:	0800253d 	.word	0x0800253d
 8002890:	08002505 	.word	0x08002505
 8002894:	08002469 	.word	0x08002469
 8002898:	01030000 	.word	0x01030000
 800289c:	2000000c 	.word	0x2000000c
 80028a0:	20000058 	.word	0x20000058
 80028a4:	20000000 	.word	0x20000000
 80028a8:	2000043c 	.word	0x2000043c
 80028ac:	080020f9 	.word	0x080020f9
 80028b0:	20000070 	.word	0x20000070

080028b4 <HAL_GPIO_EXTI_Callback>:
{
 80028b4:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 80028b6:	2802      	cmp	r0, #2
 80028b8:	d002      	beq.n	80028c0 <HAL_GPIO_EXTI_Callback+0xc>
 80028ba:	2840      	cmp	r0, #64	; 0x40
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_EXTI_Callback+0x16>
}
 80028be:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80028c0:	2100      	movs	r1, #0
 80028c2:	2008      	movs	r0, #8
 80028c4:	f00f fa6a 	bl	8011d9c <UTIL_SEQ_SetTask>
      break;
 80028c8:	e7f9      	b.n	80028be <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80028ca:	2100      	movs	r1, #0
 80028cc:	2004      	movs	r0, #4
 80028ce:	f00f fa65 	bl	8011d9c <UTIL_SEQ_SetTask>
}
 80028d2:	e7f4      	b.n	80028be <HAL_GPIO_EXTI_Callback+0xa>

080028d4 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <LoraInfo_Init+0x1c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80028da:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80028dc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80028de:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80028e0:	2220      	movs	r2, #32
 80028e2:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80028e4:	f44f 7290 	mov.w	r2, #288	; 0x120
 80028e8:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80028ee:	4770      	bx	lr
 80028f0:	20000454 	.word	0x20000454

080028f4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80028f4:	4800      	ldr	r0, [pc, #0]	; (80028f8 <LoraInfo_GetPtr+0x4>)
 80028f6:	4770      	bx	lr
 80028f8:	20000454 	.word	0x20000454

080028fc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80028fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002900:	b088      	sub	sp, #32
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_Init();
#elif defined(MX_NUCLEO_WL55JC1)
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002902:	2400      	movs	r4, #0
 8002904:	9403      	str	r4, [sp, #12]
 8002906:	9404      	str	r4, [sp, #16]
 8002908:	9405      	str	r4, [sp, #20]
 800290a:	9406      	str	r4, [sp, #24]
 800290c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002914:	f042 0202 	orr.w	r2, r2, #2
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800291a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291c:	f002 0202 	and.w	r2, r2, #2
 8002920:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002922:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002926:	f042 0204 	orr.w	r2, r2, #4
 800292a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002934:	9b01      	ldr	r3, [sp, #4]
#if defined(RAK3172_RF_CHANNEL_SWITCH)
    /* Enable the Radio Switch Clock */
    RF_SW_CTRL1_GPIO_CLK_ENABLE();
    RF_SW_CTRL2_GPIO_CLK_ENABLE();
    /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002936:	f44f 7680 	mov.w	r6, #256	; 0x100
 800293a:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull  = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002944:	4d0d      	ldr	r5, [pc, #52]	; (800297c <RBI_Init+0x80>)
 8002946:	a903      	add	r1, sp, #12
 8002948:	4628      	mov	r0, r5
 800294a:	f001 f9f7 	bl	8003d3c <HAL_GPIO_Init>
    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800294e:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8002952:	f8cd 800c 	str.w	r8, [sp, #12]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002956:	4f0a      	ldr	r7, [pc, #40]	; (8002980 <RBI_Init+0x84>)
 8002958:	a903      	add	r1, sp, #12
 800295a:	4638      	mov	r0, r7
 800295c:	f001 f9ee 	bl	8003d3c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002960:	4622      	mov	r2, r4
 8002962:	4641      	mov	r1, r8
 8002964:	4638      	mov	r0, r7
 8002966:	f001 fb39 	bl	8003fdc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800296a:	4622      	mov	r2, r4
 800296c:	4631      	mov	r1, r6
 800296e:	4628      	mov	r0, r5
 8002970:	f001 fb34 	bl	8003fdc <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1  */
  /* USER CODE BEGIN RBI_Init_3 */

  /* USER CODE END RBI_Init_3 */
}
 8002974:	4620      	mov	r0, r4
 8002976:	b008      	add	sp, #32
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800297c:	48000400 	.word	0x48000400
 8002980:	48000800 	.word	0x48000800

08002984 <RBI_ConfigRFSwitch>:

  /* USER CODE END RBI_DeInit_3 */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002984:	b508      	push	{r3, lr}
  /* code generated by MX does not support BSP */
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#elif defined(MX_NUCLEO_WL55JC1)
  switch (Config)
 8002986:	2803      	cmp	r0, #3
 8002988:	d80f      	bhi.n	80029aa <RBI_ConfigRFSwitch+0x26>
 800298a:	e8df f000 	tbb	[pc, r0]
 800298e:	1002      	.short	0x1002
 8002990:	2a1d      	.short	0x2a1d
  {
    case RBI_SWITCH_OFF:
    {
      #if defined(RAK3172_RF_CHANNEL_SWITCH)
        /* Turn off switch */
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002998:	4818      	ldr	r0, [pc, #96]	; (80029fc <RBI_ConfigRFSwitch+0x78>)
 800299a:	f001 fb1f 	bl	8003fdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a4:	4816      	ldr	r0, [pc, #88]	; (8002a00 <RBI_ConfigRFSwitch+0x7c>)
 80029a6:	f001 fb19 	bl	8003fdc <HAL_GPIO_WritePin>
  /* USER CODE END RBI_ConfigRFSwitch_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_ConfigRFSwitch_3 */

  /* USER CODE END RBI_ConfigRFSwitch_3 */
}
 80029aa:	2000      	movs	r0, #0
 80029ac:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b4:	4811      	ldr	r0, [pc, #68]	; (80029fc <RBI_ConfigRFSwitch+0x78>)
 80029b6:	f001 fb11 	bl	8003fdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c0:	480f      	ldr	r0, [pc, #60]	; (8002a00 <RBI_ConfigRFSwitch+0x7c>)
 80029c2:	f001 fb0b 	bl	8003fdc <HAL_GPIO_WritePin>
      break;
 80029c6:	e7f0      	b.n	80029aa <RBI_ConfigRFSwitch+0x26>
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ce:	480b      	ldr	r0, [pc, #44]	; (80029fc <RBI_ConfigRFSwitch+0x78>)
 80029d0:	f001 fb04 	bl	8003fdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <RBI_ConfigRFSwitch+0x7c>)
 80029dc:	f001 fafe 	bl	8003fdc <HAL_GPIO_WritePin>
      break;
 80029e0:	e7e3      	b.n	80029aa <RBI_ConfigRFSwitch+0x26>
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <RBI_ConfigRFSwitch+0x78>)
 80029ea:	f001 faf7 	bl	8003fdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <RBI_ConfigRFSwitch+0x7c>)
 80029f6:	f001 faf1 	bl	8003fdc <HAL_GPIO_WritePin>
      break;
 80029fa:	e7d6      	b.n	80029aa <RBI_ConfigRFSwitch+0x26>
 80029fc:	48000400 	.word	0x48000400
 8002a00:	48000800 	.word	0x48000800

08002a04 <RBI_GetTxConfig>:
  /* USER CODE END RBI_GetTxConfig_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetTxConfig_3 */

  /* USER CODE END RBI_GetTxConfig_3 */
}
 8002a04:	2002      	movs	r0, #2
 8002a06:	4770      	bx	lr

08002a08 <RBI_IsTCXO>:
  /* USER CODE END RBI_IsTCXO_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsTCXO_3 */

  /* USER CODE END RBI_IsTCXO_3 */
}
 8002a08:	2000      	movs	r0, #0
 8002a0a:	4770      	bx	lr

08002a0c <RBI_IsDCDC>:
  /* USER CODE END RBI_IsDCDC_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsDCDC_3 */

  /* USER CODE END RBI_IsDCDC_3 */
}
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	4770      	bx	lr

08002a10 <RBI_GetRFOMaxPowerConfig>:
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8002a10:	b908      	cbnz	r0, 8002a16 <RBI_GetRFOMaxPowerConfig+0x6>
  {
    ret = 15; /*dBm*/
 8002a12:	200f      	movs	r0, #15
 8002a14:	4770      	bx	lr
  }
  else
  {
    ret = 22; /*dBm*/
 8002a16:	2016      	movs	r0, #22
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002a18:	4770      	bx	lr
	...

08002a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a20:	f000 f825 	bl	8002a6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490d      	ldr	r1, [pc, #52]	; (8002a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	; (8002a68 <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a4a:	f00f fe31 	bl	80126b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7fe fdc2 	bl	80015d6 <main>

08002a52 <LoopForever>:

LoopForever:
    b LoopForever
 8002a52:	e7fe      	b.n	8002a52 <LoopForever>
  ldr   r0, =_estack
 8002a54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002a60:	08013738 	.word	0x08013738
  ldr r2, =_sbss
 8002a64:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002a68:	20001460 	.word	0x20001460

08002a6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC_IRQHandler>

08002a6e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a72:	2003      	movs	r0, #3
 8002a74:	f000 fd24 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a78:	f001 fc56 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_Init+0x28>)
 8002a7e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a80:	200f      	movs	r0, #15
 8002a82:	f7fe ff93 	bl	80019ac <HAL_InitTick>
 8002a86:	b110      	cbz	r0, 8002a8e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a88:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a90:	f7fe fe4c 	bl	800172c <HAL_MspInit>
 8002a94:	e7f9      	b.n	8002a8a <HAL_Init+0x1a>
 8002a96:	bf00      	nop
 8002a98:	20000074 	.word	0x20000074

08002a9c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002aa0:	6913      	ldr	r3, [r2, #16]
 8002aa2:	f023 0302 	bic.w	r3, r3, #2
 8002aa6:	6113      	str	r3, [r2, #16]
}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002aaa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002aae:	6913      	ldr	r3, [r2, #16]
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6113      	str	r3, [r2, #16]
}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <HAL_GetUIDw0+0x8>)
 8002aba:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002abe:	4770      	bx	lr
 8002ac0:	1fff7000 	.word	0x1fff7000

08002ac4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <HAL_GetUIDw1+0x8>)
 8002ac6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002aca:	4770      	bx	lr
 8002acc:	1fff7000 	.word	0x1fff7000

08002ad0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <HAL_GetUIDw2+0x8>)
 8002ad2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002ad6:	4770      	bx	lr
 8002ad8:	1fff7000 	.word	0x1fff7000

08002adc <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002adc:	4a02      	ldr	r2, [pc, #8]	; (8002ae8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002ade:	6853      	ldr	r3, [r2, #4]
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002ae6:	4770      	bx	lr
 8002ae8:	e0042000 	.word	0xe0042000

08002aec <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002aec:	4a02      	ldr	r2, [pc, #8]	; (8002af8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002aee:	6853      	ldr	r3, [r2, #4]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002af6:	4770      	bx	lr
 8002af8:	e0042000 	.word	0xe0042000

08002afc <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002afc:	4a02      	ldr	r2, [pc, #8]	; (8002b08 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002afe:	6853      	ldr	r3, [r2, #4]
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002b06:	4770      	bx	lr
 8002b08:	e0042000 	.word	0xe0042000

08002b0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b530      	push	{r4, r5, lr}
 8002b0e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	2800      	cmp	r0, #0
 8002b16:	f000 8106 	beq.w	8002d26 <HAL_ADC_Init+0x21a>
 8002b1a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b1c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b1e:	b1bb      	cbz	r3, 8002b50 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b20:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b22:	6893      	ldr	r3, [r2, #8]
 8002b24:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b28:	d11f      	bne.n	8002b6a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002b2a:	6893      	ldr	r3, [r2, #8]
 8002b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b30:	f023 0317 	bic.w	r3, r3, #23
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_ADC_Init+0x220>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	4a7b      	ldr	r2, [pc, #492]	; (8002d30 <HAL_ADC_Init+0x224>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	3301      	adds	r3, #1
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b4e:	e009      	b.n	8002b64 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002b50:	f7fe f9d8 	bl	8000f04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	2300      	movs	r3, #0
 8002b56:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002b58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002b5c:	e7e0      	b.n	8002b20 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002b5e:	9b01      	ldr	r3, [sp, #4]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b64:	9b01      	ldr	r3, [sp, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b6c:	6893      	ldr	r3, [r2, #8]
 8002b6e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b72:	f040 809a 	bne.w	8002caa <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b88:	6893      	ldr	r3, [r2, #8]
 8002b8a:	f013 0304 	ands.w	r3, r3, #4
 8002b8e:	d000      	beq.n	8002b92 <HAL_ADC_Init+0x86>
 8002b90:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002b94:	f011 0f10 	tst.w	r1, #16
 8002b98:	f040 80be 	bne.w	8002d18 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 80bb 	bne.w	8002d18 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ba4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bae:	6893      	ldr	r3, [r2, #8]
 8002bb0:	f013 0f01 	tst.w	r3, #1
 8002bb4:	d14f      	bne.n	8002c56 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bb6:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bb8:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bba:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bbe:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bc0:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bc4:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bc6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bcc:	b109      	cbz	r1, 8002bd2 <HAL_ADC_Init+0xc6>
 8002bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bd2:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8002bd4:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bd6:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bd8:	6921      	ldr	r1, [r4, #16]
 8002bda:	2900      	cmp	r1, #0
 8002bdc:	db67      	blt.n	8002cae <HAL_ADC_Init+0x1a2>
 8002bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002be2:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002be4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002be8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bec:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002bf0:	2901      	cmp	r1, #1
 8002bf2:	d05f      	beq.n	8002cb4 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bf6:	b121      	cbz	r1, 8002c02 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bf8:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002bfc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bfe:	4329      	orrs	r1, r5
 8002c00:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c02:	68d1      	ldr	r1, [r2, #12]
 8002c04:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8002c08:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002c16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c18:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c1a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002c1e:	2901      	cmp	r1, #1
 8002c20:	d055      	beq.n	8002cce <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c22:	6821      	ldr	r1, [r4, #0]
 8002c24:	690d      	ldr	r5, [r1, #16]
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_ADC_Init+0x228>)
 8002c28:	402b      	ands	r3, r5
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c2e:	6863      	ldr	r3, [r4, #4]
 8002c30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002c34:	d00f      	beq.n	8002c56 <HAL_ADC_Init+0x14a>
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d00c      	beq.n	8002c56 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c40:	d009      	beq.n	8002c56 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002c42:	493d      	ldr	r1, [pc, #244]	; (8002d38 <HAL_ADC_Init+0x22c>)
 8002c44:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8002c48:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8002c4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c56:	6821      	ldr	r1, [r4, #0]
 8002c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002c5a:	694a      	ldr	r2, [r1, #20]
 8002c5c:	f022 0207 	bic.w	r2, r2, #7
 8002c60:	4313      	orrs	r3, r2
 8002c62:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c68:	6953      	ldr	r3, [r2, #20]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002c72:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002c74:	6923      	ldr	r3, [r4, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d133      	bne.n	8002ce2 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c7a:	6822      	ldr	r2, [r4, #0]
 8002c7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002c7e:	f063 030f 	orn	r3, r3, #15
 8002c82:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c84:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002c8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d039      	beq.n	8002d06 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c94:	f023 0312 	bic.w	r3, r3, #18
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	e03b      	b.n	8002d22 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002caa:	2000      	movs	r0, #0
 8002cac:	e76c      	b.n	8002b88 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002cb2:	e796      	b.n	8002be2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb4:	b915      	cbnz	r5, 8002cbc <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	e79b      	b.n	8002bf4 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cbc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002cbe:	f041 0120 	orr.w	r1, r1, #32
 8002cc2:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002cc6:	f041 0101 	orr.w	r1, r1, #1
 8002cca:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002ccc:	e792      	b.n	8002bf4 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002cce:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cd0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002cd2:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002cd4:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002cd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cd8:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	e79f      	b.n	8002c22 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ce6:	d1cd      	bne.n	8002c84 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002cec:	69e3      	ldr	r3, [r4, #28]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f003 031c 	and.w	r3, r3, #28
 8002cf6:	f06f 020f 	mvn.w	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d00:	4313      	orrs	r3, r2
 8002d02:	628b      	str	r3, [r1, #40]	; 0x28
 8002d04:	e7be      	b.n	8002c84 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d06:	2300      	movs	r3, #0
 8002d08:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d0c:	f023 0303 	bic.w	r3, r3, #3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d16:	e004      	b.n	8002d22 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d1a:	f043 0310 	orr.w	r3, r3, #16
 8002d1e:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d20:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002d22:	b003      	add	sp, #12
 8002d24:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
 8002d28:	e7fb      	b.n	8002d22 <HAL_ADC_Init+0x216>
 8002d2a:	bf00      	nop
 8002d2c:	20000074 	.word	0x20000074
 8002d30:	053e2d63 	.word	0x053e2d63
 8002d34:	1ffffc02 	.word	0x1ffffc02
 8002d38:	40012000 	.word	0x40012000

08002d3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d42:	6946      	ldr	r6, [r0, #20]
 8002d44:	2e08      	cmp	r6, #8
 8002d46:	d005      	beq.n	8002d54 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002d48:	6803      	ldr	r3, [r0, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f013 0f01 	tst.w	r3, #1
 8002d50:	d11e      	bne.n	8002d90 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002d52:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d54:	f7fe fe2c 	bl	80019b0 <HAL_GetTick>
 8002d58:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4232      	tst	r2, r6
 8002d60:	d11c      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d66:	d0f8      	beq.n	8002d5a <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d68:	f7fe fe22 	bl	80019b0 <HAL_GetTick>
 8002d6c:	1bc3      	subs	r3, r0, r7
 8002d6e:	42ab      	cmp	r3, r5
 8002d70:	d801      	bhi.n	8002d76 <HAL_ADC_PollForConversion+0x3a>
 8002d72:	2d00      	cmp	r5, #0
 8002d74:	d1f1      	bne.n	8002d5a <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4233      	tst	r3, r6
 8002d7c:	d1ed      	bne.n	8002d5a <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002d86:	2300      	movs	r3, #0
 8002d88:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	e028      	b.n	8002de2 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d90:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
 8002d9a:	e022      	b.n	8002de2 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d9c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002daa:	d115      	bne.n	8002dd8 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dac:	7ea2      	ldrb	r2, [r4, #26]
 8002dae:	b99a      	cbnz	r2, 8002dd8 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f012 0f08 	tst.w	r2, #8
 8002db6:	d00f      	beq.n	8002dd8 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	f012 0f04 	tst.w	r2, #4
 8002dbe:	d111      	bne.n	8002de4 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	f022 020c 	bic.w	r2, r2, #12
 8002dc6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002dd8:	7e20      	ldrb	r0, [r4, #24]
 8002dda:	b960      	cbnz	r0, 8002df6 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002de6:	f043 0320 	orr.w	r3, r3, #32
 8002dea:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002df4:	e7f0      	b.n	8002dd8 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002df6:	2000      	movs	r0, #0
 8002df8:	e7f3      	b.n	8002de2 <HAL_ADC_PollForConversion+0xa6>

08002dfa <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dfa:	6803      	ldr	r3, [r0, #0]
 8002dfc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e00:	b470      	push	{r4, r5, r6}
 8002e02:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e04:	2200      	movs	r2, #0
 8002e06:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e08:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e0a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	f000 8105 	beq.w	800301e <HAL_ADC_ConfigChannel+0x21e>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2201      	movs	r2, #1
 8002e18:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	6890      	ldr	r0, [r2, #8]
 8002e20:	f010 0f04 	tst.w	r0, #4
 8002e24:	d00a      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002e36:	b003      	add	sp, #12
 8002e38:	bc70      	pop	{r4, r5, r6}
 8002e3a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e3c:	6848      	ldr	r0, [r1, #4]
 8002e3e:	2802      	cmp	r0, #2
 8002e40:	f000 809e 	beq.w	8002f80 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e44:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002e48:	d029      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x9e>
 8002e4a:	4d76      	ldr	r5, [pc, #472]	; (8003024 <HAL_ADC_ConfigChannel+0x224>)
 8002e4c:	42ac      	cmp	r4, r5
 8002e4e:	d026      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002e50:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002e52:	f000 001f 	and.w	r0, r0, #31
 8002e56:	250f      	movs	r5, #15
 8002e58:	4085      	lsls	r5, r0
 8002e5a:	ea24 0505 	bic.w	r5, r4, r5
 8002e5e:	680c      	ldr	r4, [r1, #0]
 8002e60:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002e64:	2e00      	cmp	r6, #0
 8002e66:	d133      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0xd0>
 8002e68:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002e6c:	fa04 f000 	lsl.w	r0, r4, r0
 8002e70:	4328      	orrs	r0, r5
 8002e72:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e74:	684c      	ldr	r4, [r1, #4]
 8002e76:	08a0      	lsrs	r0, r4, #2
 8002e78:	3001      	adds	r0, #1
 8002e7a:	69dd      	ldr	r5, [r3, #28]
 8002e7c:	42a8      	cmp	r0, r5
 8002e7e:	d814      	bhi.n	8002eaa <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e80:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002e82:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002e84:	f004 041f 	and.w	r4, r4, #31
 8002e88:	260f      	movs	r6, #15
 8002e8a:	40a6      	lsls	r6, r4
 8002e8c:	ea20 0006 	bic.w	r0, r0, r6
 8002e90:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002e94:	fa05 f404 	lsl.w	r4, r5, r4
 8002e98:	4304      	orrs	r4, r0
 8002e9a:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002e9c:	e005      	b.n	8002eaa <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002e9e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ea0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002ea2:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002ea6:	4320      	orrs	r0, r4
 8002ea8:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eaa:	681c      	ldr	r4, [r3, #0]
 8002eac:	680d      	ldr	r5, [r1, #0]
 8002eae:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002eb0:	6960      	ldr	r0, [r4, #20]
 8002eb2:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002eb6:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002eba:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec2:	4302      	orrs	r2, r0
 8002ec4:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ec6:	680a      	ldr	r2, [r1, #0]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	db09      	blt.n	8002ee0 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e7af      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed4:	b114      	cbz	r4, 8002edc <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002ed6:	fab4 f484 	clz	r4, r4
 8002eda:	e7c7      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002edc:	2420      	movs	r4, #32
 8002ede:	e7c5      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ee0:	4951      	ldr	r1, [pc, #324]	; (8003028 <HAL_ADC_ConfigChannel+0x228>)
 8002ee2:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002ee6:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002eea:	4c50      	ldr	r4, [pc, #320]	; (800302c <HAL_ADC_ConfigChannel+0x22c>)
 8002eec:	42a2      	cmp	r2, r4
 8002eee:	d007      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ef0:	4c4f      	ldr	r4, [pc, #316]	; (8003030 <HAL_ADC_ConfigChannel+0x230>)
 8002ef2:	42a2      	cmp	r2, r4
 8002ef4:	d026      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ef6:	4c4f      	ldr	r4, [pc, #316]	; (8003034 <HAL_ADC_ConfigChannel+0x234>)
 8002ef8:	42a2      	cmp	r2, r4
 8002efa:	d032      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2000      	movs	r0, #0
 8002efe:	e797      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002f04:	d1f4      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f0a:	4847      	ldr	r0, [pc, #284]	; (8003028 <HAL_ADC_ConfigChannel+0x228>)
 8002f0c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f10:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f14:	4311      	orrs	r1, r2
 8002f16:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1a:	4a47      	ldr	r2, [pc, #284]	; (8003038 <HAL_ADC_ConfigChannel+0x238>)
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	0992      	lsrs	r2, r2, #6
 8002f20:	4946      	ldr	r1, [pc, #280]	; (800303c <HAL_ADC_ConfigChannel+0x23c>)
 8002f22:	fba1 1202 	umull	r1, r2, r1, r2
 8002f26:	0992      	lsrs	r2, r2, #6
 8002f28:	3201      	adds	r2, #1
 8002f2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002f32:	e002      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8002f34:	9a01      	ldr	r2, [sp, #4]
 8002f36:	3a01      	subs	r2, #1
 8002f38:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002f3a:	9a01      	ldr	r2, [sp, #4]
 8002f3c:	2a00      	cmp	r2, #0
 8002f3e:	d1f9      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2000      	movs	r0, #0
 8002f42:	e775      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f44:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002f48:	d1d5      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002f4e:	4836      	ldr	r0, [pc, #216]	; (8003028 <HAL_ADC_ConfigChannel+0x228>)
 8002f50:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f54:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5e:	2000      	movs	r0, #0
}
 8002f60:	e766      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f62:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002f66:	d158      	bne.n	800301a <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f6c:	482e      	ldr	r0, [pc, #184]	; (8003028 <HAL_ADC_ConfigChannel+0x228>)
 8002f6e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002f72:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002f76:	430a      	orrs	r2, r1
 8002f78:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7c:	2000      	movs	r0, #0
}
 8002f7e:	e757      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f80:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002f84:	d002      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x18c>
 8002f86:	4827      	ldr	r0, [pc, #156]	; (8003024 <HAL_ADC_ConfigChannel+0x224>)
 8002f88:	4284      	cmp	r4, r0
 8002f8a:	d106      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f8c:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002f8e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002f90:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002f94:	ea20 0004 	bic.w	r0, r0, r4
 8002f98:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f9a:	680a      	ldr	r2, [r1, #0]
 8002f9c:	2a00      	cmp	r2, #0
 8002f9e:	db01      	blt.n	8002fa4 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e745      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fa4:	4920      	ldr	r1, [pc, #128]	; (8003028 <HAL_ADC_ConfigChannel+0x228>)
 8002fa6:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002faa:	4820      	ldr	r0, [pc, #128]	; (800302c <HAL_ADC_ConfigChannel+0x22c>)
 8002fac:	4282      	cmp	r2, r0
 8002fae:	d007      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fb0:	481f      	ldr	r0, [pc, #124]	; (8003030 <HAL_ADC_ConfigChannel+0x230>)
 8002fb2:	4282      	cmp	r2, r0
 8002fb4:	d013      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb6:	481f      	ldr	r0, [pc, #124]	; (8003034 <HAL_ADC_ConfigChannel+0x234>)
 8002fb8:	4282      	cmp	r2, r0
 8002fba:	d01f      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e737      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc0:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc4:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8002fc8:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002fcc:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002fd0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fda:	2000      	movs	r0, #0
}
 8002fdc:	e728      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fde:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fe2:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8002fe6:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8002fea:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002fee:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2000      	movs	r0, #0
}
 8002ffa:	e719      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffc:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003000:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003004:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003008:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800300c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003010:	430a      	orrs	r2, r1
 8003012:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003016:	2000      	movs	r0, #0
}
 8003018:	e70a      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
 800301a:	2000      	movs	r0, #0
 800301c:	e708      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800301e:	2002      	movs	r0, #2
 8003020:	e709      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x36>
 8003022:	bf00      	nop
 8003024:	80000004 	.word	0x80000004
 8003028:	40012000 	.word	0x40012000
 800302c:	b0001000 	.word	0xb0001000
 8003030:	b8004000 	.word	0xb8004000
 8003034:	b4002000 	.word	0xb4002000
 8003038:	20000074 	.word	0x20000074
 800303c:	053e2d63 	.word	0x053e2d63

08003040 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003040:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003042:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	f012 0f04 	tst.w	r2, #4
 800304a:	d02a      	beq.n	80030a2 <ADC_ConversionStop+0x62>
 800304c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	f012 0f02 	tst.w	r2, #2
 8003054:	d107      	bne.n	8003066 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800305c:	f022 0217 	bic.w	r2, r2, #23
 8003060:	f042 0210 	orr.w	r2, r2, #16
 8003064:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003066:	f7fe fca3 	bl	80019b0 <HAL_GetTick>
 800306a:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f013 0f04 	tst.w	r3, #4
 8003074:	d013      	beq.n	800309e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003076:	f7fe fc9b 	bl	80019b0 <HAL_GetTick>
 800307a:	1b43      	subs	r3, r0, r5
 800307c:	2b02      	cmp	r3, #2
 800307e:	d9f5      	bls.n	800306c <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f013 0f04 	tst.w	r3, #4
 8003088:	d0f0      	beq.n	800306c <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800308c:	f043 0310 	orr.w	r3, r3, #16
 8003090:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800309a:	2001      	movs	r0, #1
 800309c:	e002      	b.n	80030a4 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800309e:	2000      	movs	r0, #0
 80030a0:	e000      	b.n	80030a4 <ADC_ConversionStop+0x64>
 80030a2:	2000      	movs	r0, #0
}
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080030a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030a8:	b530      	push	{r4, r5, lr}
 80030aa:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	f012 0f01 	tst.w	r2, #1
 80030b8:	d15b      	bne.n	8003172 <ADC_Enable+0xca>
 80030ba:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	4a2e      	ldr	r2, [pc, #184]	; (8003178 <ADC_Enable+0xd0>)
 80030c0:	4211      	tst	r1, r2
 80030c2:	d117      	bne.n	80030f4 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ca:	f022 0217 	bic.w	r2, r2, #23
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <ADC_Enable+0xd4>)
 80030d6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80030da:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80030de:	d019      	beq.n	8003114 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <ADC_Enable+0xd8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <ADC_Enable+0xdc>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80030f0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030f2:	e00c      	b.n	800310e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
 8003106:	e035      	b.n	8003174 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003108:	9b01      	ldr	r3, [sp, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800310e:	9b01      	ldr	r3, [sp, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f9      	bne.n	8003108 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003114:	7e63      	ldrb	r3, [r4, #25]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800311a:	2000      	movs	r0, #0
 800311c:	e02a      	b.n	8003174 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800311e:	f7fe fc47 	bl	80019b0 <HAL_GetTick>
 8003122:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f012 0f01 	tst.w	r2, #1
 800312c:	d11f      	bne.n	800316e <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	f012 0f01 	tst.w	r2, #1
 8003134:	d107      	bne.n	8003146 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800313c:	f022 0217 	bic.w	r2, r2, #23
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003146:	f7fe fc33 	bl	80019b0 <HAL_GetTick>
 800314a:	1b40      	subs	r0, r0, r5
 800314c:	2802      	cmp	r0, #2
 800314e:	d9e9      	bls.n	8003124 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f013 0f01 	tst.w	r3, #1
 8003158:	d1e4      	bne.n	8003124 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800315c:	f043 0310 	orr.w	r3, r3, #16
 8003160:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003162:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	e002      	b.n	8003174 <ADC_Enable+0xcc>
  return HAL_OK;
 800316e:	2000      	movs	r0, #0
 8003170:	e000      	b.n	8003174 <ADC_Enable+0xcc>
 8003172:	2000      	movs	r0, #0
}
 8003174:	b003      	add	sp, #12
 8003176:	bd30      	pop	{r4, r5, pc}
 8003178:	80000017 	.word	0x80000017
 800317c:	40012000 	.word	0x40012000
 8003180:	20000074 	.word	0x20000074
 8003184:	053e2d63 	.word	0x053e2d63

08003188 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003188:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f013 0f04 	tst.w	r3, #4
 8003190:	d128      	bne.n	80031e4 <HAL_ADC_Start+0x5c>
{
 8003192:	b510      	push	{r4, lr}
 8003194:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003196:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800319a:	2b01      	cmp	r3, #1
 800319c:	d024      	beq.n	80031e8 <HAL_ADC_Start+0x60>
 800319e:	2301      	movs	r3, #1
 80031a0:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80031a4:	f7ff ff80 	bl	80030a8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80031a8:	b9c0      	cbnz	r0, 80031dc <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80031aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80031ba:	2300      	movs	r3, #0
 80031bc:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031be:	6822      	ldr	r2, [r4, #0]
 80031c0:	211c      	movs	r1, #28
 80031c2:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80031c4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031c8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80031ca:	6893      	ldr	r3, [r2, #8]
 80031cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d0:	f023 0317 	bic.w	r3, r3, #23
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6093      	str	r3, [r2, #8]
}
 80031da:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80031dc:	2300      	movs	r3, #0
 80031de:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80031e2:	e7fa      	b.n	80031da <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80031e4:	2002      	movs	r0, #2
}
 80031e6:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80031e8:	2002      	movs	r0, #2
 80031ea:	e7f6      	b.n	80031da <HAL_ADC_Start+0x52>

080031ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031f0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031f2:	6893      	ldr	r3, [r2, #8]
 80031f4:	f013 0302 	ands.w	r3, r3, #2
 80031f8:	d000      	beq.n	80031fc <ADC_Disable+0x10>
 80031fa:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031fc:	6891      	ldr	r1, [r2, #8]
 80031fe:	f011 0f01 	tst.w	r1, #1
 8003202:	d039      	beq.n	8003278 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003204:	2b00      	cmp	r3, #0
 8003206:	d139      	bne.n	800327c <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003208:	6893      	ldr	r3, [r2, #8]
 800320a:	f003 0305 	and.w	r3, r3, #5
 800320e:	2b01      	cmp	r3, #1
 8003210:	d009      	beq.n	8003226 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003214:	f043 0310 	orr.w	r3, r3, #16
 8003218:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003222:	2001      	movs	r0, #1
 8003224:	e029      	b.n	800327a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003226:	6893      	ldr	r3, [r2, #8]
 8003228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322c:	f023 0317 	bic.w	r3, r3, #23
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	2203      	movs	r2, #3
 800323a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800323c:	f7fe fbb8 	bl	80019b0 <HAL_GetTick>
 8003240:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f013 0f01 	tst.w	r3, #1
 800324a:	d013      	beq.n	8003274 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800324c:	f7fe fbb0 	bl	80019b0 <HAL_GetTick>
 8003250:	1b40      	subs	r0, r0, r5
 8003252:	2802      	cmp	r0, #2
 8003254:	d9f5      	bls.n	8003242 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f013 0f01 	tst.w	r3, #1
 800325e:	d0f0      	beq.n	8003242 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003262:	f043 0310 	orr.w	r3, r3, #16
 8003266:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003268:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003270:	2001      	movs	r0, #1
 8003272:	e002      	b.n	800327a <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003274:	2000      	movs	r0, #0
 8003276:	e000      	b.n	800327a <ADC_Disable+0x8e>
 8003278:	2000      	movs	r0, #0
}
 800327a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800327c:	2000      	movs	r0, #0
 800327e:	e7fc      	b.n	800327a <ADC_Disable+0x8e>

08003280 <HAL_ADC_DeInit>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003282:	2800      	cmp	r0, #0
 8003284:	d056      	beq.n	8003334 <HAL_ADC_DeInit+0xb4>
 8003286:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003288:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003290:	f7ff fed6 	bl	8003040 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003294:	4606      	mov	r6, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d03d      	beq.n	8003316 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	6853      	ldr	r3, [r2, #4]
 800329e:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	f240 329f 	movw	r2, #927	; 0x39f
 80032ae:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80032b0:	6822      	ldr	r2, [r4, #0]
 80032b2:	68d1      	ldr	r1, [r2, #12]
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_ADC_DeInit+0xb8>)
 80032b6:	400b      	ands	r3, r1
 80032b8:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	6913      	ldr	r3, [r2, #16]
 80032be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032c2:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	6953      	ldr	r3, [r2, #20]
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	6a13      	ldr	r3, [r2, #32]
 80032d2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80032d6:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80032dc:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80032e0:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80032e6:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80032ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f0:	2500      	movs	r5, #0
 80032f2:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_ADC_DeInit+0xbc>)
 80032f6:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80032fa:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80032fe:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003302:	4620      	mov	r0, r4
 8003304:	f7fd fe14 	bl	8000f30 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003308:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800330a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 800330c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800330e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003312:	4630      	mov	r0, r6
 8003314:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff ff68 	bl	80031ec <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800331c:	4606      	mov	r6, r0
 800331e:	b908      	cbnz	r0, 8003324 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003320:	2301      	movs	r3, #1
 8003322:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003324:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003326:	6893      	ldr	r3, [r2, #8]
 8003328:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800332c:	f023 0317 	bic.w	r3, r3, #23
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e7b2      	b.n	800329a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003334:	2601      	movs	r6, #1
 8003336:	e7ec      	b.n	8003312 <HAL_ADC_DeInit+0x92>
 8003338:	833e0200 	.word	0x833e0200
 800333c:	40012000 	.word	0x40012000

08003340 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003340:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003344:	2b01      	cmp	r3, #1
 8003346:	d019      	beq.n	800337c <HAL_ADC_Stop+0x3c>
{
 8003348:	b510      	push	{r4, lr}
 800334a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800334c:	2301      	movs	r3, #1
 800334e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003352:	f7ff fe75 	bl	8003040 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003356:	b118      	cbz	r0, 8003360 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003358:	2300      	movs	r3, #0
 800335a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800335e:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff ff43 	bl	80031ec <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003366:	2800      	cmp	r0, #0
 8003368:	d1f6      	bne.n	8003358 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800336a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	65a3      	str	r3, [r4, #88]	; 0x58
 800337a:	e7ed      	b.n	8003358 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800337c:	2002      	movs	r0, #2
}
 800337e:	4770      	bx	lr

08003380 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003384:	2300      	movs	r3, #0
 8003386:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003388:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800338c:	2b01      	cmp	r3, #1
 800338e:	f000 8094 	beq.w	80034ba <HAL_ADCEx_Calibration_Start+0x13a>
 8003392:	4604      	mov	r4, r0
 8003394:	2301      	movs	r3, #1
 8003396:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800339a:	f7ff ff27 	bl	80031ec <ADC_Disable>
 800339e:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	f012 0201 	ands.w	r2, r2, #1
 80033a8:	d009      	beq.n	80033be <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ac:	f043 0310 	orr.w	r3, r3, #16
 80033b0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033b2:	2300      	movs	r3, #0
 80033b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80033b8:	4628      	mov	r0, r5
 80033ba:	b003      	add	sp, #12
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80033c0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80033c4:	f041 0102 	orr.w	r1, r1, #2
 80033c8:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80033ca:	68de      	ldr	r6, [r3, #12]
 80033cc:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80033d0:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80033d4:	0436      	lsls	r6, r6, #16
 80033d6:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80033d8:	68d9      	ldr	r1, [r3, #12]
 80033da:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80033de:	f021 0103 	bic.w	r1, r1, #3
 80033e2:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80033e4:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80033e6:	e005      	b.n	80033f4 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80033e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80033f0:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80033f2:	3201      	adds	r2, #1
 80033f4:	2a07      	cmp	r2, #7
 80033f6:	d81e      	bhi.n	8003436 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80033f8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80033fa:	688b      	ldr	r3, [r1, #8]
 80033fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003400:	f023 0317 	bic.w	r3, r3, #23
 8003404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003408:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800340a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800340c:	6899      	ldr	r1, [r3, #8]
 800340e:	2900      	cmp	r1, #0
 8003410:	daea      	bge.n	80033e8 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003412:	9b01      	ldr	r3, [sp, #4]
 8003414:	3301      	adds	r3, #1
 8003416:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800341e:	d3f4      	bcc.n	800340a <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003420:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003422:	f023 0312 	bic.w	r3, r3, #18
 8003426:	f043 0310 	orr.w	r3, r3, #16
 800342a:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 800342c:	2300      	movs	r3, #0
 800342e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003432:	2501      	movs	r5, #1
 8003434:	e7c0      	b.n	80033b8 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003436:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800343a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800343c:	688b      	ldr	r3, [r1, #8]
 800343e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003442:	f023 0317 	bic.w	r3, r3, #23
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800344c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 800344e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003452:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003456:	4302      	orrs	r2, r0
 8003458:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 800345c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800345e:	6893      	ldr	r3, [r2, #8]
 8003460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003464:	f023 0317 	bic.w	r3, r3, #23
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800346e:	f7fe fa9f 	bl	80019b0 <HAL_GetTick>
 8003472:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003474:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	f012 0f01 	tst.w	r2, #1
 800347c:	d109      	bne.n	8003492 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4316      	orrs	r6, r2
 8003482:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003484:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003490:	e78f      	b.n	80033b2 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003492:	f7fe fa8d 	bl	80019b0 <HAL_GetTick>
 8003496:	1bc3      	subs	r3, r0, r7
 8003498:	2b02      	cmp	r3, #2
 800349a:	d9eb      	bls.n	8003474 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f013 0f01 	tst.w	r3, #1
 80034a4:	d0e6      	beq.n	8003474 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80034b6:	2501      	movs	r5, #1
 80034b8:	e77e      	b.n	80033b8 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80034ba:	2502      	movs	r5, #2
 80034bc:	e77c      	b.n	80033b8 <HAL_ADCEx_Calibration_Start+0x38>
	...

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	0200      	lsls	r0, r0, #8
 80034ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80034dc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_NVIC_SetPriority+0x68>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ee:	f1c3 0c07 	rsb	ip, r3, #7
 80034f2:	f1bc 0f04 	cmp.w	ip, #4
 80034f6:	bf28      	it	cs
 80034f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fc:	f103 0e04 	add.w	lr, r3, #4
 8003500:	f1be 0f06 	cmp.w	lr, #6
 8003504:	d918      	bls.n	8003538 <HAL_NVIC_SetPriority+0x54>
 8003506:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 3eff 	mov.w	lr, #4294967295
 800350c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003510:	ea21 010c 	bic.w	r1, r1, ip
 8003514:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003516:	fa0e f303 	lsl.w	r3, lr, r3
 800351a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003520:	2800      	cmp	r0, #0
 8003522:	db0b      	blt.n	800353c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	0109      	lsls	r1, r1, #4
 8003526:	b2c9      	uxtb	r1, r1
 8003528:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800352c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003530:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003534:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003538:	2300      	movs	r3, #0
 800353a:	e7e5      	b.n	8003508 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353c:	f000 000f 	and.w	r0, r0, #15
 8003540:	0109      	lsls	r1, r1, #4
 8003542:	b2c9      	uxtb	r1, r1
 8003544:	4b02      	ldr	r3, [pc, #8]	; (8003550 <HAL_NVIC_SetPriority+0x6c>)
 8003546:	5419      	strb	r1, [r3, r0]
 8003548:	e7f4      	b.n	8003534 <HAL_NVIC_SetPriority+0x50>
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	e000ed14 	.word	0xe000ed14

08003554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003554:	2800      	cmp	r0, #0
 8003556:	db07      	blt.n	8003568 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003558:	f000 021f 	and.w	r2, r0, #31
 800355c:	0940      	lsrs	r0, r0, #5
 800355e:	2301      	movs	r3, #1
 8003560:	4093      	lsls	r3, r2
 8003562:	4a02      	ldr	r2, [pc, #8]	; (800356c <HAL_NVIC_EnableIRQ+0x18>)
 8003564:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003570:	2800      	cmp	r0, #0
 8003572:	db0c      	blt.n	800358e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003574:	f000 021f 	and.w	r2, r0, #31
 8003578:	0940      	lsrs	r0, r0, #5
 800357a:	2301      	movs	r3, #1
 800357c:	4093      	lsls	r3, r2
 800357e:	3020      	adds	r0, #32
 8003580:	4a03      	ldr	r2, [pc, #12]	; (8003590 <HAL_NVIC_DisableIRQ+0x20>)
 8003582:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800358a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100

08003594 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003596:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003598:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 800359c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80035a0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80035a2:	b124      	cbz	r4, 80035ae <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80035a6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80035aa:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035b0:	f004 0c1c 	and.w	ip, r4, #28
 80035b4:	2401      	movs	r4, #1
 80035b6:	fa04 f40c 	lsl.w	r4, r4, ip
 80035ba:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80035be:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035c2:	6804      	ldr	r4, [r0, #0]
 80035c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c6:	6883      	ldr	r3, [r0, #8]
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d005      	beq.n	80035d8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80035cc:	6803      	ldr	r3, [r0, #0]
 80035ce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80035d0:	6803      	ldr	r3, [r0, #0]
 80035d2:	60da      	str	r2, [r3, #12]
  }
}
 80035d4:	bc10      	pop	{r4}
 80035d6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80035dc:	6803      	ldr	r3, [r0, #0]
 80035de:	60d9      	str	r1, [r3, #12]
 80035e0:	e7f8      	b.n	80035d4 <DMA_SetConfig+0x40>
	...

080035e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	4a14      	ldr	r2, [pc, #80]	; (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d816      	bhi.n	800361a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80035ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80035ee:	f022 0203 	bic.w	r2, r2, #3
 80035f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80035f6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80035fa:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b08      	subs	r3, #8
 8003600:	4a0e      	ldr	r2, [pc, #56]	; (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800360a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2201      	movs	r2, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003618:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800361a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800361c:	f022 0103 	bic.w	r1, r2, #3
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003622:	440a      	add	r2, r1
 8003624:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3b08      	subs	r3, #8
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	3307      	adds	r3, #7
 8003634:	e7e8      	b.n	8003608 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003636:	bf00      	nop
 8003638:	40020407 	.word	0x40020407
 800363c:	cccccccd 	.word	0xcccccccd
 8003640:	40020880 	.word	0x40020880
 8003644:	4002081c 	.word	0x4002081c

08003648 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003648:	6843      	ldr	r3, [r0, #4]
 800364a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003650:	441a      	add	r2, r3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003656:	4a06      	ldr	r2, [pc, #24]	; (8003670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003658:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800365a:	3b01      	subs	r3, #1
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2201      	movs	r2, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	1000823f 	.word	0x1000823f
 8003670:	40020940 	.word	0x40020940

08003674 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003674:	2800      	cmp	r0, #0
 8003676:	d060      	beq.n	800373a <HAL_DMA_Init+0xc6>
{
 8003678:	b510      	push	{r4, lr}
 800367a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800367c:	6802      	ldr	r2, [r0, #0]
 800367e:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_DMA_Init+0xcc>)
 8003680:	429a      	cmp	r2, r3
 8003682:	d842      	bhi.n	800370a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_DMA_Init+0xd0>)
 8003686:	4413      	add	r3, r2
 8003688:	492f      	ldr	r1, [pc, #188]	; (8003748 <HAL_DMA_Init+0xd4>)
 800368a:	fba1 1303 	umull	r1, r3, r1, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003694:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_DMA_Init+0xd8>)
 8003696:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	2302      	movs	r3, #2
 800369a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036aa:	6821      	ldr	r1, [r4, #0]
 80036ac:	680a      	ldr	r2, [r1, #0]
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	68e0      	ldr	r0, [r4, #12]
 80036b2:	4303      	orrs	r3, r0
 80036b4:	6920      	ldr	r0, [r4, #16]
 80036b6:	4303      	orrs	r3, r0
 80036b8:	6960      	ldr	r0, [r4, #20]
 80036ba:	4303      	orrs	r3, r0
 80036bc:	69a0      	ldr	r0, [r4, #24]
 80036be:	4303      	orrs	r3, r0
 80036c0:	69e0      	ldr	r0, [r4, #28]
 80036c2:	4303      	orrs	r3, r0
 80036c4:	6a20      	ldr	r0, [r4, #32]
 80036c6:	4303      	orrs	r3, r0
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff89 	bl	80035e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036d2:	68a3      	ldr	r3, [r4, #8]
 80036d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80036e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036e8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036ea:	6863      	ldr	r3, [r4, #4]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d919      	bls.n	8003726 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80036f6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036f8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fa:	2000      	movs	r0, #0
 80036fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80036fe:	2301      	movs	r3, #1
 8003700:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003704:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003708:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_DMA_Init+0xdc>)
 800370c:	4413      	add	r3, r2
 800370e:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_DMA_Init+0xd4>)
 8003710:	fba1 1303 	umull	r1, r3, r1, r3
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <HAL_DMA_Init+0xe0>)
 800371c:	6403      	str	r3, [r0, #64]	; 0x40
 800371e:	e7bb      	b.n	8003698 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003720:	2300      	movs	r3, #0
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	e7d9      	b.n	80036da <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff ff8e 	bl	8003648 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800372c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003734:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e7df      	b.n	80036fa <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40020407 	.word	0x40020407
 8003744:	bffdfff8 	.word	0xbffdfff8
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	40020000 	.word	0x40020000
 8003750:	bffdfbf8 	.word	0xbffdfbf8
 8003754:	40020400 	.word	0x40020400

08003758 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003758:	2800      	cmp	r0, #0
 800375a:	d04b      	beq.n	80037f4 <HAL_DMA_DeInit+0x9c>
{
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003760:	6802      	ldr	r2, [r0, #0]
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800376a:	6802      	ldr	r2, [r0, #0]
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_DMA_DeInit+0xa0>)
 800376e:	429a      	cmp	r2, r3
 8003770:	d82c      	bhi.n	80037cc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_DMA_DeInit+0xa4>)
 8003774:	4413      	add	r3, r2
 8003776:	4922      	ldr	r1, [pc, #136]	; (8003800 <HAL_DMA_DeInit+0xa8>)
 8003778:	fba1 1303 	umull	r1, r3, r1, r3
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_DMA_DeInit+0xac>)
 8003784:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003786:	2500      	movs	r5, #0
 8003788:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800378a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800378c:	f003 021c 	and.w	r2, r3, #28
 8003790:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003792:	2301      	movs	r3, #1
 8003794:	4093      	lsls	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ff23 	bl	80035e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800379e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037a0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037a6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d918      	bls.n	80037e2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80037b0:	2000      	movs	r0, #0
 80037b2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80037b4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80037b8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80037ba:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80037bc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80037be:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80037c2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80037c6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80037ca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_DMA_DeInit+0xb0>)
 80037ce:	4413      	add	r3, r2
 80037d0:	490b      	ldr	r1, [pc, #44]	; (8003800 <HAL_DMA_DeInit+0xa8>)
 80037d2:	fba1 1303 	umull	r1, r3, r1, r3
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_DMA_DeInit+0xb4>)
 80037de:	6403      	str	r3, [r0, #64]	; 0x40
 80037e0:	e7d1      	b.n	8003786 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7ff ff30 	bl	8003648 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037ea:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e7dd      	b.n	80037b0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
}
 80037f6:	4770      	bx	lr
 80037f8:	40020407 	.word	0x40020407
 80037fc:	bffdfff8 	.word	0xbffdfff8
 8003800:	cccccccd 	.word	0xcccccccd
 8003804:	40020000 	.word	0x40020000
 8003808:	bffdfbf8 	.word	0xbffdfbf8
 800380c:	40020400 	.word	0x40020400

08003810 <HAL_DMA_Start_IT>:
{
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003814:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003818:	2801      	cmp	r0, #1
 800381a:	d043      	beq.n	80038a4 <HAL_DMA_Start_IT+0x94>
 800381c:	2001      	movs	r0, #1
 800381e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003822:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003826:	b2c0      	uxtb	r0, r0
 8003828:	2801      	cmp	r0, #1
 800382a:	d006      	beq.n	800383a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003830:	2300      	movs	r3, #0
 8003832:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003836:	2001      	movs	r0, #1
}
 8003838:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800383a:	2002      	movs	r0, #2
 800383c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003840:	2000      	movs	r0, #0
 8003842:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003844:	6825      	ldr	r5, [r4, #0]
 8003846:	6828      	ldr	r0, [r5, #0]
 8003848:	f020 0001 	bic.w	r0, r0, #1
 800384c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fea0 	bl	8003594 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003854:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003856:	b1d3      	cbz	r3, 800388e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	f043 030e 	orr.w	r3, r3, #14
 8003860:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800386a:	d003      	beq.n	8003874 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003872:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003874:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003876:	b11b      	cbz	r3, 8003880 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003880:	6822      	ldr	r2, [r4, #0]
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2000      	movs	r0, #0
 800388c:	e7d4      	b.n	8003838 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	f023 0304 	bic.w	r3, r3, #4
 8003896:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003898:	6822      	ldr	r2, [r4, #0]
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	f043 030a 	orr.w	r3, r3, #10
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e7de      	b.n	8003862 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80038a4:	2002      	movs	r0, #2
 80038a6:	e7c7      	b.n	8003838 <HAL_DMA_Start_IT+0x28>

080038a8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80038a8:	4603      	mov	r3, r0
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d034      	beq.n	8003918 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ae:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	2a02      	cmp	r2, #2
 80038b6:	d006      	beq.n	80038c6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b8:	2204      	movs	r2, #4
 80038ba:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80038bc:	2200      	movs	r2, #0
 80038be:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80038c2:	2001      	movs	r0, #1
 80038c4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c6:	6801      	ldr	r1, [r0, #0]
 80038c8:	680a      	ldr	r2, [r1, #0]
 80038ca:	f022 020e 	bic.w	r2, r2, #14
 80038ce:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80038d2:	680a      	ldr	r2, [r1, #0]
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80038da:	6801      	ldr	r1, [r0, #0]
 80038dc:	680a      	ldr	r2, [r1, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80038e6:	f002 011c 	and.w	r1, r2, #28
 80038ea:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80038ec:	2201      	movs	r2, #1
 80038ee:	408a      	lsls	r2, r1
 80038f0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038f6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80038f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fa:	b132      	cbz	r2, 800390a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038fc:	6811      	ldr	r1, [r2, #0]
 80038fe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003902:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003906:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003908:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003910:	2000      	movs	r0, #0
 8003912:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003916:	4770      	bx	lr
    return HAL_ERROR;
 8003918:	2001      	movs	r0, #1
}
 800391a:	4770      	bx	lr

0800391c <HAL_DMA_Abort_IT>:
{
 800391c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800391e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d003      	beq.n	8003930 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	2304      	movs	r3, #4
 800392a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800392c:	2001      	movs	r0, #1
}
 800392e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	f023 030e 	bic.w	r3, r3, #14
 8003938:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800393a:	6802      	ldr	r2, [r0, #0]
 800393c:	6813      	ldr	r3, [r2, #0]
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003944:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800394e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003950:	f003 021c 	and.w	r2, r3, #28
 8003954:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003956:	2301      	movs	r3, #1
 8003958:	4093      	lsls	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800395c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800395e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003960:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003962:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003964:	b133      	cbz	r3, 8003974 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800396c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003970:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003972:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	2301      	movs	r3, #1
 8003976:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800397a:	2300      	movs	r3, #0
 800397c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003980:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003982:	b113      	cbz	r3, 800398a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003984:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2000      	movs	r0, #0
 8003988:	e7d1      	b.n	800392e <HAL_DMA_Abort_IT+0x12>
 800398a:	2000      	movs	r0, #0
 800398c:	e7cf      	b.n	800392e <HAL_DMA_Abort_IT+0x12>
	...

08003990 <HAL_DMA_IRQHandler>:
{
 8003990:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003992:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003994:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003996:	6804      	ldr	r4, [r0, #0]
 8003998:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800399a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800399c:	f003 031c 	and.w	r3, r3, #28
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	420a      	tst	r2, r1
 80039a6:	d015      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x44>
 80039a8:	f015 0f04 	tst.w	r5, #4
 80039ac:	d012      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	f013 0f20 	tst.w	r3, #32
 80039b4:	d103      	bne.n	80039be <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80039c0:	f003 021c 	and.w	r2, r3, #28
 80039c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80039c6:	2304      	movs	r3, #4
 80039c8:	4093      	lsls	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80039cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80039ce:	b103      	cbz	r3, 80039d2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80039d0:	4798      	blx	r3
}
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80039d4:	2202      	movs	r2, #2
 80039d6:	409a      	lsls	r2, r3
 80039d8:	420a      	tst	r2, r1
 80039da:	d028      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x9e>
 80039dc:	f015 0f02 	tst.w	r5, #2
 80039e0:	d025      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	f013 0f20 	tst.w	r3, #32
 80039e8:	d106      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f023 030a 	bic.w	r3, r3, #10
 80039f0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039f8:	6802      	ldr	r2, [r0, #0]
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_DMA_IRQHandler+0xdc>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d90e      	bls.n	8003a1e <HAL_DMA_IRQHandler+0x8e>
 8003a00:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a02:	f003 021c 	and.w	r2, r3, #28
 8003a06:	2302      	movs	r3, #2
 8003a08:	4093      	lsls	r3, r2
 8003a0a:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_DMA_IRQHandler+0xe0>)
 8003a0c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003a14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0db      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003a1a:	4798      	blx	r3
 8003a1c:	e7d9      	b.n	80039d2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a20:	f003 021c 	and.w	r2, r3, #28
 8003a24:	2302      	movs	r3, #2
 8003a26:	4093      	lsls	r3, r2
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_DMA_IRQHandler+0xe4>)
 8003a2a:	6053      	str	r3, [r2, #4]
 8003a2c:	e7ef      	b.n	8003a0e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a2e:	2208      	movs	r2, #8
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	420b      	tst	r3, r1
 8003a36:	d0cc      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x42>
 8003a38:	f015 0f08 	tst.w	r5, #8
 8003a3c:	d0c9      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f023 030e 	bic.w	r3, r3, #14
 8003a44:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a48:	f003 031c 	and.w	r3, r3, #28
 8003a4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a4e:	2201      	movs	r2, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a56:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003a58:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003a62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0b4      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003a68:	4798      	blx	r3
  return;
 8003a6a:	e7b2      	b.n	80039d2 <HAL_DMA_IRQHandler+0x42>
 8003a6c:	40020080 	.word	0x40020080
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020000 	.word	0x40020000

08003a78 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003a78:	b178      	cbz	r0, 8003a9a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003a7a:	6803      	ldr	r3, [r0, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003a7e:	f011 0f10 	tst.w	r1, #16
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003a8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003a8e:	601a      	str	r2, [r3, #0]
  return status;
 8003a90:	2000      	movs	r0, #0
 8003a92:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003a94:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003a98:	e7f9      	b.n	8003a8e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003a9a:	2001      	movs	r0, #1
}
 8003a9c:	4770      	bx	lr
	...

08003aa0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003aa0:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003aa2:	4c05      	ldr	r4, [pc, #20]	; (8003ab8 <FLASH_Program_DoubleWord+0x18>)
 8003aa4:	6961      	ldr	r1, [r4, #20]
 8003aa6:	f041 0101 	orr.w	r1, r1, #1
 8003aaa:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003aac:	6002      	str	r2, [r0, #0]
 8003aae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003ab2:	6043      	str	r3, [r0, #4]
}
 8003ab4:	bc10      	pop	{r4}
 8003ab6:	4770      	bx	lr
 8003ab8:	58004000 	.word	0x58004000

08003abc <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003abc:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <FLASH_Program_Fast+0x34>)
 8003abe:	6953      	ldr	r3, [r2, #20]
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003aca:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003acc:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003ace:	f851 2b04 	ldr.w	r2, [r1], #4
 8003ad2:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003ad6:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003ad8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003adc:	d1f7      	bne.n	8003ace <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <FLASH_Program_Fast+0x34>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ae6:	d1fa      	bne.n	8003ade <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	58004000 	.word	0x58004000

08003af4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_FLASH_Unlock+0x28>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	db01      	blt.n	8003b00 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2000      	movs	r0, #0
 8003afe:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_FLASH_Unlock+0x28>)
 8003b02:	4a07      	ldr	r2, [pc, #28]	; (8003b20 <HAL_FLASH_Unlock+0x2c>)
 8003b04:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b06:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003b0a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db01      	blt.n	8003b16 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2000      	movs	r0, #0
 8003b14:	4770      	bx	lr
      status = HAL_ERROR;
 8003b16:	2001      	movs	r0, #1
}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	58004000 	.word	0x58004000
 8003b20:	45670123 	.word	0x45670123

08003b24 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_FLASH_Lock+0x18>)
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b2c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db01      	blt.n	8003b38 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
}
 8003b36:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2000      	movs	r0, #0
 8003b3a:	4770      	bx	lr
 8003b3c:	58004000 	.word	0x58004000

08003b40 <FLASH_WaitForLastOperation>:
{
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7fd ff34 	bl	80019b0 <HAL_GetTick>
 8003b48:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003b4a:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <FLASH_WaitForLastOperation+0x64>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b52:	d006      	beq.n	8003b62 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003b54:	f7fd ff2c 	bl	80019b0 <HAL_GetTick>
 8003b58:	1b00      	subs	r0, r0, r4
 8003b5a:	42a8      	cmp	r0, r5
 8003b5c:	d3f5      	bcc.n	8003b4a <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
}
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <FLASH_WaitForLastOperation+0x64>)
 8003b64:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003b66:	f013 0f01 	tst.w	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <FLASH_WaitForLastOperation+0x64>)
 8003b6e:	2101      	movs	r1, #1
 8003b70:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003b72:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003b76:	4013      	ands	r3, r2
 8003b78:	d001      	beq.n	8003b7e <FLASH_WaitForLastOperation+0x3e>
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <FLASH_WaitForLastOperation+0x64>)
 8003b7c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003b7e:	b95b      	cbnz	r3, 8003b98 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <FLASH_WaitForLastOperation+0x64>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003b88:	d00a      	beq.n	8003ba0 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003b8a:	f7fd ff11 	bl	80019b0 <HAL_GetTick>
 8003b8e:	1b00      	subs	r0, r0, r4
 8003b90:	42a8      	cmp	r0, r5
 8003b92:	d3f5      	bcc.n	8003b80 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003b94:	2003      	movs	r0, #3
 8003b96:	e7e3      	b.n	8003b60 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003b98:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <FLASH_WaitForLastOperation+0x68>)
 8003b9a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	e7df      	b.n	8003b60 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	e7dd      	b.n	8003b60 <FLASH_WaitForLastOperation+0x20>
 8003ba4:	58004000 	.word	0x58004000
 8003ba8:	20000464 	.word	0x20000464

08003bac <HAL_FLASH_Program>:
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_FLASH_Program+0x5c>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d025      	beq.n	8003c04 <HAL_FLASH_Program+0x58>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	460d      	mov	r5, r1
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_FLASH_Program+0x5c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bcc:	f7ff ffb8 	bl	8003b40 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003bd0:	b970      	cbnz	r0, 8003bf0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003bd2:	2c01      	cmp	r4, #1
 8003bd4:	d010      	beq.n	8003bf8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f7ff ff6f 	bl	8003abc <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be2:	f7ff ffad 	bl	8003b40 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_FLASH_Program+0x60>)
 8003be8:	6953      	ldr	r3, [r2, #20]
 8003bea:	ea23 0404 	bic.w	r4, r3, r4
 8003bee:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_FLASH_Program+0x5c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
}
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f7ff ff4f 	bl	8003aa0 <FLASH_Program_DoubleWord>
 8003c02:	e7ec      	b.n	8003bde <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003c04:	2002      	movs	r0, #2
 8003c06:	e7f6      	b.n	8003bf6 <HAL_FLASH_Program+0x4a>
 8003c08:	20000464 	.word	0x20000464
 8003c0c:	58004000 	.word	0x58004000

08003c10 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <FLASH_MassErase+0x10>)
 8003c12:	6953      	ldr	r3, [r2, #20]
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6153      	str	r3, [r2, #20]
#endif
}
 8003c1e:	4770      	bx	lr
 8003c20:	58004000 	.word	0x58004000

08003c24 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003c24:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <FLASH_FlushCaches+0x64>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d006      	beq.n	8003c3e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003c30:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <FLASH_FlushCaches+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d012      	beq.n	8003c62 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003c3c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <FLASH_FlushCaches+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c56:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e7e6      	b.n	8003c30 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <FLASH_FlushCaches+0x64>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c7a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	e7da      	b.n	8003c3c <FLASH_FlushCaches+0x18>
 8003c86:	bf00      	nop
 8003c88:	58004000 	.word	0x58004000

08003c8c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <FLASH_AcknowledgePageErase+0x10>)
 8003c8e:	6953      	ldr	r3, [r2, #20]
 8003c90:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003c94:	f023 0302 	bic.w	r3, r3, #2
 8003c98:	6153      	str	r3, [r2, #20]
#endif
}
 8003c9a:	4770      	bx	lr
 8003c9c:	58004000 	.word	0x58004000

08003ca0 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003ca0:	4a05      	ldr	r2, [pc, #20]	; (8003cb8 <FLASH_PageErase+0x18>)
 8003ca2:	6953      	ldr	r3, [r2, #20]
 8003ca4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003ca8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003cac:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003cb0:	f040 0002 	orr.w	r0, r0, #2
 8003cb4:	6150      	str	r0, [r2, #20]
}
 8003cb6:	4770      	bx	lr
 8003cb8:	58004000 	.word	0x58004000

08003cbc <HAL_FLASHEx_Erase>:
{
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_FLASHEx_Erase+0x7c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d035      	beq.n	8003d32 <HAL_FLASHEx_Erase+0x76>
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_FLASHEx_Erase+0x7c>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cd8:	f7ff ff32 	bl	8003b40 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003cdc:	4606      	mov	r6, r0
 8003cde:	bb18      	cbnz	r0, 8003d28 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d013      	beq.n	8003d0e <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003cec:	686c      	ldr	r4, [r5, #4]
 8003cee:	686b      	ldr	r3, [r5, #4]
 8003cf0:	68aa      	ldr	r2, [r5, #8]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d913      	bls.n	8003d20 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff ffd1 	bl	8003ca0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d02:	f7ff ff1d 	bl	8003b40 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003d06:	4606      	mov	r6, r0
 8003d08:	b948      	cbnz	r0, 8003d1e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	e7ef      	b.n	8003cee <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003d0e:	f7ff ff7f 	bl	8003c10 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d16:	f7ff ff13 	bl	8003b40 <FLASH_WaitForLastOperation>
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	e002      	b.n	8003d24 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003d1e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003d20:	f7ff ffb4 	bl	8003c8c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003d24:	f7ff ff7e 	bl	8003c24 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_FLASHEx_Erase+0x7c>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
}
 8003d2e:	4630      	mov	r0, r6
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003d32:	2602      	movs	r6, #2
 8003d34:	e7fb      	b.n	8003d2e <HAL_FLASHEx_Erase+0x72>
 8003d36:	bf00      	nop
 8003d38:	20000464 	.word	0x20000464

08003d3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003d3e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d40:	e069      	b.n	8003e16 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d42:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d44:	005e      	lsls	r6, r3, #1
 8003d46:	2403      	movs	r4, #3
 8003d48:	40b4      	lsls	r4, r6
 8003d4a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4e:	68cc      	ldr	r4, [r1, #12]
 8003d50:	40b4      	lsls	r4, r6
 8003d52:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003d54:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d56:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d58:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d5c:	684c      	ldr	r4, [r1, #4]
 8003d5e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003d62:	409c      	lsls	r4, r3
 8003d64:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003d68:	6044      	str	r4, [r0, #4]
 8003d6a:	e065      	b.n	8003e38 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6c:	08dd      	lsrs	r5, r3, #3
 8003d6e:	3508      	adds	r5, #8
 8003d70:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d74:	f003 0407 	and.w	r4, r3, #7
 8003d78:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d7c:	240f      	movs	r4, #15
 8003d7e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d82:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d86:	690c      	ldr	r4, [r1, #16]
 8003d88:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d8c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003d90:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003d94:	e067      	b.n	8003e66 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d96:	2402      	movs	r4, #2
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x60>
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003da0:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da2:	f10c 0c02 	add.w	ip, ip, #2
 8003da6:	4d4b      	ldr	r5, [pc, #300]	; (8003ed4 <HAL_GPIO_Init+0x198>)
 8003da8:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dac:	4c4a      	ldr	r4, [pc, #296]	; (8003ed8 <HAL_GPIO_Init+0x19c>)
 8003dae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003db0:	43d4      	mvns	r4, r2
 8003db2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003db6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003dba:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003dbe:	d001      	beq.n	8003dc4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003dc0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003dc4:	4d44      	ldr	r5, [pc, #272]	; (8003ed8 <HAL_GPIO_Init+0x19c>)
 8003dc6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003dc8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003dca:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dce:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003dd2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003dd6:	d001      	beq.n	8003ddc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003dd8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003ddc:	4d3e      	ldr	r5, [pc, #248]	; (8003ed8 <HAL_GPIO_Init+0x19c>)
 8003dde:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003de0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003de4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003de8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003dec:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003df0:	d001      	beq.n	8003df6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003df2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003df6:	4d38      	ldr	r5, [pc, #224]	; (8003ed8 <HAL_GPIO_Init+0x19c>)
 8003df8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003dfc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e00:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e02:	684e      	ldr	r6, [r1, #4]
 8003e04:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003e08:	d001      	beq.n	8003e0e <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003e0a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003e0e:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_GPIO_Init+0x19c>)
 8003e10:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003e14:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	680a      	ldr	r2, [r1, #0]
 8003e18:	fa32 f403 	lsrs.w	r4, r2, r3
 8003e1c:	d058      	beq.n	8003ed0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e1e:	f04f 0c01 	mov.w	ip, #1
 8003e22:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003e26:	ea1c 0202 	ands.w	r2, ip, r2
 8003e2a:	d0f3      	beq.n	8003e14 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e2c:	684c      	ldr	r4, [r1, #4]
 8003e2e:	f004 0403 	and.w	r4, r4, #3
 8003e32:	3c01      	subs	r4, #1
 8003e34:	2c01      	cmp	r4, #1
 8003e36:	d984      	bls.n	8003d42 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e38:	684c      	ldr	r4, [r1, #4]
 8003e3a:	f004 0403 	and.w	r4, r4, #3
 8003e3e:	2c03      	cmp	r4, #3
 8003e40:	d00c      	beq.n	8003e5c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003e42:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e44:	005d      	lsls	r5, r3, #1
 8003e46:	f04f 0c03 	mov.w	ip, #3
 8003e4a:	fa0c fc05 	lsl.w	ip, ip, r5
 8003e4e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e52:	688c      	ldr	r4, [r1, #8]
 8003e54:	40ac      	lsls	r4, r5
 8003e56:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003e5a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5c:	684c      	ldr	r4, [r1, #4]
 8003e5e:	f004 0403 	and.w	r4, r4, #3
 8003e62:	2c02      	cmp	r4, #2
 8003e64:	d082      	beq.n	8003d6c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003e66:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e68:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003e6c:	f04f 0c03 	mov.w	ip, #3
 8003e70:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003e74:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e78:	684c      	ldr	r4, [r1, #4]
 8003e7a:	f004 0403 	and.w	r4, r4, #3
 8003e7e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e82:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003e86:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e88:	684c      	ldr	r4, [r1, #4]
 8003e8a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003e8e:	d0c1      	beq.n	8003e14 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e90:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003e94:	f10c 0502 	add.w	r5, ip, #2
 8003e98:	4c0e      	ldr	r4, [pc, #56]	; (8003ed4 <HAL_GPIO_Init+0x198>)
 8003e9a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003e9e:	f003 0403 	and.w	r4, r3, #3
 8003ea2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003ea6:	2407      	movs	r4, #7
 8003ea8:	fa04 f40e 	lsl.w	r4, r4, lr
 8003eac:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eb0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003eb4:	f43f af71 	beq.w	8003d9a <HAL_GPIO_Init+0x5e>
 8003eb8:	4c08      	ldr	r4, [pc, #32]	; (8003edc <HAL_GPIO_Init+0x1a0>)
 8003eba:	42a0      	cmp	r0, r4
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_Init+0x190>
 8003ebe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ec2:	42a0      	cmp	r0, r4
 8003ec4:	f43f af67 	beq.w	8003d96 <HAL_GPIO_Init+0x5a>
 8003ec8:	2407      	movs	r4, #7
 8003eca:	e767      	b.n	8003d9c <HAL_GPIO_Init+0x60>
 8003ecc:	2401      	movs	r4, #1
 8003ece:	e765      	b.n	8003d9c <HAL_GPIO_Init+0x60>
  }
}
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	58000800 	.word	0x58000800
 8003edc:	48000400 	.word	0x48000400

08003ee0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003ee0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ee2:	fa31 f203 	lsrs.w	r2, r1, r3
 8003ee6:	d071      	beq.n	8003fcc <HAL_GPIO_DeInit+0xec>
{
 8003ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eea:	e02e      	b.n	8003f4a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003eec:	2502      	movs	r5, #2
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003ef6:	45a4      	cmp	ip, r4
 8003ef8:	d049      	beq.n	8003f8e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003efa:	6804      	ldr	r4, [r0, #0]
 8003efc:	005d      	lsls	r5, r3, #1
 8003efe:	f04f 0c03 	mov.w	ip, #3
 8003f02:	fa0c fc05 	lsl.w	ip, ip, r5
 8003f06:	ea44 040c 	orr.w	r4, r4, ip
 8003f0a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003f0c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003f10:	f10e 0e08 	add.w	lr, lr, #8
 8003f14:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003f18:	f003 0507 	and.w	r5, r3, #7
 8003f1c:	00ae      	lsls	r6, r5, #2
 8003f1e:	250f      	movs	r5, #15
 8003f20:	40b5      	lsls	r5, r6
 8003f22:	ea24 0405 	bic.w	r4, r4, r5
 8003f26:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f2a:	6884      	ldr	r4, [r0, #8]
 8003f2c:	ea24 040c 	bic.w	r4, r4, ip
 8003f30:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f32:	6844      	ldr	r4, [r0, #4]
 8003f34:	ea24 0202 	bic.w	r2, r4, r2
 8003f38:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f3a:	68c2      	ldr	r2, [r0, #12]
 8003f3c:	ea22 020c 	bic.w	r2, r2, ip
 8003f40:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003f42:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003f44:	fa31 f203 	lsrs.w	r2, r1, r3
 8003f48:	d03f      	beq.n	8003fca <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003f4e:	ea12 0701 	ands.w	r7, r2, r1
 8003f52:	d0f6      	beq.n	8003f42 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f54:	089e      	lsrs	r6, r3, #2
 8003f56:	1cb5      	adds	r5, r6, #2
 8003f58:	4c1d      	ldr	r4, [pc, #116]	; (8003fd0 <HAL_GPIO_DeInit+0xf0>)
 8003f5a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003f5e:	f003 0c03 	and.w	ip, r3, #3
 8003f62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f66:	f04f 0e07 	mov.w	lr, #7
 8003f6a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003f6e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f72:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f76:	d0bb      	beq.n	8003ef0 <HAL_GPIO_DeInit+0x10>
 8003f78:	4d16      	ldr	r5, [pc, #88]	; (8003fd4 <HAL_GPIO_DeInit+0xf4>)
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	d005      	beq.n	8003f8a <HAL_GPIO_DeInit+0xaa>
 8003f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f82:	42a8      	cmp	r0, r5
 8003f84:	d0b2      	beq.n	8003eec <HAL_GPIO_DeInit+0xc>
 8003f86:	2507      	movs	r5, #7
 8003f88:	e7b3      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
 8003f8a:	2501      	movs	r5, #1
 8003f8c:	e7b1      	b.n	8003ef2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003f8e:	4c12      	ldr	r4, [pc, #72]	; (8003fd8 <HAL_GPIO_DeInit+0xf8>)
 8003f90:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8003f94:	ea25 0507 	bic.w	r5, r5, r7
 8003f98:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003f9c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8003fa0:	ea25 0507 	bic.w	r5, r5, r7
 8003fa4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	ea25 0507 	bic.w	r5, r5, r7
 8003fae:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003fb0:	6865      	ldr	r5, [r4, #4]
 8003fb2:	ea25 0707 	bic.w	r7, r5, r7
 8003fb6:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003fb8:	4d05      	ldr	r5, [pc, #20]	; (8003fd0 <HAL_GPIO_DeInit+0xf0>)
 8003fba:	3602      	adds	r6, #2
 8003fbc:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003fc0:	ea24 040e 	bic.w	r4, r4, lr
 8003fc4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003fc8:	e797      	b.n	8003efa <HAL_GPIO_DeInit+0x1a>
  }
}
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	58000800 	.word	0x58000800

08003fdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	b10a      	cbz	r2, 8003fe2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fde:	6181      	str	r1, [r0, #24]
 8003fe0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fe2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fe6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fe8:	ea01 0203 	and.w	r2, r1, r3
 8003fec:	ea21 0103 	bic.w	r1, r1, r3
 8003ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003ff4:	6181      	str	r1, [r0, #24]
}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ff8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4203      	tst	r3, r0
 8004000:	d100      	bne.n	8004004 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004002:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004004:	4b02      	ldr	r3, [pc, #8]	; (8004010 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004006:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004008:	f7fe fc54 	bl	80028b4 <HAL_GPIO_EXTI_Callback>
}
 800400c:	e7f9      	b.n	8004002 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800400e:	bf00      	nop
 8004010:	58000800 	.word	0x58000800

08004014 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004014:	4a02      	ldr	r2, [pc, #8]	; (8004020 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]
}
 800401e:	4770      	bx	lr
 8004020:	58000400 	.word	0x58000400

08004024 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004024:	b510      	push	{r4, lr}
 8004026:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004028:	b9a0      	cbnz	r0, 8004054 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_PWR_EnterSLEEPMode+0x44>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004032:	d10a      	bne.n	800404a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004034:	4a0d      	ldr	r2, [pc, #52]	; (800406c <HAL_PWR_EnterSLEEPMode+0x48>)
 8004036:	6913      	ldr	r3, [r2, #16]
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800403e:	2c01      	cmp	r4, #1
 8004040:	d010      	beq.n	8004064 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004042:	bf40      	sev
    __WFE();
 8004044:	bf20      	wfe
    __WFE();
 8004046:	bf20      	wfe
  }
}
 8004048:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800404a:	f000 f821 	bl	8004090 <HAL_PWREx_DisableLowPowerRunMode>
 800404e:	2800      	cmp	r0, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_PWR_EnterSLEEPMode+0x10>
 8004052:	e7f9      	b.n	8004048 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f413 7f00 	tst.w	r3, #512	; 0x200
 800405c:	d1ea      	bne.n	8004034 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800405e:	f000 f80f 	bl	8004080 <HAL_PWREx_EnableLowPowerRunMode>
 8004062:	e7e7      	b.n	8004034 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004064:	bf30      	wfi
 8004066:	e7ef      	b.n	8004048 <HAL_PWR_EnterSLEEPMode+0x24>
 8004068:	58000400 	.word	0x58000400
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <HAL_PWREx_GetVoltageRange+0xc>)
 8004072:	6818      	ldr	r0, [r3, #0]
}
 8004074:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	58000400 	.word	0x58000400

08004080 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004080:	4a02      	ldr	r2, [pc, #8]	; (800408c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	4770      	bx	lr
 800408c:	58000400 	.word	0x58000400

08004090 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004090:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004098:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2232      	movs	r2, #50	; 0x32
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80040ac:	e000      	b.n	80040b0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80040ae:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80040b2:	6952      	ldr	r2, [r2, #20]
 80040b4:	f412 7f00 	tst.w	r2, #512	; 0x200
 80040b8:	d001      	beq.n	80040be <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f7      	bne.n	80040ae <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040c6:	d101      	bne.n	80040cc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80040c8:	2000      	movs	r0, #0
 80040ca:	4770      	bx	lr
    return HAL_TIMEOUT;
 80040cc:	2003      	movs	r0, #3
}
 80040ce:	4770      	bx	lr
 80040d0:	58000400 	.word	0x58000400
 80040d4:	20000074 	.word	0x20000074
 80040d8:	431bde83 	.word	0x431bde83

080040dc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	f023 0307 	bic.w	r3, r3, #7
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80040ec:	6913      	ldr	r3, [r2, #16]
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80040f4:	2801      	cmp	r0, #1
 80040f6:	d008      	beq.n	800410a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040f8:	bf40      	sev
    __WFE();
 80040fa:	bf20      	wfe
    __WFE();
 80040fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040fe:	4a05      	ldr	r2, [pc, #20]	; (8004114 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004100:	6913      	ldr	r3, [r2, #16]
 8004102:	f023 0304 	bic.w	r3, r3, #4
 8004106:	6113      	str	r3, [r2, #16]
}
 8004108:	4770      	bx	lr
    __WFI();
 800410a:	bf30      	wfi
 800410c:	e7f7      	b.n	80040fe <HAL_PWREx_EnterSTOP2Mode+0x22>
 800410e:	bf00      	nop
 8004110:	58000400 	.word	0x58000400
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004118:	b530      	push	{r4, r5, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	4604      	mov	r4, r0
 800411e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <RCC_SetFlashLatency+0xb4>)
 8004122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004126:	9006      	str	r0, [sp, #24]
 8004128:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800412c:	f103 0208 	add.w	r2, r3, #8
 8004130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004134:	9004      	str	r0, [sp, #16]
 8004136:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800413a:	ad01      	add	r5, sp, #4
 800413c:	3310      	adds	r3, #16
 800413e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004142:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004146:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800414a:	d007      	beq.n	800415c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800414c:	2300      	movs	r3, #0
 800414e:	e014      	b.n	800417a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004150:	aa08      	add	r2, sp, #32
 8004152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004156:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800415a:	e01e      	b.n	800419a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800415c:	2300      	movs	r3, #0
 800415e:	2b02      	cmp	r3, #2
 8004160:	d808      	bhi.n	8004174 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004162:	aa08      	add	r2, sp, #32
 8004164:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004168:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800416c:	42a2      	cmp	r2, r4
 800416e:	d2ef      	bcs.n	8004150 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004170:	3301      	adds	r3, #1
 8004172:	e7f4      	b.n	800415e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004174:	2500      	movs	r5, #0
 8004176:	e010      	b.n	800419a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004178:	3301      	adds	r3, #1
 800417a:	2b02      	cmp	r3, #2
 800417c:	d80c      	bhi.n	8004198 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800417e:	aa08      	add	r2, sp, #32
 8004180:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004184:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004188:	42a2      	cmp	r2, r4
 800418a:	d3f5      	bcc.n	8004178 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800418c:	aa08      	add	r2, sp, #32
 800418e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004192:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004196:	e000      	b.n	800419a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004198:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800419a:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <RCC_SetFlashLatency+0xb8>)
 800419c:	6813      	ldr	r3, [r2, #0]
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	432b      	orrs	r3, r5
 80041a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041a6:	f7fd fc03 	bl	80019b0 <HAL_GetTick>
 80041aa:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <RCC_SetFlashLatency+0xb8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	42ab      	cmp	r3, r5
 80041b6:	d006      	beq.n	80041c6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041b8:	f7fd fbfa 	bl	80019b0 <HAL_GetTick>
 80041bc:	1b00      	subs	r0, r0, r4
 80041be:	2802      	cmp	r0, #2
 80041c0:	d9f4      	bls.n	80041ac <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80041c2:	2003      	movs	r0, #3
 80041c4:	e000      	b.n	80041c8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80041c6:	2000      	movs	r0, #0
}
 80041c8:	b009      	add	sp, #36	; 0x24
 80041ca:	bd30      	pop	{r4, r5, pc}
 80041cc:	08012820 	.word	0x08012820
 80041d0:	58004000 	.word	0x58004000

080041d4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80041d4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80041d6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80041dc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	4a08      	ldr	r2, [pc, #32]	; (8004210 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80041ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80041f2:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80041f6:	f7ff ff3b 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 80041fa:	4601      	mov	r1, r0
 80041fc:	4805      	ldr	r0, [pc, #20]	; (8004214 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80041fe:	fba0 3004 	umull	r3, r0, r0, r4
 8004202:	0c80      	lsrs	r0, r0, #18
 8004204:	f7ff ff88 	bl	8004118 <RCC_SetFlashLatency>
}
 8004208:	bd10      	pop	{r4, pc}
 800420a:	bf00      	nop
 800420c:	08012dac 	.word	0x08012dac
 8004210:	08012d4c 	.word	0x08012d4c
 8004214:	431bde83 	.word	0x431bde83

08004218 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004224:	f011 010c 	ands.w	r1, r1, #12
 8004228:	d00a      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x28>
 800422a:	290c      	cmp	r1, #12
 800422c:	d006      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422e:	2904      	cmp	r1, #4
 8004230:	d047      	beq.n	80042c2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004232:	2908      	cmp	r1, #8
 8004234:	d03b      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004236:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004238:	4610      	mov	r0, r2
 800423a:	e026      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800423c:	2b01      	cmp	r3, #1
 800423e:	d1f6      	bne.n	800422e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f013 0308 	ands.w	r3, r3, #8
 800424a:	d00d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x50>
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f013 0308 	ands.w	r3, r3, #8
 8004256:	d124      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <HAL_RCC_GetSysClockFreq+0x104>)
 8004262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004266:	e00e      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	f012 0f08 	tst.w	r2, #8
 8004272:	d112      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <HAL_RCC_GetSysClockFreq+0x104>)
 8004282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004286:	b1d1      	cbz	r1, 80042be <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004288:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800428a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d01a      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004298:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800429a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	e7ee      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x68>
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80042a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042ac:	e7d8      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80042b8:	d106      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80042ba:	4819      	ldr	r0, [pc, #100]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	e7e5      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80042be:	4610      	mov	r0, r2
 80042c0:	e7e3      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80042c2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80042c4:	4817      	ldr	r0, [pc, #92]	; (8004324 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042c6:	e7e0      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80042c8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80042ca:	4816      	ldr	r0, [pc, #88]	; (8004324 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042cc:	e7dd      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d009      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0xd8>
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d108      	bne.n	80042f2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80042ea:	d115      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f6:	68d8      	ldr	r0, [r3, #12]
 80042f8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80042fc:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004300:	68d8      	ldr	r0, [r3, #12]
 8004302:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8004306:	3001      	adds	r0, #1
 8004308:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800430c:	68d8      	ldr	r0, [r3, #12]
 800430e:	0f40      	lsrs	r0, r0, #29
 8004310:	3001      	adds	r0, #1
 8004312:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004316:	e7bf      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004318:	4a02      	ldr	r2, [pc, #8]	; (8004324 <HAL_RCC_GetSysClockFreq+0x10c>)
 800431a:	e7ea      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0xda>
 800431c:	08012dac 	.word	0x08012dac
 8004320:	01e84800 	.word	0x01e84800
 8004324:	00f42400 	.word	0x00f42400

08004328 <HAL_RCC_GetHCLKFreq>:
{
 8004328:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800432a:	f7ff ff75 	bl	8004218 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004338:	4a02      	ldr	r2, [pc, #8]	; (8004344 <HAL_RCC_GetHCLKFreq+0x1c>)
 800433a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800433e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004342:	bd08      	pop	{r3, pc}
 8004344:	08012d4c 	.word	0x08012d4c

08004348 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004348:	2800      	cmp	r0, #0
 800434a:	f000 8311 	beq.w	8004970 <HAL_RCC_OscConfig+0x628>
{
 800434e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004350:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004356:	689d      	ldr	r5, [r3, #8]
 8004358:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800435c:	68de      	ldr	r6, [r3, #12]
 800435e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004362:	6803      	ldr	r3, [r0, #0]
 8004364:	f013 0f20 	tst.w	r3, #32
 8004368:	d02a      	beq.n	80043c0 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800436a:	2d00      	cmp	r5, #0
 800436c:	d065      	beq.n	800443a <HAL_RCC_OscConfig+0xf2>
 800436e:	2d0c      	cmp	r5, #12
 8004370:	d061      	beq.n	8004436 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004372:	6a23      	ldr	r3, [r4, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80bf 	beq.w	80044f8 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800437a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004386:	f7fd fb13 	bl	80019b0 <HAL_GetTick>
 800438a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f013 0f02 	tst.w	r3, #2
 8004396:	f000 80a7 	beq.w	80044e8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	f042 0208 	orr.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80043ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043be:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f013 0f01 	tst.w	r3, #1
 80043c6:	f000 80b5 	beq.w	8004534 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043ca:	2d08      	cmp	r5, #8
 80043cc:	f000 80ae 	beq.w	800452c <HAL_RCC_OscConfig+0x1e4>
 80043d0:	2d0c      	cmp	r5, #12
 80043d2:	f000 80a8 	beq.w	8004526 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80043d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80043e0:	68a1      	ldr	r1, [r4, #8]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e6:	6863      	ldr	r3, [r4, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	f000 80c4 	beq.w	8004578 <HAL_RCC_OscConfig+0x230>
 80043f0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80043f4:	f000 80c5 	beq.w	8004582 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004402:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800440a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440c:	6863      	ldr	r3, [r4, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80c2 	beq.w	8004598 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004414:	f7fd facc 	bl	80019b0 <HAL_GetTick>
 8004418:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004424:	f040 8086 	bne.w	8004534 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fac2 	bl	80019b0 <HAL_GetTick>
 800442c:	1bc0      	subs	r0, r0, r7
 800442e:	2864      	cmp	r0, #100	; 0x64
 8004430:	d9f3      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8004432:	2003      	movs	r0, #3
 8004434:	e2a9      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004436:	2e01      	cmp	r6, #1
 8004438:	d19b      	bne.n	8004372 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800443a:	6a23      	ldr	r3, [r4, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8299 	beq.w	8004974 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004442:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f013 0f08 	tst.w	r3, #8
 800444e:	d029      	beq.n	80044a4 <HAL_RCC_OscConfig+0x15c>
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445a:	4298      	cmp	r0, r3
 800445c:	d92a      	bls.n	80044b4 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800445e:	f7ff feb9 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 8004462:	2800      	cmp	r0, #0
 8004464:	f040 8288 	bne.w	8004978 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f042 0208 	orr.w	r2, r2, #8
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800447a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004480:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004488:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800448c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800448e:	f7ff ff4b 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004492:	4bba      	ldr	r3, [pc, #744]	; (800477c <HAL_RCC_OscConfig+0x434>)
 8004494:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004496:	4bba      	ldr	r3, [pc, #744]	; (8004780 <HAL_RCC_OscConfig+0x438>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f7fd fa87 	bl	80019ac <HAL_InitTick>
        if (status != HAL_OK)
 800449e:	2800      	cmp	r0, #0
 80044a0:	d08e      	beq.n	80043c0 <HAL_RCC_OscConfig+0x78>
 80044a2:	e272      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b2:	e7d2      	b.n	800445a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f042 0208 	orr.w	r2, r2, #8
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80044c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044d8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044dc:	f7ff fe7a 	bl	80041d4 <RCC_SetFlashLatencyFromMSIRange>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d0d4      	beq.n	800448e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80044e4:	2001      	movs	r0, #1
 80044e6:	e250      	b.n	800498a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e8:	f7fd fa62 	bl	80019b0 <HAL_GetTick>
 80044ec:	1bc0      	subs	r0, r0, r7
 80044ee:	2802      	cmp	r0, #2
 80044f0:	f67f af4c 	bls.w	800438c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80044f4:	2003      	movs	r0, #3
 80044f6:	e248      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80044f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004504:	f7fd fa54 	bl	80019b0 <HAL_GetTick>
 8004508:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f013 0f02 	tst.w	r3, #2
 8004514:	f43f af54 	beq.w	80043c0 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004518:	f7fd fa4a 	bl	80019b0 <HAL_GetTick>
 800451c:	1bc0      	subs	r0, r0, r7
 800451e:	2802      	cmp	r0, #2
 8004520:	d9f3      	bls.n	800450a <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8004522:	2003      	movs	r0, #3
 8004524:	e231      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004526:	2e03      	cmp	r6, #3
 8004528:	f47f af55 	bne.w	80043d6 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8224 	beq.w	800497c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f013 0f02 	tst.w	r3, #2
 800453a:	d056      	beq.n	80045ea <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800453c:	2d04      	cmp	r5, #4
 800453e:	d03d      	beq.n	80045bc <HAL_RCC_OscConfig+0x274>
 8004540:	2d0c      	cmp	r5, #12
 8004542:	d039      	beq.n	80045b8 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 808a 	beq.w	8004660 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800454c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004550:	6813      	ldr	r3, [r2, #0]
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004558:	f7fd fa2a 	bl	80019b0 <HAL_GetTick>
 800455c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004568:	d136      	bne.n	80045d8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456a:	f7fd fa21 	bl	80019b0 <HAL_GetTick>
 800456e:	1b80      	subs	r0, r0, r6
 8004570:	2802      	cmp	r0, #2
 8004572:	d9f4      	bls.n	800455e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004574:	2003      	movs	r0, #3
 8004576:	e208      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	e744      	b.n	800440c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800458c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	e739      	b.n	800440c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004598:	f7fd fa0a 	bl	80019b0 <HAL_GetTick>
 800459c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045a8:	d0c4      	beq.n	8004534 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045aa:	f7fd fa01 	bl	80019b0 <HAL_GetTick>
 80045ae:	1bc0      	subs	r0, r0, r7
 80045b0:	2864      	cmp	r0, #100	; 0x64
 80045b2:	d9f4      	bls.n	800459e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80045b4:	2003      	movs	r0, #3
 80045b6:	e1e8      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045b8:	2e02      	cmp	r6, #2
 80045ba:	d1c3      	bne.n	8004544 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 81de 	beq.w	8004980 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ca:	6853      	ldr	r3, [r2, #4]
 80045cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045d4:	6053      	str	r3, [r2, #4]
}
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	6853      	ldr	r3, [r2, #4]
 80045e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045e8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f013 0f08 	tst.w	r3, #8
 80045f0:	d07e      	beq.n	80046f0 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f2:	69a3      	ldr	r3, [r4, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d062      	beq.n	80046be <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004600:	69e1      	ldr	r1, [r4, #28]
 8004602:	f003 0210 	and.w	r2, r3, #16
 8004606:	4291      	cmp	r1, r2
 8004608:	d011      	beq.n	800462e <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	2a02      	cmp	r2, #2
 8004610:	f000 81b8 	beq.w	8004984 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004614:	f013 0f01 	tst.w	r3, #1
 8004618:	d138      	bne.n	800468c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800461a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800461e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	69e1      	ldr	r1, [r4, #28]
 8004628:	430b      	orrs	r3, r1
 800462a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800462e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004632:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800463e:	f7fd f9b7 	bl	80019b0 <HAL_GetTick>
 8004642:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464c:	f013 0f02 	tst.w	r3, #2
 8004650:	d14e      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004652:	f7fd f9ad 	bl	80019b0 <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2811      	cmp	r0, #17
 800465a:	d9f3      	bls.n	8004644 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 800465c:	2003      	movs	r0, #3
 800465e:	e194      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800466c:	f7fd f9a0 	bl	80019b0 <HAL_GetTick>
 8004670:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800467c:	d0b5      	beq.n	80045ea <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467e:	f7fd f997 	bl	80019b0 <HAL_GetTick>
 8004682:	1b80      	subs	r0, r0, r6
 8004684:	2802      	cmp	r0, #2
 8004686:	d9f4      	bls.n	8004672 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004688:	2003      	movs	r0, #3
 800468a:	e17e      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800468c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004690:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800469c:	f7fd f988 	bl	80019b0 <HAL_GetTick>
 80046a0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046aa:	f013 0f02 	tst.w	r3, #2
 80046ae:	d0b4      	beq.n	800461a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fd f97e 	bl	80019b0 <HAL_GetTick>
 80046b4:	1b80      	subs	r0, r0, r6
 80046b6:	2811      	cmp	r0, #17
 80046b8:	d9f3      	bls.n	80046a2 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80046ba:	2003      	movs	r0, #3
 80046bc:	e165      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80046be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80046ce:	f7fd f96f 	bl	80019b0 <HAL_GetTick>
 80046d2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046dc:	f013 0f02 	tst.w	r3, #2
 80046e0:	d006      	beq.n	80046f0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fd f965 	bl	80019b0 <HAL_GetTick>
 80046e6:	1b80      	subs	r0, r0, r6
 80046e8:	2811      	cmp	r0, #17
 80046ea:	d9f3      	bls.n	80046d4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80046ec:	2003      	movs	r0, #3
 80046ee:	e14c      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	f013 0f04 	tst.w	r3, #4
 80046f6:	f000 80b8 	beq.w	800486a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_OscConfig+0x43c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004702:	d110      	bne.n	8004726 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8004704:	f7ff fc86 	bl	8004014 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004708:	f7fd f952 	bl	80019b0 <HAL_GetTick>
 800470c:	4606      	mov	r6, r0
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCC_OscConfig+0x43c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004718:	f7fd f94a 	bl	80019b0 <HAL_GetTick>
 800471c:	1b80      	subs	r0, r0, r6
 800471e:	2802      	cmp	r0, #2
 8004720:	d9f5      	bls.n	800470e <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8004722:	2003      	movs	r0, #3
 8004724:	e131      	b.n	800498a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d068      	beq.n	80047fe <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800472c:	2b85      	cmp	r3, #133	; 0x85
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004730:	2b05      	cmp	r3, #5
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004738:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004744:	f7fd f934 	bl	80019b0 <HAL_GetTick>
 8004748:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800474a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f013 0f02 	tst.w	r3, #2
 8004766:	d10f      	bne.n	8004788 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd f922 	bl	80019b0 <HAL_GetTick>
 800476c:	1b80      	subs	r0, r0, r6
 800476e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004772:	4298      	cmp	r0, r3
 8004774:	d9f1      	bls.n	800475a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8004776:	2003      	movs	r0, #3
 8004778:	e107      	b.n	800498a <HAL_RCC_OscConfig+0x642>
 800477a:	bf00      	nop
 800477c:	20000074 	.word	0x20000074
 8004780:	20000078 	.word	0x20000078
 8004784:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004788:	68e3      	ldr	r3, [r4, #12]
 800478a:	2b81      	cmp	r3, #129	; 0x81
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800478e:	2b85      	cmp	r3, #133	; 0x85
 8004790:	d11a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8004792:	f7fd f90d 	bl	80019b0 <HAL_GetTick>
 8004796:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047b4:	d159      	bne.n	800486a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fd f8fb 	bl	80019b0 <HAL_GetTick>
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80047c0:	4298      	cmp	r0, r3
 80047c2:	d9f1      	bls.n	80047a8 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80047c4:	2003      	movs	r0, #3
 80047c6:	e0e0      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80047c8:	f7fd f8f2 	bl	80019b0 <HAL_GetTick>
 80047cc:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80047d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047ea:	d03e      	beq.n	800486a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd f8e0 	bl	80019b0 <HAL_GetTick>
 80047f0:	1b80      	subs	r0, r0, r6
 80047f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80047f6:	4298      	cmp	r0, r3
 80047f8:	d9f1      	bls.n	80047de <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80047fa:	2003      	movs	r0, #3
 80047fc:	e0c5      	b.n	800498a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80047fe:	f7fd f8d7 	bl	80019b0 <HAL_GetTick>
 8004802:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004808:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800480c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004820:	d008      	beq.n	8004834 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd f8c5 	bl	80019b0 <HAL_GetTick>
 8004826:	1b80      	subs	r0, r0, r6
 8004828:	f241 3388 	movw	r3, #5000	; 0x1388
 800482c:	4298      	cmp	r0, r3
 800482e:	d9f1      	bls.n	8004814 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004830:	2003      	movs	r0, #3
 8004832:	e0aa      	b.n	800498a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004834:	f7fd f8bc 	bl	80019b0 <HAL_GetTick>
 8004838:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800483a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f013 0f02 	tst.w	r3, #2
 8004856:	d008      	beq.n	800486a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fd f8aa 	bl	80019b0 <HAL_GetTick>
 800485c:	1b80      	subs	r0, r0, r6
 800485e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004862:	4298      	cmp	r0, r3
 8004864:	d9f1      	bls.n	800484a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8004866:	2003      	movs	r0, #3
 8004868:	e08f      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800486a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 808b 	beq.w	8004988 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004872:	2d0c      	cmp	r5, #12
 8004874:	d060      	beq.n	8004938 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004876:	2b02      	cmp	r3, #2
 8004878:	d016      	beq.n	80048a8 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800487a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004884:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004886:	f7fd f893 	bl	80019b0 <HAL_GetTick>
 800488a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004896:	d148      	bne.n	800492a <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489c:	68d1      	ldr	r1, [r2, #12]
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCC_OscConfig+0x65c>)
 80048a0:	400b      	ands	r3, r1
 80048a2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80048a4:	2000      	movs	r0, #0
 80048a6:	e070      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80048a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80048b4:	f7fd f87c 	bl	80019b0 <HAL_GetTick>
 80048b8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048c4:	d12a      	bne.n	800491c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ca:	68d3      	ldr	r3, [r2, #12]
 80048cc:	4936      	ldr	r1, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x660>)
 80048ce:	4019      	ands	r1, r3
 80048d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80048d4:	4303      	orrs	r3, r0
 80048d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80048d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80048de:	4303      	orrs	r3, r0
 80048e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80048e2:	4303      	orrs	r3, r0
 80048e4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80048e6:	4303      	orrs	r3, r0
 80048e8:	430b      	orrs	r3, r1
 80048ea:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f4:	68d3      	ldr	r3, [r2, #12]
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80048fc:	f7fd f858 	bl	80019b0 <HAL_GetTick>
 8004900:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800490c:	d13e      	bne.n	800498c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f84f 	bl	80019b0 <HAL_GetTick>
 8004912:	1b00      	subs	r0, r0, r4
 8004914:	280a      	cmp	r0, #10
 8004916:	d9f4      	bls.n	8004902 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8004918:	2003      	movs	r0, #3
 800491a:	e036      	b.n	800498a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fd f848 	bl	80019b0 <HAL_GetTick>
 8004920:	1b40      	subs	r0, r0, r5
 8004922:	280a      	cmp	r0, #10
 8004924:	d9c9      	bls.n	80048ba <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8004926:	2003      	movs	r0, #3
 8004928:	e02f      	b.n	800498a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd f841 	bl	80019b0 <HAL_GetTick>
 800492e:	1b00      	subs	r0, r0, r4
 8004930:	280a      	cmp	r0, #10
 8004932:	d9ab      	bls.n	800488c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8004934:	2003      	movs	r0, #3
 8004936:	e028      	b.n	800498a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	2b01      	cmp	r3, #1
 800493a:	d029      	beq.n	8004990 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004942:	f003 0103 	and.w	r1, r3, #3
 8004946:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004948:	4291      	cmp	r1, r2
 800494a:	d123      	bne.n	8004994 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800494c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004952:	428a      	cmp	r2, r1
 8004954:	d120      	bne.n	8004998 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004956:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800495a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800495c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004960:	d11c      	bne.n	800499c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004962:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004966:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004968:	4293      	cmp	r3, r2
 800496a:	d119      	bne.n	80049a0 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 800496c:	2000      	movs	r0, #0
 800496e:	e00c      	b.n	800498a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8004970:	2001      	movs	r0, #1
}
 8004972:	4770      	bx	lr
        return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8004978:	2001      	movs	r0, #1
 800497a:	e006      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800497c:	2001      	movs	r0, #1
 800497e:	e004      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004980:	2001      	movs	r0, #1
 8004982:	e002      	b.n	800498a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004984:	2001      	movs	r0, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8004988:	2000      	movs	r0, #0
}
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800498c:	2000      	movs	r0, #0
 800498e:	e7fc      	b.n	800498a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8004990:	2001      	movs	r0, #1
 8004992:	e7fa      	b.n	800498a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8004994:	2001      	movs	r0, #1
 8004996:	e7f8      	b.n	800498a <HAL_RCC_OscConfig+0x642>
 8004998:	2001      	movs	r0, #1
 800499a:	e7f6      	b.n	800498a <HAL_RCC_OscConfig+0x642>
 800499c:	2001      	movs	r0, #1
 800499e:	e7f4      	b.n	800498a <HAL_RCC_OscConfig+0x642>
 80049a0:	2001      	movs	r0, #1
 80049a2:	e7f2      	b.n	800498a <HAL_RCC_OscConfig+0x642>
 80049a4:	eefefffc 	.word	0xeefefffc
 80049a8:	11c1808c 	.word	0x11c1808c

080049ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f000 8127 	beq.w	8004c00 <HAL_RCC_ClockConfig+0x254>
{
 80049b2:	b570      	push	{r4, r5, r6, lr}
 80049b4:	460c      	mov	r4, r1
 80049b6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	428b      	cmp	r3, r1
 80049c2:	d32d      	bcc.n	8004a20 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	f013 0f02 	tst.w	r3, #2
 80049ca:	d13f      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	f013 0f20 	tst.w	r3, #32
 80049d2:	d153      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049da:	d16a      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	f013 0f04 	tst.w	r3, #4
 80049e2:	f040 8083 	bne.w	8004aec <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	f013 0f08 	tst.w	r3, #8
 80049ec:	f040 8097 	bne.w	8004b1e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	f013 0f01 	tst.w	r3, #1
 80049f6:	f000 80de 	beq.w	8004bb6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	686b      	ldr	r3, [r5, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f000 80a8 	beq.w	8004b52 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	f000 80ad 	beq.w	8004b62 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80b2 	bne.w	8004b72 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	f012 0f02 	tst.w	r2, #2
 8004a18:	f040 80b1 	bne.w	8004b7e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	e0ee      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a20:	4a79      	ldr	r2, [pc, #484]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a2c:	f7fc ffc0 	bl	80019b0 <HAL_GetTick>
 8004a30:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	d0c2      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a3e:	f7fc ffb7 	bl	80019b0 <HAL_GetTick>
 8004a42:	1b80      	subs	r0, r0, r6
 8004a44:	2802      	cmp	r0, #2
 8004a46:	d9f4      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004a48:	2003      	movs	r0, #3
 8004a4a:	e0d8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	688a      	ldr	r2, [r1, #8]
 8004a54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004a5c:	f7fc ffa8 	bl	80019b0 <HAL_GetTick>
 8004a60:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a6c:	d1ae      	bne.n	80049cc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a6e:	f7fc ff9f 	bl	80019b0 <HAL_GetTick>
 8004a72:	1b80      	subs	r0, r0, r6
 8004a74:	2802      	cmp	r0, #2
 8004a76:	d9f4      	bls.n	8004a62 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004a78:	2003      	movs	r0, #3
 8004a7a:	e0c0      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a7c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a82:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004a86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004a90:	f7fc ff8e 	bl	80019b0 <HAL_GetTick>
 8004a94:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004aa2:	d197      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aa4:	f7fc ff84 	bl	80019b0 <HAL_GetTick>
 8004aa8:	1b80      	subs	r0, r0, r6
 8004aaa:	2802      	cmp	r0, #2
 8004aac:	d9f3      	bls.n	8004a96 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004aae:	2003      	movs	r0, #3
 8004ab0:	e0a5      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004ab2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004abc:	f023 030f 	bic.w	r3, r3, #15
 8004ac0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004ac4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004ac8:	f7fc ff72 	bl	80019b0 <HAL_GetTick>
 8004acc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ad6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ada:	f47f af7f 	bne.w	80049dc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ade:	f7fc ff67 	bl	80019b0 <HAL_GetTick>
 8004ae2:	1b80      	subs	r0, r0, r6
 8004ae4:	2802      	cmp	r0, #2
 8004ae6:	d9f2      	bls.n	8004ace <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	e088      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af2:	688a      	ldr	r2, [r1, #8]
 8004af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004afc:	f7fc ff58 	bl	80019b0 <HAL_GetTick>
 8004b00:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b0c:	f47f af6b 	bne.w	80049e6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b10:	f7fc ff4e 	bl	80019b0 <HAL_GetTick>
 8004b14:	1b80      	subs	r0, r0, r6
 8004b16:	2802      	cmp	r0, #2
 8004b18:	d9f3      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004b1a:	2003      	movs	r0, #3
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b1e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b24:	6893      	ldr	r3, [r2, #8]
 8004b26:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b2e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004b30:	f7fc ff3e 	bl	80019b0 <HAL_GetTick>
 8004b34:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004b40:	f47f af56 	bne.w	80049f0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b44:	f7fc ff34 	bl	80019b0 <HAL_GetTick>
 8004b48:	1b80      	subs	r0, r0, r6
 8004b4a:	2802      	cmp	r0, #2
 8004b4c:	d9f3      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004b4e:	2003      	movs	r0, #3
 8004b50:	e055      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004b5c:	d10f      	bne.n	8004b7e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e04d      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004b6e:	2001      	movs	r0, #1
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004b7c:	d042      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b82:	688a      	ldr	r2, [r1, #8]
 8004b84:	f022 0203 	bic.w	r2, r2, #3
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b8c:	f7fc ff10 	bl	80019b0 <HAL_GetTick>
 8004b90:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9c:	686a      	ldr	r2, [r5, #4]
 8004b9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fc ff04 	bl	80019b0 <HAL_GetTick>
 8004ba8:	1b80      	subs	r0, r0, r6
 8004baa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bae:	4298      	cmp	r0, r3
 8004bb0:	d9ef      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	e023      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	42a3      	cmp	r3, r4
 8004bc0:	d915      	bls.n	8004bee <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	4323      	orrs	r3, r4
 8004bcc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004bce:	f7fc feef 	bl	80019b0 <HAL_GetTick>
 8004bd2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <HAL_RCC_ClockConfig+0x25c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d006      	beq.n	8004bee <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004be0:	f7fc fee6 	bl	80019b0 <HAL_GetTick>
 8004be4:	1b40      	subs	r0, r0, r5
 8004be6:	2802      	cmp	r0, #2
 8004be8:	d9f4      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004bea:	2003      	movs	r0, #3
 8004bec:	e007      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bee:	f7ff fb9b 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_ClockConfig+0x260>)
 8004bf4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_ClockConfig+0x264>)
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f7fc fed7 	bl	80019ac <HAL_InitTick>
}
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004c00:	2001      	movs	r0, #1
}
 8004c02:	4770      	bx	lr
        return HAL_ERROR;
 8004c04:	2001      	movs	r0, #1
 8004c06:	e7fa      	b.n	8004bfe <HAL_RCC_ClockConfig+0x252>
 8004c08:	58004000 	.word	0x58004000
 8004c0c:	20000074 	.word	0x20000074
 8004c10:	20000078 	.word	0x20000078

08004c14 <HAL_RCC_GetPCLK1Freq>:
{
 8004c14:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c16:	f7ff fb87 	bl	8004328 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004c2a:	40d8      	lsrs	r0, r3
 8004c2c:	bd08      	pop	{r3, pc}
 8004c2e:	bf00      	nop
 8004c30:	08012d8c 	.word	0x08012d8c

08004c34 <HAL_RCC_GetPCLK2Freq>:
{
 8004c34:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c36:	f7ff fb77 	bl	8004328 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c44:	4a02      	ldr	r2, [pc, #8]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004c4a:	40d8      	lsrs	r0, r3
 8004c4c:	bd08      	pop	{r3, pc}
 8004c4e:	bf00      	nop
 8004c50:	08012d8c 	.word	0x08012d8c

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c58:	6803      	ldr	r3, [r0, #0]
 8004c5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c5e:	f040 80ab 	bne.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c62:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	f013 0f01 	tst.w	r3, #1
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c6c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c76:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	f013 0f02 	tst.w	r3, #2
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c8a:	68a2      	ldr	r2, [r4, #8]
 8004c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c90:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004c94:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f013 0f20 	tst.w	r3, #32
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004cb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004cc2:	d00c      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cc4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cce:	0c02      	lsrs	r2, r0, #16
 8004cd0:	0412      	lsls	r2, r2, #16
 8004cd2:	ea23 0302 	bic.w	r3, r3, r2
 8004cd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ce4:	d00c      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ce6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ce8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004cf0:	0c02      	lsrs	r2, r0, #16
 8004cf2:	0412      	lsls	r2, r2, #16
 8004cf4:	ea23 0302 	bic.w	r3, r3, r2
 8004cf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d06:	d00c      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d0e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d12:	0c02      	lsrs	r2, r0, #16
 8004d14:	0412      	lsls	r2, r2, #16
 8004d16:	ea23 0302 	bic.w	r3, r3, r2
 8004d1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d28:	f040 809e 	bne.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d32:	f040 80aa 	bne.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d3c:	f040 80b6 	bne.w	8004eac <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	f013 0f10 	tst.w	r3, #16
 8004d46:	d00e      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d48:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d5c:	68e3      	ldr	r3, [r4, #12]
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d62:	f000 80b4 	beq.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004d6c:	d00f      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d78:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d84:	b91b      	cbnz	r3, 8004d8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d86:	68cb      	ldr	r3, [r1, #12]
 8004d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004d94:	d00e      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db0:	f000 8092 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004db4:	4628      	mov	r0, r5
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004db8:	f7ff f92c 	bl	8004014 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004dbc:	f7fc fdf8 	bl	80019b0 <HAL_GetTick>
 8004dc0:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004dc2:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dca:	d106      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dcc:	f7fc fdf0 	bl	80019b0 <HAL_GetTick>
 8004dd0:	1b40      	subs	r0, r0, r5
 8004dd2:	2802      	cmp	r0, #2
 8004dd4:	d9f5      	bls.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004dd6:	2503      	movs	r5, #3
 8004dd8:	e000      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004dda:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	f47f af41 	bne.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004dee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d024      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004dfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e00:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004e04:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004e08:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004e0c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004e10:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004e14:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004e1c:	f012 0f02 	tst.w	r2, #2
 8004e20:	d10f      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004e22:	2d00      	cmp	r5, #0
 8004e24:	f47f af1e 	bne.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004e32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004e3c:	e712      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004e3e:	2200      	movs	r2, #0
 8004e40:	e7ec      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004e42:	f7fc fdb5 	bl	80019b0 <HAL_GetTick>
 8004e46:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f013 0f02 	tst.w	r3, #2
 8004e54:	d1e5      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fc fdab 	bl	80019b0 <HAL_GetTick>
 8004e5a:	1b80      	subs	r0, r0, r6
 8004e5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e60:	4298      	cmp	r0, r3
 8004e62:	d9f1      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004e64:	2503      	movs	r5, #3
 8004e66:	e7dc      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e68:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e6a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e6e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e72:	0919      	lsrs	r1, r3, #4
 8004e74:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e78:	ea22 0201 	bic.w	r2, r2, r1
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004e88:	e750      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e8a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e8c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004e90:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e94:	0919      	lsrs	r1, r3, #4
 8004e96:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004e9a:	ea22 0201 	bic.w	r2, r2, r1
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004eaa:	e744      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eac:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004eae:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004eb2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004eb6:	0919      	lsrs	r1, r3, #4
 8004eb8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004ebc:	ea22 0201 	bic.w	r2, r2, r1
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004ecc:	e738      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004ece:	68cb      	ldr	r3, [r1, #12]
 8004ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	60cb      	str	r3, [r1, #12]
 8004ed6:	e746      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ed8:	68cb      	ldr	r3, [r1, #12]
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ede:	60cb      	str	r3, [r1, #12]
 8004ee0:	e768      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ee2:	bf00      	nop
 8004ee4:	58000400 	.word	0x58000400

08004ee8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d036      	beq.n	8004f5e <HAL_RTC_DeactivateAlarm+0x76>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004efe:	22ca      	movs	r2, #202	; 0xca
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
 8004f02:	2253      	movs	r2, #83	; 0x53
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004f06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004f0a:	d019      	beq.n	8004f40 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004f14:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004f1e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f20:	f022 0202 	bic.w	r2, r2, #2
 8004f24:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f26:	2202      	movs	r2, #2
 8004f28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f36:	2300      	movs	r3, #0
 8004f38:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004f46:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004f50:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f58:	2201      	movs	r2, #1
 8004f5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f5c:	e7e5      	b.n	8004f2a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004f5e:	2002      	movs	r0, #2
}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40002800 	.word	0x40002800

08004f68 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f6e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004f70:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f72:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004f74:	f015 0f01 	tst.w	r5, #1
 8004f78:	d106      	bne.n	8004f88 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004f7a:	f015 0f02 	tst.w	r5, #2
 8004f7e:	d109      	bne.n	8004f94 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004f8e:	f7fc feb7 	bl	8001d00 <HAL_RTC_AlarmAEventCallback>
 8004f92:	e7f2      	b.n	8004f7a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004f96:	2202      	movs	r2, #2
 8004f98:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f9ee 	bl	800537c <HAL_RTCEx_AlarmBEventCallback>
 8004fa0:	e7ee      	b.n	8004f80 <HAL_RTC_AlarmIRQHandler+0x18>
 8004fa2:	bf00      	nop
 8004fa4:	40002800 	.word	0x40002800

08004fa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fa8:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004faa:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <HAL_RTC_WaitForSynchro+0x30>)
 8004fac:	68d3      	ldr	r3, [r2, #12]
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004fb4:	f7fc fcfc 	bl	80019b0 <HAL_GetTick>
 8004fb8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <HAL_RTC_WaitForSynchro+0x30>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f013 0f20 	tst.w	r3, #32
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc4:	f7fc fcf4 	bl	80019b0 <HAL_GetTick>
 8004fc8:	1b00      	subs	r0, r0, r4
 8004fca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004fce:	d9f4      	bls.n	8004fba <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004fd0:	2003      	movs	r0, #3
 8004fd2:	e000      	b.n	8004fd6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004fd4:	2000      	movs	r0, #0
}
 8004fd6:	bd10      	pop	{r4, pc}
 8004fd8:	40002800 	.word	0x40002800

08004fdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fdc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <RTC_EnterInitMode+0x48>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fe6:	d002      	beq.n	8004fee <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004fea:	4620      	mov	r0, r4
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ff0:	4a0c      	ldr	r2, [pc, #48]	; (8005024 <RTC_EnterInitMode+0x48>)
 8004ff2:	68d3      	ldr	r3, [r2, #12]
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fcd9 	bl	80019b0 <HAL_GetTick>
 8004ffe:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005002:	4b08      	ldr	r3, [pc, #32]	; (8005024 <RTC_EnterInitMode+0x48>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f013 0f40 	tst.w	r3, #64	; 0x40
 800500a:	d1ee      	bne.n	8004fea <RTC_EnterInitMode+0xe>
 800500c:	2c03      	cmp	r4, #3
 800500e:	d0ec      	beq.n	8004fea <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005010:	f7fc fcce 	bl	80019b0 <HAL_GetTick>
 8005014:	1b43      	subs	r3, r0, r5
 8005016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800501a:	d9f2      	bls.n	8005002 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800501c:	2403      	movs	r4, #3
 800501e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005022:	e7ee      	b.n	8005002 <RTC_EnterInitMode+0x26>
 8005024:	40002800 	.word	0x40002800

08005028 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005028:	b510      	push	{r4, lr}
 800502a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <RTC_ExitInitMode+0x4c>)
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005034:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f013 0f20 	tst.w	r3, #32
 800503c:	d107      	bne.n	800504e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800503e:	f7ff ffb3 	bl	8004fa8 <HAL_RTC_WaitForSynchro>
 8005042:	4603      	mov	r3, r0
 8005044:	b1a0      	cbz	r0, 8005070 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800504c:	e010      	b.n	8005070 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <RTC_ExitInitMode+0x4c>)
 8005050:	6993      	ldr	r3, [r2, #24]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005058:	f7ff ffa6 	bl	8004fa8 <HAL_RTC_WaitForSynchro>
 800505c:	4603      	mov	r3, r0
 800505e:	b110      	cbz	r0, 8005066 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005066:	4903      	ldr	r1, [pc, #12]	; (8005074 <RTC_ExitInitMode+0x4c>)
 8005068:	698a      	ldr	r2, [r1, #24]
 800506a:	f042 0220 	orr.w	r2, r2, #32
 800506e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd10      	pop	{r4, pc}
 8005074:	40002800 	.word	0x40002800

08005078 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005078:	2800      	cmp	r0, #0
 800507a:	d052      	beq.n	8005122 <HAL_RTC_Init+0xaa>
{
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005080:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005084:	b163      	cbz	r3, 80050a0 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005086:	2302      	movs	r3, #2
 8005088:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <HAL_RTC_Init+0xb0>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f013 0f10 	tst.w	r3, #16
 8005094:	d009      	beq.n	80050aa <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8005096:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8005098:	2301      	movs	r3, #1
 800509a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800509e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80050a0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80050a4:	f7fc fae2 	bl	800166c <HAL_RTC_MspInit>
 80050a8:	e7ed      	b.n	8005086 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <HAL_RTC_Init+0xb0>)
 80050ac:	22ca      	movs	r2, #202	; 0xca
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
 80050b0:	2253      	movs	r2, #83	; 0x53
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff ff91 	bl	8004fdc <RTC_EnterInitMode>
      if (status == HAL_OK)
 80050ba:	b128      	cbz	r0, 80050c8 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_RTC_Init+0xb0>)
 80050be:	22ff      	movs	r2, #255	; 0xff
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d1eb      	bne.n	800509e <HAL_RTC_Init+0x26>
 80050c6:	e7e7      	b.n	8005098 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80050c8:	4b17      	ldr	r3, [pc, #92]	; (8005128 <HAL_RTC_Init+0xb0>)
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80050d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d4:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80050d6:	6999      	ldr	r1, [r3, #24]
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	6920      	ldr	r0, [r4, #16]
 80050dc:	4302      	orrs	r2, r0
 80050de:	69a0      	ldr	r0, [r4, #24]
 80050e0:	4302      	orrs	r2, r0
 80050e2:	430a      	orrs	r2, r1
 80050e4:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80050e6:	68e2      	ldr	r2, [r4, #12]
 80050e8:	68a1      	ldr	r1, [r4, #8]
 80050ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80050f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80050fa:	4301      	orrs	r1, r0
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff ff91 	bl	8005028 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8005106:	2800      	cmp	r0, #0
 8005108:	d1d8      	bne.n	80050bc <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800510a:	4907      	ldr	r1, [pc, #28]	; (8005128 <HAL_RTC_Init+0xb0>)
 800510c:	698b      	ldr	r3, [r1, #24]
 800510e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005112:	6a22      	ldr	r2, [r4, #32]
 8005114:	69e5      	ldr	r5, [r4, #28]
 8005116:	432a      	orrs	r2, r5
 8005118:	6965      	ldr	r5, [r4, #20]
 800511a:	432a      	orrs	r2, r5
 800511c:	4313      	orrs	r3, r2
 800511e:	618b      	str	r3, [r1, #24]
 8005120:	e7cc      	b.n	80050bc <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005122:	2001      	movs	r0, #1
}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40002800 	.word	0x40002800

0800512c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800512c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800512e:	e002      	b.n	8005136 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005130:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005132:	380a      	subs	r0, #10
 8005134:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005136:	2809      	cmp	r0, #9
 8005138:	d8fa      	bhi.n	8005130 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	b2db      	uxtb	r3, r3
}
 800513e:	4318      	orrs	r0, r3
 8005140:	4770      	bx	lr
	...

08005144 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005144:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005148:	2b01      	cmp	r3, #1
 800514a:	f000 80b0 	beq.w	80052ae <HAL_RTC_SetAlarm_IT+0x16a>
{
 800514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005152:	4605      	mov	r5, r0
 8005154:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005156:	2301      	movs	r3, #1
 8005158:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800515c:	2302      	movs	r3, #2
 800515e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005162:	4b54      	ldr	r3, [pc, #336]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005164:	68de      	ldr	r6, [r3, #12]
 8005166:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800516a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800516e:	d043      	beq.n	80051f8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005170:	bb12      	cbnz	r2, 80051b8 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005178:	d101      	bne.n	800517e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800517e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005182:	7820      	ldrb	r0, [r4, #0]
 8005184:	f7ff ffd2 	bl	800512c <RTC_ByteToBcd2>
 8005188:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800518a:	7860      	ldrb	r0, [r4, #1]
 800518c:	f7ff ffce 	bl	800512c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005190:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005194:	78a0      	ldrb	r0, [r4, #2]
 8005196:	f7ff ffc9 	bl	800512c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800519a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800519c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800519e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80051a6:	f7ff ffc1 	bl	800512c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051aa:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051ae:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051b0:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051b2:	ea48 0000 	orr.w	r0, r8, r0
 80051b6:	e020      	b.n	80051fa <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80051b8:	6948      	ldr	r0, [r1, #20]
 80051ba:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80051be:	d009      	beq.n	80051d4 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80051c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80051c4:	d006      	beq.n	80051d4 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80051c6:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051ce:	d101      	bne.n	80051d4 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051d4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051d6:	7863      	ldrb	r3, [r4, #1]
 80051d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051de:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80051e0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051e2:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80051e4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051e8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80051ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051f0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80051f2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80051f4:	4318      	orrs	r0, r3
 80051f6:	e000      	b.n	80051fa <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80051f8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051fa:	4b2e      	ldr	r3, [pc, #184]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80051fc:	22ca      	movs	r2, #202	; 0xca
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005200:	2253      	movs	r2, #83	; 0x53
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520a:	d02a      	beq.n	8005262 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005214:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005216:	2202      	movs	r2, #2
 8005218:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800521a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800521e:	d040      	beq.n	80052a2 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005220:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005222:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005224:	69a2      	ldr	r2, [r4, #24]
 8005226:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005228:	6862      	ldr	r2, [r4, #4]
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800522e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005230:	f042 0202 	orr.w	r2, r2, #2
 8005234:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800523c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_RTC_SetAlarm_IT+0x174>)
 8005240:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800524e:	22ff      	movs	r2, #255	; 0xff
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005252:	2301      	movs	r3, #1
 8005254:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005258:	2000      	movs	r0, #0
 800525a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800526a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800526c:	2201      	movs	r2, #1
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005270:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005274:	d00f      	beq.n	8005296 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005278:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800527a:	69a2      	ldr	r2, [r4, #24]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005282:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005284:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005292:	619a      	str	r2, [r3, #24]
 8005294:	e7d3      	b.n	800523e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005296:	69a3      	ldr	r3, [r4, #24]
 8005298:	69e2      	ldr	r2, [r4, #28]
 800529a:	4313      	orrs	r3, r2
 800529c:	4a05      	ldr	r2, [pc, #20]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800529e:	6453      	str	r3, [r2, #68]	; 0x44
 80052a0:	e7ed      	b.n	800527e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80052a2:	69a3      	ldr	r3, [r4, #24]
 80052a4:	69e2      	ldr	r2, [r4, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	4a02      	ldr	r2, [pc, #8]	; (80052b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80052aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ac:	e7bc      	b.n	8005228 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80052ae:	2002      	movs	r0, #2
}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40002800 	.word	0x40002800
 80052b8:	58000800 	.word	0x58000800

080052bc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d017      	beq.n	80052f4 <HAL_RTCEx_EnableBypassShadow+0x38>
 80052c4:	2101      	movs	r1, #1
 80052c6:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ca:	2302      	movs	r3, #2
 80052cc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80052d2:	22ca      	movs	r2, #202	; 0xca
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
 80052d6:	2253      	movs	r2, #83	; 0x53
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	f042 0220 	orr.w	r2, r2, #32
 80052e0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e2:	22ff      	movs	r2, #255	; 0xff
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80052e6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052ea:	2300      	movs	r3, #0
 80052ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80052f0:	4618      	mov	r0, r3
 80052f2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80052f4:	2002      	movs	r0, #2
}
 80052f6:	4770      	bx	lr
 80052f8:	40002800 	.word	0x40002800

080052fc <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d020      	beq.n	8005346 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005304:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005306:	2101      	movs	r1, #1
 8005308:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800530c:	2302      	movs	r3, #2
 800530e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005314:	22ca      	movs	r2, #202	; 0xca
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
 8005318:	2253      	movs	r2, #83	; 0x53
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005322:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005324:	4c0a      	ldr	r4, [pc, #40]	; (8005350 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005326:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800532a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800532e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005332:	22ff      	movs	r2, #255	; 0xff
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005336:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800533a:	2300      	movs	r3, #0
 800533c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005340:	4618      	mov	r0, r3
}
 8005342:	bc10      	pop	{r4}
 8005344:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005346:	2002      	movs	r0, #2
}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40002800 	.word	0x40002800
 8005350:	58000800 	.word	0x58000800

08005354 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005354:	b510      	push	{r4, lr}
 8005356:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005360:	d103      	bne.n	800536a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005362:	2301      	movs	r3, #1
 8005364:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005368:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800536a:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800536c:	2240      	movs	r2, #64	; 0x40
 800536e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005370:	f7fc fcca 	bl	8001d08 <HAL_RTCEx_SSRUEventCallback>
 8005374:	e7f5      	b.n	8005362 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005376:	bf00      	nop
 8005378:	40002800 	.word	0x40002800

0800537c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800537c:	4770      	bx	lr

0800537e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800537e:	0089      	lsls	r1, r1, #2
 8005380:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005384:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005388:	600a      	str	r2, [r1, #0]
}
 800538a:	4770      	bx	lr

0800538c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800538c:	0089      	lsls	r1, r1, #2
 800538e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005392:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005396:	6808      	ldr	r0, [r1, #0]
}
 8005398:	4770      	bx	lr
	...

0800539c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <SUBGHZSPI_Init+0x20>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a4:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80053a6:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80053aa:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80053ac:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80053b0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	4770      	bx	lr
 80053bc:	58010000 	.word	0x58010000

080053c0 <HAL_SUBGHZ_Init>:
{
 80053c0:	b530      	push	{r4, r5, lr}
 80053c2:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d058      	beq.n	800547a <HAL_SUBGHZ_Init+0xba>
 80053c8:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80053ca:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80053cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80053d0:	b10b      	cbz	r3, 80053d6 <HAL_SUBGHZ_Init+0x16>
 80053d2:	2d03      	cmp	r5, #3
 80053d4:	d10b      	bne.n	80053ee <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80053d6:	2300      	movs	r3, #0
 80053d8:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80053da:	4620      	mov	r0, r4
 80053dc:	f7fc f9f6 	bl	80017cc <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80053e0:	4a27      	ldr	r2, [pc, #156]	; (8005480 <HAL_SUBGHZ_Init+0xc0>)
 80053e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80053ee:	b185      	cbz	r5, 8005412 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80053f0:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_SUBGHZ_Init+0xc4>)
 80053f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f6:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80053f8:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	f7ff ffce 	bl	800539c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005400:	2301      	movs	r3, #1
 8005402:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005404:	2300      	movs	r3, #0
 8005406:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005408:	2301      	movs	r3, #1
 800540a:	71a3      	strb	r3, [r4, #6]
}
 800540c:	4628      	mov	r0, r5
 800540e:	b003      	add	sp, #12
 8005410:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005412:	2302      	movs	r3, #2
 8005414:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800541e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <HAL_SUBGHZ_Init+0xc8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800542e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005432:	2264      	movs	r2, #100	; 0x64
 8005434:	fb02 f303 	mul.w	r3, r2, r3
 8005438:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 800543a:	9b01      	ldr	r3, [sp, #4]
 800543c:	b1d3      	cbz	r3, 8005474 <HAL_SUBGHZ_Init+0xb4>
      count--;
 800543e:	9b01      	ldr	r3, [sp, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005450:	d1f3      	bne.n	800543a <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <HAL_SUBGHZ_Init+0xc4>)
 8005454:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005466:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800546c:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800546e:	2d00      	cmp	r5, #0
 8005470:	d1ca      	bne.n	8005408 <HAL_SUBGHZ_Init+0x48>
 8005472:	e7c2      	b.n	80053fa <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005474:	2501      	movs	r5, #1
 8005476:	60a5      	str	r5, [r4, #8]
        break;
 8005478:	e7eb      	b.n	8005452 <HAL_SUBGHZ_Init+0x92>
    return status;
 800547a:	2501      	movs	r5, #1
 800547c:	e7c6      	b.n	800540c <HAL_SUBGHZ_Init+0x4c>
 800547e:	bf00      	nop
 8005480:	58000800 	.word	0x58000800
 8005484:	58000400 	.word	0x58000400
 8005488:	20000074 	.word	0x20000074

0800548c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800548c:	b082      	sub	sp, #8
 800548e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005490:	4b1a      	ldr	r3, [pc, #104]	; (80054fc <SUBGHZSPI_Transmit+0x70>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005498:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800549c:	2064      	movs	r0, #100	; 0x64
 800549e:	fb00 f303 	mul.w	r3, r0, r3
 80054a2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80054a4:	9b01      	ldr	r3, [sp, #4]
 80054a6:	b14b      	cbz	r3, 80054bc <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054a8:	9b01      	ldr	r3, [sp, #4]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80054ae:	4b14      	ldr	r3, [pc, #80]	; (8005500 <SUBGHZSPI_Transmit+0x74>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f013 0f02 	tst.w	r3, #2
 80054b6:	d0f5      	beq.n	80054a4 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	2000      	movs	r0, #0
 80054ba:	e001      	b.n	80054c0 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054bc:	2001      	movs	r0, #1
 80054be:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <SUBGHZSPI_Transmit+0x74>)
 80054c2:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <SUBGHZSPI_Transmit+0x70>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054cc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054d0:	2164      	movs	r1, #100	; 0x64
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	b143      	cbz	r3, 80054ee <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <SUBGHZSPI_Transmit+0x74>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f013 0f01 	tst.w	r3, #1
 80054ea:	d0f5      	beq.n	80054d8 <SUBGHZSPI_Transmit+0x4c>
 80054ec:	e001      	b.n	80054f2 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80054ee:	2001      	movs	r0, #1
 80054f0:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80054f2:	4b03      	ldr	r3, [pc, #12]	; (8005500 <SUBGHZSPI_Transmit+0x74>)
 80054f4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80054f6:	b002      	add	sp, #8
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000074 	.word	0x20000074
 8005500:	58010000 	.word	0x58010000

08005504 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005504:	b082      	sub	sp, #8
 8005506:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <SUBGHZSPI_Receive+0x78>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005510:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005514:	2064      	movs	r0, #100	; 0x64
 8005516:	fb00 f303 	mul.w	r3, r0, r3
 800551a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	b14b      	cbz	r3, 8005534 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005520:	9b01      	ldr	r3, [sp, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <SUBGHZSPI_Receive+0x7c>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f013 0f02 	tst.w	r3, #2
 800552e:	d0f5      	beq.n	800551c <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005530:	2000      	movs	r0, #0
 8005532:	e001      	b.n	8005538 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005534:	2001      	movs	r0, #1
 8005536:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <SUBGHZSPI_Receive+0x7c>)
 800553a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800553e:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005542:	4b0e      	ldr	r3, [pc, #56]	; (800557c <SUBGHZSPI_Receive+0x78>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800554a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800554e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005552:	fb0c f303 	mul.w	r3, ip, r3
 8005556:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005558:	9b01      	ldr	r3, [sp, #4]
 800555a:	b143      	cbz	r3, 800556e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800555c:	9b01      	ldr	r3, [sp, #4]
 800555e:	3b01      	subs	r3, #1
 8005560:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <SUBGHZSPI_Receive+0x7c>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f013 0f01 	tst.w	r3, #1
 800556a:	d0f5      	beq.n	8005558 <SUBGHZSPI_Receive+0x54>
 800556c:	e001      	b.n	8005572 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800556e:	2001      	movs	r0, #1
 8005570:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005572:	4b03      	ldr	r3, [pc, #12]	; (8005580 <SUBGHZSPI_Receive+0x7c>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005578:	b002      	add	sp, #8
 800557a:	4770      	bx	lr
 800557c:	20000074 	.word	0x20000074
 8005580:	58010000 	.word	0x58010000

08005584 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005584:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <SUBGHZ_WaitOnBusy+0x50>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800558e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005592:	2264      	movs	r2, #100	; 0x64
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	e006      	b.n	80055aa <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80055a0:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80055a2:	b002      	add	sp, #8
 80055a4:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80055a6:	4213      	tst	r3, r2
 80055a8:	d012      	beq.n	80055d0 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <SUBGHZ_WaitOnBusy+0x54>)
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f013 0304 	ands.w	r3, r3, #4
 80055b2:	d000      	beq.n	80055b6 <SUBGHZ_WaitOnBusy+0x32>
 80055b4:	2301      	movs	r3, #1
    if (count == 0U)
 80055b6:	9a01      	ldr	r2, [sp, #4]
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d0ef      	beq.n	800559c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80055bc:	9a01      	ldr	r2, [sp, #4]
 80055be:	3a01      	subs	r2, #1
 80055c0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80055c2:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <SUBGHZ_WaitOnBusy+0x54>)
 80055c4:	6952      	ldr	r2, [r2, #20]
 80055c6:	f012 0202 	ands.w	r2, r2, #2
 80055ca:	d0ec      	beq.n	80055a6 <SUBGHZ_WaitOnBusy+0x22>
 80055cc:	2201      	movs	r2, #1
 80055ce:	e7ea      	b.n	80055a6 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80055d0:	2000      	movs	r0, #0
 80055d2:	e7e6      	b.n	80055a2 <SUBGHZ_WaitOnBusy+0x1e>
 80055d4:	20000074 	.word	0x20000074
 80055d8:	58000400 	.word	0x58000400

080055dc <SUBGHZ_CheckDeviceReady>:
{
 80055dc:	b500      	push	{lr}
 80055de:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80055e0:	7903      	ldrb	r3, [r0, #4]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d004      	beq.n	80055f0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80055e6:	f7ff ffcd 	bl	8005584 <SUBGHZ_WaitOnBusy>
}
 80055ea:	b003      	add	sp, #12
 80055ec:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80055f0:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <SUBGHZ_CheckDeviceReady+0x4c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055f8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80055fc:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <SUBGHZ_CheckDeviceReady+0x50>)
 8005600:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	3b01      	subs	r3, #1
 8005610:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005612:	9b01      	ldr	r3, [sp, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f9      	bne.n	800560c <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <SUBGHZ_CheckDeviceReady+0x50>)
 800561a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005626:	e7de      	b.n	80055e6 <SUBGHZ_CheckDeviceReady+0xa>
 8005628:	20000074 	.word	0x20000074
 800562c:	58000400 	.word	0x58000400

08005630 <HAL_SUBGHZ_WriteRegisters>:
{
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005636:	7980      	ldrb	r0, [r0, #6]
 8005638:	fa5f f880 	uxtb.w	r8, r0
 800563c:	f1b8 0f01 	cmp.w	r8, #1
 8005640:	d13e      	bne.n	80056c0 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005642:	460c      	mov	r4, r1
 8005644:	4617      	mov	r7, r2
 8005646:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005648:	796b      	ldrb	r3, [r5, #5]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d03b      	beq.n	80056c6 <HAL_SUBGHZ_WriteRegisters+0x96>
 800564e:	2301      	movs	r3, #1
 8005650:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005656:	4628      	mov	r0, r5
 8005658:	f7ff ffc0 	bl	80055dc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800565c:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800565e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800566a:	210d      	movs	r1, #13
 800566c:	4628      	mov	r0, r5
 800566e:	f7ff ff0d 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005672:	0a21      	lsrs	r1, r4, #8
 8005674:	4628      	mov	r0, r5
 8005676:	f7ff ff09 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800567a:	b2e1      	uxtb	r1, r4
 800567c:	4628      	mov	r0, r5
 800567e:	f7ff ff05 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005682:	2400      	movs	r4, #0
 8005684:	e005      	b.n	8005692 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005686:	5d39      	ldrb	r1, [r7, r4]
 8005688:	4628      	mov	r0, r5
 800568a:	f7ff feff 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800568e:	3401      	adds	r4, #1
 8005690:	b2a4      	uxth	r4, r4
 8005692:	42b4      	cmp	r4, r6
 8005694:	d3f7      	bcc.n	8005686 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005696:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005698:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800569c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056a4:	4628      	mov	r0, r5
 80056a6:	f7ff ff6d 	bl	8005584 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056aa:	68ab      	ldr	r3, [r5, #8]
 80056ac:	b90b      	cbnz	r3, 80056b2 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80056ae:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80056b2:	2301      	movs	r3, #1
 80056b4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80056b6:	2300      	movs	r3, #0
 80056b8:	716b      	strb	r3, [r5, #5]
}
 80056ba:	4640      	mov	r0, r8
 80056bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80056c0:	f04f 0802 	mov.w	r8, #2
 80056c4:	e7f9      	b.n	80056ba <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80056c6:	f04f 0802 	mov.w	r8, #2
 80056ca:	e7f6      	b.n	80056ba <HAL_SUBGHZ_WriteRegisters+0x8a>
 80056cc:	58000400 	.word	0x58000400

080056d0 <HAL_SUBGHZ_ReadRegisters>:
{
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056d6:	7980      	ldrb	r0, [r0, #6]
 80056d8:	fa5f f880 	uxtb.w	r8, r0
 80056dc:	f1b8 0f01 	cmp.w	r8, #1
 80056e0:	d141      	bne.n	8005766 <HAL_SUBGHZ_ReadRegisters+0x96>
 80056e2:	460c      	mov	r4, r1
 80056e4:	4615      	mov	r5, r2
 80056e6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80056e8:	7973      	ldrb	r3, [r6, #5]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d03e      	beq.n	800576c <HAL_SUBGHZ_ReadRegisters+0x9c>
 80056ee:	2301      	movs	r3, #1
 80056f0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ff72 	bl	80055dc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056f8:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80056fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005706:	211d      	movs	r1, #29
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff febf 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800570e:	0a21      	lsrs	r1, r4, #8
 8005710:	4630      	mov	r0, r6
 8005712:	f7ff febb 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005716:	b2e1      	uxtb	r1, r4
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff feb7 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800571e:	2100      	movs	r1, #0
 8005720:	4630      	mov	r0, r6
 8005722:	f7ff feb3 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005726:	2400      	movs	r4, #0
 8005728:	e006      	b.n	8005738 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800572a:	4629      	mov	r1, r5
 800572c:	4630      	mov	r0, r6
 800572e:	f7ff fee9 	bl	8005504 <SUBGHZSPI_Receive>
      pData++;
 8005732:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005734:	3401      	adds	r4, #1
 8005736:	b2a4      	uxth	r4, r4
 8005738:	42bc      	cmp	r4, r7
 800573a:	d3f6      	bcc.n	800572a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800573c:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800573e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800574a:	4630      	mov	r0, r6
 800574c:	f7ff ff1a 	bl	8005584 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005750:	68b3      	ldr	r3, [r6, #8]
 8005752:	b90b      	cbnz	r3, 8005758 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005754:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005758:	2301      	movs	r3, #1
 800575a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800575c:	2300      	movs	r3, #0
 800575e:	7173      	strb	r3, [r6, #5]
}
 8005760:	4640      	mov	r0, r8
 8005762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005766:	f04f 0802 	mov.w	r8, #2
 800576a:	e7f9      	b.n	8005760 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800576c:	f04f 0802 	mov.w	r8, #2
 8005770:	e7f6      	b.n	8005760 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005772:	bf00      	nop
 8005774:	58000400 	.word	0x58000400

08005778 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800577c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800577e:	7980      	ldrb	r0, [r0, #6]
 8005780:	fa5f f980 	uxtb.w	r9, r0
 8005784:	f1b9 0f01 	cmp.w	r9, #1
 8005788:	d143      	bne.n	8005812 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800578a:	4688      	mov	r8, r1
 800578c:	4617      	mov	r7, r2
 800578e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005790:	796b      	ldrb	r3, [r5, #5]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d040      	beq.n	8005818 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005796:	2301      	movs	r3, #1
 8005798:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800579a:	4628      	mov	r0, r5
 800579c:	f7ff ff1e 	bl	80055dc <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80057a0:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80057a4:	d005      	beq.n	80057b2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80057a6:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80057aa:	d002      	beq.n	80057b2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	712b      	strb	r3, [r5, #4]
 80057b0:	e001      	b.n	80057b6 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80057b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80057c4:	4641      	mov	r1, r8
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7ff fe60 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057cc:	2400      	movs	r4, #0
 80057ce:	e005      	b.n	80057dc <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80057d0:	5d39      	ldrb	r1, [r7, r4]
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7ff fe5a 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057d8:	3401      	adds	r4, #1
 80057da:	b2a4      	uxth	r4, r4
 80057dc:	42b4      	cmp	r4, r6
 80057de:	d3f7      	bcc.n	80057d0 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057e0:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80057e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80057ee:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80057f2:	d10a      	bne.n	800580a <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80057f4:	68ab      	ldr	r3, [r5, #8]
 80057f6:	b90b      	cbnz	r3, 80057fc <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80057f8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057fc:	2301      	movs	r3, #1
 80057fe:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005800:	2300      	movs	r3, #0
 8005802:	716b      	strb	r3, [r5, #5]
}
 8005804:	4648      	mov	r0, r9
 8005806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800580a:	4628      	mov	r0, r5
 800580c:	f7ff feba 	bl	8005584 <SUBGHZ_WaitOnBusy>
 8005810:	e7f0      	b.n	80057f4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005812:	f04f 0902 	mov.w	r9, #2
 8005816:	e7f5      	b.n	8005804 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005818:	f04f 0902 	mov.w	r9, #2
 800581c:	e7f2      	b.n	8005804 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800581e:	bf00      	nop
 8005820:	58000400 	.word	0x58000400

08005824 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800582a:	7980      	ldrb	r0, [r0, #6]
 800582c:	fa5f f880 	uxtb.w	r8, r0
 8005830:	f1b8 0f01 	cmp.w	r8, #1
 8005834:	d139      	bne.n	80058aa <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005836:	460c      	mov	r4, r1
 8005838:	4615      	mov	r5, r2
 800583a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800583c:	7973      	ldrb	r3, [r6, #5]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d036      	beq.n	80058b0 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005842:	2301      	movs	r3, #1
 8005844:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff fec8 	bl	80055dc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800584c:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800584e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800585a:	4621      	mov	r1, r4
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff fe15 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005862:	2100      	movs	r1, #0
 8005864:	4630      	mov	r0, r6
 8005866:	f7ff fe11 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800586a:	2400      	movs	r4, #0
 800586c:	e006      	b.n	800587c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800586e:	4629      	mov	r1, r5
 8005870:	4630      	mov	r0, r6
 8005872:	f7ff fe47 	bl	8005504 <SUBGHZSPI_Receive>
      pData++;
 8005876:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005878:	3401      	adds	r4, #1
 800587a:	b2a4      	uxth	r4, r4
 800587c:	42bc      	cmp	r4, r7
 800587e:	d3f6      	bcc.n	800586e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005880:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005882:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff fe78 	bl	8005584 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005894:	68b3      	ldr	r3, [r6, #8]
 8005896:	b90b      	cbnz	r3, 800589c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005898:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800589c:	2301      	movs	r3, #1
 800589e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80058a0:	2300      	movs	r3, #0
 80058a2:	7173      	strb	r3, [r6, #5]
}
 80058a4:	4640      	mov	r0, r8
 80058a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80058aa:	f04f 0802 	mov.w	r8, #2
 80058ae:	e7f9      	b.n	80058a4 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80058b0:	f04f 0802 	mov.w	r8, #2
 80058b4:	e7f6      	b.n	80058a4 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80058b6:	bf00      	nop
 80058b8:	58000400 	.word	0x58000400

080058bc <HAL_SUBGHZ_IRQHandler>:
{
 80058bc:	b530      	push	{r4, r5, lr}
 80058be:	b083      	sub	sp, #12
 80058c0:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80058c8:	2302      	movs	r3, #2
 80058ca:	aa01      	add	r2, sp, #4
 80058cc:	2112      	movs	r1, #18
 80058ce:	f7ff ffa9 	bl	8005824 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80058d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80058d6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80058da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80058de:	2302      	movs	r3, #2
 80058e0:	aa01      	add	r2, sp, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4628      	mov	r0, r5
 80058e6:	f7ff ff47 	bl	8005778 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80058ea:	f014 0f01 	tst.w	r4, #1
 80058ee:	d123      	bne.n	8005938 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80058f0:	f014 0f02 	tst.w	r4, #2
 80058f4:	d124      	bne.n	8005940 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80058f6:	f014 0f04 	tst.w	r4, #4
 80058fa:	d125      	bne.n	8005948 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80058fc:	f014 0f08 	tst.w	r4, #8
 8005900:	d126      	bne.n	8005950 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005902:	f014 0f10 	tst.w	r4, #16
 8005906:	d127      	bne.n	8005958 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005908:	f014 0f20 	tst.w	r4, #32
 800590c:	d128      	bne.n	8005960 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800590e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005912:	d129      	bne.n	8005968 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005914:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005918:	d006      	beq.n	8005928 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800591a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800591e:	d027      	beq.n	8005970 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005920:	2101      	movs	r1, #1
 8005922:	4628      	mov	r0, r5
 8005924:	f00b ff7e 	bl	8011824 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005928:	f414 7f00 	tst.w	r4, #512	; 0x200
 800592c:	d125      	bne.n	800597a <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800592e:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8005932:	d126      	bne.n	8005982 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8005934:	b003      	add	sp, #12
 8005936:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005938:	4628      	mov	r0, r5
 800593a:	f00b ff5b 	bl	80117f4 <HAL_SUBGHZ_TxCpltCallback>
 800593e:	e7d7      	b.n	80058f0 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005940:	4628      	mov	r0, r5
 8005942:	f00b ff5f 	bl	8011804 <HAL_SUBGHZ_RxCpltCallback>
 8005946:	e7d6      	b.n	80058f6 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005948:	4628      	mov	r0, r5
 800594a:	f00b ff8f 	bl	801186c <HAL_SUBGHZ_PreambleDetectedCallback>
 800594e:	e7d5      	b.n	80058fc <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005950:	4628      	mov	r0, r5
 8005952:	f00b ff93 	bl	801187c <HAL_SUBGHZ_SyncWordValidCallback>
 8005956:	e7d4      	b.n	8005902 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005958:	4628      	mov	r0, r5
 800595a:	f00b ff97 	bl	801188c <HAL_SUBGHZ_HeaderValidCallback>
 800595e:	e7d3      	b.n	8005908 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005960:	4628      	mov	r0, r5
 8005962:	f00b ff7b 	bl	801185c <HAL_SUBGHZ_HeaderErrorCallback>
 8005966:	e7d2      	b.n	800590e <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005968:	4628      	mov	r0, r5
 800596a:	f00b ff53 	bl	8011814 <HAL_SUBGHZ_CRCErrorCallback>
 800596e:	e7d1      	b.n	8005914 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f00b ff56 	bl	8011824 <HAL_SUBGHZ_CADStatusCallback>
 8005978:	e7d6      	b.n	8005928 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800597a:	4628      	mov	r0, r5
 800597c:	f00b ff64 	bl	8011848 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005980:	e7d5      	b.n	800592e <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005982:	4628      	mov	r0, r5
 8005984:	f00b ff8a 	bl	801189c <HAL_SUBGHZ_LrFhssHopCallback>
}
 8005988:	e7d4      	b.n	8005934 <HAL_SUBGHZ_IRQHandler+0x78>
	...

0800598c <HAL_SUBGHZ_WriteBuffer>:
{
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005992:	7980      	ldrb	r0, [r0, #6]
 8005994:	fa5f f880 	uxtb.w	r8, r0
 8005998:	f1b8 0f01 	cmp.w	r8, #1
 800599c:	d138      	bne.n	8005a10 <HAL_SUBGHZ_WriteBuffer+0x84>
 800599e:	460c      	mov	r4, r1
 80059a0:	4617      	mov	r7, r2
 80059a2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80059a4:	796b      	ldrb	r3, [r5, #5]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d035      	beq.n	8005a16 <HAL_SUBGHZ_WriteBuffer+0x8a>
 80059aa:	2301      	movs	r3, #1
 80059ac:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059ae:	4628      	mov	r0, r5
 80059b0:	f7ff fe14 	bl	80055dc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059b4:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80059b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80059c2:	210e      	movs	r1, #14
 80059c4:	4628      	mov	r0, r5
 80059c6:	f7ff fd61 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f7ff fd5d 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059d2:	2400      	movs	r4, #0
 80059d4:	e005      	b.n	80059e2 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80059d6:	5d39      	ldrb	r1, [r7, r4]
 80059d8:	4628      	mov	r0, r5
 80059da:	f7ff fd57 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059de:	3401      	adds	r4, #1
 80059e0:	b2a4      	uxth	r4, r4
 80059e2:	42b4      	cmp	r4, r6
 80059e4:	d3f7      	bcc.n	80059d6 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059e6:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80059e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059f4:	4628      	mov	r0, r5
 80059f6:	f7ff fdc5 	bl	8005584 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059fa:	68ab      	ldr	r3, [r5, #8]
 80059fc:	b90b      	cbnz	r3, 8005a02 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80059fe:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a02:	2301      	movs	r3, #1
 8005a04:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005a06:	2300      	movs	r3, #0
 8005a08:	716b      	strb	r3, [r5, #5]
}
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005a10:	f04f 0802 	mov.w	r8, #2
 8005a14:	e7f9      	b.n	8005a0a <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005a16:	f04f 0802 	mov.w	r8, #2
 8005a1a:	e7f6      	b.n	8005a0a <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005a1c:	58000400 	.word	0x58000400

08005a20 <HAL_SUBGHZ_ReadBuffer>:
{
 8005a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a24:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a26:	7980      	ldrb	r0, [r0, #6]
 8005a28:	fa5f f880 	uxtb.w	r8, r0
 8005a2c:	f1b8 0f01 	cmp.w	r8, #1
 8005a30:	d13d      	bne.n	8005aae <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005a32:	460c      	mov	r4, r1
 8005a34:	4615      	mov	r5, r2
 8005a36:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005a38:	7973      	ldrb	r3, [r6, #5]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d03a      	beq.n	8005ab4 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a42:	4630      	mov	r0, r6
 8005a44:	f7ff fdca 	bl	80055dc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005a56:	211e      	movs	r1, #30
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f7ff fd17 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff fd13 	bl	800548c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a66:	2100      	movs	r1, #0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff fd0f 	bl	800548c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a6e:	2400      	movs	r4, #0
 8005a70:	e006      	b.n	8005a80 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a72:	4629      	mov	r1, r5
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7ff fd45 	bl	8005504 <SUBGHZSPI_Receive>
      pData++;
 8005a7a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005a7c:	3401      	adds	r4, #1
 8005a7e:	b2a4      	uxth	r4, r4
 8005a80:	42bc      	cmp	r4, r7
 8005a82:	d3f6      	bcc.n	8005a72 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a84:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff fd76 	bl	8005584 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a98:	68b3      	ldr	r3, [r6, #8]
 8005a9a:	b90b      	cbnz	r3, 8005aa0 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005a9c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	7173      	strb	r3, [r6, #5]
}
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005aae:	f04f 0802 	mov.w	r8, #2
 8005ab2:	e7f9      	b.n	8005aa8 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005ab4:	f04f 0802 	mov.w	r8, #2
 8005ab8:	e7f6      	b.n	8005aa8 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005aba:	bf00      	nop
 8005abc:	58000400 	.word	0x58000400

08005ac0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ac0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	e852 3f00 	ldrex	r3, [r2]
 8005ac6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	e842 3100 	strex	r1, r3, [r2]
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d1f6      	bne.n	8005ac0 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ad2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	f102 0308 	add.w	r3, r2, #8
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	3208      	adds	r2, #8
 8005ae2:	e842 3100 	strex	r1, r3, [r2]
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d1f3      	bne.n	8005ad2 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aea:	2320      	movs	r3, #32
 8005aec:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005af0:	4770      	bx	lr

08005af2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005af2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	e852 3f00 	ldrex	r3, [r2]
 8005af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	e842 3100 	strex	r1, r3, [r2]
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d1f6      	bne.n	8005af2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	f102 0308 	add.w	r3, r2, #8
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b12:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	3208      	adds	r2, #8
 8005b18:	e842 3100 	strex	r1, r3, [r2]
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d1f1      	bne.n	8005b04 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d006      	beq.n	8005b34 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b26:	2320      	movs	r3, #32
 8005b28:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b30:	6743      	str	r3, [r0, #116]	; 0x74
}
 8005b32:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	e852 3f00 	ldrex	r3, [r2]
 8005b3a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	e842 3100 	strex	r1, r3, [r2]
 8005b42:	2900      	cmp	r1, #0
 8005b44:	d1f6      	bne.n	8005b34 <UART_EndRxTransfer+0x42>
 8005b46:	e7ee      	b.n	8005b26 <UART_EndRxTransfer+0x34>

08005b48 <HAL_UART_Transmit_DMA>:
{
 8005b48:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005b4e:	2a20      	cmp	r2, #32
 8005b50:	d13d      	bne.n	8005bce <HAL_UART_Transmit_DMA+0x86>
{
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d03b      	beq.n	8005bd2 <HAL_UART_Transmit_DMA+0x8a>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d03b      	beq.n	8005bd6 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8005b5e:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005b60:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b64:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8005b74:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b76:	b1ca      	cbz	r2, 8005bac <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b78:	4918      	ldr	r1, [pc, #96]	; (8005bdc <HAL_UART_Transmit_DMA+0x94>)
 8005b7a:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b7c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b7e:	4918      	ldr	r1, [pc, #96]	; (8005be0 <HAL_UART_Transmit_DMA+0x98>)
 8005b80:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b82:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b84:	4917      	ldr	r1, [pc, #92]	; (8005be4 <HAL_UART_Transmit_DMA+0x9c>)
 8005b86:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005b88:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b8e:	6802      	ldr	r2, [r0, #0]
 8005b90:	3228      	adds	r2, #40	; 0x28
 8005b92:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005b94:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005b96:	f7fd fe3b 	bl	8003810 <HAL_DMA_Start_IT>
 8005b9a:	b138      	cbz	r0, 8005bac <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8005ba2:	2320      	movs	r3, #32
 8005ba4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8005ba8:	2001      	movs	r0, #1
 8005baa:	e00f      	b.n	8005bcc <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f102 0308 	add.w	r3, r2, #8
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	e842 3100 	strex	r1, r3, [r2]
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d1f3      	bne.n	8005bb2 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8005bca:	2000      	movs	r0, #0
}
 8005bcc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005bce:	2002      	movs	r0, #2
}
 8005bd0:	4770      	bx	lr
      return HAL_ERROR;
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	e7fa      	b.n	8005bcc <HAL_UART_Transmit_DMA+0x84>
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	e7f8      	b.n	8005bcc <HAL_UART_Transmit_DMA+0x84>
 8005bda:	bf00      	nop
 8005bdc:	08005be9 	.word	0x08005be9
 8005be0:	08005c57 	.word	0x08005c57
 8005be4:	08005c63 	.word	0x08005c63

08005be8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005be8:	b508      	push	{r3, lr}
 8005bea:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bec:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f013 0f20 	tst.w	r3, #32
 8005bf6:	d118      	bne.n	8005c2a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bfe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	f102 0308 	add.w	r3, r2, #8
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	3208      	adds	r2, #8
 8005c0e:	e842 3100 	strex	r1, r3, [r2]
 8005c12:	2900      	cmp	r1, #0
 8005c14:	d1f3      	bne.n	8005bfe <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c16:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	e852 3f00 	ldrex	r3, [r2]
 8005c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	e842 3100 	strex	r1, r3, [r2]
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d1f6      	bne.n	8005c16 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c28:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005c2a:	f7fc f9ad 	bl	8001f88 <HAL_UART_TxCpltCallback>
}
 8005c2e:	e7fb      	b.n	8005c28 <UART_DMATransmitCplt+0x40>

08005c30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c30:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	e852 3f00 	ldrex	r3, [r2]
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	e842 3100 	strex	r1, r3, [r2]
 8005c40:	2900      	cmp	r1, #0
 8005c42:	d1f6      	bne.n	8005c32 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c44:	2320      	movs	r3, #32
 8005c46:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4e:	f7fc f99b 	bl	8001f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c52:	bd08      	pop	{r3, pc}

08005c54 <HAL_UART_TxHalfCpltCallback>:
}
 8005c54:	4770      	bx	lr

08005c56 <UART_DMATxHalfCplt>:
{
 8005c56:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005c58:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c5a:	f7ff fffb 	bl	8005c54 <HAL_UART_TxHalfCpltCallback>
}
 8005c5e:	bd08      	pop	{r3, pc}

08005c60 <HAL_UART_ErrorCallback>:
}
 8005c60:	4770      	bx	lr

08005c62 <UART_DMAError>:
{
 8005c62:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c64:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c66:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c6a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c76:	d001      	beq.n	8005c7c <UART_DMAError+0x1a>
 8005c78:	2a21      	cmp	r2, #33	; 0x21
 8005c7a:	d010      	beq.n	8005c9e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c84:	d001      	beq.n	8005c8a <UART_DMAError+0x28>
 8005c86:	2d22      	cmp	r5, #34	; 0x22
 8005c88:	d010      	beq.n	8005cac <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c8e:	f043 0310 	orr.w	r3, r3, #16
 8005c92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff ffe2 	bl	8005c60 <HAL_UART_ErrorCallback>
}
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7ff ff0b 	bl	8005ac0 <UART_EndTxTransfer>
 8005caa:	e7e7      	b.n	8005c7c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f7ff ff1d 	bl	8005af2 <UART_EndRxTransfer>
 8005cb8:	e7e7      	b.n	8005c8a <UART_DMAError+0x28>

08005cba <UART_DMAAbortOnError>:
{
 8005cba:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cbc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005cc4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005cc8:	f7ff ffca 	bl	8005c60 <HAL_UART_ErrorCallback>
}
 8005ccc:	bd08      	pop	{r3, pc}

08005cce <HAL_UARTEx_RxEventCallback>:
}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_IRQHandler>:
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cd4:	6801      	ldr	r1, [r0, #0]
 8005cd6:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd8:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cda:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cdc:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005ce0:	401a      	ands	r2, r3
 8005ce2:	d108      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ce4:	f013 0f20 	tst.w	r3, #32
 8005ce8:	d005      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cea:	f010 0f20 	tst.w	r0, #32
 8005cee:	d134      	bne.n	8005d5a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cf0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005cf4:	d131      	bne.n	8005d5a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005cf6:	b12a      	cbz	r2, 8005d04 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cf8:	4a99      	ldr	r2, [pc, #612]	; (8005f60 <HAL_UART_IRQHandler+0x290>)
 8005cfa:	402a      	ands	r2, r5
 8005cfc:	d133      	bne.n	8005d66 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cfe:	4e99      	ldr	r6, [pc, #612]	; (8005f64 <HAL_UART_IRQHandler+0x294>)
 8005d00:	4230      	tst	r0, r6
 8005d02:	d130      	bne.n	8005d66 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005d06:	2a01      	cmp	r2, #1
 8005d08:	f000 80c6 	beq.w	8005e98 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x4a>
 8005d12:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005d16:	f040 8165 	bne.w	8005fe4 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d1e:	d007      	beq.n	8005d30 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d20:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d24:	f040 8165 	bne.w	8005ff2 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d28:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005d2c:	f040 8161 	bne.w	8005ff2 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d34:	d003      	beq.n	8005d3e <HAL_UART_IRQHandler+0x6e>
 8005d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d3a:	f040 8161 	bne.w	8006000 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d3e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005d42:	d003      	beq.n	8005d4c <HAL_UART_IRQHandler+0x7c>
 8005d44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d48:	f040 815e 	bne.w	8006008 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_IRQHandler+0x88>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f2c0 815c 	blt.w	8006010 <HAL_UART_IRQHandler+0x340>
}
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005d5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0fb      	beq.n	8005d58 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005d60:	4620      	mov	r0, r4
 8005d62:	4798      	blx	r3
      return;
 8005d64:	e7f8      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d66:	f013 0f01 	tst.w	r3, #1
 8005d6a:	d009      	beq.n	8005d80 <HAL_UART_IRQHandler+0xb0>
 8005d6c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005d70:	d006      	beq.n	8005d80 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d72:	2601      	movs	r6, #1
 8005d74:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d76:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005d7a:	4331      	orrs	r1, r6
 8005d7c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d80:	f013 0f02 	tst.w	r3, #2
 8005d84:	d00b      	beq.n	8005d9e <HAL_UART_IRQHandler+0xce>
 8005d86:	f015 0f01 	tst.w	r5, #1
 8005d8a:	d008      	beq.n	8005d9e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d8c:	6821      	ldr	r1, [r4, #0]
 8005d8e:	2602      	movs	r6, #2
 8005d90:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d92:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005d96:	f041 0104 	orr.w	r1, r1, #4
 8005d9a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9e:	f013 0f04 	tst.w	r3, #4
 8005da2:	d00b      	beq.n	8005dbc <HAL_UART_IRQHandler+0xec>
 8005da4:	f015 0f01 	tst.w	r5, #1
 8005da8:	d008      	beq.n	8005dbc <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	2604      	movs	r6, #4
 8005dae:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005db4:	f041 0102 	orr.w	r1, r1, #2
 8005db8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dbc:	f013 0f08 	tst.w	r3, #8
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc2:	f010 0f20 	tst.w	r0, #32
 8005dc6:	d100      	bne.n	8005dca <HAL_UART_IRQHandler+0xfa>
 8005dc8:	b13a      	cbz	r2, 8005dda <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	2108      	movs	r1, #8
 8005dce:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dda:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005dde:	d00c      	beq.n	8005dfa <HAL_UART_IRQHandler+0x12a>
 8005de0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005de4:	d009      	beq.n	8005dfa <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dec:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dee:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005df2:	f042 0220 	orr.w	r2, r2, #32
 8005df6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d0aa      	beq.n	8005d58 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e02:	f013 0f20 	tst.w	r3, #32
 8005e06:	d009      	beq.n	8005e1c <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e08:	f010 0f20 	tst.w	r0, #32
 8005e0c:	d102      	bne.n	8005e14 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e0e:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005e12:	d003      	beq.n	8005e1c <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005e14:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005e16:	b10b      	cbz	r3, 8005e1c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005e1c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e28:	d102      	bne.n	8005e30 <HAL_UART_IRQHandler+0x160>
 8005e2a:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005e2e:	d02c      	beq.n	8005e8a <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fe5e 	bl	8005af2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e3e:	d020      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	f102 0308 	add.w	r3, r2, #8
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	3208      	adds	r2, #8
 8005e50:	e842 3100 	strex	r1, r3, [r2]
 8005e54:	2900      	cmp	r1, #0
 8005e56:	d1f3      	bne.n	8005e40 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005e58:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005e5c:	b16b      	cbz	r3, 8005e7a <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e5e:	4a42      	ldr	r2, [pc, #264]	; (8005f68 <HAL_UART_IRQHandler+0x298>)
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e62:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005e66:	f7fd fd59 	bl	800391c <HAL_DMA_Abort_IT>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	f43f af74 	beq.w	8005d58 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005e74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e76:	4798      	blx	r3
 8005e78:	e76e      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff fef0 	bl	8005c60 <HAL_UART_ErrorCallback>
 8005e80:	e76a      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7ff feec 	bl	8005c60 <HAL_UART_ErrorCallback>
 8005e88:	e766      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fee8 	bl	8005c60 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8005e96:	e75f      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e98:	f013 0f10 	tst.w	r3, #16
 8005e9c:	f43f af36 	beq.w	8005d0c <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ea0:	f010 0f10 	tst.w	r0, #16
 8005ea4:	f43f af32 	beq.w	8005d0c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005eb4:	d05a      	beq.n	8005f6c <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eb6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005eba:	6813      	ldr	r3, [r2, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f43f af49 	beq.w	8005d58 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ec6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	f67f af44 	bls.w	8005d58 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005ed0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f013 0f20 	tst.w	r3, #32
 8005edc:	d132      	bne.n	8005f44 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ede:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	e852 3f00 	ldrex	r3, [r2]
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	e842 3100 	strex	r1, r3, [r2]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d1f6      	bne.n	8005ede <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	f102 0308 	add.w	r3, r2, #8
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	3208      	adds	r2, #8
 8005f00:	e842 3100 	strex	r1, r3, [r2]
 8005f04:	2900      	cmp	r1, #0
 8005f06:	d1f3      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	f102 0308 	add.w	r3, r2, #8
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	3208      	adds	r2, #8
 8005f18:	e842 3100 	strex	r1, r3, [r2]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d1f3      	bne.n	8005f08 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8005f20:	2320      	movs	r3, #32
 8005f22:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	2300      	movs	r3, #0
 8005f28:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	e852 3f00 	ldrex	r3, [r2]
 8005f30:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	e842 3100 	strex	r1, r3, [r2]
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d1f6      	bne.n	8005f2a <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005f40:	f7fd fcb2 	bl	80038a8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f44:	2302      	movs	r3, #2
 8005f46:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f48:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ac9      	subs	r1, r1, r3
 8005f54:	b289      	uxth	r1, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff feb9 	bl	8005cce <HAL_UARTEx_RxEventCallback>
      return;
 8005f5c:	e6fc      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
 8005f5e:	bf00      	nop
 8005f60:	10000001 	.word	0x10000001
 8005f64:	04000120 	.word	0x04000120
 8005f68:	08005cbb 	.word	0x08005cbb
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f6c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f70:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	1ac9      	subs	r1, r1, r3
 8005f78:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005f7a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f43f aee9 	beq.w	8005d58 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8005f86:	2900      	cmp	r1, #0
 8005f88:	f43f aee6 	beq.w	8005d58 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	e852 3f00 	ldrex	r3, [r2]
 8005f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	e842 3000 	strex	r0, r3, [r2]
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d1f6      	bne.n	8005f8c <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	f102 0308 	add.w	r3, r2, #8
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	e842 3000 	strex	r0, r3, [r2]
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1f1      	bne.n	8005f9e <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8005fba:	2320      	movs	r3, #32
 8005fbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005fc4:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	e852 3f00 	ldrex	r3, [r2]
 8005fcc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	e842 3000 	strex	r0, r3, [r2]
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d1f6      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff fe76 	bl	8005cce <HAL_UARTEx_RxEventCallback>
      return;
 8005fe2:	e6b9      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fe8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fe62 	bl	8006cb4 <HAL_UARTEx_WakeupCallback>
    return;
 8005ff0:	e6b2      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005ff2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f43f aeaf 	beq.w	8005d58 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4798      	blx	r3
    return;
 8005ffe:	e6ab      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8006000:	4620      	mov	r0, r4
 8006002:	f7ff fe15 	bl	8005c30 <UART_EndTransmit_IT>
    return;
 8006006:	e6a7      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006008:	4620      	mov	r0, r4
 800600a:	f000 fe55 	bl	8006cb8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800600e:	e6a3      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fe50 	bl	8006cb6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006016:	e69f      	b.n	8005d58 <HAL_UART_IRQHandler+0x88>

08006018 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006018:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800601a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800601e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006022:	2a22      	cmp	r2, #34	; 0x22
 8006024:	d005      	beq.n	8006032 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006026:	6802      	ldr	r2, [r0, #0]
 8006028:	6993      	ldr	r3, [r2, #24]
 800602a:	f043 0308 	orr.w	r3, r3, #8
 800602e:	6193      	str	r3, [r2, #24]
  }
}
 8006030:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006032:	6802      	ldr	r2, [r0, #0]
 8006034:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006036:	b2db      	uxtb	r3, r3
 8006038:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800603a:	400b      	ands	r3, r1
 800603c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800603e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006040:	3301      	adds	r3, #1
 8006042:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006044:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006052:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e9      	bne.n	8006030 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800605c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	e852 3f00 	ldrex	r3, [r2]
 8006062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	e842 3100 	strex	r1, r3, [r2]
 800606a:	2900      	cmp	r1, #0
 800606c:	d1f6      	bne.n	800605c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	f102 0308 	add.w	r3, r2, #8
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	3208      	adds	r2, #8
 800607e:	e842 3100 	strex	r1, r3, [r2]
 8006082:	2900      	cmp	r1, #0
 8006084:	d1f3      	bne.n	800606e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006086:	2320      	movs	r3, #32
 8006088:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800608c:	2300      	movs	r3, #0
 800608e:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006090:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006092:	6803      	ldr	r3, [r0, #0]
 8006094:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <UART_RxISR_8BIT+0xd8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00c      	beq.n	80060b4 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80060a0:	d008      	beq.n	80060b4 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	e852 3f00 	ldrex	r3, [r2]
 80060a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	e842 3100 	strex	r1, r3, [r2]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d1f6      	bne.n	80060a2 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d116      	bne.n	80060e8 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	2300      	movs	r3, #0
 80060bc:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	e852 3f00 	ldrex	r3, [r2]
 80060c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	e842 3100 	strex	r1, r3, [r2]
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d1f6      	bne.n	80060be <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060d0:	6803      	ldr	r3, [r0, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	f012 0f10 	tst.w	r2, #16
 80060d8:	d001      	beq.n	80060de <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060da:	2210      	movs	r2, #16
 80060dc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060de:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80060e2:	f7ff fdf4 	bl	8005cce <HAL_UARTEx_RxEventCallback>
 80060e6:	e7a3      	b.n	8006030 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80060e8:	f7fb ff5e 	bl	8001fa8 <HAL_UART_RxCpltCallback>
 80060ec:	e7a0      	b.n	8006030 <UART_RxISR_8BIT+0x18>
 80060ee:	bf00      	nop
 80060f0:	40008000 	.word	0x40008000

080060f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060f4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060f6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80060fe:	2b22      	cmp	r3, #34	; 0x22
 8006100:	d005      	beq.n	800610e <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006102:	6802      	ldr	r2, [r0, #0]
 8006104:	6993      	ldr	r3, [r2, #24]
 8006106:	f043 0308 	orr.w	r3, r3, #8
 800610a:	6193      	str	r3, [r2, #24]
  }
}
 800610c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800610e:	6803      	ldr	r3, [r0, #0]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006112:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006114:	4013      	ands	r3, r2
 8006116:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006118:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800611a:	3302      	adds	r3, #2
 800611c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800611e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800612c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1ea      	bne.n	800610c <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006136:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	e852 3f00 	ldrex	r3, [r2]
 800613c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	e842 3100 	strex	r1, r3, [r2]
 8006144:	2900      	cmp	r1, #0
 8006146:	d1f6      	bne.n	8006136 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	f102 0308 	add.w	r3, r2, #8
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	3208      	adds	r2, #8
 8006158:	e842 3100 	strex	r1, r3, [r2]
 800615c:	2900      	cmp	r1, #0
 800615e:	d1f3      	bne.n	8006148 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006160:	2320      	movs	r3, #32
 8006162:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616a:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800616c:	6803      	ldr	r3, [r0, #0]
 800616e:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <UART_RxISR_16BIT+0xd4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00c      	beq.n	800618e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800617a:	d008      	beq.n	800618e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800617c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	e852 3f00 	ldrex	r3, [r2]
 8006182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	e842 3100 	strex	r1, r3, [r2]
 800618a:	2900      	cmp	r1, #0
 800618c:	d1f6      	bne.n	800617c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d116      	bne.n	80061c2 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	2300      	movs	r3, #0
 8006196:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	e852 3f00 	ldrex	r3, [r2]
 800619e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	e842 3100 	strex	r1, r3, [r2]
 80061a6:	2900      	cmp	r1, #0
 80061a8:	d1f6      	bne.n	8006198 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	f012 0f10 	tst.w	r2, #16
 80061b2:	d001      	beq.n	80061b8 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b4:	2210      	movs	r2, #16
 80061b6:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80061bc:	f7ff fd87 	bl	8005cce <HAL_UARTEx_RxEventCallback>
 80061c0:	e7a4      	b.n	800610c <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80061c2:	f7fb fef1 	bl	8001fa8 <HAL_UART_RxCpltCallback>
 80061c6:	e7a1      	b.n	800610c <UART_RxISR_16BIT+0x18>
 80061c8:	40008000 	.word	0x40008000

080061cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80061d0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061d4:	6803      	ldr	r3, [r0, #0]
 80061d6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061d8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061dc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80061e4:	2a22      	cmp	r2, #34	; 0x22
 80061e6:	d005      	beq.n	80061f4 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]
  }
}
 80061f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80061f6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061fa:	e008      	b.n	800620e <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006200:	2b00      	cmp	r3, #0
 8006202:	d14c      	bne.n	800629e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006204:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d04e      	beq.n	80062ac <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800620e:	2f00      	cmp	r7, #0
 8006210:	f000 809a 	beq.w	8006348 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006214:	f015 0f20 	tst.w	r5, #32
 8006218:	f000 8096 	beq.w	8006348 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006220:	b2f3      	uxtb	r3, r6
 8006222:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006224:	400b      	ands	r3, r1
 8006226:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800622a:	3301      	adds	r3, #1
 800622c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800622e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29b      	uxth	r3, r3
 8006238:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006240:	f015 0f07 	tst.w	r5, #7
 8006244:	d0de      	beq.n	8006204 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006246:	f015 0f01 	tst.w	r5, #1
 800624a:	d009      	beq.n	8006260 <UART_RxISR_8BIT_FIFOEN+0x94>
 800624c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006250:	d006      	beq.n	8006260 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006252:	2201      	movs	r2, #1
 8006254:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006256:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006260:	f015 0f02 	tst.w	r5, #2
 8006264:	d00b      	beq.n	800627e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006266:	f018 0f01 	tst.w	r8, #1
 800626a:	d008      	beq.n	800627e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	2202      	movs	r2, #2
 8006270:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006272:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800627e:	f015 0f04 	tst.w	r5, #4
 8006282:	d0bb      	beq.n	80061fc <UART_RxISR_8BIT_FIFOEN+0x30>
 8006284:	f018 0f01 	tst.w	r8, #1
 8006288:	d0b8      	beq.n	80061fc <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	2204      	movs	r2, #4
 800628e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006290:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800629c:	e7ae      	b.n	80061fc <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800629e:	4620      	mov	r0, r4
 80062a0:	f7ff fcde 	bl	8005c60 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80062aa:	e7ab      	b.n	8006204 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	e852 3f00 	ldrex	r3, [r2]
 80062b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	e842 3100 	strex	r1, r3, [r2]
 80062ba:	2900      	cmp	r1, #0
 80062bc:	d1f6      	bne.n	80062ac <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	f102 0308 	add.w	r3, r2, #8
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	3208      	adds	r2, #8
 80062d2:	e842 3100 	strex	r1, r3, [r2]
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d1f1      	bne.n	80062be <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80062da:	2320      	movs	r3, #32
 80062dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e4:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80062f4:	d106      	bne.n	8006304 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d00d      	beq.n	8006318 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80062fc:	4620      	mov	r0, r4
 80062fe:	f7fb fe53 	bl	8001fa8 <HAL_UART_RxCpltCallback>
 8006302:	e784      	b.n	800620e <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006304:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	e852 3f00 	ldrex	r3, [r2]
 800630a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	e842 3100 	strex	r1, r3, [r2]
 8006312:	2900      	cmp	r1, #0
 8006314:	d1f6      	bne.n	8006304 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006316:	e7ee      	b.n	80062f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	2300      	movs	r3, #0
 800631a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	e852 3f00 	ldrex	r3, [r2]
 8006322:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	e842 3100 	strex	r1, r3, [r2]
 800632a:	2900      	cmp	r1, #0
 800632c:	d1f6      	bne.n	800631c <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	f012 0f10 	tst.w	r2, #16
 8006336:	d001      	beq.n	800633c <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006338:	2210      	movs	r2, #16
 800633a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800633c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006340:	4620      	mov	r0, r4
 8006342:	f7ff fcc4 	bl	8005cce <HAL_UARTEx_RxEventCallback>
 8006346:	e762      	b.n	800620e <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006348:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800634c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800634e:	2b00      	cmp	r3, #0
 8006350:	f43f af4e 	beq.w	80061f0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006354:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006358:	429a      	cmp	r2, r3
 800635a:	f67f af49 	bls.w	80061f0 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800635e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	f102 0308 	add.w	r3, r2, #8
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	3208      	adds	r2, #8
 800636e:	e842 3100 	strex	r1, r3, [r2]
 8006372:	2900      	cmp	r1, #0
 8006374:	d1f3      	bne.n	800635e <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006378:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800637a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	e852 3f00 	ldrex	r3, [r2]
 8006380:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	e842 3100 	strex	r1, r3, [r2]
 8006388:	2900      	cmp	r1, #0
 800638a:	d1f6      	bne.n	800637a <UART_RxISR_8BIT_FIFOEN+0x1ae>
 800638c:	e730      	b.n	80061f0 <UART_RxISR_8BIT_FIFOEN+0x24>
 800638e:	bf00      	nop
 8006390:	40008000 	.word	0x40008000
 8006394:	08006019 	.word	0x08006019

08006398 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800639c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063a0:	6803      	ldr	r3, [r0, #0]
 80063a2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063a4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063a8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ac:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80063b0:	2a22      	cmp	r2, #34	; 0x22
 80063b2:	d005      	beq.n	80063c0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	f042 0208 	orr.w	r2, r2, #8
 80063ba:	619a      	str	r2, [r3, #24]
  }
}
 80063bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80063c2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063c6:	e008      	b.n	80063da <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d14b      	bne.n	8006468 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80063d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04d      	beq.n	8006476 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063da:	2f00      	cmp	r7, #0
 80063dc:	f000 8099 	beq.w	8006512 <UART_RxISR_16BIT_FIFOEN+0x17a>
 80063e0:	f015 0f20 	tst.w	r5, #32
 80063e4:	f000 8095 	beq.w	8006512 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80063ee:	4033      	ands	r3, r6
 80063f0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80063f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063f4:	3302      	adds	r3, #2
 80063f6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80063f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800640a:	f015 0f07 	tst.w	r5, #7
 800640e:	d0df      	beq.n	80063d0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006410:	f015 0f01 	tst.w	r5, #1
 8006414:	d009      	beq.n	800642a <UART_RxISR_16BIT_FIFOEN+0x92>
 8006416:	f419 7f80 	tst.w	r9, #256	; 0x100
 800641a:	d006      	beq.n	800642a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800641c:	2201      	movs	r2, #1
 800641e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006420:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800642a:	f015 0f02 	tst.w	r5, #2
 800642e:	d00b      	beq.n	8006448 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006430:	f018 0f01 	tst.w	r8, #1
 8006434:	d008      	beq.n	8006448 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	2202      	movs	r2, #2
 800643a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800643c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006440:	f043 0304 	orr.w	r3, r3, #4
 8006444:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006448:	f015 0f04 	tst.w	r5, #4
 800644c:	d0bc      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x30>
 800644e:	f018 0f01 	tst.w	r8, #1
 8006452:	d0b9      	beq.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	2204      	movs	r2, #4
 8006458:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800645a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800645e:	f043 0302 	orr.w	r3, r3, #2
 8006462:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006466:	e7af      	b.n	80063c8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff fbf9 	bl	8005c60 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006474:	e7ac      	b.n	80063d0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006476:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	e852 3f00 	ldrex	r3, [r2]
 800647c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	e842 3100 	strex	r1, r3, [r2]
 8006484:	2900      	cmp	r1, #0
 8006486:	d1f6      	bne.n	8006476 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006488:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	f102 0308 	add.w	r3, r2, #8
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006496:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	3208      	adds	r2, #8
 800649c:	e842 3100 	strex	r1, r3, [r2]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	d1f1      	bne.n	8006488 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80064a4:	2320      	movs	r3, #32
 80064a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ae:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80064be:	d106      	bne.n	80064ce <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d00d      	beq.n	80064e2 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fb fd6e 	bl	8001fa8 <HAL_UART_RxCpltCallback>
 80064cc:	e785      	b.n	80063da <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	e852 3f00 	ldrex	r3, [r2]
 80064d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	e842 3100 	strex	r1, r3, [r2]
 80064dc:	2900      	cmp	r1, #0
 80064de:	d1f6      	bne.n	80064ce <UART_RxISR_16BIT_FIFOEN+0x136>
 80064e0:	e7ee      	b.n	80064c0 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	2300      	movs	r3, #0
 80064e4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	e852 3f00 	ldrex	r3, [r2]
 80064ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	e842 3100 	strex	r1, r3, [r2]
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d1f6      	bne.n	80064e6 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	f012 0f10 	tst.w	r2, #16
 8006500:	d001      	beq.n	8006506 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006502:	2210      	movs	r2, #16
 8006504:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006506:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fbdf 	bl	8005cce <HAL_UARTEx_RxEventCallback>
 8006510:	e763      	b.n	80063da <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006512:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006516:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006518:	2b00      	cmp	r3, #0
 800651a:	f43f af4f 	beq.w	80063bc <UART_RxISR_16BIT_FIFOEN+0x24>
 800651e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006522:	429a      	cmp	r2, r3
 8006524:	f67f af4a 	bls.w	80063bc <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006528:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	f102 0308 	add.w	r3, r2, #8
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	3208      	adds	r2, #8
 8006538:	e842 3100 	strex	r1, r3, [r2]
 800653c:	2900      	cmp	r1, #0
 800653e:	d1f3      	bne.n	8006528 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8006542:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006544:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	e852 3f00 	ldrex	r3, [r2]
 800654a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	e842 3100 	strex	r1, r3, [r2]
 8006552:	2900      	cmp	r1, #0
 8006554:	d1f6      	bne.n	8006544 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8006556:	e731      	b.n	80063bc <UART_RxISR_16BIT_FIFOEN+0x24>
 8006558:	40008000 	.word	0x40008000
 800655c:	080060f5 	.word	0x080060f5

08006560 <UART_SetConfig>:
{
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006564:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006566:	6883      	ldr	r3, [r0, #8]
 8006568:	6902      	ldr	r2, [r0, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	6942      	ldr	r2, [r0, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	69c2      	ldr	r2, [r0, #28]
 8006572:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006574:	6808      	ldr	r0, [r1, #0]
 8006576:	4a9d      	ldr	r2, [pc, #628]	; (80067ec <UART_SetConfig+0x28c>)
 8006578:	4002      	ands	r2, r0
 800657a:	4313      	orrs	r3, r2
 800657c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	6853      	ldr	r3, [r2, #4]
 8006582:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006586:	68e1      	ldr	r1, [r4, #12]
 8006588:	430b      	orrs	r3, r1
 800658a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	4b97      	ldr	r3, [pc, #604]	; (80067f0 <UART_SetConfig+0x290>)
 8006592:	429a      	cmp	r2, r3
 8006594:	d001      	beq.n	800659a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006596:	6a23      	ldr	r3, [r4, #32]
 8006598:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800659a:	6893      	ldr	r3, [r2, #8]
 800659c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065a0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80065ac:	f023 030f 	bic.w	r3, r3, #15
 80065b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065b2:	430b      	orrs	r3, r1
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	4a8e      	ldr	r2, [pc, #568]	; (80067f4 <UART_SetConfig+0x294>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01c      	beq.n	80065f8 <UART_SetConfig+0x98>
 80065be:	4a8e      	ldr	r2, [pc, #568]	; (80067f8 <UART_SetConfig+0x298>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d031      	beq.n	8006628 <UART_SetConfig+0xc8>
 80065c4:	4a8a      	ldr	r2, [pc, #552]	; (80067f0 <UART_SetConfig+0x290>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d04b      	beq.n	8006662 <UART_SetConfig+0x102>
 80065ca:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80065cc:	4988      	ldr	r1, [pc, #544]	; (80067f0 <UART_SetConfig+0x290>)
 80065ce:	428b      	cmp	r3, r1
 80065d0:	d068      	beq.n	80066a4 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065d2:	69e0      	ldr	r0, [r4, #28]
 80065d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065d8:	f000 80a5 	beq.w	8006726 <UART_SetConfig+0x1c6>
    switch (clocksource)
 80065dc:	2a08      	cmp	r2, #8
 80065de:	f200 811f 	bhi.w	8006820 <UART_SetConfig+0x2c0>
 80065e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80065e6:	00d3      	.short	0x00d3
 80065e8:	00d100f5 	.word	0x00d100f5
 80065ec:	00f8011d 	.word	0x00f8011d
 80065f0:	011d011d 	.word	0x011d011d
 80065f4:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80065f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065fc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006600:	f002 0203 	and.w	r2, r2, #3
 8006604:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006608:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800660c:	2a03      	cmp	r2, #3
 800660e:	d809      	bhi.n	8006624 <UART_SetConfig+0xc4>
 8006610:	e8df f002 	tbb	[pc, r2]
 8006614:	063c0402 	.word	0x063c0402
 8006618:	2201      	movs	r2, #1
 800661a:	e7d7      	b.n	80065cc <UART_SetConfig+0x6c>
 800661c:	2204      	movs	r2, #4
 800661e:	e7d5      	b.n	80065cc <UART_SetConfig+0x6c>
 8006620:	2208      	movs	r2, #8
 8006622:	e7d3      	b.n	80065cc <UART_SetConfig+0x6c>
 8006624:	2210      	movs	r2, #16
 8006626:	e7d1      	b.n	80065cc <UART_SetConfig+0x6c>
 8006628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800662c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006630:	f002 020c 	and.w	r2, r2, #12
 8006634:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8006638:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 800663c:	2a0c      	cmp	r2, #12
 800663e:	d80e      	bhi.n	800665e <UART_SetConfig+0xfe>
 8006640:	e8df f002 	tbb	[pc, r2]
 8006644:	0d0d0d07 	.word	0x0d0d0d07
 8006648:	0d0d0d09 	.word	0x0d0d0d09
 800664c:	0d0d0d26 	.word	0x0d0d0d26
 8006650:	0b          	.byte	0x0b
 8006651:	00          	.byte	0x00
 8006652:	2200      	movs	r2, #0
 8006654:	e7ba      	b.n	80065cc <UART_SetConfig+0x6c>
 8006656:	2204      	movs	r2, #4
 8006658:	e7b8      	b.n	80065cc <UART_SetConfig+0x6c>
 800665a:	2208      	movs	r2, #8
 800665c:	e7b6      	b.n	80065cc <UART_SetConfig+0x6c>
 800665e:	2210      	movs	r2, #16
 8006660:	e7b4      	b.n	80065cc <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006666:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800666a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800666e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006672:	d00f      	beq.n	8006694 <UART_SetConfig+0x134>
 8006674:	d805      	bhi.n	8006682 <UART_SetConfig+0x122>
 8006676:	b17a      	cbz	r2, 8006698 <UART_SetConfig+0x138>
 8006678:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800667c:	d10e      	bne.n	800669c <UART_SetConfig+0x13c>
 800667e:	2204      	movs	r2, #4
 8006680:	e7a4      	b.n	80065cc <UART_SetConfig+0x6c>
 8006682:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006686:	d10b      	bne.n	80066a0 <UART_SetConfig+0x140>
 8006688:	2208      	movs	r2, #8
 800668a:	e79f      	b.n	80065cc <UART_SetConfig+0x6c>
 800668c:	2202      	movs	r2, #2
 800668e:	e79d      	b.n	80065cc <UART_SetConfig+0x6c>
 8006690:	2202      	movs	r2, #2
 8006692:	e79b      	b.n	80065cc <UART_SetConfig+0x6c>
 8006694:	2202      	movs	r2, #2
 8006696:	e799      	b.n	80065cc <UART_SetConfig+0x6c>
 8006698:	2200      	movs	r2, #0
 800669a:	e797      	b.n	80065cc <UART_SetConfig+0x6c>
 800669c:	2210      	movs	r2, #16
 800669e:	e795      	b.n	80065cc <UART_SetConfig+0x6c>
 80066a0:	2210      	movs	r2, #16
 80066a2:	e793      	b.n	80065cc <UART_SetConfig+0x6c>
    switch (clocksource)
 80066a4:	2a08      	cmp	r2, #8
 80066a6:	f200 809c 	bhi.w	80067e2 <UART_SetConfig+0x282>
 80066aa:	e8df f002 	tbb	[pc, r2]
 80066ae:	9a08      	.short	0x9a08
 80066b0:	9a379a3a 	.word	0x9a379a3a
 80066b4:	9a9a      	.short	0x9a9a
 80066b6:	05          	.byte	0x05
 80066b7:	00          	.byte	0x00
 80066b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066bc:	e004      	b.n	80066c8 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066be:	f7fe faa9 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80066c2:	2800      	cmp	r0, #0
 80066c4:	f000 808f 	beq.w	80067e6 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066ca:	4b4c      	ldr	r3, [pc, #304]	; (80067fc <UART_SetConfig+0x29c>)
 80066cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80066d0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066d4:	6865      	ldr	r5, [r4, #4]
 80066d6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80066da:	4299      	cmp	r1, r3
 80066dc:	f200 8094 	bhi.w	8006808 <UART_SetConfig+0x2a8>
 80066e0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80066e4:	f200 8092 	bhi.w	800680c <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e8:	2600      	movs	r6, #0
 80066ea:	4633      	mov	r3, r6
 80066ec:	4631      	mov	r1, r6
 80066ee:	f7fa fa5b 	bl	8000ba8 <__aeabi_uldivmod>
 80066f2:	0209      	lsls	r1, r1, #8
 80066f4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80066f8:	0200      	lsls	r0, r0, #8
 80066fa:	086b      	lsrs	r3, r5, #1
 80066fc:	18c0      	adds	r0, r0, r3
 80066fe:	462a      	mov	r2, r5
 8006700:	4633      	mov	r3, r6
 8006702:	f141 0100 	adc.w	r1, r1, #0
 8006706:	f7fa fa4f 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800670a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800670e:	4b3c      	ldr	r3, [pc, #240]	; (8006800 <UART_SetConfig+0x2a0>)
 8006710:	429a      	cmp	r2, r3
 8006712:	d87d      	bhi.n	8006810 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	60d8      	str	r0, [r3, #12]
 8006718:	4630      	mov	r0, r6
 800671a:	e050      	b.n	80067be <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800671c:	f7fd fd7c 	bl	8004218 <HAL_RCC_GetSysClockFreq>
        break;
 8006720:	e7cf      	b.n	80066c2 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006722:	4838      	ldr	r0, [pc, #224]	; (8006804 <UART_SetConfig+0x2a4>)
 8006724:	e7d0      	b.n	80066c8 <UART_SetConfig+0x168>
    switch (clocksource)
 8006726:	2a08      	cmp	r2, #8
 8006728:	d874      	bhi.n	8006814 <UART_SetConfig+0x2b4>
 800672a:	e8df f002 	tbb	[pc, r2]
 800672e:	2707      	.short	0x2707
 8006730:	732a7305 	.word	0x732a7305
 8006734:	7373      	.short	0x7373
 8006736:	0b          	.byte	0x0b
 8006737:	00          	.byte	0x00
 8006738:	4832      	ldr	r0, [pc, #200]	; (8006804 <UART_SetConfig+0x2a4>)
 800673a:	e003      	b.n	8006744 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fe fa6a 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006740:	2800      	cmp	r0, #0
 8006742:	d069      	beq.n	8006818 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006744:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006746:	4b2d      	ldr	r3, [pc, #180]	; (80067fc <UART_SetConfig+0x29c>)
 8006748:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800674c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006750:	6862      	ldr	r2, [r4, #4]
 8006752:	0853      	lsrs	r3, r2, #1
 8006754:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006758:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800675c:	f1a0 0210 	sub.w	r2, r0, #16
 8006760:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006764:	429a      	cmp	r2, r3
 8006766:	d859      	bhi.n	800681c <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006768:	b283      	uxth	r3, r0
 800676a:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800676e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006772:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	60d8      	str	r0, [r3, #12]
 8006778:	2000      	movs	r0, #0
 800677a:	e020      	b.n	80067be <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7fe fa5a 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
        break;
 8006780:	e7de      	b.n	8006740 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006782:	f7fd fd49 	bl	8004218 <HAL_RCC_GetSysClockFreq>
        break;
 8006786:	e7db      	b.n	8006740 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006788:	481e      	ldr	r0, [pc, #120]	; (8006804 <UART_SetConfig+0x2a4>)
 800678a:	e003      	b.n	8006794 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800678c:	f7fe fa42 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006790:	2800      	cmp	r0, #0
 8006792:	d047      	beq.n	8006824 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006796:	4b19      	ldr	r3, [pc, #100]	; (80067fc <UART_SetConfig+0x29c>)
 8006798:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800679c:	fbb0 f0f3 	udiv	r0, r0, r3
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80067a6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067aa:	f1a0 0210 	sub.w	r2, r0, #16
 80067ae:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d838      	bhi.n	8006828 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	b280      	uxth	r0, r0
 80067ba:	60d8      	str	r0, [r3, #12]
 80067bc:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80067be:	2301      	movs	r3, #1
 80067c0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067c4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80067cc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fe fa30 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
        break;
 80067d4:	e7dc      	b.n	8006790 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80067d6:	f7fd fd1f 	bl	8004218 <HAL_RCC_GetSysClockFreq>
        break;
 80067da:	e7d9      	b.n	8006790 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80067dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067e0:	e7d8      	b.n	8006794 <UART_SetConfig+0x234>
    switch (clocksource)
 80067e2:	2001      	movs	r0, #1
 80067e4:	e7eb      	b.n	80067be <UART_SetConfig+0x25e>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e7e9      	b.n	80067be <UART_SetConfig+0x25e>
 80067ea:	bf00      	nop
 80067ec:	cfff69f3 	.word	0xcfff69f3
 80067f0:	40008000 	.word	0x40008000
 80067f4:	40013800 	.word	0x40013800
 80067f8:	40004400 	.word	0x40004400
 80067fc:	08012dec 	.word	0x08012dec
 8006800:	000ffcff 	.word	0x000ffcff
 8006804:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006808:	2001      	movs	r0, #1
 800680a:	e7d8      	b.n	80067be <UART_SetConfig+0x25e>
 800680c:	2001      	movs	r0, #1
 800680e:	e7d6      	b.n	80067be <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006810:	2001      	movs	r0, #1
 8006812:	e7d4      	b.n	80067be <UART_SetConfig+0x25e>
    switch (clocksource)
 8006814:	2001      	movs	r0, #1
 8006816:	e7d2      	b.n	80067be <UART_SetConfig+0x25e>
 8006818:	2000      	movs	r0, #0
 800681a:	e7d0      	b.n	80067be <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800681c:	2001      	movs	r0, #1
 800681e:	e7ce      	b.n	80067be <UART_SetConfig+0x25e>
    switch (clocksource)
 8006820:	2001      	movs	r0, #1
 8006822:	e7cc      	b.n	80067be <UART_SetConfig+0x25e>
 8006824:	2000      	movs	r0, #0
 8006826:	e7ca      	b.n	80067be <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006828:	2001      	movs	r0, #1
 800682a:	e7c8      	b.n	80067be <UART_SetConfig+0x25e>

0800682c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800682e:	f013 0f01 	tst.w	r3, #1
 8006832:	d006      	beq.n	8006842 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006834:	6802      	ldr	r2, [r0, #0]
 8006836:	6853      	ldr	r3, [r2, #4]
 8006838:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800683c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800683e:	430b      	orrs	r3, r1
 8006840:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006842:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006844:	f013 0f02 	tst.w	r3, #2
 8006848:	d006      	beq.n	8006858 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800684a:	6802      	ldr	r2, [r0, #0]
 800684c:	6853      	ldr	r3, [r2, #4]
 800684e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006852:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006854:	430b      	orrs	r3, r1
 8006856:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006858:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800685a:	f013 0f04 	tst.w	r3, #4
 800685e:	d006      	beq.n	800686e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006860:	6802      	ldr	r2, [r0, #0]
 8006862:	6853      	ldr	r3, [r2, #4]
 8006864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006868:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800686a:	430b      	orrs	r3, r1
 800686c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006870:	f013 0f08 	tst.w	r3, #8
 8006874:	d006      	beq.n	8006884 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006876:	6802      	ldr	r2, [r0, #0]
 8006878:	6853      	ldr	r3, [r2, #4]
 800687a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800687e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006880:	430b      	orrs	r3, r1
 8006882:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006884:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006886:	f013 0f10 	tst.w	r3, #16
 800688a:	d006      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800688c:	6802      	ldr	r2, [r0, #0]
 800688e:	6893      	ldr	r3, [r2, #8]
 8006890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006894:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006896:	430b      	orrs	r3, r1
 8006898:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800689c:	f013 0f20 	tst.w	r3, #32
 80068a0:	d006      	beq.n	80068b0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a2:	6802      	ldr	r2, [r0, #0]
 80068a4:	6893      	ldr	r3, [r2, #8]
 80068a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068aa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	6802      	ldr	r2, [r0, #0]
 80068ba:	6853      	ldr	r3, [r2, #4]
 80068bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068c0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80068c2:	430b      	orrs	r3, r1
 80068c4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068cc:	d00b      	beq.n	80068e6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068d4:	d006      	beq.n	80068e4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068d6:	6802      	ldr	r2, [r0, #0]
 80068d8:	6853      	ldr	r3, [r2, #4]
 80068da:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80068de:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6053      	str	r3, [r2, #4]
}
 80068e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e6:	6802      	ldr	r2, [r0, #0]
 80068e8:	6853      	ldr	r3, [r2, #4]
 80068ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068ee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6053      	str	r3, [r2, #4]
 80068f4:	e7eb      	b.n	80068ce <UART_AdvFeatureConfig+0xa2>

080068f6 <UART_WaitOnFlagUntilTimeout>:
{
 80068f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068fa:	4605      	mov	r5, r0
 80068fc:	460f      	mov	r7, r1
 80068fe:	4616      	mov	r6, r2
 8006900:	4699      	mov	r9, r3
 8006902:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006906:	682c      	ldr	r4, [r5, #0]
 8006908:	69e4      	ldr	r4, [r4, #28]
 800690a:	ea37 0304 	bics.w	r3, r7, r4
 800690e:	bf0c      	ite	eq
 8006910:	f04f 0c01 	moveq.w	ip, #1
 8006914:	f04f 0c00 	movne.w	ip, #0
 8006918:	45b4      	cmp	ip, r6
 800691a:	d157      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800691c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006920:	d0f1      	beq.n	8006906 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fb f845 	bl	80019b0 <HAL_GetTick>
 8006926:	eba0 0009 	sub.w	r0, r0, r9
 800692a:	4540      	cmp	r0, r8
 800692c:	d82f      	bhi.n	800698e <UART_WaitOnFlagUntilTimeout+0x98>
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	d02c      	beq.n	800698e <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	f012 0f04 	tst.w	r2, #4
 800693c:	d0e3      	beq.n	8006906 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006944:	d0df      	beq.n	8006906 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800694a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800694c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	e852 3f00 	ldrex	r3, [r2]
 8006952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	e842 3100 	strex	r1, r3, [r2]
 800695a:	2900      	cmp	r1, #0
 800695c:	d1f6      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	f102 0308 	add.w	r3, r2, #8
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	3208      	adds	r2, #8
 800696e:	e842 3100 	strex	r1, r3, [r2]
 8006972:	2900      	cmp	r1, #0
 8006974:	d1f3      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8006976:	2320      	movs	r3, #32
 8006978:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800697c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006980:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8006984:	2300      	movs	r3, #0
 8006986:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800698a:	2003      	movs	r0, #3
 800698c:	e01f      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800698e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	e852 3f00 	ldrex	r3, [r2]
 8006994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	e842 3100 	strex	r1, r3, [r2]
 800699c:	2900      	cmp	r1, #0
 800699e:	d1f6      	bne.n	800698e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	f102 0308 	add.w	r3, r2, #8
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	3208      	adds	r2, #8
 80069b0:	e842 3100 	strex	r1, r3, [r2]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d1f3      	bne.n	80069a0 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80069b8:	2320      	movs	r3, #32
 80069ba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80069c2:	2300      	movs	r3, #0
 80069c4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80069c8:	2003      	movs	r0, #3
 80069ca:	e000      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80069cc:	2000      	movs	r0, #0
}
 80069ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080069d2 <UART_CheckIdleState>:
{
 80069d2:	b530      	push	{r4, r5, lr}
 80069d4:	b083      	sub	sp, #12
 80069d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80069de:	f7fa ffe7 	bl	80019b0 <HAL_GetTick>
 80069e2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	f012 0f08 	tst.w	r2, #8
 80069ec:	d110      	bne.n	8006a10 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f013 0f04 	tst.w	r3, #4
 80069f6:	d119      	bne.n	8006a2c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	2320      	movs	r3, #32
 80069fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a02:	2000      	movs	r0, #0
 8006a04:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006a08:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4603      	mov	r3, r0
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff ff69 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d0e2      	beq.n	80069ee <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006a28:	2003      	movs	r0, #3
 8006a2a:	e7ef      	b.n	8006a0c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	462b      	mov	r3, r5
 8006a34:	2200      	movs	r2, #0
 8006a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff ff5b 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d0d9      	beq.n	80069f8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006a44:	2003      	movs	r0, #3
 8006a46:	e7e1      	b.n	8006a0c <UART_CheckIdleState+0x3a>

08006a48 <HAL_UART_Init>:
  if (huart == NULL)
 8006a48:	b378      	cbz	r0, 8006aaa <HAL_UART_Init+0x62>
{
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a4e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006a52:	b30b      	cbz	r3, 8006a98 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a54:	2324      	movs	r3, #36	; 0x24
 8006a56:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff fd7b 	bl	8006560 <UART_SetConfig>
 8006a6a:	2801      	cmp	r0, #1
 8006a6c:	d013      	beq.n	8006a96 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a70:	b9bb      	cbnz	r3, 8006aa2 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	6853      	ldr	r3, [r2, #4]
 8006a76:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006a7a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	6893      	ldr	r3, [r2, #8]
 8006a80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006a84:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006a86:	6822      	ldr	r2, [r4, #0]
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006a90:	4620      	mov	r0, r4
 8006a92:	f7ff ff9e 	bl	80069d2 <UART_CheckIdleState>
}
 8006a96:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006a98:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8006a9c:	f7fb f970 	bl	8001d80 <HAL_UART_MspInit>
 8006aa0:	e7d8      	b.n	8006a54 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff fec2 	bl	800682c <UART_AdvFeatureConfig>
 8006aa8:	e7e3      	b.n	8006a72 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006aaa:	2001      	movs	r0, #1
}
 8006aac:	4770      	bx	lr
	...

08006ab0 <UART_Start_Receive_IT>:
{
 8006ab0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006ab2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006ab4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006ab8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8006ac0:	6883      	ldr	r3, [r0, #8]
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac6:	d006      	beq.n	8006ad6 <UART_Start_Receive_IT+0x26>
 8006ac8:	b9a3      	cbnz	r3, 8006af4 <UART_Start_Receive_IT+0x44>
 8006aca:	6903      	ldr	r3, [r0, #16]
 8006acc:	b973      	cbnz	r3, 8006aec <UART_Start_Receive_IT+0x3c>
 8006ace:	23ff      	movs	r3, #255	; 0xff
 8006ad0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006ad4:	e014      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
 8006ad6:	6903      	ldr	r3, [r0, #16]
 8006ad8:	b923      	cbnz	r3, 8006ae4 <UART_Start_Receive_IT+0x34>
 8006ada:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ade:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006ae2:	e00d      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
 8006ae4:	23ff      	movs	r3, #255	; 0xff
 8006ae6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006aea:	e009      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
 8006aec:	237f      	movs	r3, #127	; 0x7f
 8006aee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006af2:	e005      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
 8006af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006af8:	d02d      	beq.n	8006b56 <UART_Start_Receive_IT+0xa6>
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b06:	2322      	movs	r3, #34	; 0x22
 8006b08:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	f101 0308 	add.w	r3, r1, #8
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	3108      	adds	r1, #8
 8006b1c:	e841 3400 	strex	r4, r3, [r1]
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	d1f3      	bne.n	8006b0c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b24:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2a:	d01e      	beq.n	8006b6a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2c:	6883      	ldr	r3, [r0, #8]
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b32:	d042      	beq.n	8006bba <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <UART_Start_Receive_IT+0x12c>)
 8006b36:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b38:	6903      	ldr	r3, [r0, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d043      	beq.n	8006bc6 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	e852 3f00 	ldrex	r3, [r2]
 8006b44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	e842 3100 	strex	r1, r3, [r2]
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d1f6      	bne.n	8006b3e <UART_Start_Receive_IT+0x8e>
}
 8006b50:	2000      	movs	r0, #0
 8006b52:	bc10      	pop	{r4}
 8006b54:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006b56:	6903      	ldr	r3, [r0, #16]
 8006b58:	b91b      	cbnz	r3, 8006b62 <UART_Start_Receive_IT+0xb2>
 8006b5a:	237f      	movs	r3, #127	; 0x7f
 8006b5c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b60:	e7ce      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
 8006b62:	233f      	movs	r3, #63	; 0x3f
 8006b64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b68:	e7ca      	b.n	8006b00 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b6a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d8dc      	bhi.n	8006b2c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	6883      	ldr	r3, [r0, #8]
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d019      	beq.n	8006bae <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <UART_Start_Receive_IT+0x130>)
 8006b7c:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b7e:	6903      	ldr	r3, [r0, #16]
 8006b80:	b143      	cbz	r3, 8006b94 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	e852 3f00 	ldrex	r3, [r2]
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	e842 3100 	strex	r1, r3, [r2]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	d1f6      	bne.n	8006b82 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	f102 0308 	add.w	r3, r2, #8
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	3208      	adds	r2, #8
 8006ba4:	e842 3100 	strex	r1, r3, [r2]
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	d1f3      	bne.n	8006b94 <UART_Start_Receive_IT+0xe4>
 8006bac:	e7d0      	b.n	8006b50 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bae:	6903      	ldr	r3, [r0, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e2      	bne.n	8006b7a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <UART_Start_Receive_IT+0x134>)
 8006bb6:	6743      	str	r3, [r0, #116]	; 0x74
 8006bb8:	e7e1      	b.n	8006b7e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bba:	6903      	ldr	r3, [r0, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1b9      	bne.n	8006b34 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006bc0:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <UART_Start_Receive_IT+0x138>)
 8006bc2:	6743      	str	r3, [r0, #116]	; 0x74
 8006bc4:	e7b8      	b.n	8006b38 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	e852 3f00 	ldrex	r3, [r2]
 8006bcc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	e842 3100 	strex	r1, r3, [r2]
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	d1f6      	bne.n	8006bc6 <UART_Start_Receive_IT+0x116>
 8006bd8:	e7ba      	b.n	8006b50 <UART_Start_Receive_IT+0xa0>
 8006bda:	bf00      	nop
 8006bdc:	08006019 	.word	0x08006019
 8006be0:	080061cd 	.word	0x080061cd
 8006be4:	08006399 	.word	0x08006399
 8006be8:	080060f5 	.word	0x080060f5

08006bec <HAL_UART_Receive_IT>:
{
 8006bec:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	d117      	bne.n	8006c26 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8006bf6:	b1c1      	cbz	r1, 8006c2a <HAL_UART_Receive_IT+0x3e>
 8006bf8:	b1ca      	cbz	r2, 8006c2e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bfe:	6803      	ldr	r3, [r0, #0]
 8006c00:	4c0c      	ldr	r4, [pc, #48]	; (8006c34 <HAL_UART_Receive_IT+0x48>)
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	d00c      	beq.n	8006c20 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c0c:	d008      	beq.n	8006c20 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c0e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	e854 3f00 	ldrex	r3, [r4]
 8006c14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	e844 3500 	strex	r5, r3, [r4]
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	d1f6      	bne.n	8006c0e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c20:	f7ff ff46 	bl	8006ab0 <UART_Start_Receive_IT>
 8006c24:	e000      	b.n	8006c28 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8006c26:	2002      	movs	r0, #2
}
 8006c28:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	e7fc      	b.n	8006c28 <HAL_UART_Receive_IT+0x3c>
 8006c2e:	2001      	movs	r0, #1
 8006c30:	e7fa      	b.n	8006c28 <HAL_UART_Receive_IT+0x3c>
 8006c32:	bf00      	nop
 8006c34:	40008000 	.word	0x40008000

08006c38 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006c38:	b082      	sub	sp, #8
 8006c3a:	ab02      	add	r3, sp, #8
 8006c3c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006c40:	6802      	ldr	r2, [r0, #0]
 8006c42:	6853      	ldr	r3, [r2, #4]
 8006c44:	f023 0310 	bic.w	r3, r3, #16
 8006c48:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	6853      	ldr	r3, [r2, #4]
 8006c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c58:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006c5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c60:	6053      	str	r3, [r2, #4]
}
 8006c62:	b002      	add	sp, #8
 8006c64:	4770      	bx	lr
	...

08006c68 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c68:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c6a:	b92b      	cbnz	r3, 8006c78 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c72:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006c76:	4770      	bx	lr
{
 8006c78:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c7a:	6803      	ldr	r3, [r0, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c82:	6899      	ldr	r1, [r3, #8]
 8006c84:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c86:	4d09      	ldr	r5, [pc, #36]	; (8006cac <UARTEx_SetNbDataToProcess+0x44>)
 8006c88:	5c6b      	ldrb	r3, [r5, r1]
 8006c8a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c8c:	4c08      	ldr	r4, [pc, #32]	; (8006cb0 <UARTEx_SetNbDataToProcess+0x48>)
 8006c8e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c90:	fb93 f3f1 	sdiv	r3, r3, r1
 8006c94:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c98:	5cab      	ldrb	r3, [r5, r2]
 8006c9a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c9c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006ca6:	bc30      	pop	{r4, r5}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	08012e0c 	.word	0x08012e0c
 8006cb0:	08012e04 	.word	0x08012e04

08006cb4 <HAL_UARTEx_WakeupCallback>:
}
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006cb8:	4770      	bx	lr

08006cba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	ab04      	add	r3, sp, #16
 8006cc0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006cc4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d035      	beq.n	8006d38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006cd4:	2324      	movs	r3, #36	; 0x24
 8006cd6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8006cda:	6802      	ldr	r2, [r0, #0]
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006ce4:	6801      	ldr	r1, [r0, #0]
 8006ce6:	688b      	ldr	r3, [r1, #8]
 8006ce8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cec:	9a02      	ldr	r2, [sp, #8]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006cf2:	b1aa      	cbz	r2, 8006d20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006cfe:	f7fa fe57 	bl	80019b0 <HAL_GetTick>
 8006d02:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d04:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006d08:	9200      	str	r2, [sp, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff fdf0 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8006d16:	b948      	cbnz	r0, 8006d2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006d18:	2320      	movs	r3, #32
 8006d1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006d1e:	e006      	b.n	8006d2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006d20:	ab04      	add	r3, sp, #16
 8006d22:	e913 0006 	ldmdb	r3, {r1, r2}
 8006d26:	f7ff ff87 	bl	8006c38 <UARTEx_Wakeup_AddressConfig>
 8006d2a:	e7e3      	b.n	8006cf4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006d2c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8006d34:	b004      	add	sp, #16
 8006d36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006d38:	2002      	movs	r0, #2
 8006d3a:	e7fb      	b.n	8006d34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006d3c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006d3c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d010      	beq.n	8006d66 <HAL_UARTEx_EnableStopMode+0x2a>
 8006d44:	2301      	movs	r3, #1
 8006d46:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006d4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	e852 3f00 	ldrex	r3, [r2]
 8006d50:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	e842 3100 	strex	r1, r3, [r2]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d1f6      	bne.n	8006d4a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8006d62:	4618      	mov	r0, r3
 8006d64:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d66:	2002      	movs	r0, #2
}
 8006d68:	4770      	bx	lr

08006d6a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006d6a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d01d      	beq.n	8006dae <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006d72:	b510      	push	{r4, lr}
 8006d74:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006d76:	2301      	movs	r3, #1
 8006d78:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	2324      	movs	r3, #36	; 0x24
 8006d7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d82:	6802      	ldr	r2, [r0, #0]
 8006d84:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006d86:	6811      	ldr	r1, [r2, #0]
 8006d88:	f021 0101 	bic.w	r1, r1, #1
 8006d8c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006d92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006d96:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d98:	6802      	ldr	r2, [r0, #0]
 8006d9a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006d9c:	f7ff ff64 	bl	8006c68 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006da0:	2320      	movs	r3, #32
 8006da2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006da6:	2000      	movs	r0, #0
 8006da8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006dac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006dae:	2002      	movs	r0, #2
}
 8006db0:	4770      	bx	lr

08006db2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006db2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006db4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d01d      	beq.n	8006df8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	2324      	movs	r3, #36	; 0x24
 8006dc6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dca:	6803      	ldr	r3, [r0, #0]
 8006dcc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dd6:	6802      	ldr	r2, [r0, #0]
 8006dd8:	6893      	ldr	r3, [r2, #8]
 8006dda:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006dde:	4319      	orrs	r1, r3
 8006de0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006de2:	f7ff ff41 	bl	8006c68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006dea:	2320      	movs	r3, #32
 8006dec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006df8:	2002      	movs	r0, #2
 8006dfa:	e7fc      	b.n	8006df6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006dfc <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006dfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006dfe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d01d      	beq.n	8006e42 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006e06:	4604      	mov	r4, r0
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e0e:	2324      	movs	r3, #36	; 0x24
 8006e10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e14:	6803      	ldr	r3, [r0, #0]
 8006e16:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e20:	6802      	ldr	r2, [r0, #0]
 8006e22:	6893      	ldr	r3, [r2, #8]
 8006e24:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006e28:	4319      	orrs	r1, r3
 8006e2a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e2c:	f7ff ff1c 	bl	8006c68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e34:	2320      	movs	r3, #32
 8006e36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e42:	2002      	movs	r0, #2
 8006e44:	e7fc      	b.n	8006e40 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006e48 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006e48:	2804      	cmp	r0, #4
 8006e4a:	d807      	bhi.n	8006e5c <LmHandlerPackageIsInitialized+0x14>
{
 8006e4c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <LmHandlerPackageIsInitialized+0x1c>)
 8006e50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	b11b      	cbz	r3, 8006e60 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006e58:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006e5a:	bd08      	pop	{r3, pc}
        return false;
 8006e5c:	2000      	movs	r0, #0
}
 8006e5e:	4770      	bx	lr
        return false;
 8006e60:	2000      	movs	r0, #0
 8006e62:	e7fa      	b.n	8006e5a <LmHandlerPackageIsInitialized+0x12>
 8006e64:	20000594 	.word	0x20000594

08006e68 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e6e:	2400      	movs	r4, #0
 8006e70:	e005      	b.n	8006e7e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	b10b      	cbz	r3, 8006e7a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8006e76:	4638      	mov	r0, r7
 8006e78:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	b264      	sxtb	r4, r4
 8006e7e:	2c04      	cmp	r4, #4
 8006e80:	dc34      	bgt.n	8006eec <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 8006e82:	4626      	mov	r6, r4
 8006e84:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <LmHandlerPackagesNotify+0x88>)
 8006e86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f5      	beq.n	8006e7a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006e8e:	2d03      	cmp	r5, #3
 8006e90:	d8f3      	bhi.n	8006e7a <LmHandlerPackagesNotify+0x12>
 8006e92:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <LmHandlerPackagesNotify+0x30>)
 8006e94:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006e98:	08006e73 	.word	0x08006e73
 8006e9c:	08006ea9 	.word	0x08006ea9
 8006ea0:	08006ed5 	.word	0x08006ed5
 8006ea4:	08006ee1 	.word	0x08006ee1
                        break;
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	d0e5      	beq.n	8006e7a <LmHandlerPackagesNotify+0x12>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d007      	beq.n	8006ec6 <LmHandlerPackagesNotify+0x5e>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	d1df      	bne.n	8006e7a <LmHandlerPackagesNotify+0x12>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 8006eba:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <LmHandlerPackagesNotify+0x88>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4798      	blx	r3
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0d9      	beq.n	8006e7a <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <LmHandlerPackagesNotify+0x88>)
 8006ec8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	4798      	blx	r3
 8006ed2:	e7d2      	b.n	8006e7a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0cf      	beq.n	8006e7a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8006eda:	4638      	mov	r0, r7
 8006edc:	4798      	blx	r3
 8006ede:	e7cc      	b.n	8006e7a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c9      	beq.n	8006e7a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	4798      	blx	r3
 8006eea:	e7c6      	b.n	8006e7a <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8006eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000594 	.word	0x20000594

08006ef4 <MlmeIndication>:
{
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <MlmeIndication+0x4c>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006efe:	7842      	ldrb	r2, [r0, #1]
 8006f00:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006f02:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006f06:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006f08:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006f0c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006f0e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006f12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006f14:	78ca      	ldrb	r2, [r1, #3]
 8006f16:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006f18:	6842      	ldr	r2, [r0, #4]
 8006f1a:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <MlmeIndication+0x50>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	b13b      	cbz	r3, 8006f34 <MlmeIndication+0x40>
 8006f24:	7802      	ldrb	r2, [r0, #0]
 8006f26:	2a0b      	cmp	r2, #11
 8006f28:	d004      	beq.n	8006f34 <MlmeIndication+0x40>
 8006f2a:	2a0f      	cmp	r2, #15
 8006f2c:	d002      	beq.n	8006f34 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006f2e:	4904      	ldr	r1, [pc, #16]	; (8006f40 <MlmeIndication+0x4c>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006f34:	4621      	mov	r1, r4
 8006f36:	2003      	movs	r0, #3
 8006f38:	f7ff ff96 	bl	8006e68 <LmHandlerPackagesNotify>
}
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000094 	.word	0x20000094
 8006f44:	20000590 	.word	0x20000590

08006f48 <McpsConfirm>:
{
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <McpsConfirm+0x3c>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006f52:	7842      	ldrb	r2, [r0, #1]
 8006f54:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006f56:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006f5a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006f5c:	68c2      	ldr	r2, [r0, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006f60:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8006f64:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006f66:	6902      	ldr	r2, [r0, #16]
 8006f68:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006f6a:	7902      	ldrb	r2, [r0, #4]
 8006f6c:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <McpsConfirm+0x40>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	b10b      	cbz	r3, 8006f7a <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8006f76:	4803      	ldr	r0, [pc, #12]	; (8006f84 <McpsConfirm+0x3c>)
 8006f78:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f7ff ff73 	bl	8006e68 <LmHandlerPackagesNotify>
}
 8006f82:	bd10      	pop	{r4, pc}
 8006f84:	200000a8 	.word	0x200000a8
 8006f88:	20000590 	.word	0x20000590

08006f8c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8006f8c:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006f8e:	2400      	movs	r4, #0
 8006f90:	e001      	b.n	8006f96 <LmHandlerPackageIsTxPending+0xa>
 8006f92:	3401      	adds	r4, #1
 8006f94:	b264      	sxtb	r4, r4
 8006f96:	2c04      	cmp	r4, #4
 8006f98:	dc0c      	bgt.n	8006fb4 <LmHandlerPackageIsTxPending+0x28>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <LmHandlerPackageIsTxPending+0x30>)
 8006f9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f6      	beq.n	8006f92 <LmHandlerPackageIsTxPending+0x6>
 8006fa4:	2c00      	cmp	r4, #0
 8006fa6:	d0f4      	beq.n	8006f92 <LmHandlerPackageIsTxPending+0x6>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	4798      	blx	r3
 8006fac:	4603      	mov	r3, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0ef      	beq.n	8006f92 <LmHandlerPackageIsTxPending+0x6>
 8006fb2:	e000      	b.n	8006fb6 <LmHandlerPackageIsTxPending+0x2a>
            {
                return true;
            }
        }
    }
    return false;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000594 	.word	0x20000594

08006fc0 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8006fc0:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	e001      	b.n	8006fca <LmHandlerPackagesProcess+0xa>
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	b264      	sxtb	r4, r4
 8006fca:	2c04      	cmp	r4, #4
 8006fcc:	dc12      	bgt.n	8006ff4 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <LmHandlerPackagesProcess+0x38>)
 8006fd0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f6      	beq.n	8006fc6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006fd8:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f3      	beq.n	8006fc6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006fde:	b2e0      	uxtb	r0, r4
 8006fe0:	f7ff ff32 	bl	8006e48 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0ee      	beq.n	8006fc6 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006fe8:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <LmHandlerPackagesProcess+0x38>)
 8006fea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	4798      	blx	r3
 8006ff2:	e7e8      	b.n	8006fc6 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000594 	.word	0x20000594

08006ffc <LmHandlerDeviceTimeReq>:
{
 8006ffc:	b500      	push	{lr}
 8006ffe:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007000:	230a      	movs	r3, #10
 8007002:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007006:	a801      	add	r0, sp, #4
 8007008:	f003 fef4 	bl	800adf4 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800700c:	9a05      	ldr	r2, [sp, #20]
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <LmHandlerDeviceTimeReq+0x24>)
 8007010:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007012:	b910      	cbnz	r0, 800701a <LmHandlerDeviceTimeReq+0x1e>
}
 8007014:	b007      	add	sp, #28
 8007016:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	e7f9      	b.n	8007014 <LmHandlerDeviceTimeReq+0x18>
 8007020:	2000058c 	.word	0x2000058c

08007024 <LmHandlerProcess>:
{
 8007024:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8007026:	f002 ffe9 	bl	8009ffc <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800702a:	f7ff ffc9 	bl	8006fc0 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800702e:	f7ff ffad 	bl	8006f8c <LmHandlerPackageIsTxPending>
}
 8007032:	bd08      	pop	{r3, pc}

08007034 <LmHandlerGetDutyCycleWaitTime>:
}
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <LmHandlerGetDutyCycleWaitTime+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	2000058c 	.word	0x2000058c

08007040 <LmHandlerJoinStatus>:
{
 8007040:	b500      	push	{lr}
 8007042:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007044:	2301      	movs	r3, #1
 8007046:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800704a:	4668      	mov	r0, sp
 800704c:	f003 faba 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007050:	b920      	cbnz	r0, 800705c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007052:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007056:	b110      	cbz	r0, 800705e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007058:	2001      	movs	r0, #1
 800705a:	e000      	b.n	800705e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800705c:	2000      	movs	r0, #0
}
 800705e:	b00b      	add	sp, #44	; 0x2c
 8007060:	f85d fb04 	ldr.w	pc, [sp], #4

08007064 <LmHandlerRequestClass>:
{
 8007064:	b510      	push	{r4, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800706a:	f002 ffa5 	bl	8009fb8 <LoRaMacIsBusy>
 800706e:	bbb0      	cbnz	r0, 80070de <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8007070:	f7ff ffe6 	bl	8007040 <LmHandlerJoinStatus>
 8007074:	2801      	cmp	r0, #1
 8007076:	d135      	bne.n	80070e4 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007078:	2300      	movs	r3, #0
 800707a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800707e:	4668      	mov	r0, sp
 8007080:	f003 faa0 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
 8007084:	bb88      	cbnz	r0, 80070ea <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8007086:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800708a:	42a3      	cmp	r3, r4
 800708c:	d030      	beq.n	80070f0 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800708e:	2c01      	cmp	r4, #1
 8007090:	d030      	beq.n	80070f4 <LmHandlerRequestClass+0x90>
 8007092:	2c02      	cmp	r4, #2
 8007094:	d014      	beq.n	80070c0 <LmHandlerRequestClass+0x5c>
 8007096:	b114      	cbz	r4, 800709e <LmHandlerRequestClass+0x3a>
 8007098:	2000      	movs	r0, #0
}
 800709a:	b00a      	add	sp, #40	; 0x28
 800709c:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800709e:	b90b      	cbnz	r3, 80070a4 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80070a0:	2000      	movs	r0, #0
 80070a2:	e7fa      	b.n	800709a <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 80070a4:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070a8:	4668      	mov	r0, sp
 80070aa:	f003 fbe5 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 80070ae:	bb20      	cbnz	r0, 80070fa <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80070b0:	4b18      	ldr	r3, [pc, #96]	; (8007114 <LmHandlerRequestClass+0xb0>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	b31b      	cbz	r3, 8007100 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80070b8:	4620      	mov	r0, r4
 80070ba:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80070bc:	2000      	movs	r0, #0
 80070be:	e7ec      	b.n	800709a <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 80070c0:	bb03      	cbnz	r3, 8007104 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 80070c2:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070c6:	4668      	mov	r0, sp
 80070c8:	f003 fbd6 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 80070cc:	b9e8      	cbnz	r0, 800710a <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <LmHandlerRequestClass+0xb0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	b1e3      	cbz	r3, 8007110 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80070d6:	4620      	mov	r0, r4
 80070d8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80070da:	2000      	movs	r0, #0
 80070dc:	e7dd      	b.n	800709a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80070de:	f06f 0001 	mvn.w	r0, #1
 80070e2:	e7da      	b.n	800709a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80070e4:	f06f 0002 	mvn.w	r0, #2
 80070e8:	e7d7      	b.n	800709a <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	e7d4      	b.n	800709a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80070f0:	2000      	movs	r0, #0
 80070f2:	e7d2      	b.n	800709a <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	e7cf      	b.n	800709a <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e7cc      	b.n	800709a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007100:	2000      	movs	r0, #0
 8007102:	e7ca      	b.n	800709a <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	e7c7      	b.n	800709a <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	e7c4      	b.n	800709a <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007110:	2000      	movs	r0, #0
 8007112:	e7c2      	b.n	800709a <LmHandlerRequestClass+0x36>
 8007114:	20000590 	.word	0x20000590

08007118 <LmHandlerJoin>:
{
 8007118:	b510      	push	{r4, lr}
 800711a:	b090      	sub	sp, #64	; 0x40
    mlmeReq.Type = MLME_JOIN;
 800711c:	2301      	movs	r3, #1
 800711e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007122:	4b35      	ldr	r3, [pc, #212]	; (80071f8 <LmHandlerJoin+0xe0>)
 8007124:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007128:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800712c:	f993 c005 	ldrsb.w	ip, [r3, #5]
 8007130:	f88d c032 	strb.w	ip, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8007134:	2802      	cmp	r0, #2
 8007136:	d023      	beq.n	8007180 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007138:	2001      	movs	r0, #1
 800713a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800713e:	4b2f      	ldr	r3, [pc, #188]	; (80071fc <LmHandlerJoin+0xe4>)
 8007140:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007142:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8007144:	f883 c005 	strb.w	ip, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007148:	2000      	movs	r0, #0
 800714a:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800714c:	7219      	strb	r1, [r3, #8]
        if( CtxRestoreDone == false )
 800714e:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <LmHandlerJoin+0xe8>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b30b      	cbz	r3, 8007198 <LmHandlerJoin+0x80>
        LoRaMacStart();
 8007154:	f003 f974 	bl	800a440 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007158:	2301      	movs	r3, #1
 800715a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800715e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007162:	a801      	add	r0, sp, #4
 8007164:	f003 fb88 	bl	800a878 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <LmHandlerJoin+0xec>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	b10b      	cbz	r3, 8007174 <LmHandlerJoin+0x5c>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007170:	4822      	ldr	r0, [pc, #136]	; (80071fc <LmHandlerJoin+0xe4>)
 8007172:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007174:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <LmHandlerJoin+0xe0>)
 8007176:	7858      	ldrb	r0, [r3, #1]
 8007178:	f7ff ff74 	bl	8007064 <LmHandlerRequestClass>
}
 800717c:	b010      	add	sp, #64	; 0x40
 800717e:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007180:	2202      	movs	r2, #2
 8007182:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007186:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <LmHandlerJoin+0xe4>)
 8007188:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800718a:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 800718c:	f003 f958 	bl	800a440 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8007190:	a80b      	add	r0, sp, #44	; 0x2c
 8007192:	f003 fe2f 	bl	800adf4 <LoRaMacMlmeRequest>
 8007196:	e7f1      	b.n	800717c <LmHandlerJoin+0x64>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007198:	231e      	movs	r3, #30
 800719a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800719e:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80071a2:	a801      	add	r0, sp, #4
 80071a4:	f003 fb68 	bl	800a878 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 80071a8:	231f      	movs	r3, #31
 80071aa:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80071ae:	4c12      	ldr	r4, [pc, #72]	; (80071f8 <LmHandlerJoin+0xe0>)
 80071b0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80071b4:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80071b8:	a801      	add	r0, sp, #4
 80071ba:	f003 fb5d 	bl	800a878 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80071be:	2321      	movs	r3, #33	; 0x21
 80071c0:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 80071c4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 80071c8:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80071cc:	a801      	add	r0, sp, #4
 80071ce:	f003 fb53 	bl	800a878 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 80071d2:	2320      	movs	r3, #32
 80071d4:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 80071d8:	f994 3005 	ldrsb.w	r3, [r4, #5]
 80071dc:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80071e0:	a801      	add	r0, sp, #4
 80071e2:	f003 fb49 	bl	800a878 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80071e6:	2328      	movs	r3, #40	; 0x28
 80071e8:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <LmHandlerJoin+0xf0>)
 80071ee:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80071f0:	a801      	add	r0, sp, #4
 80071f2:	f003 fb41 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 80071f6:	e7ad      	b.n	8007154 <LmHandlerJoin+0x3c>
 80071f8:	200005a8 	.word	0x200005a8
 80071fc:	2000007c 	.word	0x2000007c
 8007200:	20000588 	.word	0x20000588
 8007204:	20000590 	.word	0x20000590
 8007208:	01000300 	.word	0x01000300

0800720c <LmHandlerIsBusy>:
{
 800720c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800720e:	f002 fed3 	bl	8009fb8 <LoRaMacIsBusy>
 8007212:	b100      	cbz	r0, 8007216 <LmHandlerIsBusy+0xa>
}
 8007214:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007216:	f7ff ff13 	bl	8007040 <LmHandlerJoinStatus>
 800721a:	2801      	cmp	r0, #1
 800721c:	d108      	bne.n	8007230 <LmHandlerIsBusy+0x24>
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800721e:	4b08      	ldr	r3, [pc, #32]	; (8007240 <LmHandlerIsBusy+0x34>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4798      	blx	r3
 8007226:	2800      	cmp	r0, #0
 8007228:	d1f4      	bne.n	8007214 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800722a:	f7ff feaf 	bl	8006f8c <LmHandlerPackageIsTxPending>
 800722e:	e7f1      	b.n	8007214 <LmHandlerIsBusy+0x8>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <LmHandlerIsBusy+0x38>)
 8007232:	7a19      	ldrb	r1, [r3, #8]
 8007234:	79d8      	ldrb	r0, [r3, #7]
 8007236:	f7ff ff6f 	bl	8007118 <LmHandlerJoin>
        return true;
 800723a:	2001      	movs	r0, #1
 800723c:	e7ea      	b.n	8007214 <LmHandlerIsBusy+0x8>
 800723e:	bf00      	nop
 8007240:	20000594 	.word	0x20000594
 8007244:	2000007c 	.word	0x2000007c

08007248 <LmHandlerSend>:
{
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8007252:	f002 feb1 	bl	8009fb8 <LoRaMacIsBusy>
 8007256:	2800      	cmp	r0, #0
 8007258:	d172      	bne.n	8007340 <LmHandlerSend+0xf8>
    if( LoRaMacIsStopped() == true )
 800725a:	f002 fec3 	bl	8009fe4 <LoRaMacIsStopped>
 800725e:	2800      	cmp	r0, #0
 8007260:	d171      	bne.n	8007346 <LmHandlerSend+0xfe>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007262:	f7ff feed 	bl	8007040 <LmHandlerJoinStatus>
 8007266:	2801      	cmp	r0, #1
 8007268:	d144      	bne.n	80072f4 <LmHandlerSend+0xac>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800726a:	4b3b      	ldr	r3, [pc, #236]	; (8007358 <LmHandlerSend+0x110>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4798      	blx	r3
 8007272:	b138      	cbz	r0, 8007284 <LmHandlerSend+0x3c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8007274:	7823      	ldrb	r3, [r4, #0]
 8007276:	4a38      	ldr	r2, [pc, #224]	; (8007358 <LmHandlerSend+0x110>)
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	4293      	cmp	r3, r2
 800727e:	d001      	beq.n	8007284 <LmHandlerSend+0x3c>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d163      	bne.n	800734c <LmHandlerSend+0x104>
    TxParams.MsgType = isTxConfirmed;
 8007284:	4b35      	ldr	r3, [pc, #212]	; (800735c <LmHandlerSend+0x114>)
 8007286:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007288:	3d00      	subs	r5, #0
 800728a:	bf18      	it	ne
 800728c:	2501      	movne	r5, #1
 800728e:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007292:	4b33      	ldr	r3, [pc, #204]	; (8007360 <LmHandlerSend+0x118>)
 8007294:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007298:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800729c:	4669      	mov	r1, sp
 800729e:	7860      	ldrb	r0, [r4, #1]
 80072a0:	f003 f92e 	bl	800a500 <LoRaMacQueryTxPossible>
 80072a4:	b370      	cbz	r0, 8007304 <LmHandlerSend+0xbc>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80072ac:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80072ae:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80072b2:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 80072b6:	4b29      	ldr	r3, [pc, #164]	; (800735c <LmHandlerSend+0x114>)
 80072b8:	f103 0c10 	add.w	ip, r3, #16
 80072bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072c0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80072c4:	4a26      	ldr	r2, [pc, #152]	; (8007360 <LmHandlerSend+0x118>)
 80072c6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80072ca:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80072cc:	4631      	mov	r1, r6
 80072ce:	a801      	add	r0, sp, #4
 80072d0:	f003 fe70 	bl	800afb4 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80072d4:	9a05      	ldr	r2, [sp, #20]
 80072d6:	4b23      	ldr	r3, [pc, #140]	; (8007364 <LmHandlerSend+0x11c>)
 80072d8:	601a      	str	r2, [r3, #0]
    switch( status )
 80072da:	2811      	cmp	r0, #17
 80072dc:	d82d      	bhi.n	800733a <LmHandlerSend+0xf2>
 80072de:	e8df f000 	tbb	[pc, r0]
 80072e2:	1c21      	.short	0x1c21
 80072e4:	2c2c2c2c 	.word	0x2c2c2c2c
 80072e8:	2c2c382c 	.word	0x2c2c382c
 80072ec:	2c2c292c 	.word	0x2c2c292c
 80072f0:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <LmHandlerSend+0x120>)
 80072f6:	7a19      	ldrb	r1, [r3, #8]
 80072f8:	79d8      	ldrb	r0, [r3, #7]
 80072fa:	f7ff ff0d 	bl	8007118 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80072fe:	f06f 0502 	mvn.w	r5, #2
 8007302:	e00c      	b.n	800731e <LmHandlerSend+0xd6>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007304:	7823      	ldrb	r3, [r4, #0]
 8007306:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800730a:	7863      	ldrb	r3, [r4, #1]
 800730c:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8007314:	f04f 35ff 	mov.w	r5, #4294967295
 8007318:	e7cd      	b.n	80072b6 <LmHandlerSend+0x6e>
    switch( status )
 800731a:	f06f 0501 	mvn.w	r5, #1
}
 800731e:	4628      	mov	r0, r5
 8007320:	b006      	add	sp, #24
 8007322:	bd70      	pop	{r4, r5, r6, pc}
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8007324:	f115 0f07 	cmn.w	r5, #7
 8007328:	d0f9      	beq.n	800731e <LmHandlerSend+0xd6>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800732a:	2500      	movs	r5, #0
 800732c:	e7f7      	b.n	800731e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800732e:	f06f 0504 	mvn.w	r5, #4
            break;
 8007332:	e7f4      	b.n	800731e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007334:	f06f 0505 	mvn.w	r5, #5
            break;
 8007338:	e7f1      	b.n	800731e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800733a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800733e:	e7ee      	b.n	800731e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007340:	f06f 0501 	mvn.w	r5, #1
 8007344:	e7eb      	b.n	800731e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007346:	f06f 0502 	mvn.w	r5, #2
 800734a:	e7e8      	b.n	800731e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800734c:	f06f 0503 	mvn.w	r5, #3
 8007350:	e7e5      	b.n	800731e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007352:	f06f 0502 	mvn.w	r5, #2
 8007356:	e7e2      	b.n	800731e <LmHandlerSend+0xd6>
 8007358:	20000594 	.word	0x20000594
 800735c:	200000a8 	.word	0x200000a8
 8007360:	200005a8 	.word	0x200005a8
 8007364:	2000058c 	.word	0x2000058c
 8007368:	2000007c 	.word	0x2000007c

0800736c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800736c:	b170      	cbz	r0, 800738c <LmHandlerGetCurrentClass+0x20>
{
 800736e:	b510      	push	{r4, lr}
 8007370:	b08a      	sub	sp, #40	; 0x28
 8007372:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007374:	2300      	movs	r3, #0
 8007376:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800737a:	4668      	mov	r0, sp
 800737c:	f003 f922 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
 8007380:	b938      	cbnz	r0, 8007392 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007382:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007386:	7023      	strb	r3, [r4, #0]
}
 8007388:	b00a      	add	sp, #40	; 0x28
 800738a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007390:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007392:	f04f 30ff 	mov.w	r0, #4294967295
 8007396:	e7f7      	b.n	8007388 <LmHandlerGetCurrentClass+0x1c>

08007398 <McpsIndication>:
{
 8007398:	b510      	push	{r4, lr}
 800739a:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 800739c:	2300      	movs	r3, #0
 800739e:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <McpsIndication+0x90>)
 80073a4:	2301      	movs	r3, #1
 80073a6:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 80073a8:	7843      	ldrb	r3, [r0, #1]
 80073aa:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d12e      	bne.n	800740e <McpsIndication+0x76>
 80073b0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80073b2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80073b6:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <McpsIndication+0x90>)
 80073b8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80073ba:	f9b1 2000 	ldrsh.w	r2, [r1]
 80073be:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80073c0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80073c4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80073c6:	78ca      	ldrb	r2, [r1, #3]
 80073c8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80073ca:	6902      	ldr	r2, [r0, #16]
 80073cc:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 80073ce:	78c3      	ldrb	r3, [r0, #3]
 80073d0:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 80073d4:	7b03      	ldrb	r3, [r0, #12]
 80073d6:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 80073da:	6883      	ldr	r3, [r0, #8]
 80073dc:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <McpsIndication+0x94>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	b113      	cbz	r3, 80073ec <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80073e6:	4910      	ldr	r1, [pc, #64]	; (8007428 <McpsIndication+0x90>)
 80073e8:	a804      	add	r0, sp, #16
 80073ea:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <McpsIndication+0x94>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	b113      	cbz	r3, 80073fa <McpsIndication+0x62>
 80073f4:	7e22      	ldrb	r2, [r4, #24]
 80073f6:	b102      	cbz	r2, 80073fa <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80073f8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80073fa:	4621      	mov	r1, r4
 80073fc:	2001      	movs	r0, #1
 80073fe:	f7ff fd33 	bl	8006e68 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007402:	f10d 000f 	add.w	r0, sp, #15
 8007406:	f7ff ffb1 	bl	800736c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800740a:	7963      	ldrb	r3, [r4, #5]
 800740c:	b90b      	cbnz	r3, 8007412 <McpsIndication+0x7a>
}
 800740e:	b006      	add	sp, #24
 8007410:	bd10      	pop	{r4, pc}
        LmHandlerAppData_t appData =
 8007412:	2100      	movs	r1, #0
 8007414:	f88d 1004 	strb.w	r1, [sp, #4]
 8007418:	f88d 1005 	strb.w	r1, [sp, #5]
 800741c:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800741e:	2201      	movs	r2, #1
 8007420:	a801      	add	r0, sp, #4
 8007422:	f7ff ff11 	bl	8007248 <LmHandlerSend>
 8007426:	e7f2      	b.n	800740e <McpsIndication+0x76>
 8007428:	20000094 	.word	0x20000094
 800742c:	20000590 	.word	0x20000590

08007430 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8007430:	b180      	cbz	r0, 8007454 <LmHandlerGetTxDatarate+0x24>
{
 8007432:	b510      	push	{r4, lr}
 8007434:	b08a      	sub	sp, #40	; 0x28
 8007436:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007438:	231f      	movs	r3, #31
 800743a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800743e:	4668      	mov	r0, sp
 8007440:	f003 f8c0 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
 8007444:	b948      	cbnz	r0, 800745a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007446:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800744a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800744c:	4a04      	ldr	r2, [pc, #16]	; (8007460 <LmHandlerGetTxDatarate+0x30>)
 800744e:	7113      	strb	r3, [r2, #4]
}
 8007450:	b00a      	add	sp, #40	; 0x28
 8007452:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007458:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	e7f7      	b.n	8007450 <LmHandlerGetTxDatarate+0x20>
 8007460:	200005a8 	.word	0x200005a8

08007464 <LmHandlerSetSystemMaxRxError>:
{
 8007464:	b500      	push	{lr}
 8007466:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007468:	2322      	movs	r3, #34	; 0x22
 800746a:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800746e:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007470:	4668      	mov	r0, sp
 8007472:	f003 fa01 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 8007476:	b910      	cbnz	r0, 800747e <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007478:	b00b      	add	sp, #44	; 0x2c
 800747a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	e7f9      	b.n	8007478 <LmHandlerSetSystemMaxRxError+0x14>

08007484 <LmHandlerConfigure>:
{
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	b08e      	sub	sp, #56	; 0x38
 8007488:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800748a:	4c6c      	ldr	r4, [pc, #432]	; (800763c <LmHandlerConfigure+0x1b8>)
 800748c:	2218      	movs	r2, #24
 800748e:	4620      	mov	r0, r4
 8007490:	f008 f887 	bl	800f5a2 <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 8007494:	f7fb fa2e 	bl	80028f4 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8007498:	7822      	ldrb	r2, [r4, #0]
 800749a:	2301      	movs	r3, #1
 800749c:	4093      	lsls	r3, r2
 800749e:	6841      	ldr	r1, [r0, #4]
 80074a0:	420b      	tst	r3, r1
 80074a2:	d106      	bne.n	80074b2 <LmHandlerConfigure+0x2e>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 80074a4:	4b66      	ldr	r3, [pc, #408]	; (8007640 <LmHandlerConfigure+0x1bc>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	2100      	movs	r1, #0
 80074aa:	4608      	mov	r0, r1
 80074ac:	f00a fb4c 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 80074b0:	e7fe      	b.n	80074b0 <LmHandlerConfigure+0x2c>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 80074b2:	4964      	ldr	r1, [pc, #400]	; (8007644 <LmHandlerConfigure+0x1c0>)
 80074b4:	4864      	ldr	r0, [pc, #400]	; (8007648 <LmHandlerConfigure+0x1c4>)
 80074b6:	f002 fde9 	bl	800a08c <LoRaMacInitialization>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f040 80b7 	bne.w	800762e <LmHandlerConfigure+0x1aa>
    mibReq.Type = MIB_NVM_CTXS;
 80074c0:	2326      	movs	r3, #38	; 0x26
 80074c2:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80074c6:	a804      	add	r0, sp, #16
 80074c8:	f003 f9d6 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d17c      	bne.n	80075ca <LmHandlerConfigure+0x146>
        CtxRestoreDone = true;
 80074d0:	4b5e      	ldr	r3, [pc, #376]	; (800764c <LmHandlerConfigure+0x1c8>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 80074d6:	4b5d      	ldr	r3, [pc, #372]	; (800764c <LmHandlerConfigure+0x1c8>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 809e 	beq.w	800761c <LmHandlerConfigure+0x198>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80074e0:	4b5b      	ldr	r3, [pc, #364]	; (8007650 <LmHandlerConfigure+0x1cc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	b10b      	cbz	r3, 80074ec <LmHandlerConfigure+0x68>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80074e8:	2000      	movs	r0, #0
 80074ea:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80074ec:	2326      	movs	r3, #38	; 0x26
 80074ee:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80074f2:	a804      	add	r0, sp, #16
 80074f4:	f003 f866 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80074f8:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80074fa:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 80074fe:	4b4f      	ldr	r3, [pc, #316]	; (800763c <LmHandlerConfigure+0x1b8>)
 8007500:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8007502:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8007506:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8007508:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800750c:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800750e:	4b4d      	ldr	r3, [pc, #308]	; (8007644 <LmHandlerConfigure+0x1c0>)
 8007510:	68d9      	ldr	r1, [r3, #12]
 8007512:	6898      	ldr	r0, [r3, #8]
 8007514:	f007 ff58 	bl	800f3c8 <SecureElementInitMcuID>
 8007518:	2800      	cmp	r0, #0
 800751a:	f040 808b 	bne.w	8007634 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_DEV_ADDR;
 800751e:	2306      	movs	r3, #6
 8007520:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007524:	a804      	add	r0, sp, #16
 8007526:	f003 f84d 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800752a:	4c4a      	ldr	r4, [pc, #296]	; (8007654 <LmHandlerConfigure+0x1d0>)
 800752c:	9b05      	ldr	r3, [sp, #20]
 800752e:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007530:	a804      	add	r0, sp, #16
 8007532:	f003 f9a1 	bl	800a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8007536:	2302      	movs	r3, #2
 8007538:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800753c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800753e:	a804      	add	r0, sp, #16
 8007540:	f003 f840 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8007544:	2303      	movs	r3, #3
 8007546:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800754a:	3408      	adds	r4, #8
 800754c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800754e:	a804      	add	r0, sp, #16
 8007550:	f003 f838 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8007554:	f007 ffd2 	bl	800f4fc <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007558:	260f      	movs	r6, #15
 800755a:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800755e:	2301      	movs	r3, #1
 8007560:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007564:	a804      	add	r0, sp, #16
 8007566:	f003 f987 	bl	800a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800756a:	2310      	movs	r3, #16
 800756c:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007570:	2500      	movs	r5, #0
 8007572:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007576:	eb0d 0003 	add.w	r0, sp, r3
 800757a:	f003 f97d 	bl	800a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800757e:	2304      	movs	r3, #4
 8007580:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007584:	4c2d      	ldr	r4, [pc, #180]	; (800763c <LmHandlerConfigure+0x1b8>)
 8007586:	78a3      	ldrb	r3, [r4, #2]
 8007588:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800758c:	a804      	add	r0, sp, #16
 800758e:	f003 f973 	bl	800a878 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007592:	2339      	movs	r3, #57	; 0x39
 8007594:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007598:	6963      	ldr	r3, [r4, #20]
 800759a:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800759c:	a804      	add	r0, sp, #16
 800759e:	f003 f96b 	bl	800a878 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80075a2:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80075a6:	a902      	add	r1, sp, #8
 80075a8:	7820      	ldrb	r0, [r4, #0]
 80075aa:	f004 fe97 	bl	800c2dc <RegionGetPhyParam>
 80075ae:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80075b0:	1b43      	subs	r3, r0, r5
 80075b2:	bf18      	it	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 80075b8:	2014      	movs	r0, #20
 80075ba:	f7ff ff53 	bl	8007464 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80075be:	79e0      	ldrb	r0, [r4, #7]
 80075c0:	f003 fdb4 	bl	800b12c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80075c4:	4628      	mov	r0, r5
}
 80075c6:	b00e      	add	sp, #56	; 0x38
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80075ca:	2327      	movs	r3, #39	; 0x27
 80075cc:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <LmHandlerConfigure+0x1cc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	b14b      	cbz	r3, 80075ec <LmHandlerConfigure+0x168>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80075d8:	a804      	add	r0, sp, #16
 80075da:	f002 fff3 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 80075de:	4b1c      	ldr	r3, [pc, #112]	; (8007650 <LmHandlerConfigure+0x1cc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80075e8:	9805      	ldr	r0, [sp, #20]
 80075ea:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80075ec:	2326      	movs	r3, #38	; 0x26
 80075ee:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80075f2:	a804      	add	r0, sp, #16
 80075f4:	f003 f940 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f47f af6c 	bne.w	80074d6 <LmHandlerConfigure+0x52>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80075fe:	2301      	movs	r3, #1
 8007600:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007604:	a804      	add	r0, sp, #16
 8007606:	f002 ffdd 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800760a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f43f af61 	beq.w	80074d6 <LmHandlerConfigure+0x52>
                CtxRestoreDone = true;
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <LmHandlerConfigure+0x1c8>)
 8007616:	2201      	movs	r2, #1
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	e75c      	b.n	80074d6 <LmHandlerConfigure+0x52>
        mibReq.Type = MIB_NET_ID;
 800761c:	2305      	movs	r3, #5
 800761e:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007622:	2300      	movs	r3, #0
 8007624:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007626:	a804      	add	r0, sp, #16
 8007628:	f003 f926 	bl	800a878 <LoRaMacMibSetRequestConfirm>
 800762c:	e76f      	b.n	800750e <LmHandlerConfigure+0x8a>
        return LORAMAC_HANDLER_ERROR;
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	e7c8      	b.n	80075c6 <LmHandlerConfigure+0x142>
        return LORAMAC_HANDLER_ERROR;
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	e7c5      	b.n	80075c6 <LmHandlerConfigure+0x142>
 800763a:	bf00      	nop
 800763c:	200005a8 	.word	0x200005a8
 8007640:	08012e14 	.word	0x08012e14
 8007644:	200005c0 	.word	0x200005c0
 8007648:	200005d8 	.word	0x200005d8
 800764c:	20000588 	.word	0x20000588
 8007650:	20000590 	.word	0x20000590
 8007654:	20000570 	.word	0x20000570

08007658 <LmHandlerPackageRegister>:
{
 8007658:	b530      	push	{r4, r5, lr}
 800765a:	b083      	sub	sp, #12
 800765c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	9301      	str	r3, [sp, #4]
    switch( id )
 8007662:	4604      	mov	r4, r0
 8007664:	b9c8      	cbnz	r0, 800769a <LmHandlerPackageRegister+0x42>
                package = LmhpCompliancePackageFactory( );
 8007666:	f000 fb21 	bl	8007cac <LmhpCompliancePackageFactory>
 800766a:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	b1e3      	cbz	r3, 80076aa <LmHandlerPackageRegister+0x52>
        LmHandlerPackages[id] = package;
 8007670:	4a0f      	ldr	r2, [pc, #60]	; (80076b0 <LmHandlerPackageRegister+0x58>)
 8007672:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007676:	4a0f      	ldr	r2, [pc, #60]	; (80076b4 <LmHandlerPackageRegister+0x5c>)
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800767a:	4a0f      	ldr	r2, [pc, #60]	; (80076b8 <LmHandlerPackageRegister+0x60>)
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800767e:	4a0f      	ldr	r2, [pc, #60]	; (80076bc <LmHandlerPackageRegister+0x64>)
 8007680:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007682:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <LmHandlerPackageRegister+0x68>)
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	6992      	ldr	r2, [r2, #24]
 8007688:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	22f2      	movs	r2, #242	; 0xf2
 800768e:	490d      	ldr	r1, [pc, #52]	; (80076c4 <LmHandlerPackageRegister+0x6c>)
 8007690:	4628      	mov	r0, r5
 8007692:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007694:	2000      	movs	r0, #0
}
 8007696:	b003      	add	sp, #12
 8007698:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800769a:	a901      	add	r1, sp, #4
 800769c:	f000 fb0c 	bl	8007cb8 <LmhpPackagesRegister>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d0e3      	beq.n	800766c <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	e7f5      	b.n	8007696 <LmHandlerPackageRegister+0x3e>
        return LORAMAC_HANDLER_ERROR;
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	e7f2      	b.n	8007696 <LmHandlerPackageRegister+0x3e>
 80076b0:	20000594 	.word	0x20000594
 80076b4:	08007119 	.word	0x08007119
 80076b8:	08007249 	.word	0x08007249
 80076bc:	08006ffd 	.word	0x08006ffd
 80076c0:	20000590 	.word	0x20000590
 80076c4:	2000047c 	.word	0x2000047c

080076c8 <LmHandlerInit>:
{
 80076c8:	b500      	push	{lr}
 80076ca:	b083      	sub	sp, #12
 80076cc:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <LmHandlerInit+0x5c>)
 80076d0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <LmHandlerInit+0x60>)
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <LmHandlerInit+0x64>)
 80076d6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80076d8:	4a15      	ldr	r2, [pc, #84]	; (8007730 <LmHandlerInit+0x68>)
 80076da:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80076dc:	4a15      	ldr	r2, [pc, #84]	; (8007734 <LmHandlerInit+0x6c>)
 80076de:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <LmHandlerInit+0x70>)
 80076e2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80076e4:	6802      	ldr	r2, [r0, #0]
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <LmHandlerInit+0x74>)
 80076e8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80076ea:	6842      	ldr	r2, [r0, #4]
 80076ec:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80076ee:	6882      	ldr	r2, [r0, #8]
 80076f0:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 80076f2:	68c2      	ldr	r2, [r0, #12]
 80076f4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80076f6:	4a12      	ldr	r2, [pc, #72]	; (8007740 <LmHandlerInit+0x78>)
 80076f8:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80076fa:	6982      	ldr	r2, [r0, #24]
 80076fc:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80076fe:	4911      	ldr	r1, [pc, #68]	; (8007744 <LmHandlerInit+0x7c>)
 8007700:	2000      	movs	r0, #0
 8007702:	f7ff ffa9 	bl	8007658 <LmHandlerPackageRegister>
 8007706:	b930      	cbnz	r0, 8007716 <LmHandlerInit+0x4e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8007708:	a801      	add	r0, sp, #4
 800770a:	f000 fad3 	bl	8007cb4 <LmhpPackagesRegistrationInit>
 800770e:	b928      	cbnz	r0, 800771c <LmHandlerInit+0x54>
}
 8007710:	b003      	add	sp, #12
 8007712:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007716:	f04f 30ff 	mov.w	r0, #4294967295
 800771a:	e7f9      	b.n	8007710 <LmHandlerInit+0x48>
        return LORAMAC_HANDLER_ERROR;
 800771c:	f04f 30ff 	mov.w	r0, #4294967295
 8007720:	e7f6      	b.n	8007710 <LmHandlerInit+0x48>
 8007722:	bf00      	nop
 8007724:	20000590 	.word	0x20000590
 8007728:	200005d8 	.word	0x200005d8
 800772c:	08006f49 	.word	0x08006f49
 8007730:	08007399 	.word	0x08007399
 8007734:	080077c9 	.word	0x080077c9
 8007738:	08006ef5 	.word	0x08006ef5
 800773c:	200005c0 	.word	0x200005c0
 8007740:	0800c285 	.word	0x0800c285
 8007744:	20000088 	.word	0x20000088

08007748 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8007748:	b161      	cbz	r1, 8007764 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800774a:	b118      	cbz	r0, 8007754 <LmHandlerGetVersion+0xc>
 800774c:	2801      	cmp	r0, #1
 800774e:	d005      	beq.n	800775c <LmHandlerGetVersion+0x14>
 8007750:	2000      	movs	r0, #0
 8007752:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007754:	4a05      	ldr	r2, [pc, #20]	; (800776c <LmHandlerGetVersion+0x24>)
 8007756:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007758:	2000      	movs	r0, #0
            break;
 800775a:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800775c:	4a04      	ldr	r2, [pc, #16]	; (8007770 <LmHandlerGetVersion+0x28>)
 800775e:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007760:	2000      	movs	r0, #0
            break;
 8007762:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	01000300 	.word	0x01000300
 8007770:	01010003 	.word	0x01010003

08007774 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8007774:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8007776:	f003 fcf7 	bl	800b168 <LoRaMacDeInitialization>
 800777a:	b900      	cbnz	r0, 800777e <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800777c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800777e:	f06f 0001 	mvn.w	r0, #1
 8007782:	e7fb      	b.n	800777c <LmHandlerStop+0x8>

08007784 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8007784:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8007786:	f002 fe89 	bl	800a49c <LoRaMacHalt>
 800778a:	b900      	cbnz	r0, 800778e <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800778c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800778e:	f06f 0001 	mvn.w	r0, #1
 8007792:	e7fb      	b.n	800778c <LmHandlerHalt+0x8>

08007794 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8007794:	b180      	cbz	r0, 80077b8 <LmHandlerGetTxPower+0x24>
{
 8007796:	b510      	push	{r4, lr}
 8007798:	b08a      	sub	sp, #40	; 0x28
 800779a:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800779c:	2320      	movs	r3, #32
 800779e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80077a2:	4668      	mov	r0, sp
 80077a4:	f002 ff0e 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
 80077a8:	b948      	cbnz	r0, 80077be <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80077aa:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80077ae:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 80077b0:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <LmHandlerGetTxPower+0x30>)
 80077b2:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 80077b4:	b00a      	add	sp, #40	; 0x28
 80077b6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80077b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077bc:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80077be:	f04f 30ff 	mov.w	r0, #4294967295
 80077c2:	e7f7      	b.n	80077b4 <LmHandlerGetTxPower+0x20>
 80077c4:	200005a8 	.word	0x200005a8

080077c8 <MlmeConfirm>:
{
 80077c8:	b510      	push	{r4, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80077ce:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <MlmeConfirm+0xb8>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80077d4:	7842      	ldrb	r2, [r0, #1]
 80077d6:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80077d8:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <MlmeConfirm+0xbc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	b10b      	cbz	r3, 80077e4 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80077e0:	4827      	ldr	r0, [pc, #156]	; (8007880 <MlmeConfirm+0xb8>)
 80077e2:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80077e4:	4621      	mov	r1, r4
 80077e6:	2002      	movs	r0, #2
 80077e8:	f7ff fb3e 	bl	8006e68 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80077ec:	7823      	ldrb	r3, [r4, #0]
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d037      	beq.n	8007862 <MlmeConfirm+0x9a>
 80077f2:	2b0c      	cmp	r3, #12
 80077f4:	d03d      	beq.n	8007872 <MlmeConfirm+0xaa>
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d001      	beq.n	80077fe <MlmeConfirm+0x36>
}
 80077fa:	b00a      	add	sp, #40	; 0x28
 80077fc:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80077fe:	2306      	movs	r3, #6
 8007800:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007804:	4668      	mov	r0, sp
 8007806:	f002 fedd 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <MlmeConfirm+0xc0>)
 800780e:	79d8      	ldrb	r0, [r3, #7]
 8007810:	f007 fdb8 	bl	800f384 <SecureElementSetDevAddr>
 8007814:	b910      	cbnz	r0, 800781c <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007816:	9a01      	ldr	r2, [sp, #4]
 8007818:	4b1c      	ldr	r3, [pc, #112]	; (800788c <MlmeConfirm+0xc4>)
 800781a:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800781c:	4c1a      	ldr	r4, [pc, #104]	; (8007888 <MlmeConfirm+0xc0>)
 800781e:	1d20      	adds	r0, r4, #4
 8007820:	f7ff fe06 	bl	8007430 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8007824:	1d60      	adds	r0, r4, #5
 8007826:	f7ff ffb5 	bl	8007794 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <MlmeConfirm+0xb8>)
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	b18b      	cbz	r3, 8007854 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <MlmeConfirm+0xc0>)
 8007832:	22ff      	movs	r2, #255	; 0xff
 8007834:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8007836:	4b13      	ldr	r3, [pc, #76]	; (8007884 <MlmeConfirm+0xbc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	b10b      	cbz	r3, 8007842 <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800783e:	4812      	ldr	r0, [pc, #72]	; (8007888 <MlmeConfirm+0xc0>)
 8007840:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <MlmeConfirm+0xb8>)
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1d7      	bne.n	80077fa <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <MlmeConfirm+0xc0>)
 800784c:	79d8      	ldrb	r0, [r3, #7]
 800784e:	f007 fe67 	bl	800f520 <SecureElementPrintSessionKeys>
            break;
 8007852:	e7d2      	b.n	80077fa <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007854:	2200      	movs	r2, #0
 8007856:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007858:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <MlmeConfirm+0xc8>)
 800785a:	7858      	ldrb	r0, [r3, #1]
 800785c:	f7ff fc02 	bl	8007064 <LmHandlerRequestClass>
 8007860:	e7e9      	b.n	8007836 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <MlmeConfirm+0xcc>)
 8007864:	2201      	movs	r2, #1
 8007866:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007868:	7a22      	ldrb	r2, [r4, #8]
 800786a:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800786c:	7a62      	ldrb	r2, [r4, #9]
 800786e:	74da      	strb	r2, [r3, #19]
            break;
 8007870:	e7c3      	b.n	80077fa <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007872:	7863      	ldrb	r3, [r4, #1]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0c0      	beq.n	80077fa <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8007878:	f7ff fbc0 	bl	8006ffc <LmHandlerDeviceTimeReq>
}
 800787c:	e7bd      	b.n	80077fa <MlmeConfirm+0x32>
 800787e:	bf00      	nop
 8007880:	200000a8 	.word	0x200000a8
 8007884:	20000590 	.word	0x20000590
 8007888:	2000007c 	.word	0x2000007c
 800788c:	20000570 	.word	0x20000570
 8007890:	200005a8 	.word	0x200005a8
 8007894:	20000094 	.word	0x20000094

08007898 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007898:	b510      	push	{r4, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800789c:	f7ff ff72 	bl	8007784 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 80078a0:	4604      	mov	r4, r0
 80078a2:	b148      	cbz	r0, 80078b8 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 80078a4:	b92c      	cbnz	r4, 80078b2 <LmHandlerNvmDataStore+0x1a>
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <LmHandlerNvmDataStore+0x70>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	b10b      	cbz	r3, 80078b2 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80078ae:	2001      	movs	r0, #1
 80078b0:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80078b2:	4620      	mov	r0, r4
 80078b4:	b00a      	add	sp, #40	; 0x28
 80078b6:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80078b8:	f004 fcec 	bl	800c294 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 80078bc:	f110 0f02 	cmn.w	r0, #2
 80078c0:	d012      	beq.n	80078e8 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80078c2:	b9d0      	cbnz	r0, 80078fa <LmHandlerNvmDataStore+0x62>
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <LmHandlerNvmDataStore+0x70>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	b1cb      	cbz	r3, 8007900 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 80078cc:	2326      	movs	r3, #38	; 0x26
 80078ce:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80078d2:	4668      	mov	r0, sp
 80078d4:	f002 fe76 	bl	800a5c4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80078d8:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <LmHandlerNvmDataStore+0x70>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80078e2:	9801      	ldr	r0, [sp, #4]
 80078e4:	4798      	blx	r3
 80078e6:	e001      	b.n	80078ec <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 80078e8:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 80078ec:	f004 fce2 	bl	800c2b4 <NvmDataMgmtStoreEnd>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d0d7      	beq.n	80078a4 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80078f4:	f04f 34ff 	mov.w	r4, #4294967295
 80078f8:	e7db      	b.n	80078b2 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80078fa:	f04f 34ff 	mov.w	r4, #4294967295
 80078fe:	e7f5      	b.n	80078ec <LmHandlerNvmDataStore+0x54>
 8007900:	f04f 34ff 	mov.w	r4, #4294967295
 8007904:	e7f2      	b.n	80078ec <LmHandlerNvmDataStore+0x54>
 8007906:	bf00      	nop
 8007908:	20000590 	.word	0x20000590

0800790c <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800790c:	4603      	mov	r3, r0
 800790e:	b140      	cbz	r0, 8007922 <LmhpComplianceInit+0x16>
 8007910:	b139      	cbz	r1, 8007922 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8007912:	4807      	ldr	r0, [pc, #28]	; (8007930 <LmhpComplianceInit+0x24>)
 8007914:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <LmhpComplianceInit+0x28>)
 8007918:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800791a:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 800791c:	2201      	movs	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	4a02      	ldr	r2, [pc, #8]	; (8007930 <LmhpComplianceInit+0x24>)
 8007926:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007928:	4a02      	ldr	r2, [pc, #8]	; (8007934 <LmhpComplianceInit+0x28>)
 800792a:	7013      	strb	r3, [r2, #0]
    }
}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000614 	.word	0x20000614
 8007934:	200005e8 	.word	0x200005e8

08007938 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007938:	4b01      	ldr	r3, [pc, #4]	; (8007940 <LmhpComplianceIsInitialized+0x8>)
 800793a:	7818      	ldrb	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	200005e8 	.word	0x200005e8

08007944 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <LmhpComplianceIsRunning+0xc>)
 8007946:	7818      	ldrb	r0, [r3, #0]
 8007948:	b100      	cbz	r0, 800794c <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800794a:	7858      	ldrb	r0, [r3, #1]
}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	200005e8 	.word	0x200005e8

08007954 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 8007954:	4b08      	ldr	r3, [pc, #32]	; (8007978 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	b12b      	cbz	r3, 8007966 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <LmhpComplianceOnMcpsConfirm+0x24>)
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	b113      	cbz	r3, 8007966 <LmhpComplianceOnMcpsConfirm+0x12>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8007960:	7803      	ldrb	r3, [r0, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8007962:	2b01      	cmp	r3, #1
 8007964:	d000      	beq.n	8007968 <LmhpComplianceOnMcpsConfirm+0x14>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 8007966:	4770      	bx	lr
        ( mcpsConfirm->AckReceived != 0 ) )
 8007968:	7903      	ldrb	r3, [r0, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0fb      	beq.n	8007966 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800796e:	4a02      	ldr	r2, [pc, #8]	; (8007978 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007970:	8993      	ldrh	r3, [r2, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	8193      	strh	r3, [r2, #12]
 8007976:	e7f6      	b.n	8007966 <LmhpComplianceOnMcpsConfirm+0x12>
 8007978:	200005e8 	.word	0x200005e8

0800797c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800797c:	4b08      	ldr	r3, [pc, #32]	; (80079a0 <LmhpComplianceOnMlmeConfirm+0x24>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b12b      	cbz	r3, 800798e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	b113      	cbz	r3, 800798e <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8007988:	7803      	ldrb	r3, [r0, #0]
 800798a:	2b05      	cmp	r3, #5
 800798c:	d000      	beq.n	8007990 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800798e:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <LmhpComplianceOnMlmeConfirm+0x24>)
 8007992:	2201      	movs	r2, #1
 8007994:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8007996:	7a02      	ldrb	r2, [r0, #8]
 8007998:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800799a:	7a42      	ldrb	r2, [r0, #9]
 800799c:	741a      	strb	r2, [r3, #16]
 800799e:	e7f6      	b.n	800798e <LmhpComplianceOnMlmeConfirm+0x12>
 80079a0:	200005e8 	.word	0x200005e8

080079a4 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 80079a4:	4770      	bx	lr
	...

080079a8 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d040      	beq.n	8007a32 <LmhpComplianceTxProcess+0x8a>
    if( ComplianceTestState.IsRunning == false )
 80079b0:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d03f      	beq.n	8007a38 <LmhpComplianceTxProcess+0x90>
{
 80079b8:	b500      	push	{lr}
 80079ba:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 80079be:	7b9b      	ldrb	r3, [r3, #14]
 80079c0:	b323      	cbz	r3, 8007a0c <LmhpComplianceTxProcess+0x64>
        ComplianceTestState.LinkCheck = false;
 80079c2:	4b20      	ldr	r3, [pc, #128]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80079c8:	2203      	movs	r2, #3
 80079ca:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	2105      	movs	r1, #5
 80079d0:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80079d2:	7bd9      	ldrb	r1, [r3, #15]
 80079d4:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80079d6:	7c19      	ldrb	r1, [r3, #16]
 80079d8:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 80079da:	2201      	movs	r2, #1
 80079dc:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 80079de:	23e0      	movs	r3, #224	; 0xe0
 80079e0:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 80079e6:	799a      	ldrb	r2, [r3, #6]
    LmHandlerAppData_t appData =
 80079e8:	f88d 2001 	strb.w	r2, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80079ec:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80079ee:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 80079f0:	4815      	ldr	r0, [pc, #84]	; (8007a48 <LmhpComplianceTxProcess+0xa0>)
 80079f2:	f00a fc57 	bl	80122a4 <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <LmhpComplianceTxProcess+0xa4>)
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	b1fb      	cbz	r3, 8007a3c <LmhpComplianceTxProcess+0x94>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80079fc:	2201      	movs	r2, #1
 80079fe:	4911      	ldr	r1, [pc, #68]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 8007a00:	78c9      	ldrb	r1, [r1, #3]
 8007a02:	4668      	mov	r0, sp
 8007a04:	4798      	blx	r3
}
 8007a06:	b003      	add	sp, #12
 8007a08:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( ComplianceTestState.State )
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 8007a0e:	789b      	ldrb	r3, [r3, #2]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d005      	beq.n	8007a20 <LmhpComplianceTxProcess+0x78>
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d1e2      	bne.n	80079de <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.State = 1;
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	709a      	strb	r2, [r3, #2]
                break;
 8007a1e:	e7de      	b.n	80079de <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.DataBufferSize = 2;
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <LmhpComplianceTxProcess+0x9c>)
 8007a22:	2202      	movs	r2, #2
 8007a24:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8007a26:	899a      	ldrh	r2, [r3, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	0a11      	lsrs	r1, r2, #8
 8007a2c:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8007a2e:	705a      	strb	r2, [r3, #1]
                break;
 8007a30:	e7d5      	b.n	80079de <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 8007a38:	2000      	movs	r0, #0
}
 8007a3a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e7e1      	b.n	8007a06 <LmhpComplianceTxProcess+0x5e>
 8007a42:	bf00      	nop
 8007a44:	200005e8 	.word	0x200005e8
 8007a48:	200005fc 	.word	0x200005fc
 8007a4c:	200000c4 	.word	0x200000c4

08007a50 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007a50:	4b8f      	ldr	r3, [pc, #572]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8119 	beq.w	8007c8c <LmhpComplianceOnMcpsIndication+0x23c>
    if( mcpsIndication->RxData == false )
 8007a5a:	7b43      	ldrb	r3, [r0, #13]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8115 	beq.w	8007c8c <LmhpComplianceOnMcpsIndication+0x23c>
    if( ( ComplianceTestState.IsRunning == true ) &&
 8007a62:	4b8b      	ldr	r3, [pc, #556]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	b12b      	cbz	r3, 8007a74 <LmhpComplianceOnMcpsIndication+0x24>
        ( mcpsIndication->AckReceived == 0 ) )
 8007a68:	7b82      	ldrb	r2, [r0, #14]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8007a6a:	b91a      	cbnz	r2, 8007a74 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8007a6c:	4988      	ldr	r1, [pc, #544]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007a6e:	898a      	ldrh	r2, [r1, #12]
 8007a70:	3201      	adds	r2, #1
 8007a72:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007a74:	78c2      	ldrb	r2, [r0, #3]
 8007a76:	2ae0      	cmp	r2, #224	; 0xe0
 8007a78:	f040 8108 	bne.w	8007c8c <LmhpComplianceOnMcpsIndication+0x23c>
{
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d140      	bne.n	8007b06 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007a84:	7b03      	ldrb	r3, [r0, #12]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d001      	beq.n	8007a8e <LmhpComplianceOnMcpsIndication+0x3e>
}
 8007a8a:	b00c      	add	sp, #48	; 0x30
 8007a8c:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007a8e:	6883      	ldr	r3, [r0, #8]
 8007a90:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8007a92:	2a01      	cmp	r2, #1
 8007a94:	d1f9      	bne.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007a96:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8007a98:	2a01      	cmp	r2, #1
 8007a9a:	d1f6      	bne.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007a9c:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8007a9e:	2a01      	cmp	r2, #1
 8007aa0:	d1f3      	bne.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8007aa2:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d1f0      	bne.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8007aa8:	4b79      	ldr	r3, [pc, #484]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007aaa:	2400      	movs	r4, #0
 8007aac:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 8007aae:	22e0      	movs	r2, #224	; 0xe0
 8007ab0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8007ab6:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8007ab8:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8007aba:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8007abc:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8007abe:	2201      	movs	r2, #1
 8007ac0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8007ac2:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 8007aca:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007ace:	a802      	add	r0, sp, #8
 8007ad0:	f002 fed2 	bl	800a878 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f003 fb29 	bl	800b12c <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8007ada:	4b6e      	ldr	r3, [pc, #440]	; (8007c94 <LmhpComplianceOnMcpsIndication+0x244>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	b103      	cbz	r3, 8007ae4 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 8007ae2:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007ae4:	4c6c      	ldr	r4, [pc, #432]	; (8007c98 <LmhpComplianceOnMcpsIndication+0x248>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	9200      	str	r2, [sp, #0]
 8007aea:	4b6c      	ldr	r3, [pc, #432]	; (8007c9c <LmhpComplianceOnMcpsIndication+0x24c>)
 8007aec:	f04f 31ff 	mov.w	r1, #4294967295
 8007af0:	4620      	mov	r0, r4
 8007af2:	f00a fb1f 	bl	8012134 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8007af6:	f241 3188 	movw	r1, #5000	; 0x1388
 8007afa:	4620      	mov	r0, r4
 8007afc:	f00a fc18 	bl	8012330 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8007b00:	f7ff ff52 	bl	80079a8 <LmhpComplianceTxProcess>
 8007b04:	e7c1      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8007b06:	6882      	ldr	r2, [r0, #8]
 8007b08:	7813      	ldrb	r3, [r2, #0]
 8007b0a:	4961      	ldr	r1, [pc, #388]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b0c:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 8007b0e:	2b0a      	cmp	r3, #10
 8007b10:	d8bb      	bhi.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
 8007b12:	e8df f003 	tbb	[pc, r3]
 8007b16:	2206      	.short	0x2206
 8007b18:	47312b26 	.word	0x47312b26
 8007b1c:	a7a0714e 	.word	0xa7a0714e
 8007b20:	b1          	.byte	0xb1
 8007b21:	00          	.byte	0x00
                    TimerStop( &ComplianceTxNextPacketTimer );
 8007b22:	485d      	ldr	r0, [pc, #372]	; (8007c98 <LmhpComplianceOnMcpsIndication+0x248>)
 8007b24:	f00a fb64 	bl	80121f0 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 8007b28:	4b59      	ldr	r3, [pc, #356]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8007b2e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 8007b30:	2304      	movs	r3, #4
 8007b32:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007b36:	4c57      	ldr	r4, [pc, #348]	; (8007c94 <LmhpComplianceOnMcpsIndication+0x244>)
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007b40:	a802      	add	r0, sp, #8
 8007b42:	f002 fe99 	bl	800a878 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	7858      	ldrb	r0, [r3, #1]
 8007b4a:	f003 faef 	bl	800b12c <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d099      	beq.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpComplianceParams->StartPeripherals( );
 8007b56:	4798      	blx	r3
                break;
 8007b58:	e797      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = 2;
 8007b5a:	4b4d      	ldr	r3, [pc, #308]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	719a      	strb	r2, [r3, #6]
                break;
 8007b60:	e793      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = true;
 8007b62:	4b4b      	ldr	r3, [pc, #300]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8007b68:	709a      	strb	r2, [r3, #2]
                break;
 8007b6a:	e78e      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = false;
 8007b6c:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8007b72:	2201      	movs	r2, #1
 8007b74:	709a      	strb	r2, [r3, #2]
                break;
 8007b76:	e788      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007b78:	7b01      	ldrb	r1, [r0, #12]
 8007b7a:	4b45      	ldr	r3, [pc, #276]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b7c:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 8007b7e:	689c      	ldr	r4, [r3, #8]
 8007b80:	2304      	movs	r3, #4
 8007b82:	7023      	strb	r3, [r4, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007b84:	2301      	movs	r3, #1
 8007b86:	4a42      	ldr	r2, [pc, #264]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007b88:	7952      	ldrb	r2, [r2, #5]
 8007b8a:	428a      	cmp	r2, r1
 8007b8c:	bf28      	it	cs
 8007b8e:	460a      	movcs	r2, r1
 8007b90:	429a      	cmp	r2, r3
 8007b92:	f67f af7a 	bls.w	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8007b96:	6882      	ldr	r2, [r0, #8]
 8007b98:	5cd2      	ldrb	r2, [r2, r3]
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	54e2      	strb	r2, [r4, r3]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	e7f0      	b.n	8007b86 <LmhpComplianceOnMcpsIndication+0x136>
                    mlmeReq.Type = MLME_LINK_CHECK;
 8007ba4:	2305      	movs	r3, #5
 8007ba6:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007baa:	a802      	add	r0, sp, #8
 8007bac:	f003 f922 	bl	800adf4 <LoRaMacMlmeRequest>
                break;
 8007bb0:	e76b      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                    TimerStop( &ComplianceTxNextPacketTimer );
 8007bb2:	4839      	ldr	r0, [pc, #228]	; (8007c98 <LmhpComplianceOnMcpsIndication+0x248>)
 8007bb4:	f00a fb1c 	bl	80121f0 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8007bbe:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007bc6:	4c33      	ldr	r4, [pc, #204]	; (8007c94 <LmhpComplianceOnMcpsIndication+0x244>)
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007bd0:	a802      	add	r0, sp, #8
 8007bd2:	f002 fe51 	bl	800a878 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	7858      	ldrb	r0, [r3, #1]
 8007bda:	f003 faa7 	bl	800b12c <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	b103      	cbz	r3, 8007be6 <LmhpComplianceOnMcpsIndication+0x196>
                        LmhpComplianceParams->StartPeripherals( );
 8007be4:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8007be6:	4b2e      	ldr	r3, [pc, #184]	; (8007ca0 <LmhpComplianceOnMcpsIndication+0x250>)
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f43f af4d 	beq.w	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	2002      	movs	r0, #2
 8007bf4:	4798      	blx	r3
                break;
 8007bf6:	e748      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                    if( mcpsIndication->BufferSize == 3 )
 8007bf8:	7b03      	ldrb	r3, [r0, #12]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d008      	beq.n	8007c10 <LmhpComplianceOnMcpsIndication+0x1c0>
                    else if( mcpsIndication->BufferSize == 7 )
 8007bfe:	2b07      	cmp	r3, #7
 8007c00:	d010      	beq.n	8007c24 <LmhpComplianceOnMcpsIndication+0x1d4>
                    LoRaMacMlmeRequest( &mlmeReq );
 8007c02:	a802      	add	r0, sp, #8
 8007c04:	f003 f8f6 	bl	800adf4 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <LmhpComplianceOnMcpsIndication+0x240>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	709a      	strb	r2, [r3, #2]
                break;
 8007c0e:	e73c      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                        mlmeReq.Type = MLME_TXCW;
 8007c10:	2306      	movs	r3, #6
 8007c12:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007c16:	7851      	ldrb	r1, [r2, #1]
 8007c18:	7893      	ldrb	r3, [r2, #2]
 8007c1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c22:	e7ee      	b.n	8007c02 <LmhpComplianceOnMcpsIndication+0x1b2>
                        mlmeReq.Type = MLME_TXCW_1;
 8007c24:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007c28:	7851      	ldrb	r1, [r2, #1]
 8007c2a:	7893      	ldrb	r3, [r2, #2]
 8007c2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c30:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007c34:	78d1      	ldrb	r1, [r2, #3]
 8007c36:	7913      	ldrb	r3, [r2, #4]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007c3e:	7952      	ldrb	r2, [r2, #5]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	2264      	movs	r2, #100	; 0x64
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007c4a:	6883      	ldr	r3, [r0, #8]
 8007c4c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007c50:	f88d 3014 	strb.w	r3, [sp, #20]
 8007c54:	e7d5      	b.n	8007c02 <LmhpComplianceOnMcpsIndication+0x1b2>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 8007c56:	230a      	movs	r3, #10
 8007c58:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007c5c:	a802      	add	r0, sp, #8
 8007c5e:	f003 f8c9 	bl	800adf4 <LoRaMacMlmeRequest>
                break;
 8007c62:	e712      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                    mibReq.Type = MIB_DEVICE_CLASS;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007c6a:	7853      	ldrb	r3, [r2, #1]
 8007c6c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c70:	a802      	add	r0, sp, #8
 8007c72:	f002 fe01 	bl	800a878 <LoRaMacMibSetRequestConfirm>
                break;
 8007c76:	e708      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8007c78:	230d      	movs	r3, #13
 8007c7a:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007c7e:	7853      	ldrb	r3, [r2, #1]
 8007c80:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 8007c84:	a802      	add	r0, sp, #8
 8007c86:	f003 f8b5 	bl	800adf4 <LoRaMacMlmeRequest>
                break;
 8007c8a:	e6fe      	b.n	8007a8a <LmhpComplianceOnMcpsIndication+0x3a>
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	200005e8 	.word	0x200005e8
 8007c94:	20000614 	.word	0x20000614
 8007c98:	200005fc 	.word	0x200005fc
 8007c9c:	08007ca5 	.word	0x08007ca5
 8007ca0:	200000c4 	.word	0x200000c4

08007ca4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8007ca4:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 8007ca6:	f7ff fe7f 	bl	80079a8 <LmhpComplianceTxProcess>
}
 8007caa:	bd08      	pop	{r3, pc}

08007cac <LmhpCompliancePackageFactory>:
}
 8007cac:	4800      	ldr	r0, [pc, #0]	; (8007cb0 <LmhpCompliancePackageFactory+0x4>)
 8007cae:	4770      	bx	lr
 8007cb0:	200000c4 	.word	0x200000c4

08007cb4 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4770      	bx	lr

08007cb8 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	4770      	bx	lr
	...

08007cc0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <UpdateRxSlotIdleState+0x20>)
 8007cc2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d004      	beq.n	8007cd4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <UpdateRxSlotIdleState+0x24>)
 8007ccc:	2206      	movs	r2, #6
 8007cce:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8007cd2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007cd4:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <UpdateRxSlotIdleState+0x24>)
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20008000 	.word	0x20008000
 8007ce4:	2000061c 	.word	0x2000061c

08007ce8 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007ce8:	4b01      	ldr	r3, [pc, #4]	; (8007cf0 <LoRaMacEnableRequests+0x8>)
 8007cea:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 8007cee:	4770      	bx	lr
 8007cf0:	2000061c 	.word	0x2000061c

08007cf4 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007cf4:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007cf6:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <LoRaMacHandleIndicationEvents+0x58>)
 8007cf8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007cfc:	f013 0f08 	tst.w	r3, #8
 8007d00:	d00e      	beq.n	8007d20 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007d02:	4812      	ldr	r0, [pc, #72]	; (8007d4c <LoRaMacHandleIndicationEvents+0x58>)
 8007d04:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007d08:	f36f 03c3 	bfc	r3, #3, #1
 8007d0c:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007d10:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007d1a:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 8007d1e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <LoRaMacHandleIndicationEvents+0x58>)
 8007d22:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007d26:	f013 0f02 	tst.w	r3, #2
 8007d2a:	d00e      	beq.n	8007d4a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007d2c:	4807      	ldr	r0, [pc, #28]	; (8007d4c <LoRaMacHandleIndicationEvents+0x58>)
 8007d2e:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 8007d32:	f36f 0341 	bfc	r3, #1, #1
 8007d36:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007d3a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 8007d44:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8007d48:	4798      	blx	r3
    }
}
 8007d4a:	bd08      	pop	{r3, pc}
 8007d4c:	2000061c 	.word	0x2000061c

08007d50 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <LoRaMacCheckForRxAbort+0x20>)
 8007d52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007d56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d5a:	d008      	beq.n	8007d6e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007d5c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007d60:	4a03      	ldr	r2, [pc, #12]	; (8007d70 <LoRaMacCheckForRxAbort+0x20>)
 8007d62:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007d66:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007d6a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007d6e:	4770      	bx	lr
 8007d70:	2000061c 	.word	0x2000061c

08007d74 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007d74:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <CalculateBackOff+0x1c>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d78:	b94b      	cbnz	r3, 8007d8e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007d7a:	4a05      	ldr	r2, [pc, #20]	; (8007d90 <CalculateBackOff+0x1c>)
 8007d7c:	f8b2 311e 	ldrh.w	r3, [r2, #286]	; 0x11e
 8007d80:	4904      	ldr	r1, [pc, #16]	; (8007d94 <CalculateBackOff+0x20>)
 8007d82:	f8d1 1414 	ldr.w	r1, [r1, #1044]	; 0x414
 8007d86:	3b01      	subs	r3, #1
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007d8e:	4770      	bx	lr
 8007d90:	20008000 	.word	0x20008000
 8007d94:	2000061c 	.word	0x2000061c

08007d98 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007d98:	b508      	push	{r3, lr}
 8007d9a:	4684      	mov	ip, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <SetTxContinuousWave1+0x24>)
 8007da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da4:	4662      	mov	r2, ip
 8007da6:	b249      	sxtb	r1, r1
 8007da8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007daa:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <SetTxContinuousWave1+0x28>)
 8007dac:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007db8:	2000      	movs	r0, #0
 8007dba:	bd08      	pop	{r3, pc}
 8007dbc:	08013578 	.word	0x08013578
 8007dc0:	2000061c 	.word	0x2000061c

08007dc4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	b1f8      	cbz	r0, 8007e08 <DetermineFrameType+0x44>
 8007dc8:	b301      	cbz	r1, 8007e0c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007dca:	7b03      	ldrb	r3, [r0, #12]
 8007dcc:	f013 030f 	ands.w	r3, r3, #15
 8007dd0:	d005      	beq.n	8007dde <DetermineFrameType+0x1a>
 8007dd2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007dd6:	b110      	cbz	r0, 8007dde <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007dd8:	2000      	movs	r0, #0
 8007dda:	7008      	strb	r0, [r1, #0]
 8007ddc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007dde:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007de2:	b910      	cbnz	r0, 8007dea <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007de4:	2301      	movs	r3, #1
 8007de6:	700b      	strb	r3, [r1, #0]
 8007de8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007dea:	b92b      	cbnz	r3, 8007df8 <DetermineFrameType+0x34>
 8007dec:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007df0:	b910      	cbnz	r0, 8007df8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007df2:	2302      	movs	r3, #2
 8007df4:	700b      	strb	r3, [r1, #0]
 8007df6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007df8:	b953      	cbnz	r3, 8007e10 <DetermineFrameType+0x4c>
 8007dfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007dfe:	b14a      	cbz	r2, 8007e14 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007e00:	2203      	movs	r2, #3
 8007e02:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007e04:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007e06:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007e08:	2003      	movs	r0, #3
 8007e0a:	4770      	bx	lr
 8007e0c:	2003      	movs	r0, #3
 8007e0e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007e10:	2018      	movs	r0, #24
 8007e12:	4770      	bx	lr
 8007e14:	2018      	movs	r0, #24
}
 8007e16:	4770      	bx	lr

08007e18 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007e18:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <CheckRetransUnconfirmedUplink+0x40>)
 8007e1a:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <CheckRetransUnconfirmedUplink+0x44>)
 8007e20:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d20f      	bcs.n	8007e48 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <CheckRetransUnconfirmedUplink+0x40>)
 8007e2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007e2e:	f013 0f02 	tst.w	r3, #2
 8007e32:	d00b      	beq.n	8007e4c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <CheckRetransUnconfirmedUplink+0x44>)
 8007e36:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8007e3a:	b14b      	cbz	r3, 8007e50 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <CheckRetransUnconfirmedUplink+0x40>)
 8007e3e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8007e42:	b13b      	cbz	r3, 8007e54 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007e44:	2000      	movs	r0, #0
 8007e46:	4770      	bx	lr
        return true;
 8007e48:	2001      	movs	r0, #1
 8007e4a:	4770      	bx	lr
    return false;
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	4770      	bx	lr
            return true;
 8007e50:	2001      	movs	r0, #1
 8007e52:	4770      	bx	lr
                return true;
 8007e54:	2001      	movs	r0, #1
}
 8007e56:	4770      	bx	lr
 8007e58:	2000061c 	.word	0x2000061c
 8007e5c:	20008000 	.word	0x20008000

08007e60 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <CheckRetransConfirmedUplink+0x2c>)
 8007e62:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8007e66:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d209      	bcs.n	8007e82 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <CheckRetransConfirmedUplink+0x2c>)
 8007e70:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007e74:	f013 0f02 	tst.w	r3, #2
 8007e78:	d005      	beq.n	8007e86 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007e7a:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <CheckRetransConfirmedUplink+0x2c>)
 8007e7c:	f893 0438 	ldrb.w	r0, [r3, #1080]	; 0x438
 8007e80:	4770      	bx	lr
        return true;
 8007e82:	2001      	movs	r0, #1
 8007e84:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007e86:	2000      	movs	r0, #0
}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000061c 	.word	0x2000061c

08007e90 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <StopRetransmission+0x48>)
 8007e92:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8007e96:	f013 0f02 	tst.w	r3, #2
 8007e9a:	d004      	beq.n	8007ea6 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <StopRetransmission+0x48>)
 8007e9e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d907      	bls.n	8007eb6 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <StopRetransmission+0x4c>)
 8007ea8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8007eac:	b11b      	cbz	r3, 8007eb6 <StopRetransmission+0x26>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8007eae:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <StopRetransmission+0x4c>)
 8007eb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007eb6:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <StopRetransmission+0x48>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8007ebe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8007ec2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007ec6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007eca:	f022 0202 	bic.w	r2, r2, #2
 8007ece:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	2000061c 	.word	0x2000061c
 8007edc:	20008000 	.word	0x20008000

08007ee0 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8007ee0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <OnMacProcessNotify+0x14>)
 8007ee4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007ee8:	b113      	cbz	r3, 8007ef0 <OnMacProcessNotify+0x10>
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	b103      	cbz	r3, 8007ef0 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007eee:	4798      	blx	r3
    }
}
 8007ef0:	bd08      	pop	{r3, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000061c 	.word	0x2000061c

08007ef8 <OnRadioRxError>:
{
 8007ef8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007efa:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <OnRadioRxError+0x14>)
 8007efc:	7813      	ldrb	r3, [r2, #0]
 8007efe:	f043 0302 	orr.w	r3, r3, #2
 8007f02:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8007f04:	f7ff ffec 	bl	8007ee0 <OnMacProcessNotify>
}
 8007f08:	bd08      	pop	{r3, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000618 	.word	0x20000618

08007f10 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007f10:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <CallNvmDataChangeCallback+0x14>)
 8007f14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007f18:	b113      	cbz	r3, 8007f20 <CallNvmDataChangeCallback+0x10>
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	b103      	cbz	r3, 8007f20 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007f1e:	4798      	blx	r3
    }
}
 8007f20:	bd08      	pop	{r3, pc}
 8007f22:	bf00      	nop
 8007f24:	2000061c 	.word	0x2000061c

08007f28 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <IsRequestPending+0x14>)
 8007f2a:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 8007f2e:	f010 0005 	ands.w	r0, r0, #5
 8007f32:	d100      	bne.n	8007f36 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007f34:	4770      	bx	lr
        return 1;
 8007f36:	2001      	movs	r0, #1
 8007f38:	e7fc      	b.n	8007f34 <IsRequestPending+0xc>
 8007f3a:	bf00      	nop
 8007f3c:	2000061c 	.word	0x2000061c

08007f40 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007f40:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <AckTimeoutRetriesProcess+0x50>)
 8007f42:	f892 340e 	ldrb.w	r3, [r2, #1038]	; 0x40e
 8007f46:	f892 240d 	ldrb.w	r2, [r2, #1037]	; 0x40d
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d207      	bcs.n	8007f5e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007f4e:	3301      	adds	r3, #1
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <AckTimeoutRetriesProcess+0x50>)
 8007f54:	f882 340e 	strb.w	r3, [r2, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007f58:	f013 0f01 	tst.w	r3, #1
 8007f5c:	d100      	bne.n	8007f60 <AckTimeoutRetriesProcess+0x20>
 8007f5e:	4770      	bx	lr
{
 8007f60:	b510      	push	{r4, lr}
 8007f62:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007f64:	2322      	movs	r3, #34	; 0x22
 8007f66:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f6a:	4c0a      	ldr	r4, [pc, #40]	; (8007f94 <AckTimeoutRetriesProcess+0x54>)
 8007f6c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8007f70:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f74:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007f78:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007f7c:	a902      	add	r1, sp, #8
 8007f7e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8007f82:	f004 f9ab 	bl	800c2dc <RegionGetPhyParam>
 8007f86:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007f88:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007f8c:	b004      	add	sp, #16
 8007f8e:	bd10      	pop	{r4, pc}
 8007f90:	2000061c 	.word	0x2000061c
 8007f94:	20008000 	.word	0x20008000

08007f98 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007f98:	b500      	push	{lr}
 8007f9a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007f9e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8007fa2:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007fa6:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007faa:	220d      	movs	r2, #13
 8007fac:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007fb0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8007fb4:	b113      	cbz	r3, 8007fbc <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007fb6:	230e      	movs	r3, #14
 8007fb8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007fbc:	a902      	add	r1, sp, #8
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007fc0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8007fc4:	f004 f98a 	bl	800c2dc <RegionGetPhyParam>
 8007fc8:	9001      	str	r0, [sp, #4]
}
 8007fca:	b2c0      	uxtb	r0, r0
 8007fcc:	b005      	add	sp, #20
 8007fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fd2:	bf00      	nop
 8007fd4:	20008000 	.word	0x20008000

08007fd8 <ValidatePayloadLength>:
{
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4605      	mov	r5, r0
 8007fdc:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007fde:	4608      	mov	r0, r1
 8007fe0:	f7ff ffda 	bl	8007f98 <GetMaxAppPayloadWithoutFOptsLength>
 8007fe4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007fe6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d303      	bcc.n	8007ff4 <ValidatePayloadLength+0x1c>
 8007fec:	2aff      	cmp	r2, #255	; 0xff
 8007fee:	d903      	bls.n	8007ff8 <ValidatePayloadLength+0x20>
    return false;
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e000      	b.n	8007ff6 <ValidatePayloadLength+0x1e>
 8007ff4:	2000      	movs	r0, #0
}
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	e7fc      	b.n	8007ff6 <ValidatePayloadLength+0x1e>

08007ffc <ProcessRadioTxDone>:
{
 8007ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ffe:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008000:	4b40      	ldr	r3, [pc, #256]	; (8008104 <ProcessRadioTxDone+0x108>)
 8008002:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008006:	2b02      	cmp	r3, #2
 8008008:	d002      	beq.n	8008010 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800800a:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <ProcessRadioTxDone+0x10c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008010:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008014:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8008016:	f00a f8ab 	bl	8012170 <UTIL_TIMER_GetCurrentTime>
 800801a:	4b3c      	ldr	r3, [pc, #240]	; (800810c <ProcessRadioTxDone+0x110>)
 800801c:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800801e:	4c3c      	ldr	r4, [pc, #240]	; (8008110 <ProcessRadioTxDone+0x114>)
 8008020:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8008024:	1a2d      	subs	r5, r5, r0
 8008026:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800802a:	4429      	add	r1, r5
 800802c:	4630      	mov	r0, r6
 800802e:	f00a f97f 	bl	8012330 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008032:	4630      	mov	r0, r6
 8008034:	f00a f936 	bl	80122a4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8008038:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800803c:	f504 7466 	add.w	r4, r4, #920	; 0x398
 8008040:	4429      	add	r1, r5
 8008042:	4620      	mov	r0, r4
 8008044:	f00a f974 	bl	8012330 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008048:	4620      	mov	r0, r4
 800804a:	f00a f92b 	bl	80122a4 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804e:	f387 8810 	msr	PRIMASK, r7
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008052:	4b2c      	ldr	r3, [pc, #176]	; (8008104 <ProcessRadioTxDone+0x108>)
 8008054:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008058:	2b02      	cmp	r3, #2
 800805a:	d004      	beq.n	8008066 <ProcessRadioTxDone+0x6a>
 800805c:	f5a4 7366 	sub.w	r3, r4, #920	; 0x398
 8008060:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008064:	b1ab      	cbz	r3, 8008092 <ProcessRadioTxDone+0x96>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008066:	2316      	movs	r3, #22
 8008068:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800806c:	a90a      	add	r1, sp, #40	; 0x28
 800806e:	4b25      	ldr	r3, [pc, #148]	; (8008104 <ProcessRadioTxDone+0x108>)
 8008070:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008074:	f004 f932 	bl	800c2dc <RegionGetPhyParam>
 8008078:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800807a:	4c25      	ldr	r4, [pc, #148]	; (8008110 <ProcessRadioTxDone+0x114>)
 800807c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008080:	f504 747d 	add.w	r4, r4, #1012	; 0x3f4
 8008084:	4401      	add	r1, r0
 8008086:	4620      	mov	r0, r4
 8008088:	f00a f952 	bl	8012330 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800808c:	4620      	mov	r0, r4
 800808e:	f00a f909 	bl	80122a4 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <ProcessRadioTxDone+0x110>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4c1b      	ldr	r4, [pc, #108]	; (8008104 <ProcessRadioTxDone+0x108>)
 8008098:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800809a:	4f1d      	ldr	r7, [pc, #116]	; (8008110 <ProcessRadioTxDone+0x114>)
 800809c:	f897 2411 	ldrb.w	r2, [r7, #1041]	; 0x411
 80080a0:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80080a4:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80080a6:	ae0c      	add	r6, sp, #48	; 0x30
 80080a8:	4630      	mov	r0, r6
 80080aa:	f009 ffd5 	bl	8012058 <SysTimeGetMcuTime>
 80080ae:	ad02      	add	r5, sp, #8
 80080b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080ba:	e896 0006 	ldmia.w	r6, {r1, r2}
 80080be:	4628      	mov	r0, r5
 80080c0:	f009 ff67 	bl	8011f92 <SysTimeSub>
 80080c4:	ab07      	add	r3, sp, #28
 80080c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80080ca:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80080ce:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80080d2:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80080da:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 80080de:	b90b      	cbnz	r3, 80080e4 <ProcessRadioTxDone+0xe8>
        txDone.Joined  = false;
 80080e0:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80080e4:	a904      	add	r1, sp, #16
 80080e6:	4b07      	ldr	r3, [pc, #28]	; (8008104 <ProcessRadioTxDone+0x108>)
 80080e8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80080ec:	f004 f90e 	bl	800c30c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <ProcessRadioTxDone+0x114>)
 80080f2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80080f6:	b91b      	cbnz	r3, 8008100 <ProcessRadioTxDone+0x104>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <ProcessRadioTxDone+0x114>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
}
 8008100:	b00f      	add	sp, #60	; 0x3c
 8008102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008104:	20008000 	.word	0x20008000
 8008108:	08013578 	.word	0x08013578
 800810c:	20000b34 	.word	0x20000b34
 8008110:	2000061c 	.word	0x2000061c

08008114 <OnAckTimeoutTimerEvent>:
{
 8008114:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008116:	4c0d      	ldr	r4, [pc, #52]	; (800814c <OnAckTimeoutTimerEvent+0x38>)
 8008118:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800811c:	f00a f868 	bl	80121f0 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008120:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 8008124:	b113      	cbz	r3, 800812c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008126:	2201      	movs	r2, #1
 8008128:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800812c:	4b08      	ldr	r3, [pc, #32]	; (8008150 <OnAckTimeoutTimerEvent+0x3c>)
 800812e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008132:	2b02      	cmp	r3, #2
 8008134:	d002      	beq.n	800813c <OnAckTimeoutTimerEvent+0x28>
    OnMacProcessNotify( );
 8008136:	f7ff fed3 	bl	8007ee0 <OnMacProcessNotify>
}
 800813a:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800813c:	4a03      	ldr	r2, [pc, #12]	; (800814c <OnAckTimeoutTimerEvent+0x38>)
 800813e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008142:	f043 0310 	orr.w	r3, r3, #16
 8008146:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800814a:	e7f4      	b.n	8008136 <OnAckTimeoutTimerEvent+0x22>
 800814c:	2000061c 	.word	0x2000061c
 8008150:	20008000 	.word	0x20008000

08008154 <PrepareRxDoneAbort>:
{
 8008154:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008156:	4b0e      	ldr	r3, [pc, #56]	; (8008190 <PrepareRxDoneAbort+0x3c>)
 8008158:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800815c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008160:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8008164:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008168:	b973      	cbnz	r3, 8008188 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <PrepareRxDoneAbort+0x3c>)
 800816c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8008170:	f042 0202 	orr.w	r2, r2, #2
 8008174:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	f042 0210 	orr.w	r2, r2, #16
 800817e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008182:	f7ff fd9d 	bl	8007cc0 <UpdateRxSlotIdleState>
}
 8008186:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8008188:	2000      	movs	r0, #0
 800818a:	f7ff ffc3 	bl	8008114 <OnAckTimeoutTimerEvent>
 800818e:	e7ec      	b.n	800816a <PrepareRxDoneAbort+0x16>
 8008190:	2000061c 	.word	0x2000061c

08008194 <LoRaMacCheckForBeaconAcquisition>:
{
 8008194:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008196:	200c      	movs	r0, #12
 8008198:	f003 fb0c 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800819c:	b188      	cbz	r0, 80081c2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <LoRaMacCheckForBeaconAcquisition+0x38>)
 80081a0:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80081a4:	f010 0f01 	tst.w	r0, #1
 80081a8:	d10d      	bne.n	80081c6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80081aa:	f010 0004 	ands.w	r0, r0, #4
 80081ae:	d009      	beq.n	80081c4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80081b6:	f023 0302 	bic.w	r3, r3, #2
 80081ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80081be:	2001      	movs	r0, #1
 80081c0:	e000      	b.n	80081c4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 80081c2:	2000      	movs	r0, #0
}
 80081c4:	bd08      	pop	{r3, pc}
    return 0x00;
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7fc      	b.n	80081c4 <LoRaMacCheckForBeaconAcquisition+0x30>
 80081ca:	bf00      	nop
 80081cc:	2000061c 	.word	0x2000061c

080081d0 <GetFCntDown>:
{
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	9c05      	ldr	r4, [sp, #20]
 80081d4:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80081d6:	b302      	cbz	r2, 800821a <GetFCntDown+0x4a>
 80081d8:	4694      	mov	ip, r2
 80081da:	b304      	cbz	r4, 800821e <GetFCntDown+0x4e>
 80081dc:	b30d      	cbz	r5, 8008222 <GetFCntDown+0x52>
    switch( addrID )
 80081de:	b188      	cbz	r0, 8008204 <GetFCntDown+0x34>
 80081e0:	2801      	cmp	r0, #1
 80081e2:	d120      	bne.n	8008226 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 80081e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80081e8:	2a01      	cmp	r2, #1
 80081ea:	d002      	beq.n	80081f2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 80081ec:	2303      	movs	r3, #3
 80081ee:	7023      	strb	r3, [r4, #0]
 80081f0:	e00a      	b.n	8008208 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80081f2:	b121      	cbz	r1, 80081fe <GetFCntDown+0x2e>
 80081f4:	2903      	cmp	r1, #3
 80081f6:	d002      	beq.n	80081fe <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 80081f8:	2301      	movs	r3, #1
 80081fa:	7023      	strb	r3, [r4, #0]
 80081fc:	e004      	b.n	8008208 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 80081fe:	2302      	movs	r3, #2
 8008200:	7023      	strb	r3, [r4, #0]
 8008202:	e001      	b.n	8008208 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008204:	2304      	movs	r3, #4
 8008206:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8008208:	462b      	mov	r3, r5
 800820a:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800820e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008212:	7820      	ldrb	r0, [r4, #0]
 8008214:	f003 fcf8 	bl	800bc08 <LoRaMacCryptoGetFCntDown>
}
 8008218:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800821a:	200a      	movs	r0, #10
 800821c:	e7fc      	b.n	8008218 <GetFCntDown+0x48>
 800821e:	200a      	movs	r0, #10
 8008220:	e7fa      	b.n	8008218 <GetFCntDown+0x48>
 8008222:	200a      	movs	r0, #10
 8008224:	e7f8      	b.n	8008218 <GetFCntDown+0x48>
    switch( addrID )
 8008226:	2005      	movs	r0, #5
 8008228:	e7f6      	b.n	8008218 <GetFCntDown+0x48>

0800822a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800822a:	2801      	cmp	r0, #1
 800822c:	d900      	bls.n	8008230 <RemoveMacCommands+0x6>
 800822e:	4770      	bx	lr
{
 8008230:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008232:	2a01      	cmp	r2, #1
 8008234:	d105      	bne.n	8008242 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008236:	f011 0f20 	tst.w	r1, #32
 800823a:	d004      	beq.n	8008246 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800823c:	f003 f966 	bl	800b50c <LoRaMacCommandsRemoveStickyAnsCmds>
 8008240:	e001      	b.n	8008246 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008242:	f003 f963 	bl	800b50c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008246:	bd08      	pop	{r3, pc}

08008248 <ProcessMacCommands>:
{
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	b08f      	sub	sp, #60	; 0x3c
 800824e:	4605      	mov	r5, r0
 8008250:	460c      	mov	r4, r1
 8008252:	4616      	mov	r6, r2
 8008254:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008256:	2700      	movs	r7, #0
 8008258:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800825c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8008260:	42b4      	cmp	r4, r6
 8008262:	f080 82c4 	bcs.w	80087ee <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008266:	5d28      	ldrb	r0, [r5, r4]
 8008268:	f003 f9a8 	bl	800b5bc <LoRaMacCommandsGetCmdSize>
 800826c:	4420      	add	r0, r4
 800826e:	42b0      	cmp	r0, r6
 8008270:	f300 82bd 	bgt.w	80087ee <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 8008274:	f104 0901 	add.w	r9, r4, #1
 8008278:	fa5f f989 	uxtb.w	r9, r9
 800827c:	5d29      	ldrb	r1, [r5, r4]
 800827e:	3902      	subs	r1, #2
 8008280:	2911      	cmp	r1, #17
 8008282:	f200 82b4 	bhi.w	80087ee <ProcessMacCommands+0x5a6>
 8008286:	e8df f011 	tbh	[pc, r1, lsl #1]
 800828a:	0012      	.short	0x0012
 800828c:	00920029 	.word	0x00920029
 8008290:	00ee00a6 	.word	0x00ee00a6
 8008294:	01400106 	.word	0x01400106
 8008298:	01ad0157 	.word	0x01ad0157
 800829c:	02b202b2 	.word	0x02b202b2
 80082a0:	02b201de 	.word	0x02b201de
 80082a4:	023e02b2 	.word	0x023e02b2
 80082a8:	02750255 	.word	0x02750255
 80082ac:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80082ae:	2005      	movs	r0, #5
 80082b0:	f003 fa80 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 80082b4:	b908      	cbnz	r0, 80082ba <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 80082b6:	464c      	mov	r4, r9
 80082b8:	e7d2      	b.n	8008260 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80082ba:	2105      	movs	r1, #5
 80082bc:	2000      	movs	r0, #0
 80082be:	f003 fa2d 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80082c2:	1ca3      	adds	r3, r4, #2
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f815 1009 	ldrb.w	r1, [r5, r9]
 80082ca:	4ac2      	ldr	r2, [pc, #776]	; (80085d4 <ProcessMacCommands+0x38c>)
 80082cc:	f882 1450 	strb.w	r1, [r2, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80082d0:	3403      	adds	r4, #3
 80082d2:	b2e4      	uxtb	r4, r4
 80082d4:	5ceb      	ldrb	r3, [r5, r3]
 80082d6:	f882 3451 	strb.w	r3, [r2, #1105]	; 0x451
 80082da:	e7c1      	b.n	8008260 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 80082dc:	2300      	movs	r3, #0
 80082de:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 80082e2:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 80082e6:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 80082ea:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 80082ee:	b10f      	cbz	r7, 80082f4 <ProcessMacCommands+0xac>
                break;
 80082f0:	464c      	mov	r4, r9
 80082f2:	e7b5      	b.n	8008260 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80082f4:	f109 33ff 	add.w	r3, r9, #4294967295
 80082f8:	442b      	add	r3, r5
 80082fa:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80082fc:	eba6 0309 	sub.w	r3, r6, r9
 8008300:	3301      	adds	r3, #1
 8008302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008306:	48b4      	ldr	r0, [pc, #720]	; (80085d8 <ProcessMacCommands+0x390>)
 8008308:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 800830c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008310:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008314:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008318:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 800831c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008320:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8008324:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008328:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800832c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008330:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8008334:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008336:	ab05      	add	r3, sp, #20
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	f10d 030b 	add.w	r3, sp, #11
 8008342:	f10d 020a 	add.w	r2, sp, #10
 8008346:	a907      	add	r1, sp, #28
 8008348:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800834c:	f004 f85e 	bl	800c40c <RegionLinkAdrReq>
 8008350:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8008354:	f000 0007 	and.w	r0, r0, #7
 8008358:	2807      	cmp	r0, #7
 800835a:	d001      	beq.n	8008360 <ProcessMacCommands+0x118>
{
 800835c:	2400      	movs	r4, #0
 800835e:	e015      	b.n	800838c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008360:	4b9d      	ldr	r3, [pc, #628]	; (80085d8 <ProcessMacCommands+0x390>)
 8008362:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8008366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800836a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800836e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008372:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008376:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800837a:	e7ef      	b.n	800835c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800837c:	2201      	movs	r2, #1
 800837e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008382:	2003      	movs	r0, #3
 8008384:	f003 f84e 	bl	800b424 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008388:	3401      	adds	r4, #1
 800838a:	b2e4      	uxtb	r4, r4
 800838c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008390:	4b92      	ldr	r3, [pc, #584]	; (80085dc <ProcessMacCommands+0x394>)
 8008392:	fba3 1302 	umull	r1, r3, r3, r2
 8008396:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800839a:	d3ef      	bcc.n	800837c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800839c:	4491      	add	r9, r2
 800839e:	fa5f f989 	uxtb.w	r9, r9
 80083a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80083a6:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 80083aa:	2701      	movs	r7, #1
 80083ac:	e7a0      	b.n	80082f0 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80083ae:	3402      	adds	r4, #2
 80083b0:	b2e4      	uxtb	r4, r4
 80083b2:	f815 3009 	ldrb.w	r3, [r5, r9]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	4987      	ldr	r1, [pc, #540]	; (80085d8 <ProcessMacCommands+0x390>)
 80083bc:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80083c0:	2201      	movs	r2, #1
 80083c2:	fa02 f303 	lsl.w	r3, r2, r3
 80083c6:	f8a1 311e 	strh.w	r3, [r1, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80083ca:	2200      	movs	r2, #0
 80083cc:	a90b      	add	r1, sp, #44	; 0x2c
 80083ce:	2004      	movs	r0, #4
 80083d0:	f003 f828 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 80083d4:	e744      	b.n	8008260 <ProcessMacCommands+0x18>
                status = 0x07;
 80083d6:	2307      	movs	r3, #7
 80083d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80083dc:	f815 3009 	ldrb.w	r3, [r5, r9]
 80083e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80083e4:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80083e8:	f915 3009 	ldrsb.w	r3, [r5, r9]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80083f4:	1ca3      	adds	r3, r4, #2
 80083f6:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80083f8:	1ce1      	adds	r1, r4, #3
 80083fa:	b2c9      	uxtb	r1, r1
 80083fc:	5ceb      	ldrb	r3, [r5, r3]
 80083fe:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008400:	1d22      	adds	r2, r4, #4
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	5c69      	ldrb	r1, [r5, r1]
 8008406:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800840a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800840c:	3405      	adds	r4, #5
 800840e:	b2e4      	uxtb	r4, r4
 8008410:	5caa      	ldrb	r2, [r5, r2]
 8008412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008416:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008418:	2264      	movs	r2, #100	; 0x64
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008420:	a907      	add	r1, sp, #28
 8008422:	4b6d      	ldr	r3, [pc, #436]	; (80085d8 <ProcessMacCommands+0x390>)
 8008424:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008428:	f004 f80c 	bl	800c444 <RegionRxParamSetupReq>
 800842c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008430:	f000 0307 	and.w	r3, r0, #7
 8008434:	2b07      	cmp	r3, #7
 8008436:	d007      	beq.n	8008448 <ProcessMacCommands+0x200>
                macCmdPayload[0] = status;
 8008438:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800843c:	2201      	movs	r2, #1
 800843e:	a90b      	add	r1, sp, #44	; 0x2c
 8008440:	2005      	movs	r0, #5
 8008442:	f002 ffef 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 8008446:	e70b      	b.n	8008260 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008448:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800844c:	4b62      	ldr	r3, [pc, #392]	; (80085d8 <ProcessMacCommands+0x390>)
 800844e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008456:	9a08      	ldr	r2, [sp, #32]
 8008458:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800845a:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800845c:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008460:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8008464:	e7e8      	b.n	8008438 <ProcessMacCommands+0x1f0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008466:	4b5b      	ldr	r3, [pc, #364]	; (80085d4 <ProcessMacCommands+0x38c>)
 8008468:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800846c:	b17b      	cbz	r3, 800848e <ProcessMacCommands+0x246>
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	b17b      	cbz	r3, 8008492 <ProcessMacCommands+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008472:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008474:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008478:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800847c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008480:	2202      	movs	r2, #2
 8008482:	a90b      	add	r1, sp, #44	; 0x2c
 8008484:	2006      	movs	r0, #6
 8008486:	f002 ffcd 	bl	800b424 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800848a:	464c      	mov	r4, r9
                break;
 800848c:	e6e8      	b.n	8008260 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800848e:	20ff      	movs	r0, #255	; 0xff
 8008490:	e7f0      	b.n	8008474 <ProcessMacCommands+0x22c>
 8008492:	20ff      	movs	r0, #255	; 0xff
 8008494:	e7ee      	b.n	8008474 <ProcessMacCommands+0x22c>
                status = 0x03;
 8008496:	2303      	movs	r3, #3
 8008498:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800849c:	1ca3      	adds	r3, r4, #2
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f915 2009 	ldrsb.w	r2, [r5, r9]
 80084a4:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80084a8:	aa07      	add	r2, sp, #28
 80084aa:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80084ac:	1ce2      	adds	r2, r4, #3
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	5ceb      	ldrb	r3, [r5, r3]
 80084b2:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80084b4:	1d21      	adds	r1, r4, #4
 80084b6:	b2c9      	uxtb	r1, r1
 80084b8:	5caa      	ldrb	r2, [r5, r2]
 80084ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80084be:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80084c0:	1d62      	adds	r2, r4, #5
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	5c69      	ldrb	r1, [r5, r1]
 80084c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80084ca:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 80084cc:	2164      	movs	r1, #100	; 0x64
 80084ce:	fb01 f303 	mul.w	r3, r1, r3
 80084d2:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80084d8:	3406      	adds	r4, #6
 80084da:	b2e4      	uxtb	r4, r4
 80084dc:	56ab      	ldrsb	r3, [r5, r2]
 80084de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80084e2:	a905      	add	r1, sp, #20
 80084e4:	4b3c      	ldr	r3, [pc, #240]	; (80085d8 <ProcessMacCommands+0x390>)
 80084e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80084ea:	f003 ffba 	bl	800c462 <RegionNewChannelReq>
 80084ee:	b2c3      	uxtb	r3, r0
 80084f0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f6ff aeb3 	blt.w	8008260 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80084fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80084fe:	2201      	movs	r2, #1
 8008500:	a90b      	add	r1, sp, #44	; 0x2c
 8008502:	2007      	movs	r0, #7
 8008504:	f002 ff8e 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 8008508:	e6aa      	b.n	8008260 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800850a:	3402      	adds	r4, #2
 800850c:	b2e4      	uxtb	r4, r4
 800850e:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 8008512:	f013 030f 	ands.w	r3, r3, #15
 8008516:	d100      	bne.n	800851a <ProcessMacCommands+0x2d2>
                    delay++;
 8008518:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800851a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	4a2d      	ldr	r2, [pc, #180]	; (80085d8 <ProcessMacCommands+0x390>)
 8008524:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008526:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800852a:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800852c:	2200      	movs	r2, #0
 800852e:	a90b      	add	r1, sp, #44	; 0x2c
 8008530:	2008      	movs	r0, #8
 8008532:	f002 ff77 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 8008536:	e693      	b.n	8008260 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008538:	3402      	adds	r4, #2
 800853a:	b2e4      	uxtb	r4, r4
 800853c:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8008540:	2200      	movs	r2, #0
 8008542:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008546:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800854a:	f013 0f20 	tst.w	r3, #32
 800854e:	d002      	beq.n	8008556 <ProcessMacCommands+0x30e>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008550:	2201      	movs	r2, #1
 8008552:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008556:	f013 0f10 	tst.w	r3, #16
 800855a:	d002      	beq.n	8008562 <ProcessMacCommands+0x31a>
                    txParamSetupReq.UplinkDwellTime = 1;
 800855c:	2201      	movs	r2, #1
 800855e:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800856a:	a903      	add	r1, sp, #12
 800856c:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <ProcessMacCommands+0x390>)
 800856e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008572:	f003 ff85 	bl	800c480 <RegionTxParamSetupReq>
 8008576:	f1b0 3fff 	cmp.w	r0, #4294967295
 800857a:	f43f ae71 	beq.w	8008260 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800857e:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008582:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80085d8 <ProcessMacCommands+0x390>
 8008586:	f889 a07c 	strb.w	sl, [r9, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800858a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800858e:	f889 307d 	strb.w	r3, [r9, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008592:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008596:	4a12      	ldr	r2, [pc, #72]	; (80085e0 <ProcessMacCommands+0x398>)
 8008598:	5cd0      	ldrb	r0, [r2, r3]
 800859a:	f7f8 f917 	bl	80007cc <__aeabi_ui2f>
 800859e:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80085a2:	2302      	movs	r3, #2
 80085a4:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80085a8:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80085ac:	a907      	add	r1, sp, #28
 80085ae:	f899 0048 	ldrb.w	r0, [r9, #72]	; 0x48
 80085b2:	f003 fe93 	bl	800c2dc <RegionGetPhyParam>
 80085b6:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80085b8:	b240      	sxtb	r0, r0
 80085ba:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80085be:	4298      	cmp	r0, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4618      	movlt	r0, r3
 80085c4:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80085c8:	2200      	movs	r2, #0
 80085ca:	a90b      	add	r1, sp, #44	; 0x2c
 80085cc:	2009      	movs	r0, #9
 80085ce:	f002 ff29 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 80085d2:	e645      	b.n	8008260 <ProcessMacCommands+0x18>
 80085d4:	2000061c 	.word	0x2000061c
 80085d8:	20008000 	.word	0x20008000
 80085dc:	cccccccd 	.word	0xcccccccd
 80085e0:	08012ea0 	.word	0x08012ea0
                status = 0x03;
 80085e4:	2303      	movs	r3, #3
 80085e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80085ea:	1ca3      	adds	r3, r4, #2
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f815 2009 	ldrb.w	r2, [r5, r9]
 80085f2:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80085f6:	1ce1      	adds	r1, r4, #3
 80085f8:	b2c9      	uxtb	r1, r1
 80085fa:	5ceb      	ldrb	r3, [r5, r3]
 80085fc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80085fe:	1d22      	adds	r2, r4, #4
 8008600:	b2d2      	uxtb	r2, r2
 8008602:	5c69      	ldrb	r1, [r5, r1]
 8008604:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008608:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800860a:	3405      	adds	r4, #5
 800860c:	b2e4      	uxtb	r4, r4
 800860e:	5caa      	ldrb	r2, [r5, r2]
 8008610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008614:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008616:	2264      	movs	r2, #100	; 0x64
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800861e:	a907      	add	r1, sp, #28
 8008620:	4b74      	ldr	r3, [pc, #464]	; (80087f4 <ProcessMacCommands+0x5ac>)
 8008622:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008626:	f003 ff3a 	bl	800c49e <RegionDlChannelReq>
 800862a:	b2c3      	uxtb	r3, r0
 800862c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008630:	2800      	cmp	r0, #0
 8008632:	f6ff ae15 	blt.w	8008260 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8008636:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800863a:	2201      	movs	r2, #1
 800863c:	a90b      	add	r1, sp, #44	; 0x2c
 800863e:	200a      	movs	r0, #10
 8008640:	f002 fef0 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 8008644:	e60c      	b.n	8008260 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008646:	200a      	movs	r0, #10
 8008648:	f003 f8b4 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800864c:	b908      	cbnz	r0, 8008652 <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 800864e:	464c      	mov	r4, r9
 8008650:	e606      	b.n	8008260 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008652:	210a      	movs	r1, #10
 8008654:	2000      	movs	r0, #0
 8008656:	f003 f861 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800865a:	a803      	add	r0, sp, #12
 800865c:	2300      	movs	r3, #0
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008662:	f10d 0a14 	add.w	sl, sp, #20
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800866a:	f10d 0b1c 	add.w	fp, sp, #28
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008672:	1ca1      	adds	r1, r4, #2
 8008674:	b2c9      	uxtb	r1, r1
 8008676:	f815 3009 	ldrb.w	r3, [r5, r9]
 800867a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800867c:	1ce2      	adds	r2, r4, #3
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	5c69      	ldrb	r1, [r5, r1]
 8008682:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008686:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008688:	1d21      	adds	r1, r4, #4
 800868a:	b2c9      	uxtb	r1, r1
 800868c:	5caa      	ldrb	r2, [r5, r2]
 800868e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008692:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008694:	1d62      	adds	r2, r4, #5
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	5c69      	ldrb	r1, [r5, r1]
 800869a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800869e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80086a0:	3406      	adds	r4, #6
 80086a2:	b2e4      	uxtb	r4, r4
 80086a4:	5caa      	ldrb	r2, [r5, r2]
 80086a6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086ae:	fb01 f202 	mul.w	r2, r1, r2
 80086b2:	0a12      	lsrs	r2, r2, #8
 80086b4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 80086b8:	c803      	ldmia	r0, {r0, r1}
 80086ba:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80086be:	4a4e      	ldr	r2, [pc, #312]	; (80087f8 <ProcessMacCommands+0x5b0>)
 80086c0:	441a      	add	r2, r3
 80086c2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 80086c4:	4658      	mov	r0, fp
 80086c6:	f009 fca5 	bl	8012014 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80086ca:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80087fc <ProcessMacCommands+0x5b4>
 80086ce:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 80086d8:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80086dc:	a80c      	add	r0, sp, #48	; 0x30
 80086de:	f009 fc58 	bl	8011f92 <SysTimeSub>
 80086e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80086ec:	4650      	mov	r0, sl
 80086ee:	f009 fc31 	bl	8011f54 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80086f2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80086f6:	f009 fc6b 	bl	8011fd0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80086fa:	f002 fdf9 	bl	800b2f0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80086fe:	2301      	movs	r3, #1
 8008700:	f889 3430 	strb.w	r3, [r9, #1072]	; 0x430
 8008704:	e5ac      	b.n	8008260 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008706:	200d      	movs	r0, #13
 8008708:	f003 f854 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800870c:	b908      	cbnz	r0, 8008712 <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 800870e:	464c      	mov	r4, r9
 8008710:	e5a6      	b.n	8008260 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008712:	210d      	movs	r1, #13
 8008714:	2000      	movs	r0, #0
 8008716:	f003 f801 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800871a:	4b38      	ldr	r3, [pc, #224]	; (80087fc <ProcessMacCommands+0x5b4>)
 800871c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008720:	3b04      	subs	r3, #4
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d801      	bhi.n	800872c <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 8008728:	464c      	mov	r4, r9
 800872a:	e599      	b.n	8008260 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800872c:	f002 fddc 	bl	800b2e8 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008730:	464c      	mov	r4, r9
 8008732:	e595      	b.n	8008260 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8008734:	1ca2      	adds	r2, r4, #2
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800873c:	1ce1      	adds	r1, r4, #3
 800873e:	b2c9      	uxtb	r1, r1
 8008740:	5caa      	ldrb	r2, [r5, r2]
 8008742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008746:	1d22      	adds	r2, r4, #4
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	5c69      	ldrb	r1, [r5, r1]
 800874c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008750:	3405      	adds	r4, #5
 8008752:	b2e4      	uxtb	r4, r4
 8008754:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008756:	2164      	movs	r1, #100	; 0x64
 8008758:	fb03 f101 	mul.w	r1, r3, r1
 800875c:	f000 000f 	and.w	r0, r0, #15
 8008760:	f002 fdc3 	bl	800b2ea <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008764:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008768:	2201      	movs	r2, #1
 800876a:	a90b      	add	r1, sp, #44	; 0x2c
 800876c:	2011      	movs	r0, #17
 800876e:	f002 fe59 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 8008772:	e575      	b.n	8008260 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008774:	200e      	movs	r0, #14
 8008776:	f003 f81d 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800877a:	b908      	cbnz	r0, 8008780 <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 800877c:	464c      	mov	r4, r9
 800877e:	e56f      	b.n	8008260 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008780:	210e      	movs	r1, #14
 8008782:	2000      	movs	r0, #0
 8008784:	f002 ffca 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008788:	1ca2      	adds	r2, r4, #2
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008790:	1ce3      	adds	r3, r4, #3
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008798:	3404      	adds	r4, #4
 800879a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <ProcessMacCommands+0x5b8>)
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	5ce9      	ldrb	r1, [r5, r3]
 80087a2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80087a6:	f002 fda2 	bl	800b2ee <LoRaMacClassBBeaconTimingAns>
 80087aa:	e559      	b.n	8008260 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 80087ac:	1ca1      	adds	r1, r4, #2
 80087ae:	b2c9      	uxtb	r1, r1
 80087b0:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087b4:	1ce2      	adds	r2, r4, #3
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	5c68      	ldrb	r0, [r5, r1]
 80087ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087be:	3404      	adds	r4, #4
 80087c0:	b2e4      	uxtb	r4, r4
 80087c2:	5ca8      	ldrb	r0, [r5, r2]
 80087c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80087c8:	2064      	movs	r0, #100	; 0x64
 80087ca:	fb03 f000 	mul.w	r0, r3, r0
 80087ce:	f002 fd90 	bl	800b2f2 <LoRaMacClassBBeaconFreqReq>
 80087d2:	b140      	cbz	r0, 80087e6 <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80087da:	2201      	movs	r2, #1
 80087dc:	a90b      	add	r1, sp, #44	; 0x2c
 80087de:	2013      	movs	r0, #19
 80087e0:	f002 fe20 	bl	800b424 <LoRaMacCommandsAddCmd>
                break;
 80087e4:	e53c      	b.n	8008260 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80087ec:	e7f5      	b.n	80087da <ProcessMacCommands+0x592>
}
 80087ee:	b00f      	add	sp, #60	; 0x3c
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	20008000 	.word	0x20008000
 80087f8:	12d53d80 	.word	0x12d53d80
 80087fc:	2000061c 	.word	0x2000061c
 8008800:	20000b24 	.word	0x20000b24

08008804 <ProcessRadioRxDone>:
{
 8008804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008808:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800880a:	4b9c      	ldr	r3, [pc, #624]	; (8008a7c <ProcessRadioRxDone+0x278>)
 800880c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800880e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008810:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008814:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	9308      	str	r3, [sp, #32]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800881c:	4a98      	ldr	r2, [pc, #608]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 800881e:	f8d2 80e4 	ldr.w	r8, [r2, #228]	; 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 8008822:	4c98      	ldr	r4, [pc, #608]	; (8008a84 <ProcessRadioRxDone+0x280>)
 8008824:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8008828:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800882c:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008830:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 8008834:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8008838:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800883c:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8008840:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8008844:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8008848:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800884c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8008850:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008854:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008858:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800885c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008860:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    Radio.Sleep( );
 8008864:	4b88      	ldr	r3, [pc, #544]	; (8008a88 <ProcessRadioRxDone+0x284>)
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800886a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800886e:	f009 fcbf 	bl	80121f0 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008872:	4629      	mov	r1, r5
 8008874:	4630      	mov	r0, r6
 8008876:	f002 fd24 	bl	800b2c2 <LoRaMacClassBRxBeacon>
 800887a:	b9a0      	cbnz	r0, 80088a6 <ProcessRadioRxDone+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800887c:	4b80      	ldr	r3, [pc, #512]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 800887e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008882:	2b01      	cmp	r3, #1
 8008884:	d016      	beq.n	80088b4 <ProcessRadioRxDone+0xb0>
    if( size == 0 )
 8008886:	b395      	cbz	r5, 80088ee <ProcessRadioRxDone+0xea>
    macHdr.Value = payload[pktHeaderLen++];
 8008888:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800888a:	0963      	lsrs	r3, r4, #5
 800888c:	3b01      	subs	r3, #1
 800888e:	2b06      	cmp	r3, #6
 8008890:	f200 82b1 	bhi.w	8008df6 <ProcessRadioRxDone+0x5f2>
 8008894:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008898:	02af0032 	.word	0x02af0032
 800889c:	02af00c6 	.word	0x02af00c6
 80088a0:	02af00c2 	.word	0x02af00c2
 80088a4:	0289      	.short	0x0289
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80088a6:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80088aa:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
}
 80088ae:	b025      	add	sp, #148	; 0x94
 80088b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 80088b4:	f002 fd09 	bl	800b2ca <LoRaMacClassBIsPingExpected>
 80088b8:	b150      	cbz	r0, 80088d0 <ProcessRadioRxDone+0xcc>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80088ba:	2000      	movs	r0, #0
 80088bc:	f002 fcfa 	bl	800b2b4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80088c0:	2000      	movs	r0, #0
 80088c2:	f002 fcfc 	bl	800b2be <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80088c6:	4b6f      	ldr	r3, [pc, #444]	; (8008a84 <ProcessRadioRxDone+0x280>)
 80088c8:	2204      	movs	r2, #4
 80088ca:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80088ce:	e7da      	b.n	8008886 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80088d0:	f002 fcfd 	bl	800b2ce <LoRaMacClassBIsMulticastExpected>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d0d6      	beq.n	8008886 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80088d8:	2000      	movs	r0, #0
 80088da:	f002 fcec 	bl	800b2b6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80088de:	2000      	movs	r0, #0
 80088e0:	f002 fcee 	bl	800b2c0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80088e4:	4b67      	ldr	r3, [pc, #412]	; (8008a84 <ProcessRadioRxDone+0x280>)
 80088e6:	2205      	movs	r2, #5
 80088e8:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80088ec:	e7cb      	b.n	8008886 <ProcessRadioRxDone+0x82>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80088ee:	4b65      	ldr	r3, [pc, #404]	; (8008a84 <ProcessRadioRxDone+0x280>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 80088f6:	f7ff fc2d 	bl	8008154 <PrepareRxDoneAbort>
        return;
 80088fa:	e7d8      	b.n	80088ae <ProcessRadioRxDone+0xaa>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80088fc:	2d10      	cmp	r5, #16
 80088fe:	d92e      	bls.n	800895e <ProcessRadioRxDone+0x15a>
            macMsgJoinAccept.Buffer = payload;
 8008900:	9609      	str	r6, [sp, #36]	; 0x24
            macMsgJoinAccept.BufSize = size;
 8008902:	b2ed      	uxtb	r5, r5
 8008904:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008908:	4b5d      	ldr	r3, [pc, #372]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 800890a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800890e:	bb6b      	cbnz	r3, 800896c <ProcessRadioRxDone+0x168>
            SecureElementGetJoinEui( joinEui );
 8008910:	a805      	add	r0, sp, #20
 8008912:	f006 fd29 	bl	800f368 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8008916:	aa09      	add	r2, sp, #36	; 0x24
 8008918:	a905      	add	r1, sp, #20
 800891a:	20ff      	movs	r0, #255	; 0xff
 800891c:	f003 fae0 	bl	800bee0 <LoRaMacCryptoHandleJoinAccept>
 8008920:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008922:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008926:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800892a:	f88d 3010 	strb.w	r3, [sp, #16]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800892e:	4b54      	ldr	r3, [pc, #336]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 8008930:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8008934:	f88d 2011 	strb.w	r2, [sp, #17]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8008938:	2207      	movs	r2, #7
 800893a:	a904      	add	r1, sp, #16
 800893c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008940:	f003 fd00 	bl	800c344 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8008944:	b904      	cbnz	r4, 8008948 <ProcessRadioRxDone+0x144>
 8008946:	b9c0      	cbnz	r0, 800897a <ProcessRadioRxDone+0x176>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008948:	2001      	movs	r0, #1
 800894a:	f002 ff33 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800894e:	2800      	cmp	r0, #0
 8008950:	f000 8245 	beq.w	8008dde <ProcessRadioRxDone+0x5da>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008954:	2101      	movs	r1, #1
 8008956:	2007      	movs	r0, #7
 8008958:	f002 fee0 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
 800895c:	e23f      	b.n	8008dde <ProcessRadioRxDone+0x5da>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800895e:	4b49      	ldr	r3, [pc, #292]	; (8008a84 <ProcessRadioRxDone+0x280>)
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008966:	f7ff fbf5 	bl	8008154 <PrepareRxDoneAbort>
                return;
 800896a:	e7a0      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800896c:	4b45      	ldr	r3, [pc, #276]	; (8008a84 <ProcessRadioRxDone+0x280>)
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008974:	f7ff fbee 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008978:	e799      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800897a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800897e:	4c40      	ldr	r4, [pc, #256]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 8008980:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008984:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8008988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800898c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008990:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8008994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008998:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800899c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800899e:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80089a2:	2002      	movs	r0, #2
 80089a4:	f006 fcee 	bl	800f384 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80089a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80089ac:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80089b0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80089b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80089b8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80089bc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80089c0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 80089c4:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80089c6:	b90b      	cbnz	r3, 80089cc <ProcessRadioRxDone+0x1c8>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80089c8:	2201      	movs	r2, #1
 80089ca:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80089cc:	4c2c      	ldr	r4, [pc, #176]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 80089ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089d4:	fb02 f303 	mul.w	r3, r2, r3
 80089d8:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80089da:	4413      	add	r3, r2
 80089dc:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80089de:	2601      	movs	r6, #1
 80089e0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80089ea:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80089ee:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 80089f0:	3d11      	subs	r5, #17
 80089f2:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80089f6:	a922      	add	r1, sp, #136	; 0x88
 80089f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80089fc:	f003 fcb2 	bl	800c364 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008a00:	2302      	movs	r3, #2
 8008a02:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8008a06:	4630      	mov	r0, r6
 8008a08:	f002 fed4 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 81e6 	beq.w	8008dde <ProcessRadioRxDone+0x5da>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8008a12:	4631      	mov	r1, r6
 8008a14:	2000      	movs	r0, #0
 8008a16:	f002 fe81 	bl	800b71c <LoRaMacConfirmQueueSetStatus>
 8008a1a:	e1e0      	b.n	8008dde <ProcessRadioRxDone+0x5da>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <ProcessRadioRxDone+0x280>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 8008a26:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8008a2a:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008a2e:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <ProcessRadioRxDone+0x280>)
 8008a30:	f992 241c 	ldrsb.w	r2, [r2, #1052]	; 0x41c
 8008a34:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008a38:	220d      	movs	r2, #13
 8008a3a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008a3e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008a42:	b113      	cbz	r3, 8008a4a <ProcessRadioRxDone+0x246>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008a44:	230e      	movs	r3, #14
 8008a46:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008a4a:	a920      	add	r1, sp, #128	; 0x80
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <ProcessRadioRxDone+0x27c>)
 8008a4e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008a52:	f003 fc43 	bl	800c2dc <RegionGetPhyParam>
 8008a56:	901f      	str	r0, [sp, #124]	; 0x7c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008a58:	f1a5 030d 	sub.w	r3, r5, #13
 8008a5c:	b21b      	sxth	r3, r3
 8008a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a62:	b200      	sxth	r0, r0
 8008a64:	4283      	cmp	r3, r0
 8008a66:	dc01      	bgt.n	8008a6c <ProcessRadioRxDone+0x268>
 8008a68:	2d0b      	cmp	r5, #11
 8008a6a:	d80f      	bhi.n	8008a8c <ProcessRadioRxDone+0x288>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <ProcessRadioRxDone+0x280>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008a74:	f7ff fb6e 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008a78:	e719      	b.n	80088ae <ProcessRadioRxDone+0xaa>
 8008a7a:	bf00      	nop
 8008a7c:	20000b24 	.word	0x20000b24
 8008a80:	20008000 	.word	0x20008000
 8008a84:	2000061c 	.word	0x2000061c
 8008a88:	08013578 	.word	0x08013578
            macMsgData.Buffer = payload;
 8008a8c:	9613      	str	r6, [sp, #76]	; 0x4c
            macMsgData.BufSize = size;
 8008a8e:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008a92:	4baf      	ldr	r3, [pc, #700]	; (8008d50 <ProcessRadioRxDone+0x54c>)
 8008a94:	931c      	str	r3, [sp, #112]	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008a96:	23ff      	movs	r3, #255	; 0xff
 8008a98:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008a9c:	a813      	add	r0, sp, #76	; 0x4c
 8008a9e:	f003 faed 	bl	800c07c <LoRaMacParserData>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d148      	bne.n	8008b38 <ProcessRadioRxDone+0x334>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008aa8:	4baa      	ldr	r3, [pc, #680]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008aaa:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008aae:	a905      	add	r1, sp, #20
 8008ab0:	a813      	add	r0, sp, #76	; 0x4c
 8008ab2:	f7ff f987 	bl	8007dc4 <DetermineFrameType>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d144      	bne.n	8008b46 <ProcessRadioRxDone+0x342>
            downLinkCounter = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	9308      	str	r3, [sp, #32]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d046      	beq.n	8008b54 <ProcessRadioRxDone+0x350>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008ac6:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008aca:	2d01      	cmp	r5, #1
 8008acc:	d108      	bne.n	8008ae0 <ProcessRadioRxDone+0x2dc>
 8008ace:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d16c      	bne.n	8008bb0 <ProcessRadioRxDone+0x3ac>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008ad6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008ada:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008ade:	d167      	bne.n	8008bb0 <ProcessRadioRxDone+0x3ac>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008ae0:	2315      	movs	r3, #21
 8008ae2:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008ae6:	4e9c      	ldr	r6, [pc, #624]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008ae8:	a920      	add	r1, sp, #128	; 0x80
 8008aea:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8008aee:	f003 fbf5 	bl	800c2dc <RegionGetPhyParam>
 8008af2:	901f      	str	r0, [sp, #124]	; 0x7c
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8008af4:	ab08      	add	r3, sp, #32
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	f10d 031f 	add.w	r3, sp, #31
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	b280      	uxth	r0, r0
 8008b00:	9000      	str	r0, [sp, #0]
 8008b02:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 8008b06:	aa13      	add	r2, sp, #76	; 0x4c
 8008b08:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	f7ff fb5f 	bl	80081d0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d06c      	beq.n	8008bf0 <ProcessRadioRxDone+0x3ec>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008b16:	2807      	cmp	r0, #7
 8008b18:	d051      	beq.n	8008bbe <ProcessRadioRxDone+0x3ba>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008b1a:	2808      	cmp	r0, #8
 8008b1c:	d063      	beq.n	8008be6 <ProcessRadioRxDone+0x3e2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b1e:	4b8d      	ldr	r3, [pc, #564]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008b26:	9a08      	ldr	r2, [sp, #32]
 8008b28:	4b8a      	ldr	r3, [pc, #552]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008b2a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008b2e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
                PrepareRxDoneAbort( );
 8008b32:	f7ff fb0f 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008b36:	e6ba      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b38:	4b86      	ldr	r3, [pc, #536]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008b40:	f7ff fb08 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008b44:	e6b3      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b46:	4b83      	ldr	r3, [pc, #524]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008b4e:	f7ff fb01 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008b52:	e6ac      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b54:	461e      	mov	r6, r3
 8008b56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008b5a:	497f      	ldr	r1, [pc, #508]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008b5c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8008b60:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8008b64:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008b66:	428a      	cmp	r2, r1
 8008b68:	d002      	beq.n	8008b70 <ProcessRadioRxDone+0x36c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	e7a8      	b.n	8008ac2 <ProcessRadioRxDone+0x2be>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008b70:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008b74:	4878      	ldr	r0, [pc, #480]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008b76:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008b7a:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	d0f3      	beq.n	8008b6a <ProcessRadioRxDone+0x366>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008b82:	2130      	movs	r1, #48	; 0x30
 8008b84:	fb01 0606 	mla	r6, r1, r6, r0
 8008b88:	f896 90ea 	ldrb.w	r9, [r6, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008b8c:	f8d6 110c 	ldr.w	r1, [r6, #268]	; 0x10c
 8008b90:	6809      	ldr	r1, [r1, #0]
 8008b92:	9108      	str	r1, [sp, #32]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008b94:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d002      	beq.n	8008ba2 <ProcessRadioRxDone+0x39e>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008b9c:	4690      	mov	r8, r2
                    multicast = 1;
 8008b9e:	2501      	movs	r5, #1
 8008ba0:	e793      	b.n	8008aca <ProcessRadioRxDone+0x2c6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008ba2:	4b6c      	ldr	r3, [pc, #432]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008baa:	4690      	mov	r8, r2
                    multicast = 1;
 8008bac:	2501      	movs	r5, #1
 8008bae:	e78c      	b.n	8008aca <ProcessRadioRxDone+0x2c6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bb0:	4b68      	ldr	r3, [pc, #416]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008bb8:	f7ff facc 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008bbc:	e677      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008bbe:	4b65      	ldr	r3, [pc, #404]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8008bc6:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1ab      	bne.n	8008b26 <ProcessRadioRxDone+0x322>
 8008bce:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008bd2:	2ca0      	cmp	r4, #160	; 0xa0
 8008bd4:	d1a7      	bne.n	8008b26 <ProcessRadioRxDone+0x322>
 8008bd6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8008bd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d1a3      	bne.n	8008b26 <ProcessRadioRxDone+0x322>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8008bde:	2201      	movs	r2, #1
 8008be0:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 8008be4:	e79f      	b.n	8008b26 <ProcessRadioRxDone+0x322>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8008be6:	4b5b      	ldr	r3, [pc, #364]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008be8:	220a      	movs	r2, #10
 8008bea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8008bee:	e79a      	b.n	8008b26 <ProcessRadioRxDone+0x322>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008bf0:	ab13      	add	r3, sp, #76	; 0x4c
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	9b08      	ldr	r3, [sp, #32]
 8008bf6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	f003 f8c7 	bl	800bd90 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d14a      	bne.n	8008c9c <ProcessRadioRxDone+0x498>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008c06:	4b53      	ldr	r3, [pc, #332]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f883 1419 	strb.w	r1, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8008c0e:	f883 541a 	strb.w	r5, [r3, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8008c12:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8008c16:	f883 1424 	strb.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008c1a:	9a08      	ldr	r2, [sp, #32]
 8008c1c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008c20:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008c24:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008c28:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008c2c:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008c30:	f883 1435 	strb.w	r1, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008c34:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008c38:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 8008c3c:	2801      	cmp	r0, #1
 8008c3e:	d93b      	bls.n	8008cb8 <ProcessRadioRxDone+0x4b4>
            if( multicast == 1 )
 8008c40:	2d01      	cmp	r5, #1
 8008c42:	d03c      	beq.n	8008cbe <ProcessRadioRxDone+0x4ba>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008c44:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008c48:	2ca0      	cmp	r4, #160	; 0xa0
 8008c4a:	d03d      	beq.n	8008cc8 <ProcessRadioRxDone+0x4c4>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4a42      	ldr	r2, [pc, #264]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008c50:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c54:	4a3f      	ldr	r2, [pc, #252]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008c56:	f882 3418 	strb.w	r3, [r2, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8008c5a:	4b3f      	ldr	r3, [pc, #252]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008c5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008c60:	b923      	cbnz	r3, 8008c6c <ProcessRadioRxDone+0x468>
 8008c62:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008c66:	f013 0f10 	tst.w	r3, #16
 8008c6a:	d007      	beq.n	8008c7c <ProcessRadioRxDone+0x478>
 8008c6c:	4b3a      	ldr	r3, [pc, #232]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008c6e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008c72:	b91b      	cbnz	r3, 8008c7c <ProcessRadioRxDone+0x478>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8008c74:	4b37      	ldr	r3, [pc, #220]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008c7c:	4b35      	ldr	r3, [pc, #212]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008c7e:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 8008c82:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8008c86:	f7ff fad0 	bl	800822a <RemoveMacCommands>
            switch( fType )
 8008c8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	f200 8084 	bhi.w	8008d9c <ProcessRadioRxDone+0x598>
 8008c94:	e8df f003 	tbb	[pc, r3]
 8008c98:	72624a27 	.word	0x72624a27
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008c9c:	2802      	cmp	r0, #2
 8008c9e:	d006      	beq.n	8008cae <ProcessRadioRxDone+0x4aa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008ca0:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008ca2:	220c      	movs	r2, #12
 8008ca4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8008ca8:	f7ff fa54 	bl	8008154 <PrepareRxDoneAbort>
                return;
 8008cac:	e5ff      	b.n	80088ae <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008cb0:	220b      	movs	r2, #11
 8008cb2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8008cb6:	e7f7      	b.n	8008ca8 <ProcessRadioRxDone+0x4a4>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008cb8:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008cba:	6299      	str	r1, [r3, #40]	; 0x28
 8008cbc:	e7c0      	b.n	8008c40 <ProcessRadioRxDone+0x43c>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008cbe:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8008cc6:	e7c8      	b.n	8008c5a <ProcessRadioRxDone+0x456>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008cc8:	4b23      	ldr	r3, [pc, #140]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008cd0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8008cd4:	b913      	cbnz	r3, 8008cdc <ProcessRadioRxDone+0x4d8>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008cd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008cd8:	4b1f      	ldr	r3, [pc, #124]	; (8008d58 <ProcessRadioRxDone+0x554>)
 8008cda:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8008ce4:	e7b9      	b.n	8008c5a <ProcessRadioRxDone+0x456>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008ce6:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008cea:	4c1a      	ldr	r4, [pc, #104]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008cec:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	f002 020f 	and.w	r2, r2, #15
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	a817      	add	r0, sp, #92	; 0x5c
 8008cfc:	f7ff faa4 	bl	8008248 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d00:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008d04:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008d08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008d0a:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008d0e:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8008d12:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8008d16:	2301      	movs	r3, #1
 8008d18:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008d1c:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008d1e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008d22:	f043 0302 	orr.w	r3, r3, #2
 8008d26:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8008d2a:	e058      	b.n	8008dde <ProcessRadioRxDone+0x5da>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008d2c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008d30:	4c08      	ldr	r4, [pc, #32]	; (8008d54 <ProcessRadioRxDone+0x550>)
 8008d32:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	463b      	mov	r3, r7
 8008d3a:	f002 020f 	and.w	r2, r2, #15
 8008d3e:	2100      	movs	r1, #0
 8008d40:	a817      	add	r0, sp, #92	; 0x5c
 8008d42:	f7ff fa81 	bl	8008248 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d46:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008d4a:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 8008d4e:	e7e5      	b.n	8008d1c <ProcessRadioRxDone+0x518>
 8008d50:	20000854 	.word	0x20000854
 8008d54:	2000061c 	.word	0x2000061c
 8008d58:	20008000 	.word	0x20008000
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008d5c:	4c33      	ldr	r4, [pc, #204]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008d5e:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	463b      	mov	r3, r7
 8008d66:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008d6e:	f7ff fa6b 	bl	8008248 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d72:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8008d76:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 8008d7a:	e7cf      	b.n	8008d1c <ProcessRadioRxDone+0x518>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008d7c:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008d80:	4b2a      	ldr	r3, [pc, #168]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008d82:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008d86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008d88:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008d8c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8008d90:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8008d9a:	e7bf      	b.n	8008d1c <ProcessRadioRxDone+0x518>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d9c:	4b23      	ldr	r3, [pc, #140]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8008da4:	f7ff f9d6 	bl	8008154 <PrepareRxDoneAbort>
                    break;
 8008da8:	e7b8      	b.n	8008d1c <ProcessRadioRxDone+0x518>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008daa:	1e6a      	subs	r2, r5, #1
 8008dac:	4c1f      	ldr	r4, [pc, #124]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008dae:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008db2:	b292      	uxth	r2, r2
 8008db4:	1c71      	adds	r1, r6, #1
 8008db6:	4638      	mov	r0, r7
 8008db8:	f006 fbf3 	bl	800f5a2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008dc8:	f8c4 7420 	str.w	r7, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008dcc:	3d01      	subs	r5, #1
 8008dce:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008dd2:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008dd6:	f043 0302 	orr.w	r3, r3, #2
 8008dda:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 8008dde:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008de0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008de4:	b173      	cbz	r3, 8008e04 <ProcessRadioRxDone+0x600>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008de6:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008de8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008dec:	b17b      	cbz	r3, 8008e0e <ProcessRadioRxDone+0x60a>
            OnAckTimeoutTimerEvent( NULL );
 8008dee:	2000      	movs	r0, #0
 8008df0:	f7ff f990 	bl	8008114 <OnAckTimeoutTimerEvent>
 8008df4:	e00b      	b.n	8008e0e <ProcessRadioRxDone+0x60a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008df6:	4b0d      	ldr	r3, [pc, #52]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 8008dfe:	f7ff f9a9 	bl	8008154 <PrepareRxDoneAbort>
            break;
 8008e02:	e7ec      	b.n	8008dde <ProcessRadioRxDone+0x5da>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008e04:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <ProcessRadioRxDone+0x62c>)
 8008e06:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d009      	beq.n	8008e22 <ProcessRadioRxDone+0x61e>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008e0e:	4a07      	ldr	r2, [pc, #28]	; (8008e2c <ProcessRadioRxDone+0x628>)
 8008e10:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008e14:	f043 0310 	orr.w	r3, r3, #16
 8008e18:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 8008e1c:	f7fe ff50 	bl	8007cc0 <UpdateRxSlotIdleState>
 8008e20:	e545      	b.n	80088ae <ProcessRadioRxDone+0xaa>
            OnAckTimeoutTimerEvent( NULL );
 8008e22:	2000      	movs	r0, #0
 8008e24:	f7ff f976 	bl	8008114 <OnAckTimeoutTimerEvent>
 8008e28:	e7f1      	b.n	8008e0e <ProcessRadioRxDone+0x60a>
 8008e2a:	bf00      	nop
 8008e2c:	2000061c 	.word	0x2000061c
 8008e30:	20008000 	.word	0x20008000

08008e34 <ProcessRadioTxTimeout>:
{
 8008e34:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <ProcessRadioTxTimeout+0x40>)
 8008e38:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d002      	beq.n	8008e46 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <ProcessRadioTxTimeout+0x44>)
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008e46:	f7fe ff3b 	bl	8007cc0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008e4a:	4c0c      	ldr	r4, [pc, #48]	; (8008e7c <ProcessRadioTxTimeout+0x48>)
 8008e4c:	2002      	movs	r0, #2
 8008e4e:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008e52:	f002 fc91 	bl	800b778 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008e56:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 8008e5a:	b113      	cbz	r3, 8008e62 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008e62:	4a06      	ldr	r2, [pc, #24]	; (8008e7c <ProcessRadioTxTimeout+0x48>)
 8008e64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008e68:	f043 0310 	orr.w	r3, r3, #16
 8008e6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8008e70:	bd10      	pop	{r4, pc}
 8008e72:	bf00      	nop
 8008e74:	20008000 	.word	0x20008000
 8008e78:	08013578 	.word	0x08013578
 8008e7c:	2000061c 	.word	0x2000061c

08008e80 <CheckForClassBCollision>:
{
 8008e80:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008e82:	f002 fa20 	bl	800b2c6 <LoRaMacClassBIsBeaconExpected>
 8008e86:	b978      	cbnz	r0, 8008ea8 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <CheckForClassBCollision+0x30>)
 8008e8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d001      	beq.n	8008e96 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008e92:	2000      	movs	r0, #0
}
 8008e94:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008e96:	f002 fa18 	bl	800b2ca <LoRaMacClassBIsPingExpected>
 8008e9a:	b938      	cbnz	r0, 8008eac <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008e9c:	f002 fa17 	bl	800b2ce <LoRaMacClassBIsMulticastExpected>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0f7      	beq.n	8008e94 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008ea4:	200f      	movs	r0, #15
 8008ea6:	e7f5      	b.n	8008e94 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008ea8:	200e      	movs	r0, #14
 8008eaa:	e7f3      	b.n	8008e94 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008eac:	200f      	movs	r0, #15
 8008eae:	e7f1      	b.n	8008e94 <CheckForClassBCollision+0x14>
 8008eb0:	20008000 	.word	0x20008000

08008eb4 <HandleRadioRxErrorTimeout>:
{
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008eba:	4b37      	ldr	r3, [pc, #220]	; (8008f98 <HandleRadioRxErrorTimeout+0xe4>)
 8008ebc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d002      	beq.n	8008eca <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008ec4:	4b35      	ldr	r3, [pc, #212]	; (8008f9c <HandleRadioRxErrorTimeout+0xe8>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008eca:	f002 f9fc 	bl	800b2c6 <LoRaMacClassBIsBeaconExpected>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	bb00      	cbnz	r0, 8008f14 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ed2:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <HandleRadioRxErrorTimeout+0xe4>)
 8008ed4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d022      	beq.n	8008f22 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8008edc:	b9be      	cbnz	r6, 8008f0e <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008ede:	4b30      	ldr	r3, [pc, #192]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008ee0:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d13f      	bne.n	8008f68 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008eea:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008eee:	b113      	cbz	r3, 8008ef6 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008ef0:	4b2b      	ldr	r3, [pc, #172]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008ef2:	f883 5435 	strb.w	r5, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f002 fc3e 	bl	800b778 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008efc:	4b26      	ldr	r3, [pc, #152]	; (8008f98 <HandleRadioRxErrorTimeout+0xe4>)
 8008efe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008f00:	f009 f940 	bl	8012184 <UTIL_TIMER_GetElapsedTime>
 8008f04:	4b26      	ldr	r3, [pc, #152]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008f06:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008f0a:	4298      	cmp	r0, r3
 8008f0c:	d220      	bcs.n	8008f50 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8008f0e:	f7fe fed7 	bl	8007cc0 <UpdateRxSlotIdleState>
}
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008f14:	2002      	movs	r0, #2
 8008f16:	f002 f9cc 	bl	800b2b2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f002 f9ce 	bl	800b2bc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008f20:	e7d7      	b.n	8008ed2 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008f22:	f002 f9d2 	bl	800b2ca <LoRaMacClassBIsPingExpected>
 8008f26:	4607      	mov	r7, r0
 8008f28:	b950      	cbnz	r0, 8008f40 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008f2a:	f002 f9d0 	bl	800b2ce <LoRaMacClassBIsMulticastExpected>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d0d4      	beq.n	8008edc <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f32:	2000      	movs	r0, #0
 8008f34:	f002 f9bf 	bl	800b2b6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f002 f9c1 	bl	800b2c0 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008f3e:	e7e6      	b.n	8008f0e <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f40:	2000      	movs	r0, #0
 8008f42:	f002 f9b7 	bl	800b2b4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008f46:	2000      	movs	r0, #0
 8008f48:	f002 f9b9 	bl	800b2be <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008f4c:	463e      	mov	r6, r7
 8008f4e:	e7ec      	b.n	8008f2a <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008f50:	4c13      	ldr	r4, [pc, #76]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008f52:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008f56:	f009 f94b 	bl	80121f0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008f5a:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 8008f5e:	f043 0310 	orr.w	r3, r3, #16
 8008f62:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 8008f66:	e7d2      	b.n	8008f0e <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008f6a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008f6e:	b113      	cbz	r3, 8008f76 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008f72:	f883 4435 	strb.w	r4, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008f76:	4620      	mov	r0, r4
 8008f78:	f002 fbfe 	bl	800b778 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HandleRadioRxErrorTimeout+0xe4>)
 8008f7e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d0c3      	beq.n	8008f0e <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008f86:	4a06      	ldr	r2, [pc, #24]	; (8008fa0 <HandleRadioRxErrorTimeout+0xec>)
 8008f88:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8008f8c:	f043 0310 	orr.w	r3, r3, #16
 8008f90:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8008f94:	e7bb      	b.n	8008f0e <HandleRadioRxErrorTimeout+0x5a>
 8008f96:	bf00      	nop
 8008f98:	20008000 	.word	0x20008000
 8008f9c:	08013578 	.word	0x08013578
 8008fa0:	2000061c 	.word	0x2000061c

08008fa4 <ProcessRadioRxError>:
{
 8008fa4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008fa6:	2106      	movs	r1, #6
 8008fa8:	2005      	movs	r0, #5
 8008faa:	f7ff ff83 	bl	8008eb4 <HandleRadioRxErrorTimeout>
}
 8008fae:	bd08      	pop	{r3, pc}

08008fb0 <ProcessRadioRxTimeout>:
{
 8008fb0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008fb2:	2104      	movs	r1, #4
 8008fb4:	2003      	movs	r0, #3
 8008fb6:	f7ff ff7d 	bl	8008eb4 <HandleRadioRxErrorTimeout>
}
 8008fba:	bd08      	pop	{r3, pc}

08008fbc <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fbc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc0:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008fc2:	4a14      	ldr	r2, [pc, #80]	; (8009014 <LoRaMacHandleIrqEvents+0x58>)
 8008fc4:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fca:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008fce:	b303      	cbz	r3, 8009012 <LoRaMacHandleIrqEvents+0x56>
{
 8008fd0:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008fd2:	b2dc      	uxtb	r4, r3
 8008fd4:	f013 0f10 	tst.w	r3, #16
 8008fd8:	d10c      	bne.n	8008ff4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008fda:	f014 0f08 	tst.w	r4, #8
 8008fde:	d10c      	bne.n	8008ffa <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008fe0:	f014 0f04 	tst.w	r4, #4
 8008fe4:	d10c      	bne.n	8009000 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008fe6:	f014 0f02 	tst.w	r4, #2
 8008fea:	d10c      	bne.n	8009006 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008fec:	f014 0f01 	tst.w	r4, #1
 8008ff0:	d10c      	bne.n	800900c <LoRaMacHandleIrqEvents+0x50>
}
 8008ff2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008ff4:	f7ff f802 	bl	8007ffc <ProcessRadioTxDone>
 8008ff8:	e7ef      	b.n	8008fda <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008ffa:	f7ff fc03 	bl	8008804 <ProcessRadioRxDone>
 8008ffe:	e7ef      	b.n	8008fe0 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8009000:	f7ff ff18 	bl	8008e34 <ProcessRadioTxTimeout>
 8009004:	e7ef      	b.n	8008fe6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8009006:	f7ff ffcd 	bl	8008fa4 <ProcessRadioRxError>
 800900a:	e7ef      	b.n	8008fec <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800900c:	f7ff ffd0 	bl	8008fb0 <ProcessRadioRxTimeout>
}
 8009010:	e7ef      	b.n	8008ff2 <LoRaMacHandleIrqEvents+0x36>
 8009012:	4770      	bx	lr
 8009014:	20000618 	.word	0x20000618

08009018 <LoRaMacHandleMlmeRequest>:
{
 8009018:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800901a:	4b16      	ldr	r3, [pc, #88]	; (8009074 <LoRaMacHandleMlmeRequest+0x5c>)
 800901c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009020:	f013 0f04 	tst.w	r3, #4
 8009024:	d100      	bne.n	8009028 <LoRaMacHandleMlmeRequest+0x10>
}
 8009026:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009028:	2001      	movs	r0, #1
 800902a:	f002 fbc3 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 800902e:	b178      	cbz	r0, 8009050 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009030:	2001      	movs	r0, #1
 8009032:	f002 fb89 	bl	800b748 <LoRaMacConfirmQueueGetStatus>
 8009036:	b918      	cbnz	r0, 8009040 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <LoRaMacHandleMlmeRequest+0x5c>)
 800903a:	2200      	movs	r2, #0
 800903c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009040:	4a0c      	ldr	r2, [pc, #48]	; (8009074 <LoRaMacHandleMlmeRequest+0x5c>)
 8009042:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009046:	f023 0302 	bic.w	r3, r3, #2
 800904a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800904e:	e7ea      	b.n	8009026 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8009050:	2006      	movs	r0, #6
 8009052:	f002 fbaf 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
 8009056:	b138      	cbz	r0, 8009068 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009058:	4a06      	ldr	r2, [pc, #24]	; (8009074 <LoRaMacHandleMlmeRequest+0x5c>)
 800905a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800905e:	f023 0302 	bic.w	r3, r3, #2
 8009062:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009066:	e7de      	b.n	8009026 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009068:	2007      	movs	r0, #7
 800906a:	f002 fba3 	bl	800b7b4 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800906e:	2800      	cmp	r0, #0
 8009070:	d0d9      	beq.n	8009026 <LoRaMacHandleMlmeRequest+0xe>
 8009072:	e7f1      	b.n	8009058 <LoRaMacHandleMlmeRequest+0x40>
 8009074:	2000061c 	.word	0x2000061c

08009078 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009078:	4b14      	ldr	r3, [pc, #80]	; (80090cc <AckTimeoutRetriesFinalize+0x54>)
 800907a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800907e:	b12b      	cbz	r3, 800908c <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <AckTimeoutRetriesFinalize+0x54>)
 8009082:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8009086:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 800908a:	4770      	bx	lr
{
 800908c:	b500      	push	{lr}
 800908e:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8009090:	2302      	movs	r3, #2
 8009092:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8009096:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <AckTimeoutRetriesFinalize+0x58>)
 8009098:	f503 7208 	add.w	r2, r3, #544	; 0x220
 800909c:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800909e:	f503 7231 	add.w	r2, r3, #708	; 0x2c4
 80090a2:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80090a4:	a901      	add	r1, sp, #4
 80090a6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80090aa:	f003 f93d 	bl	800c328 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <AckTimeoutRetriesFinalize+0x54>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 80090b6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80090ba:	4b04      	ldr	r3, [pc, #16]	; (80090cc <AckTimeoutRetriesFinalize+0x54>)
 80090bc:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 80090c0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 80090c4:	b005      	add	sp, #20
 80090c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80090ca:	bf00      	nop
 80090cc:	2000061c 	.word	0x2000061c
 80090d0:	20008000 	.word	0x20008000

080090d4 <SerializeTxFrame>:
{
 80090d4:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <SerializeTxFrame+0x40>)
 80090d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80090dc:	b11b      	cbz	r3, 80090e6 <SerializeTxFrame+0x12>
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d00a      	beq.n	80090f8 <SerializeTxFrame+0x24>
 80090e2:	2003      	movs	r0, #3
}
 80090e4:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80090e6:	480c      	ldr	r0, [pc, #48]	; (8009118 <SerializeTxFrame+0x44>)
 80090e8:	f003 f827 	bl	800c13a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80090ec:	b968      	cbnz	r0, 800910a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <SerializeTxFrame+0x40>)
 80090f0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80090f4:	801a      	strh	r2, [r3, #0]
            break;
 80090f6:	e7f5      	b.n	80090e4 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80090f8:	4807      	ldr	r0, [pc, #28]	; (8009118 <SerializeTxFrame+0x44>)
 80090fa:	f003 f854 	bl	800c1a6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80090fe:	b930      	cbnz	r0, 800910e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <SerializeTxFrame+0x40>)
 8009102:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009106:	801a      	strh	r2, [r3, #0]
            break;
 8009108:	e7ec      	b.n	80090e4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800910a:	2011      	movs	r0, #17
 800910c:	e7ea      	b.n	80090e4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800910e:	2011      	movs	r0, #17
 8009110:	e7e8      	b.n	80090e4 <SerializeTxFrame+0x10>
 8009112:	bf00      	nop
 8009114:	2000061c 	.word	0x2000061c
 8009118:	20000724 	.word	0x20000724

0800911c <ComputeRxWindowParameters>:
{
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009120:	4c1e      	ldr	r4, [pc, #120]	; (800919c <ComputeRxWindowParameters+0x80>)
 8009122:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009126:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800912a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800912e:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 8009132:	4630      	mov	r0, r6
 8009134:	f003 f9f5 	bl	800c522 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009138:	4d19      	ldr	r5, [pc, #100]	; (80091a0 <ComputeRxWindowParameters+0x84>)
 800913a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009142:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8009146:	b241      	sxtb	r1, r0
 8009148:	4630      	mov	r0, r6
 800914a:	f003 f928 	bl	800c39e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800914e:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009156:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800915a:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800915e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009162:	f003 f91c 	bl	800c39e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009168:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800916c:	440b      	add	r3, r1
 800916e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009172:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009174:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8009178:	4413      	add	r3, r2
 800917a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800917e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 8009182:	2b04      	cmp	r3, #4
 8009184:	d007      	beq.n	8009196 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009186:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009188:	4419      	add	r1, r3
 800918a:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800918e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009190:	440a      	add	r2, r1
 8009192:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009196:	b002      	add	sp, #8
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	bf00      	nop
 800919c:	20008000 	.word	0x20008000
 80091a0:	2000061c 	.word	0x2000061c

080091a4 <VerifyTxFrame>:
{
 80091a4:	b510      	push	{r4, lr}
 80091a6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <VerifyTxFrame+0x40>)
 80091ae:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 80091b2:	b914      	cbnz	r4, 80091ba <VerifyTxFrame+0x16>
}
 80091b4:	4620      	mov	r0, r4
 80091b6:	b002      	add	sp, #8
 80091b8:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80091ba:	a801      	add	r0, sp, #4
 80091bc:	f002 f9c0 	bl	800b540 <LoRaMacCommandsGetSizeSerializedCmds>
 80091c0:	4604      	mov	r4, r0
 80091c2:	b968      	cbnz	r0, 80091e0 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80091c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80091c8:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <VerifyTxFrame+0x40>)
 80091ca:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <VerifyTxFrame+0x44>)
 80091d0:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 80091d4:	f7fe ff00 	bl	8007fd8 <ValidatePayloadLength>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1eb      	bne.n	80091b4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80091dc:	2408      	movs	r4, #8
 80091de:	e7e9      	b.n	80091b4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80091e0:	2413      	movs	r4, #19
 80091e2:	e7e7      	b.n	80091b4 <VerifyTxFrame+0x10>
 80091e4:	20008000 	.word	0x20008000
 80091e8:	2000061c 	.word	0x2000061c

080091ec <SecureFrame>:
{
 80091ec:	b530      	push	{r4, r5, lr}
 80091ee:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80091f4:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <SecureFrame+0x74>)
 80091f6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80091fa:	b133      	cbz	r3, 800920a <SecureFrame+0x1e>
 80091fc:	4605      	mov	r5, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	2b04      	cmp	r3, #4
 8009202:	d00b      	beq.n	800921c <SecureFrame+0x30>
 8009204:	2003      	movs	r0, #3
}
 8009206:	b003      	add	sp, #12
 8009208:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800920a:	4816      	ldr	r0, [pc, #88]	; (8009264 <SecureFrame+0x78>)
 800920c:	f002 fd50 	bl	800bcb0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009210:	bb00      	cbnz	r0, 8009254 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <SecureFrame+0x74>)
 8009214:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009218:	801a      	strh	r2, [r3, #0]
            break;
 800921a:	e7f4      	b.n	8009206 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800921c:	a801      	add	r0, sp, #4
 800921e:	f002 fce7 	bl	800bbf0 <LoRaMacCryptoGetFCntUp>
 8009222:	b9c8      	cbnz	r0, 8009258 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009224:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <SecureFrame+0x74>)
 8009226:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800922a:	b923      	cbnz	r3, 8009236 <SecureFrame+0x4a>
 800922c:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <SecureFrame+0x74>)
 800922e:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8009232:	2b01      	cmp	r3, #1
 8009234:	d902      	bls.n	800923c <SecureFrame+0x50>
                fCntUp -= 1;
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	3b01      	subs	r3, #1
 800923a:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800923c:	4b09      	ldr	r3, [pc, #36]	; (8009264 <SecureFrame+0x78>)
 800923e:	4622      	mov	r2, r4
 8009240:	4629      	mov	r1, r5
 8009242:	9801      	ldr	r0, [sp, #4]
 8009244:	f002 fd60 	bl	800bd08 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009248:	b940      	cbnz	r0, 800925c <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800924a:	4b05      	ldr	r3, [pc, #20]	; (8009260 <SecureFrame+0x74>)
 800924c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009250:	801a      	strh	r2, [r3, #0]
            break;
 8009252:	e7d8      	b.n	8009206 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009254:	2011      	movs	r0, #17
 8009256:	e7d6      	b.n	8009206 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009258:	2012      	movs	r0, #18
 800925a:	e7d4      	b.n	8009206 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800925c:	2011      	movs	r0, #17
 800925e:	e7d2      	b.n	8009206 <SecureFrame+0x1a>
 8009260:	2000061c 	.word	0x2000061c
 8009264:	20000724 	.word	0x20000724

08009268 <SendFrameOnChannel>:
{
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009274:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009278:	4d34      	ldr	r5, [pc, #208]	; (800934c <SendFrameOnChannel+0xe4>)
 800927a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800927e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009282:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8009286:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800928a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800928e:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009290:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8009294:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009296:	4c2e      	ldr	r4, [pc, #184]	; (8009350 <SendFrameOnChannel+0xe8>)
 8009298:	8823      	ldrh	r3, [r4, #0]
 800929a:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800929e:	f204 4314 	addw	r3, r4, #1044	; 0x414
 80092a2:	f10d 0207 	add.w	r2, sp, #7
 80092a6:	a902      	add	r1, sp, #8
 80092a8:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 80092ac:	f003 f89b 	bl	800c3e6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80092b6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 80092ba:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 80092be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092c2:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 80092c6:	f8c4 6444 	str.w	r6, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80092ca:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 80092ce:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80092d2:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80092d6:	f001 fffc 	bl	800b2d2 <LoRaMacClassBIsBeaconModeActive>
 80092da:	bb58      	cbnz	r0, 8009334 <SendFrameOnChannel+0xcc>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80092dc:	4b1b      	ldr	r3, [pc, #108]	; (800934c <SendFrameOnChannel+0xe4>)
 80092de:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d02e      	beq.n	8009344 <SendFrameOnChannel+0xdc>
    LoRaMacClassBHaltBeaconing( );
 80092e6:	f001 fff7 	bl	800b2d8 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80092ea:	4b18      	ldr	r3, [pc, #96]	; (800934c <SendFrameOnChannel+0xe4>)
 80092ec:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 80092f0:	4b17      	ldr	r3, [pc, #92]	; (8009350 <SendFrameOnChannel+0xe8>)
 80092f2:	f893 1411 	ldrb.w	r1, [r3, #1041]	; 0x411
 80092f6:	b2c0      	uxtb	r0, r0
 80092f8:	f7ff ff78 	bl	80091ec <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80092fc:	4604      	mov	r4, r0
 80092fe:	b9b0      	cbnz	r0, 800932e <SendFrameOnChannel+0xc6>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009300:	4b13      	ldr	r3, [pc, #76]	; (8009350 <SendFrameOnChannel+0xe8>)
 8009302:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009306:	f042 0202 	orr.w	r2, r2, #2
 800930a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800930e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8009312:	b92b      	cbnz	r3, 8009320 <SendFrameOnChannel+0xb8>
        MacCtx.ChannelsNbTransCounter++;
 8009314:	4a0e      	ldr	r2, [pc, #56]	; (8009350 <SendFrameOnChannel+0xe8>)
 8009316:	f892 340c 	ldrb.w	r3, [r2, #1036]	; 0x40c
 800931a:	3301      	adds	r3, #1
 800931c:	f882 340c 	strb.w	r3, [r2, #1036]	; 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009320:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <SendFrameOnChannel+0xec>)
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	480a      	ldr	r0, [pc, #40]	; (8009350 <SendFrameOnChannel+0xe8>)
 8009326:	f830 1b02 	ldrh.w	r1, [r0], #2
 800932a:	b2c9      	uxtb	r1, r1
 800932c:	4798      	blx	r3
}
 800932e:	4620      	mov	r0, r4
 8009330:	b006      	add	sp, #24
 8009332:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009334:	f8d4 0414 	ldr.w	r0, [r4, #1044]	; 0x414
 8009338:	f001 ffdd 	bl	800b2f6 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800933c:	2800      	cmp	r0, #0
 800933e:	d0cd      	beq.n	80092dc <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8009340:	2410      	movs	r4, #16
 8009342:	e7f4      	b.n	800932e <SendFrameOnChannel+0xc6>
        LoRaMacClassBStopRxSlots( );
 8009344:	f001 ffd9 	bl	800b2fa <LoRaMacClassBStopRxSlots>
 8009348:	e7cd      	b.n	80092e6 <SendFrameOnChannel+0x7e>
 800934a:	bf00      	nop
 800934c:	20008000 	.word	0x20008000
 8009350:	2000061c 	.word	0x2000061c
 8009354:	08013578 	.word	0x08013578

08009358 <ScheduleTx>:
{
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	b08c      	sub	sp, #48	; 0x30
 800935e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009360:	f7ff fd8e 	bl	8008e80 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009364:	4604      	mov	r4, r0
 8009366:	b118      	cbz	r0, 8009370 <ScheduleTx+0x18>
}
 8009368:	4620      	mov	r0, r4
 800936a:	b00c      	add	sp, #48	; 0x30
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009370:	f7fe fd00 	bl	8007d74 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009374:	f7ff feae 	bl	80090d4 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009378:	4604      	mov	r4, r0
 800937a:	2800      	cmp	r0, #0
 800937c:	d1f4      	bne.n	8009368 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800937e:	4e36      	ldr	r6, [pc, #216]	; (8009458 <ScheduleTx+0x100>)
 8009380:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009382:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009384:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009388:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800938c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009390:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009394:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009398:	4640      	mov	r0, r8
 800939a:	f008 fe5d 	bl	8012058 <SysTimeGetMcuTime>
 800939e:	af02      	add	r7, sp, #8
 80093a0:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 80093aa:	e898 0006 	ldmia.w	r8, {r1, r2}
 80093ae:	4638      	mov	r0, r7
 80093b0:	f008 fdef 	bl	8011f92 <SysTimeSub>
 80093b4:	ab07      	add	r3, sp, #28
 80093b6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80093ba:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80093be:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80093c0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 80093c2:	2300      	movs	r3, #0
 80093c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 80093c8:	2301      	movs	r3, #1
 80093ca:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80093ce:	4b23      	ldr	r3, [pc, #140]	; (800945c <ScheduleTx+0x104>)
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80093d6:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 80093da:	b92b      	cbnz	r3, 80093e8 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 80093dc:	2301      	movs	r3, #1
 80093de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 80093e2:	2300      	movs	r3, #0
 80093e4:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80093e8:	4a1c      	ldr	r2, [pc, #112]	; (800945c <ScheduleTx+0x104>)
 80093ea:	481b      	ldr	r0, [pc, #108]	; (8009458 <ScheduleTx+0x100>)
 80093ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	f202 4384 	addw	r3, r2, #1156	; 0x484
 80093f6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80093fa:	a904      	add	r1, sp, #16
 80093fc:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009400:	f003 f86c 	bl	800c4dc <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009404:	b1c0      	cbz	r0, 8009438 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8009406:	280b      	cmp	r0, #11
 8009408:	d124      	bne.n	8009454 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800940a:	4a14      	ldr	r2, [pc, #80]	; (800945c <ScheduleTx+0x104>)
 800940c:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
 8009410:	b191      	cbz	r1, 8009438 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 8009412:	b90d      	cbnz	r5, 8009418 <ScheduleTx+0xc0>
                return status;
 8009414:	4604      	mov	r4, r0
 8009416:	e7a7      	b.n	8009368 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009418:	4615      	mov	r5, r2
 800941a:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800941e:	f042 0220 	orr.w	r2, r2, #32
 8009422:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009426:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800942a:	4628      	mov	r0, r5
 800942c:	f008 ff80 	bl	8012330 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8009430:	4628      	mov	r0, r5
 8009432:	f008 ff37 	bl	80122a4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8009436:	e797      	b.n	8009368 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8009438:	f7ff fe70 	bl	800911c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800943c:	f7ff feb2 	bl	80091a4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009440:	4604      	mov	r4, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d190      	bne.n	8009368 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <ScheduleTx+0x104>)
 8009448:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 800944c:	f7ff ff0c 	bl	8009268 <SendFrameOnChannel>
 8009450:	4604      	mov	r4, r0
 8009452:	e789      	b.n	8009368 <ScheduleTx+0x10>
            return status;
 8009454:	4604      	mov	r4, r0
 8009456:	e787      	b.n	8009368 <ScheduleTx+0x10>
 8009458:	20008000 	.word	0x20008000
 800945c:	2000061c 	.word	0x2000061c

08009460 <OnTxDelayedTimerEvent>:
{
 8009460:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009462:	4c11      	ldr	r4, [pc, #68]	; (80094a8 <OnTxDelayedTimerEvent+0x48>)
 8009464:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009468:	f008 fec2 	bl	80121f0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800946c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009470:	f023 0320 	bic.w	r3, r3, #32
 8009474:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8009478:	2001      	movs	r0, #1
 800947a:	f7ff ff6d 	bl	8009358 <ScheduleTx>
 800947e:	b108      	cbz	r0, 8009484 <OnTxDelayedTimerEvent+0x24>
 8009480:	280b      	cmp	r0, #11
 8009482:	d100      	bne.n	8009486 <OnTxDelayedTimerEvent+0x26>
}
 8009484:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <OnTxDelayedTimerEvent+0x4c>)
 8009488:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800948c:	f884 2436 	strb.w	r2, [r4, #1078]	; 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009490:	f894 240e 	ldrb.w	r2, [r4, #1038]	; 0x40e
 8009494:	f884 2439 	strb.w	r2, [r4, #1081]	; 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009498:	2009      	movs	r0, #9
 800949a:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800949e:	f002 f96b 	bl	800b778 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80094a2:	f7fe fcf5 	bl	8007e90 <StopRetransmission>
}
 80094a6:	e7ed      	b.n	8009484 <OnTxDelayedTimerEvent+0x24>
 80094a8:	2000061c 	.word	0x2000061c
 80094ac:	20008000 	.word	0x20008000

080094b0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80094b0:	4b23      	ldr	r3, [pc, #140]	; (8009540 <LoRaMacHandleMcpsRequest+0x90>)
 80094b2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80094b6:	f013 0f01 	tst.w	r3, #1
 80094ba:	d040      	beq.n	800953e <LoRaMacHandleMcpsRequest+0x8e>
{
 80094bc:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80094be:	4b20      	ldr	r3, [pc, #128]	; (8009540 <LoRaMacHandleMcpsRequest+0x90>)
 80094c0:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 80094c4:	b12b      	cbz	r3, 80094d2 <LoRaMacHandleMcpsRequest+0x22>
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d003      	beq.n	80094d2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d007      	beq.n	80094de <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 80094ce:	2400      	movs	r4, #0
 80094d0:	e003      	b.n	80094da <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80094d2:	f7fe fca1 	bl	8007e18 <CheckRetransUnconfirmedUplink>
 80094d6:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 80094d8:	b9a4      	cbnz	r4, 8009504 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 80094da:	b31c      	cbz	r4, 8009524 <LoRaMacHandleMcpsRequest+0x74>
}
 80094dc:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 80094de:	4b18      	ldr	r3, [pc, #96]	; (8009540 <LoRaMacHandleMcpsRequest+0x90>)
 80094e0:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 80094e4:	b1e3      	cbz	r3, 8009520 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80094e6:	f7fe fcbb 	bl	8007e60 <CheckRetransConfirmedUplink>
 80094ea:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80094ec:	4b15      	ldr	r3, [pc, #84]	; (8009544 <LoRaMacHandleMcpsRequest+0x94>)
 80094ee:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1f0      	bne.n	80094d8 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 80094f6:	b910      	cbnz	r0, 80094fe <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 80094f8:	f7fe fd22 	bl	8007f40 <AckTimeoutRetriesProcess>
 80094fc:	e7ec      	b.n	80094d8 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 80094fe:	f7ff fdbb 	bl	8009078 <AckTimeoutRetriesFinalize>
 8009502:	e7e9      	b.n	80094d8 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009504:	4c0e      	ldr	r4, [pc, #56]	; (8009540 <LoRaMacHandleMcpsRequest+0x90>)
 8009506:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800950a:	f008 fe71 	bl	80121f0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800950e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009512:	f023 0320 	bic.w	r3, r3, #32
 8009516:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800951a:	f7fe fcb9 	bl	8007e90 <StopRetransmission>
 800951e:	e7dd      	b.n	80094dc <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 8009520:	2401      	movs	r4, #1
 8009522:	e7da      	b.n	80094da <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <LoRaMacHandleMcpsRequest+0x90>)
 8009526:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800952a:	f36f 1204 	bfc	r2, #4, #1
 800952e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8009532:	2000      	movs	r0, #0
 8009534:	f883 040f 	strb.w	r0, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8009538:	f7ff ff92 	bl	8009460 <OnTxDelayedTimerEvent>
}
 800953c:	e7ce      	b.n	80094dc <LoRaMacHandleMcpsRequest+0x2c>
 800953e:	4770      	bx	lr
 8009540:	2000061c 	.word	0x2000061c
 8009544:	20008000 	.word	0x20008000

08009548 <LoRaMacHandleRequestEvents>:
{
 8009548:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800954a:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 800954c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009550:	bb7b      	cbnz	r3, 80095b2 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009552:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 8009554:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 8009558:	f014 0501 	ands.w	r5, r4, #1
 800955c:	d005      	beq.n	800956a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800955e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 8009562:	f36f 0200 	bfc	r2, #0, #1
 8009566:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800956a:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 800956c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8009570:	f013 0f04 	tst.w	r3, #4
 8009574:	d006      	beq.n	8009584 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009576:	4b17      	ldr	r3, [pc, #92]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 8009578:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800957c:	f36f 0282 	bfc	r2, #2, #1
 8009580:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009584:	2001      	movs	r0, #1
 8009586:	f7fe fbaf 	bl	8007ce8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800958a:	b135      	cbz	r5, 800959a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800958c:	4811      	ldr	r0, [pc, #68]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 800958e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f200 4034 	addw	r0, r0, #1076	; 0x434
 8009598:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800959a:	f014 0f04 	tst.w	r4, #4
 800959e:	d109      	bne.n	80095b4 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 80095a0:	f001 fe9b 	bl	800b2da <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 80095a4:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 80095a6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 80095aa:	f36f 1204 	bfc	r2, #4, #1
 80095ae:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80095b4:	4808      	ldr	r0, [pc, #32]	; (80095d8 <LoRaMacHandleRequestEvents+0x90>)
 80095b6:	f002 f909 	bl	800b7cc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80095ba:	f002 f93f 	bl	800b83c <LoRaMacConfirmQueueGetCnt>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d0ee      	beq.n	80095a0 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80095c2:	4a04      	ldr	r2, [pc, #16]	; (80095d4 <LoRaMacHandleRequestEvents+0x8c>)
 80095c4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80095c8:	f043 0304 	orr.w	r3, r3, #4
 80095cc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80095d0:	e7e6      	b.n	80095a0 <LoRaMacHandleRequestEvents+0x58>
 80095d2:	bf00      	nop
 80095d4:	2000061c 	.word	0x2000061c
 80095d8:	20000a64 	.word	0x20000a64

080095dc <OpenContinuousRxCWindow>:
{
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80095e0:	4c14      	ldr	r4, [pc, #80]	; (8009634 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80095e2:	4d15      	ldr	r5, [pc, #84]	; (8009638 <OpenContinuousRxCWindow+0x5c>)
 80095e4:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 80095e8:	9600      	str	r6, [sp, #0]
 80095ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80095ec:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80095f0:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 80095f4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80095f8:	f002 fed1 	bl	800c39e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80095fc:	2302      	movs	r3, #2
 80095fe:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009602:	2301      	movs	r3, #1
 8009604:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009608:	f205 421c 	addw	r2, r5, #1052	; 0x41c
 800960c:	4631      	mov	r1, r6
 800960e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009612:	f002 fed8 	bl	800c3c6 <RegionRxConfig>
 8009616:	b158      	cbz	r0, 8009630 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009618:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800961c:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <OpenContinuousRxCWindow+0x60>)
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	2000      	movs	r0, #0
 8009626:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009628:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800962c:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 8009630:	b002      	add	sp, #8
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	20008000 	.word	0x20008000
 8009638:	2000061c 	.word	0x2000061c
 800963c:	08013578 	.word	0x08013578

08009640 <RxWindowSetup>:
{
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009644:	f008 fdd4 	bl	80121f0 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <RxWindowSetup+0x3c>)
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800964e:	4a0c      	ldr	r2, [pc, #48]	; (8009680 <RxWindowSetup+0x40>)
 8009650:	4621      	mov	r1, r4
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <RxWindowSetup+0x44>)
 8009654:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009658:	f002 feb5 	bl	800c3c6 <RegionRxConfig>
 800965c:	b160      	cbz	r0, 8009678 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800965e:	4d0a      	ldr	r5, [pc, #40]	; (8009688 <RxWindowSetup+0x48>)
 8009660:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8009664:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009668:	4b04      	ldr	r3, [pc, #16]	; (800967c <RxWindowSetup+0x3c>)
 800966a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966c:	4a05      	ldr	r2, [pc, #20]	; (8009684 <RxWindowSetup+0x44>)
 800966e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009670:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009672:	7ce3      	ldrb	r3, [r4, #19]
 8009674:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	08013578 	.word	0x08013578
 8009680:	20000a38 	.word	0x20000a38
 8009684:	20008000 	.word	0x20008000
 8009688:	2000061c 	.word	0x2000061c

0800968c <OnRxWindow2TimerEvent>:
{
 800968c:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <OnRxWindow2TimerEvent+0x48>)
 8009690:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8009694:	b903      	cbnz	r3, 8009698 <OnRxWindow2TimerEvent+0xc>
}
 8009696:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009698:	480e      	ldr	r0, [pc, #56]	; (80096d4 <OnRxWindow2TimerEvent+0x48>)
 800969a:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800969e:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <OnRxWindow2TimerEvent+0x4c>)
 80096a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80096a6:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096aa:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80096ae:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80096b2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80096b6:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80096ba:	2300      	movs	r3, #0
 80096bc:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80096c6:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 80096ca:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80096ce:	f7ff ffb7 	bl	8009640 <RxWindowSetup>
 80096d2:	e7e0      	b.n	8009696 <OnRxWindow2TimerEvent+0xa>
 80096d4:	2000061c 	.word	0x2000061c
 80096d8:	20008000 	.word	0x20008000

080096dc <OnRxWindow1TimerEvent>:
{
 80096dc:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80096de:	480f      	ldr	r0, [pc, #60]	; (800971c <OnRxWindow1TimerEvent+0x40>)
 80096e0:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 80096e4:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80096e8:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <OnRxWindow1TimerEvent+0x44>)
 80096ea:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 80096ee:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80096f2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80096f6:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80096fa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80096fe:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009702:	2300      	movs	r3, #0
 8009704:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009708:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800970c:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8009710:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009714:	f7ff ff94 	bl	8009640 <RxWindowSetup>
}
 8009718:	bd08      	pop	{r3, pc}
 800971a:	bf00      	nop
 800971c:	2000061c 	.word	0x2000061c
 8009720:	20008000 	.word	0x20008000

08009724 <LoRaMacHandleNvm>:
{
 8009724:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009726:	4b30      	ldr	r3, [pc, #192]	; (80097e8 <LoRaMacHandleNvm+0xc4>)
 8009728:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800972c:	b103      	cbz	r3, 8009730 <LoRaMacHandleNvm+0xc>
}
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009732:	2124      	movs	r1, #36	; 0x24
 8009734:	f005 ff56 	bl	800f5e4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973a:	4283      	cmp	r3, r0
 800973c:	d052      	beq.n	80097e4 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800973e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009740:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009742:	211c      	movs	r1, #28
 8009744:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009748:	f005 ff4c 	bl	800f5e4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800974c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800974e:	4283      	cmp	r3, r0
 8009750:	d002      	beq.n	8009758 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009752:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009754:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009758:	21fc      	movs	r1, #252	; 0xfc
 800975a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800975e:	f005 ff41 	bl	800f5e4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009762:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8009766:	4283      	cmp	r3, r0
 8009768:	d003      	beq.n	8009772 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800976a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800976e:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009772:	21d4      	movs	r1, #212	; 0xd4
 8009774:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8009778:	f005 ff34 	bl	800f5e4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800977c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8009780:	4283      	cmp	r3, r0
 8009782:	d003      	beq.n	800978c <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009784:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009788:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800978c:	21a0      	movs	r1, #160	; 0xa0
 800978e:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8009792:	f005 ff27 	bl	800f5e4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009796:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800979a:	4283      	cmp	r3, r0
 800979c:	d003      	beq.n	80097a6 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800979e:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 80097a2:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80097a6:	f44f 6193 	mov.w	r1, #1176	; 0x498
 80097aa:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 80097ae:	f005 ff19 	bl	800f5e4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 80097b2:	f8d4 375c 	ldr.w	r3, [r4, #1884]	; 0x75c
 80097b6:	4283      	cmp	r3, r0
 80097b8:	d003      	beq.n	80097c2 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 80097ba:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80097be:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80097c2:	2114      	movs	r1, #20
 80097c4:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 80097c8:	f005 ff0c 	bl	800f5e4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80097cc:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
 80097d0:	4283      	cmp	r3, r0
 80097d2:	d003      	beq.n	80097dc <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80097d4:	f8c4 0774 	str.w	r0, [r4, #1908]	; 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80097d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80097dc:	4628      	mov	r0, r5
 80097de:	f7fe fb97 	bl	8007f10 <CallNvmDataChangeCallback>
 80097e2:	e7a4      	b.n	800972e <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80097e4:	2500      	movs	r5, #0
 80097e6:	e7ac      	b.n	8009742 <LoRaMacHandleNvm+0x1e>
 80097e8:	2000061c 	.word	0x2000061c

080097ec <RestoreNvmData>:
{
 80097ec:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80097ee:	4b3d      	ldr	r3, [pc, #244]	; (80098e4 <RestoreNvmData+0xf8>)
 80097f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d001      	beq.n	80097fc <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80097f8:	2001      	movs	r0, #1
}
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80097fc:	4c3a      	ldr	r4, [pc, #232]	; (80098e8 <RestoreNvmData+0xfc>)
 80097fe:	2124      	movs	r1, #36	; 0x24
 8009800:	4620      	mov	r0, r4
 8009802:	f005 feef 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	4283      	cmp	r3, r0
 800980a:	d001      	beq.n	8009810 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800980c:	2017      	movs	r0, #23
 800980e:	e7f4      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009810:	211c      	movs	r1, #28
 8009812:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009816:	f005 fee5 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800981a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800981c:	4283      	cmp	r3, r0
 800981e:	d001      	beq.n	8009824 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009820:	2017      	movs	r0, #23
 8009822:	e7ea      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009824:	21fc      	movs	r1, #252	; 0xfc
 8009826:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800982a:	f005 fedb 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800982e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8009832:	4283      	cmp	r3, r0
 8009834:	d001      	beq.n	800983a <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009836:	2017      	movs	r0, #23
 8009838:	e7df      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800983a:	21d4      	movs	r1, #212	; 0xd4
 800983c:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8009840:	f005 fed0 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009844:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8009848:	4283      	cmp	r3, r0
 800984a:	d001      	beq.n	8009850 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800984c:	2017      	movs	r0, #23
 800984e:	e7d4      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009850:	21a0      	movs	r1, #160	; 0xa0
 8009852:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8009856:	f005 fec5 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800985a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800985e:	4283      	cmp	r3, r0
 8009860:	d001      	beq.n	8009866 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009862:	2017      	movs	r0, #23
 8009864:	e7c9      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8009866:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800986a:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 800986e:	f005 feb9 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8009872:	f8d4 375c 	ldr.w	r3, [r4, #1884]	; 0x75c
 8009876:	4283      	cmp	r3, r0
 8009878:	d001      	beq.n	800987e <RestoreNvmData+0x92>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800987a:	2017      	movs	r0, #23
 800987c:	e7bd      	b.n	80097fa <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800987e:	2114      	movs	r1, #20
 8009880:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 8009884:	f005 feae 	bl	800f5e4 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009888:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
 800988c:	4283      	cmp	r3, r0
 800988e:	d001      	beq.n	8009894 <RestoreNvmData+0xa8>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009890:	2017      	movs	r0, #23
 8009892:	e7b2      	b.n	80097fa <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009894:	4625      	mov	r5, r4
 8009896:	4c15      	ldr	r4, [pc, #84]	; (80098ec <RestoreNvmData+0x100>)
 8009898:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800989c:	4629      	mov	r1, r5
 800989e:	4620      	mov	r0, r4
 80098a0:	f005 fe7f 	bl	800f5a2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80098a4:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 80098a8:	2100      	movs	r1, #0
 80098aa:	4628      	mov	r0, r5
 80098ac:	f005 fe91 	bl	800f5d2 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80098b0:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <RestoreNvmData+0xf8>)
 80098b2:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80098b6:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80098ba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80098bc:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80098c0:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 80098c4:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <RestoreNvmData+0x104>)
 80098d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d8:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 80098dc:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 80098de:	2000      	movs	r0, #0
 80098e0:	e78b      	b.n	80097fa <RestoreNvmData+0xe>
 80098e2:	bf00      	nop
 80098e4:	2000061c 	.word	0x2000061c
 80098e8:	20008778 	.word	0x20008778
 80098ec:	20008000 	.word	0x20008000
 80098f0:	08013578 	.word	0x08013578

080098f4 <OnRadioRxTimeout>:
{
 80098f4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80098f6:	4a07      	ldr	r2, [pc, #28]	; (8009914 <OnRadioRxTimeout+0x20>)
 80098f8:	7813      	ldrb	r3, [r2, #0]
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009900:	f7fe faee 	bl	8007ee0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <OnRadioRxTimeout+0x24>)
 8009906:	2201      	movs	r2, #1
 8009908:	2100      	movs	r1, #0
 800990a:	2002      	movs	r0, #2
 800990c:	f008 f91c 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8009910:	bd08      	pop	{r3, pc}
 8009912:	bf00      	nop
 8009914:	20000618 	.word	0x20000618
 8009918:	08012e60 	.word	0x08012e60

0800991c <OnRadioTxTimeout>:
{
 800991c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <OnRadioTxTimeout+0x20>)
 8009920:	7813      	ldrb	r3, [r2, #0]
 8009922:	f043 0304 	orr.w	r3, r3, #4
 8009926:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009928:	f7fe fada 	bl	8007ee0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800992c:	4b04      	ldr	r3, [pc, #16]	; (8009940 <OnRadioTxTimeout+0x24>)
 800992e:	2201      	movs	r2, #1
 8009930:	2100      	movs	r1, #0
 8009932:	2002      	movs	r0, #2
 8009934:	f008 f908 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 8009938:	bd08      	pop	{r3, pc}
 800993a:	bf00      	nop
 800993c:	20000618 	.word	0x20000618
 8009940:	08012e70 	.word	0x08012e70

08009944 <OnRadioRxDone>:
{
 8009944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009948:	4680      	mov	r8, r0
 800994a:	460f      	mov	r7, r1
 800994c:	4616      	mov	r6, r2
 800994e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009950:	f008 fc0e 	bl	8012170 <UTIL_TIMER_GetCurrentTime>
 8009954:	4c0a      	ldr	r4, [pc, #40]	; (8009980 <OnRadioRxDone+0x3c>)
 8009956:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009958:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800995c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800995e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009960:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009962:	4a08      	ldr	r2, [pc, #32]	; (8009984 <OnRadioRxDone+0x40>)
 8009964:	7813      	ldrb	r3, [r2, #0]
 8009966:	f043 0308 	orr.w	r3, r3, #8
 800996a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800996c:	f7fe fab8 	bl	8007ee0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <OnRadioRxDone+0x44>)
 8009972:	2201      	movs	r2, #1
 8009974:	2100      	movs	r1, #0
 8009976:	2002      	movs	r0, #2
 8009978:	f008 f8e6 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 800997c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009980:	20000b24 	.word	0x20000b24
 8009984:	20000618 	.word	0x20000618
 8009988:	08012e80 	.word	0x08012e80

0800998c <OnRadioTxDone>:
{
 800998c:	b510      	push	{r4, lr}
 800998e:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009990:	f008 fbee 	bl	8012170 <UTIL_TIMER_GetCurrentTime>
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <OnRadioTxDone+0x3c>)
 8009996:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009998:	466c      	mov	r4, sp
 800999a:	4620      	mov	r0, r4
 800999c:	f008 fb3a 	bl	8012014 <SysTimeGet>
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <OnRadioTxDone+0x40>)
 80099a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80099a6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80099aa:	4a09      	ldr	r2, [pc, #36]	; (80099d0 <OnRadioTxDone+0x44>)
 80099ac:	7813      	ldrb	r3, [r2, #0]
 80099ae:	f043 0310 	orr.w	r3, r3, #16
 80099b2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 80099b4:	f7fe fa94 	bl	8007ee0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <OnRadioTxDone+0x48>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	2100      	movs	r1, #0
 80099be:	2002      	movs	r0, #2
 80099c0:	f008 f8c2 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 80099c4:	b002      	add	sp, #8
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	20000b34 	.word	0x20000b34
 80099cc:	20000954 	.word	0x20000954
 80099d0:	20000618 	.word	0x20000618
 80099d4:	08012e90 	.word	0x08012e90

080099d8 <ResetMacParameters>:
{
 80099d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099da:	b08f      	sub	sp, #60	; 0x3c
    if( isRejoin == false )
 80099dc:	b918      	cbnz	r0, 80099e6 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80099de:	4b5b      	ldr	r3, [pc, #364]	; (8009b4c <ResetMacParameters+0x174>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 80099e6:	4c59      	ldr	r4, [pc, #356]	; (8009b4c <ResetMacParameters+0x174>)
 80099e8:	2500      	movs	r5, #0
 80099ea:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 80099ec:	4e58      	ldr	r6, [pc, #352]	; (8009b50 <ResetMacParameters+0x178>)
 80099ee:	f886 540c 	strb.w	r5, [r6, #1036]	; 0x40c
    MacCtx.AckTimeoutRetries = 1;
 80099f2:	2701      	movs	r7, #1
 80099f4:	f886 740d 	strb.w	r7, [r6, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80099f8:	f886 740e 	strb.w	r7, [r6, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 80099fc:	f886 540f 	strb.w	r5, [r6, #1039]	; 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 8009a00:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009a04:	f8a4 711e 	strh.w	r7, [r4, #286]	; 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009a08:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 8009a0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009a10:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 8009a14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009a18:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8009a1c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009a20:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009a24:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8009a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a2c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009a30:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8009a34:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a3c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009a40:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8009a44:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009a48:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8009a4c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009a50:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8009a54:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009a58:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8009a5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8009a60:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 8009a64:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8009a68:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 8009a6c:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 8009a70:	f886 5410 	strb.w	r5, [r6, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8009a74:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8009a78:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8009a7c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8009a80:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8009a84:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8009a88:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8009a8c:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8009a90:	f884 5142 	strb.w	r5, [r4, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8009a94:	f884 5143 	strb.w	r5, [r4, #323]	; 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009a98:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009a9c:	f504 7308 	add.w	r3, r4, #544	; 0x220
 8009aa0:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009aa2:	f504 7331 	add.w	r3, r4, #708	; 0x2c4
 8009aa6:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009aa8:	a901      	add	r1, sp, #4
 8009aaa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009aae:	f002 fc3b 	bl	800c328 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009ab2:	f886 5411 	strb.w	r5, [r6, #1041]	; 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009ab6:	f886 53cc 	strb.w	r5, [r6, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009aba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009abc:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ac0:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8009ac4:	f886 33dc 	strb.w	r3, [r6, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009ac8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8009acc:	f886 33dd 	strb.w	r3, [r6, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009ad0:	f886 53de 	strb.w	r5, [r6, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009ad4:	f886 73df 	strb.w	r7, [r6, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009ad8:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 8009adc:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 8009ae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ae6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aea:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009aec:	f886 73f2 	strb.w	r7, [r6, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009af0:	2302      	movs	r3, #2
 8009af2:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8009af6:	950c      	str	r5, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8009af8:	950d      	str	r5, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8009afa:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 8009afe:	b11b      	cbz	r3, 8009b08 <ResetMacParameters+0x130>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <ResetMacParameters+0x178>)
 8009b0a:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 8009b0e:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009b10:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8009b14:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009b16:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 8009b1a:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009b1c:	f203 4381 	addw	r3, r3, #1153	; 0x481
 8009b20:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009b22:	4a0a      	ldr	r2, [pc, #40]	; (8009b4c <ResetMacParameters+0x174>)
 8009b24:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 8009b28:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009b2a:	f102 0348 	add.w	r3, r2, #72	; 0x48
 8009b2e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009b30:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 8009b34:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009b36:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 8009b3a:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009b3c:	f502 62ec 	add.w	r2, r2, #1888	; 0x760
 8009b40:	a90c      	add	r1, sp, #48	; 0x30
 8009b42:	a804      	add	r0, sp, #16
 8009b44:	f001 fbb4 	bl	800b2b0 <LoRaMacClassBInit>
}
 8009b48:	b00f      	add	sp, #60	; 0x3c
 8009b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4c:	20008000 	.word	0x20008000
 8009b50:	2000061c 	.word	0x2000061c

08009b54 <SwitchClass>:
{
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009b58:	4b46      	ldr	r3, [pc, #280]	; (8009c74 <SwitchClass+0x120>)
 8009b5a:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 8009b5e:	2d01      	cmp	r5, #1
 8009b60:	d070      	beq.n	8009c44 <SwitchClass+0xf0>
 8009b62:	2d02      	cmp	r5, #2
 8009b64:	d076      	beq.n	8009c54 <SwitchClass+0x100>
 8009b66:	b10d      	cbz	r5, 8009b6c <SwitchClass+0x18>
 8009b68:	2003      	movs	r0, #3
}
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009b6c:	bb50      	cbnz	r0, 8009bc4 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009b6e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8009b72:	336c      	adds	r3, #108	; 0x6c
 8009b74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b78:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 8009b7c:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 8009b7e:	2c01      	cmp	r4, #1
 8009b80:	d022      	beq.n	8009bc8 <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 8009b82:	2c02      	cmp	r4, #2
 8009b84:	d1f1      	bne.n	8009b6a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009b86:	4b3b      	ldr	r3, [pc, #236]	; (8009c74 <SwitchClass+0x120>)
 8009b88:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009b8c:	4e3a      	ldr	r6, [pc, #232]	; (8009c78 <SwitchClass+0x124>)
 8009b8e:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 8009b92:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 8009b96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b9c:	f8dc 3000 	ldr.w	r3, [ip]
 8009ba0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dd15      	ble.n	8009bda <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 8009bae:	4b32      	ldr	r3, [pc, #200]	; (8009c78 <SwitchClass+0x124>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                Radio.Sleep( );
 8009bb6:	4b31      	ldr	r3, [pc, #196]	; (8009c7c <SwitchClass+0x128>)
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bba:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009bbc:	f7ff fd0e 	bl	80095dc <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	e7d2      	b.n	8009b6a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bc4:	2003      	movs	r0, #3
 8009bc6:	e7da      	b.n	8009b7e <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f001 fb87 	bl	800b2dc <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d1d7      	bne.n	8009b82 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009bd2:	4b28      	ldr	r3, [pc, #160]	; (8009c74 <SwitchClass+0x120>)
 8009bd4:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8009bd8:	e7d3      	b.n	8009b82 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009bda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009bde:	4925      	ldr	r1, [pc, #148]	; (8009c74 <SwitchClass+0x120>)
 8009be0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009be4:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 8009be8:	b13a      	cbz	r2, 8009bfa <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8009bea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009bee:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009bf2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8009bf6:	2a02      	cmp	r2, #2
 8009bf8:	d002      	beq.n	8009c00 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	b25b      	sxtb	r3, r3
 8009bfe:	e7d4      	b.n	8009baa <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8009c00:	460a      	mov	r2, r1
 8009c02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009c06:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8009c0a:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8009c0e:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8009c10:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8009c14:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009c18:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <SwitchClass+0x124>)
 8009c1a:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 8009c1e:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009c22:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009c26:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 8009c2a:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009c2e:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8009c32:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009c36:	2203      	movs	r2, #3
 8009c38:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8009c42:	e7b4      	b.n	8009bae <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009c44:	f001 fb4a 	bl	800b2dc <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d18e      	bne.n	8009b6a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c4c:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <SwitchClass+0x120>)
 8009c4e:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8009c52:	e78a      	b.n	8009b6a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009c54:	b958      	cbnz	r0, 8009c6e <SwitchClass+0x11a>
                MacCtx.RxSlot = RX_SLOT_NONE;
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <SwitchClass+0x124>)
 8009c58:	2206      	movs	r2, #6
 8009c5a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <SwitchClass+0x120>)
 8009c60:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 8009c64:	4b05      	ldr	r3, [pc, #20]	; (8009c7c <SwitchClass+0x128>)
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	e77d      	b.n	8009b6a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c6e:	2003      	movs	r0, #3
 8009c70:	e77b      	b.n	8009b6a <SwitchClass+0x16>
 8009c72:	bf00      	nop
 8009c74:	20008000 	.word	0x20008000
 8009c78:	2000061c 	.word	0x2000061c
 8009c7c:	08013578 	.word	0x08013578

08009c80 <SendReJoinReq>:
{
 8009c80:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8009c82:	28ff      	cmp	r0, #255	; 0xff
 8009c84:	d003      	beq.n	8009c8e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009c86:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009c88:	f7ff fb66 	bl	8009358 <ScheduleTx>
}
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8009c8e:	2000      	movs	r0, #0
 8009c90:	f7ff ff60 	bl	8009b54 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009c94:	4d0a      	ldr	r5, [pc, #40]	; (8009cc0 <SendReJoinReq+0x40>)
 8009c96:	2400      	movs	r4, #0
 8009c98:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009c9c:	1cab      	adds	r3, r5, #2
 8009c9e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009ca2:	23ff      	movs	r3, #255	; 0xff
 8009ca4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009ca8:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8009cac:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009cb0:	f005 fb5a 	bl	800f368 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8009cb4:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009cb8:	f005 fb38 	bl	800f32c <SecureElementGetDevEui>
            allowDelayedTx = false;
 8009cbc:	4620      	mov	r0, r4
            break;
 8009cbe:	e7e3      	b.n	8009c88 <SendReJoinReq+0x8>
 8009cc0:	2000061c 	.word	0x2000061c

08009cc4 <SetTxContinuousWave>:
{
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8009cc8:	4c11      	ldr	r4, [pc, #68]	; (8009d10 <SetTxContinuousWave+0x4c>)
 8009cca:	f894 3411 	ldrb.w	r3, [r4, #1041]	; 0x411
 8009cce:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009cd2:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <SetTxContinuousWave+0x50>)
 8009cd4:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8009cd8:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009cdc:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8009ce0:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009ce4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009ce8:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009cea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009cee:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 8009cf0:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009cf4:	4669      	mov	r1, sp
 8009cf6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009cfa:	f002 fc04 	bl	800c506 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009cfe:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009d02:	f043 0302 	orr.w	r3, r3, #2
 8009d06:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	b004      	add	sp, #16
 8009d0e:	bd10      	pop	{r4, pc}
 8009d10:	2000061c 	.word	0x2000061c
 8009d14:	20008000 	.word	0x20008000

08009d18 <PrepareFrame>:
{
 8009d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	4605      	mov	r5, r0
 8009d20:	460e      	mov	r6, r1
 8009d22:	4617      	mov	r7, r2
 8009d24:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009d28:	4959      	ldr	r1, [pc, #356]	; (8009e90 <PrepareFrame+0x178>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009d2e:	f881 2410 	strb.w	r2, [r1, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8009d32:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009d34:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009d36:	4698      	mov	r8, r3
 8009d38:	b1cb      	cbz	r3, 8009d6e <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009d3a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009e90 <PrepareFrame+0x178>
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4641      	mov	r1, r8
 8009d42:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009d46:	f005 fc2c 	bl	800f5a2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009d4a:	b2e0      	uxtb	r0, r4
 8009d4c:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009d50:	782b      	ldrb	r3, [r5, #0]
 8009d52:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009d56:	782b      	ldrb	r3, [r5, #0]
 8009d58:	095b      	lsrs	r3, r3, #5
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d009      	beq.n	8009d72 <PrepareFrame+0x5a>
 8009d5e:	2b07      	cmp	r3, #7
 8009d60:	d079      	beq.n	8009e56 <PrepareFrame+0x13e>
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d009      	beq.n	8009d7a <PrepareFrame+0x62>
 8009d66:	2002      	movs	r0, #2
}
 8009d68:	b003      	add	sp, #12
 8009d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009d6e:	4614      	mov	r4, r2
 8009d70:	e7e3      	b.n	8009d3a <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009d72:	4b47      	ldr	r3, [pc, #284]	; (8009e90 <PrepareFrame+0x178>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009d7a:	4b45      	ldr	r3, [pc, #276]	; (8009e90 <PrepareFrame+0x178>)
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009d82:	1c9a      	adds	r2, r3, #2
 8009d84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009d88:	22ff      	movs	r2, #255	; 0xff
 8009d8a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009d8e:	782a      	ldrb	r2, [r5, #0]
 8009d90:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009d94:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009d98:	4a3e      	ldr	r2, [pc, #248]	; (8009e94 <PrepareFrame+0x17c>)
 8009d9a:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8009d9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009da2:	7832      	ldrb	r2, [r6, #0]
 8009da4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009da8:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009dac:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009db0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009db4:	a801      	add	r0, sp, #4
 8009db6:	f001 ff1b 	bl	800bbf0 <LoRaMacCryptoGetFCntUp>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d15c      	bne.n	8009e78 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009dbe:	9a01      	ldr	r2, [sp, #4]
 8009dc0:	4b33      	ldr	r3, [pc, #204]	; (8009e90 <PrepareFrame+0x178>)
 8009dc2:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 8009dcc:	f883 1438 	strb.w	r1, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009dd0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009dd4:	4668      	mov	r0, sp
 8009dd6:	f001 fbb3 	bl	800b540 <LoRaMacCommandsGetSizeSerializedCmds>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d14e      	bne.n	8009e7c <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0c1      	beq.n	8009d68 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009de4:	4b2b      	ldr	r3, [pc, #172]	; (8009e94 <PrepareFrame+0x17c>)
 8009de6:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009dea:	f7fe f8d5 	bl	8007f98 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009dee:	4b28      	ldr	r3, [pc, #160]	; (8009e90 <PrepareFrame+0x178>)
 8009df0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009df4:	b113      	cbz	r3, 8009dfc <PrepareFrame+0xe4>
 8009df6:	9a00      	ldr	r2, [sp, #0]
 8009df8:	2a0f      	cmp	r2, #15
 8009dfa:	d915      	bls.n	8009e28 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009dfc:	b113      	cbz	r3, 8009e04 <PrepareFrame+0xec>
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	2b0f      	cmp	r3, #15
 8009e02:	d821      	bhi.n	8009e48 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009e04:	4a24      	ldr	r2, [pc, #144]	; (8009e98 <PrepareFrame+0x180>)
 8009e06:	4669      	mov	r1, sp
 8009e08:	f001 fba6 	bl	800b558 <LoRaMacCommandsSerializeCmds>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d13b      	bne.n	8009e88 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009e10:	4b1f      	ldr	r3, [pc, #124]	; (8009e90 <PrepareFrame+0x178>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009e18:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 8009e1c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009e20:	9a00      	ldr	r2, [sp, #0]
 8009e22:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009e26:	e79f      	b.n	8009d68 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009e28:	4a1c      	ldr	r2, [pc, #112]	; (8009e9c <PrepareFrame+0x184>)
 8009e2a:	4669      	mov	r1, sp
 8009e2c:	200f      	movs	r0, #15
 8009e2e:	f001 fb93 	bl	800b558 <LoRaMacCommandsSerializeCmds>
 8009e32:	bb28      	cbnz	r0, 8009e80 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009e34:	7833      	ldrb	r3, [r6, #0]
 8009e36:	9a00      	ldr	r2, [sp, #0]
 8009e38:	f362 0303 	bfi	r3, r2, #0, #4
 8009e3c:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <PrepareFrame+0x178>)
 8009e42:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8009e46:	e78f      	b.n	8009d68 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009e48:	4a13      	ldr	r2, [pc, #76]	; (8009e98 <PrepareFrame+0x180>)
 8009e4a:	4669      	mov	r1, sp
 8009e4c:	f001 fb84 	bl	800b558 <LoRaMacCommandsSerializeCmds>
 8009e50:	b1c0      	cbz	r0, 8009e84 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e52:	2013      	movs	r0, #19
 8009e54:	e788      	b.n	8009d68 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	d017      	beq.n	8009e8c <PrepareFrame+0x174>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d083      	beq.n	8009d68 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009e60:	4c0b      	ldr	r4, [pc, #44]	; (8009e90 <PrepareFrame+0x178>)
 8009e62:	b282      	uxth	r2, r0
 8009e64:	4641      	mov	r1, r8
 8009e66:	1ce0      	adds	r0, r4, #3
 8009e68:	f005 fb9b 	bl	800f5a2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009e6c:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009e70:	3301      	adds	r3, #1
 8009e72:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009e74:	2000      	movs	r0, #0
 8009e76:	e777      	b.n	8009d68 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009e78:	2012      	movs	r0, #18
 8009e7a:	e775      	b.n	8009d68 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e7c:	2013      	movs	r0, #19
 8009e7e:	e773      	b.n	8009d68 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e80:	2013      	movs	r0, #19
 8009e82:	e771      	b.n	8009d68 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009e84:	200a      	movs	r0, #10
 8009e86:	e76f      	b.n	8009d68 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009e88:	2013      	movs	r0, #19
 8009e8a:	e76d      	b.n	8009d68 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e76b      	b.n	8009d68 <PrepareFrame+0x50>
 8009e90:	2000061c 	.word	0x2000061c
 8009e94:	20008000 	.word	0x20008000
 8009e98:	20000aa4 	.word	0x20000aa4
 8009e9c:	20000734 	.word	0x20000734

08009ea0 <Send>:
{
 8009ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea4:	b08a      	sub	sp, #40	; 0x28
 8009ea6:	4617      	mov	r7, r2
 8009ea8:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009eaa:	4c42      	ldr	r4, [pc, #264]	; (8009fb4 <Send+0x114>)
 8009eac:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009eb0:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009eb6:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009eb8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d077      	beq.n	8009fb0 <Send+0x110>
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009ec4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8009ec8:	b90b      	cbnz	r3, 8009ece <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009ed4:	4837      	ldr	r0, [pc, #220]	; (8009fb4 <Send+0x114>)
 8009ed6:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 8009eda:	f361 13c7 	bfi	r3, r1, #7, #1
 8009ede:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ee2:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d04f      	beq.n	8009f8a <Send+0xea>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009eea:	4b32      	ldr	r3, [pc, #200]	; (8009fb4 <Send+0x114>)
 8009eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ef0:	b12b      	cbz	r3, 8009efe <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009ef2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009ef6:	f043 0320 	orr.w	r3, r3, #32
 8009efa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009f04:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009f08:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8009f0a:	492a      	ldr	r1, [pc, #168]	; (8009fb4 <Send+0x114>)
 8009f0c:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 8009f10:	f8ad 3018 	strh.w	r3, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8009f14:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 8009f18:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009f1c:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f20:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009f24:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8009f28:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009f2c:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 8009f30:	f88d 301f 	strb.w	r3, [sp, #31]
    adrNext.Version = Nvm.MacGroup2.Version;
 8009f34:	f8d1 3128 	ldr.w	r3, [r1, #296]	; 0x128
 8009f38:	9303      	str	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009f3a:	ab08      	add	r3, sp, #32
 8009f3c:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8009f40:	3139      	adds	r1, #57	; 0x39
 8009f42:	a803      	add	r0, sp, #12
 8009f44:	f001 f9ac 	bl	800b2a0 <LoRaMacAdrCalcNext>
 8009f48:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f4c:	f360 1386 	bfi	r3, r0, #6, #1
 8009f50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009f54:	f8cd 8000 	str.w	r8, [sp]
 8009f58:	463b      	mov	r3, r7
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	a909      	add	r1, sp, #36	; 0x24
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f7ff feda 	bl	8009d18 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009f64:	4604      	mov	r4, r0
 8009f66:	b108      	cbz	r0, 8009f6c <Send+0xcc>
 8009f68:	280a      	cmp	r0, #10
 8009f6a:	d104      	bne.n	8009f76 <Send+0xd6>
        status = ScheduleTx( allowDelayedTx );
 8009f6c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009f70:	f7ff f9f2 	bl	8009358 <ScheduleTx>
 8009f74:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009f76:	b17c      	cbz	r4, 8009f98 <Send+0xf8>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009f78:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <Send+0x114>)
 8009f7a:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009f7e:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009f82:	4620      	mov	r0, r4
 8009f84:	b00a      	add	sp, #40	; 0x28
 8009f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009f8a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f8e:	f043 0310 	orr.w	r3, r3, #16
 8009f92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009f96:	e7a8      	b.n	8009eea <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009f98:	4b06      	ldr	r3, [pc, #24]	; (8009fb4 <Send+0x114>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009fa0:	9a08      	ldr	r2, [sp, #32]
 8009fa2:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009fa4:	f001 fa9a 	bl	800b4dc <LoRaMacCommandsRemoveNoneStickyCmds>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0ea      	beq.n	8009f82 <Send+0xe2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009fac:	2413      	movs	r4, #19
 8009fae:	e7e8      	b.n	8009f82 <Send+0xe2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009fb0:	2407      	movs	r4, #7
 8009fb2:	e7e6      	b.n	8009f82 <Send+0xe2>
 8009fb4:	20008000 	.word	0x20008000

08009fb8 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8009fb8:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <LoRaMacIsBusy+0x28>)
 8009fba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d007      	beq.n	8009fd2 <LoRaMacIsBusy+0x1a>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009fc2:	b943      	cbnz	r3, 8009fd6 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <LoRaMacIsBusy+0x28>)
 8009fc6:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d005      	beq.n	8009fda <LoRaMacIsBusy+0x22>
    return true;
 8009fce:	2001      	movs	r0, #1
 8009fd0:	4770      	bx	lr
        return false;
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	4770      	bx	lr
    return true;
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	4770      	bx	lr
        return false;
 8009fda:	2000      	movs	r0, #0
}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	2000061c 	.word	0x2000061c

08009fe4 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <LoRaMacIsStopped+0x14>)
 8009fe6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d001      	beq.n	8009ff2 <LoRaMacIsStopped+0xe>
    return false;
 8009fee:	2000      	movs	r0, #0
 8009ff0:	4770      	bx	lr
        return true;
 8009ff2:	2001      	movs	r0, #1
}
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	2000061c 	.word	0x2000061c

08009ffc <LoRaMacProcess>:
{
 8009ffc:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009ffe:	f7fe ffdd 	bl	8008fbc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a002:	f001 f97b 	bl	800b2fc <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a006:	4b1f      	ldr	r3, [pc, #124]	; (800a084 <LoRaMacProcess+0x88>)
 800a008:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a00c:	f013 0f10 	tst.w	r3, #16
 800a010:	d10d      	bne.n	800a02e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a012:	f7fd fe6f 	bl	8007cf4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a016:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <LoRaMacProcess+0x88>)
 800a018:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d022      	beq.n	800a066 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a020:	4b18      	ldr	r3, [pc, #96]	; (800a084 <LoRaMacProcess+0x88>)
 800a022:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800a026:	f013 0f20 	tst.w	r3, #32
 800a02a:	d11f      	bne.n	800a06c <LoRaMacProcess+0x70>
}
 800a02c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a02e:	2000      	movs	r0, #0
 800a030:	f7fd fe5a 	bl	8007ce8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a034:	f7fd fe8c 	bl	8007d50 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a038:	f7fd ff76 	bl	8007f28 <IsRequestPending>
 800a03c:	b110      	cbz	r0, 800a044 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a03e:	f7fe f8a9 	bl	8008194 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a042:	b918      	cbnz	r0, 800a04c <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a044:	f7fe ffe8 	bl	8009018 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a048:	f7ff fa32 	bl	80094b0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a04c:	f7ff fa7c 	bl	8009548 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a050:	2001      	movs	r0, #1
 800a052:	f7fd fe49 	bl	8007ce8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a056:	4a0b      	ldr	r2, [pc, #44]	; (800a084 <LoRaMacProcess+0x88>)
 800a058:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800a05c:	f043 0320 	orr.w	r3, r3, #32
 800a060:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800a064:	e7d5      	b.n	800a012 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a066:	f7ff fab9 	bl	80095dc <OpenContinuousRxCWindow>
 800a06a:	e7d9      	b.n	800a020 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a06c:	4b05      	ldr	r3, [pc, #20]	; (800a084 <LoRaMacProcess+0x88>)
 800a06e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800a072:	f36f 1245 	bfc	r2, #5, #1
 800a076:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 800a07a:	4803      	ldr	r0, [pc, #12]	; (800a088 <LoRaMacProcess+0x8c>)
 800a07c:	f7ff fb52 	bl	8009724 <LoRaMacHandleNvm>
}
 800a080:	e7d4      	b.n	800a02c <LoRaMacProcess+0x30>
 800a082:	bf00      	nop
 800a084:	2000061c 	.word	0x2000061c
 800a088:	20008000 	.word	0x20008000

0800a08c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a092:	2800      	cmp	r0, #0
 800a094:	f000 81a0 	beq.w	800a3d8 <LoRaMacInitialization+0x34c>
 800a098:	4688      	mov	r8, r1
 800a09a:	4691      	mov	r9, r2
 800a09c:	4607      	mov	r7, r0
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	f000 819c 	beq.w	800a3dc <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a0a4:	6803      	ldr	r3, [r0, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 819a 	beq.w	800a3e0 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a0ac:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8198 	beq.w	800a3e4 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a0b4:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8196 	beq.w	800a3e8 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800a0bc:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8194 	beq.w	800a3ec <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f002 f8ff 	bl	800c2c8 <RegionIsActive>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f000 8190 	beq.w	800a3f0 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f001 fad5 	bl	800b680 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a0d6:	4ccc      	ldr	r4, [pc, #816]	; (800a408 <LoRaMacInitialization+0x37c>)
 800a0d8:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f005 fa77 	bl	800f5d2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a0e4:	4dc9      	ldr	r5, [pc, #804]	; (800a40c <LoRaMacInitialization+0x380>)
 800a0e6:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f005 fa70 	bl	800f5d2 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a0f2:	f04f 0a01 	mov.w	sl, #1
 800a0f6:	f885 a40e 	strb.w	sl, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 800a0fa:	f885 a40d 	strb.w	sl, [r5, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a0fe:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a102:	2600      	movs	r6, #0
 800a104:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800a108:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a10c:	4bc0      	ldr	r3, [pc, #768]	; (800a410 <LoRaMacInitialization+0x384>)
 800a10e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a112:	230f      	movs	r3, #15
 800a114:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a118:	a908      	add	r1, sp, #32
 800a11a:	4648      	mov	r0, r9
 800a11c:	f002 f8de 	bl	800c2dc <RegionGetPhyParam>
 800a120:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a122:	1b80      	subs	r0, r0, r6
 800a124:	bf18      	it	ne
 800a126:	2001      	movne	r0, #1
 800a128:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a12c:	f04f 0b0a 	mov.w	fp, #10
 800a130:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a134:	a908      	add	r1, sp, #32
 800a136:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a13a:	f002 f8cf 	bl	800c2dc <RegionGetPhyParam>
 800a13e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a140:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a144:	f04f 0906 	mov.w	r9, #6
 800a148:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a14c:	a908      	add	r1, sp, #32
 800a14e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a152:	f002 f8c3 	bl	800c2dc <RegionGetPhyParam>
 800a156:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a158:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a15c:	2310      	movs	r3, #16
 800a15e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a162:	a908      	add	r1, sp, #32
 800a164:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a168:	f002 f8b8 	bl	800c2dc <RegionGetPhyParam>
 800a16c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a16e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a172:	2311      	movs	r3, #17
 800a174:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a178:	a908      	add	r1, sp, #32
 800a17a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a17e:	f002 f8ad 	bl	800c2dc <RegionGetPhyParam>
 800a182:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a184:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a188:	2312      	movs	r3, #18
 800a18a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a18e:	a908      	add	r1, sp, #32
 800a190:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a194:	f002 f8a2 	bl	800c2dc <RegionGetPhyParam>
 800a198:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a19a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a19e:	2313      	movs	r3, #19
 800a1a0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1a4:	a908      	add	r1, sp, #32
 800a1a6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a1aa:	f002 f897 	bl	800c2dc <RegionGetPhyParam>
 800a1ae:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a1b0:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a1b4:	2314      	movs	r3, #20
 800a1b6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ba:	a908      	add	r1, sp, #32
 800a1bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a1c0:	f002 f88c 	bl	800c2dc <RegionGetPhyParam>
 800a1c4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a1c6:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a1ca:	2317      	movs	r3, #23
 800a1cc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1d0:	a908      	add	r1, sp, #32
 800a1d2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a1d6:	f002 f881 	bl	800c2dc <RegionGetPhyParam>
 800a1da:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a1dc:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a1e0:	2318      	movs	r3, #24
 800a1e2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1e6:	a908      	add	r1, sp, #32
 800a1e8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a1ec:	f002 f876 	bl	800c2dc <RegionGetPhyParam>
 800a1f0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a1f2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a1f6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a1fa:	2319      	movs	r3, #25
 800a1fc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a200:	a908      	add	r1, sp, #32
 800a202:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a206:	f002 f869 	bl	800c2dc <RegionGetPhyParam>
 800a20a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a20c:	b2c0      	uxtb	r0, r0
 800a20e:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a212:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a216:	231e      	movs	r3, #30
 800a218:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a21c:	a908      	add	r1, sp, #32
 800a21e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a222:	f002 f85b 	bl	800c2dc <RegionGetPhyParam>
 800a226:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a228:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a22c:	231f      	movs	r3, #31
 800a22e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a232:	a908      	add	r1, sp, #32
 800a234:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a238:	f002 f850 	bl	800c2dc <RegionGetPhyParam>
 800a23c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a23e:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a242:	2320      	movs	r3, #32
 800a244:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a248:	eb0d 0103 	add.w	r1, sp, r3
 800a24c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a250:	f002 f844 	bl	800c2dc <RegionGetPhyParam>
 800a254:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a256:	9b07      	ldr	r3, [sp, #28]
 800a258:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a25c:	2321      	movs	r3, #33	; 0x21
 800a25e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a262:	a908      	add	r1, sp, #32
 800a264:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a268:	f002 f838 	bl	800c2dc <RegionGetPhyParam>
 800a26c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a26e:	9b07      	ldr	r3, [sp, #28]
 800a270:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a274:	230b      	movs	r3, #11
 800a276:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a27a:	a908      	add	r1, sp, #32
 800a27c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a280:	f002 f82c 	bl	800c2dc <RegionGetPhyParam>
 800a284:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800a286:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a28a:	230c      	movs	r3, #12
 800a28c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a290:	a908      	add	r1, sp, #32
 800a292:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a296:	f002 f821 	bl	800c2dc <RegionGetPhyParam>
 800a29a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800a29c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a2a0:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a2a4:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a2a8:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a2ac:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a2b0:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a2b4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a2b8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a2ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a2be:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a2c0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a2c4:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a2c6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a2ca:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a2cc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800a2d0:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a2d2:	f884 a068 	strb.w	sl, [r4, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a2d6:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a2da:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800a2de:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a2e0:	f504 7331 	add.w	r3, r4, #708	; 0x2c4
 800a2e4:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a2e6:	a904      	add	r1, sp, #16
 800a2e8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a2ec:	f002 f81c 	bl	800c328 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a2f0:	f8c5 8348 	str.w	r8, [r5, #840]	; 0x348
    ResetMacParameters( false );
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff fb6f 	bl	80099d8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a2fa:	f884 a119 	strb.w	sl, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800a2fe:	f8c5 7344 	str.w	r7, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a302:	f885 6481 	strb.w	r6, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800a306:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a30a:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a30c:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a30e:	9600      	str	r6, [sp, #0]
 800a310:	4b40      	ldr	r3, [pc, #256]	; (800a414 <LoRaMacInitialization+0x388>)
 800a312:	4632      	mov	r2, r6
 800a314:	f04f 31ff 	mov.w	r1, #4294967295
 800a318:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a31c:	f007 ff0a 	bl	8012134 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a320:	9600      	str	r6, [sp, #0]
 800a322:	4b3d      	ldr	r3, [pc, #244]	; (800a418 <LoRaMacInitialization+0x38c>)
 800a324:	4632      	mov	r2, r6
 800a326:	f04f 31ff 	mov.w	r1, #4294967295
 800a32a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a32e:	f007 ff01 	bl	8012134 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a332:	9600      	str	r6, [sp, #0]
 800a334:	4b39      	ldr	r3, [pc, #228]	; (800a41c <LoRaMacInitialization+0x390>)
 800a336:	4632      	mov	r2, r6
 800a338:	f04f 31ff 	mov.w	r1, #4294967295
 800a33c:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a340:	f007 fef8 	bl	8012134 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a344:	9600      	str	r6, [sp, #0]
 800a346:	4b36      	ldr	r3, [pc, #216]	; (800a420 <LoRaMacInitialization+0x394>)
 800a348:	4632      	mov	r2, r6
 800a34a:	f04f 31ff 	mov.w	r1, #4294967295
 800a34e:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800a352:	f007 feef 	bl	8012134 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a356:	ae02      	add	r6, sp, #8
 800a358:	4630      	mov	r0, r6
 800a35a:	f007 fe7d 	bl	8012058 <SysTimeGetMcuTime>
 800a35e:	f504 7390 	add.w	r3, r4, #288	; 0x120
 800a362:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a366:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a36a:	4b2e      	ldr	r3, [pc, #184]	; (800a424 <LoRaMacInitialization+0x398>)
 800a36c:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a370:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <LoRaMacInitialization+0x39c>)
 800a372:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a376:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <LoRaMacInitialization+0x3a0>)
 800a378:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a37c:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <LoRaMacInitialization+0x3a4>)
 800a37e:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a382:	4b2c      	ldr	r3, [pc, #176]	; (800a434 <LoRaMacInitialization+0x3a8>)
 800a384:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <LoRaMacInitialization+0x3ac>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a390:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800a392:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800a396:	f004 fe21 	bl	800efdc <SecureElementInit>
 800a39a:	bb70      	cbnz	r0, 800a3fa <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a39c:	4620      	mov	r0, r4
 800a39e:	f001 fc07 	bl	800bbb0 <LoRaMacCryptoInit>
 800a3a2:	bb60      	cbnz	r0, 800a3fe <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a3a4:	f001 f830 	bl	800b408 <LoRaMacCommandsInit>
 800a3a8:	bb58      	cbnz	r0, 800a402 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a3aa:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800a3ae:	f001 fc65 	bl	800bc7c <LoRaMacCryptoSetMulticastReference>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d141      	bne.n	800a43c <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a3b8:	4d1f      	ldr	r5, [pc, #124]	; (800a438 <LoRaMacInitialization+0x3ac>)
 800a3ba:	696b      	ldr	r3, [r5, #20]
 800a3bc:	4798      	blx	r3
 800a3be:	f005 f8dd 	bl	800f57c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a3c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a3c4:	4a10      	ldr	r2, [pc, #64]	; (800a408 <LoRaMacInitialization+0x37c>)
 800a3c6:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800a3ca:	4798      	blx	r3
    Radio.Sleep( );
 800a3cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a3ce:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	f7fd fc89 	bl	8007ce8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a3d6:	e00c      	b.n	800a3f2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a3d8:	2403      	movs	r4, #3
 800a3da:	e00a      	b.n	800a3f2 <LoRaMacInitialization+0x366>
 800a3dc:	2403      	movs	r4, #3
 800a3de:	e008      	b.n	800a3f2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a3e0:	2403      	movs	r4, #3
 800a3e2:	e006      	b.n	800a3f2 <LoRaMacInitialization+0x366>
 800a3e4:	2403      	movs	r4, #3
 800a3e6:	e004      	b.n	800a3f2 <LoRaMacInitialization+0x366>
 800a3e8:	2403      	movs	r4, #3
 800a3ea:	e002      	b.n	800a3f2 <LoRaMacInitialization+0x366>
 800a3ec:	2403      	movs	r4, #3
 800a3ee:	e000      	b.n	800a3f2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a3f0:	2409      	movs	r4, #9
}
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	b00b      	add	sp, #44	; 0x2c
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3fa:	2411      	movs	r4, #17
 800a3fc:	e7f9      	b.n	800a3f2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a3fe:	2411      	movs	r4, #17
 800a400:	e7f7      	b.n	800a3f2 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a402:	2413      	movs	r4, #19
 800a404:	e7f5      	b.n	800a3f2 <LoRaMacInitialization+0x366>
 800a406:	bf00      	nop
 800a408:	20008000 	.word	0x20008000
 800a40c:	2000061c 	.word	0x2000061c
 800a410:	01000300 	.word	0x01000300
 800a414:	08009461 	.word	0x08009461
 800a418:	080096dd 	.word	0x080096dd
 800a41c:	0800968d 	.word	0x0800968d
 800a420:	08008115 	.word	0x08008115
 800a424:	0800998d 	.word	0x0800998d
 800a428:	08009945 	.word	0x08009945
 800a42c:	08007ef9 	.word	0x08007ef9
 800a430:	0800991d 	.word	0x0800991d
 800a434:	080098f5 	.word	0x080098f5
 800a438:	08013578 	.word	0x08013578
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a43c:	2411      	movs	r4, #17
 800a43e:	e7d8      	b.n	800a3f2 <LoRaMacInitialization+0x366>

0800a440 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800a440:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800a442:	2400      	movs	r4, #0
 800a444:	4b03      	ldr	r3, [pc, #12]	; (800a454 <LoRaMacStart+0x14>)
 800a446:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800a44a:	f7fd fc39 	bl	8007cc0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800a44e:	4620      	mov	r0, r4
 800a450:	bd10      	pop	{r4, pc}
 800a452:	bf00      	nop
 800a454:	2000061c 	.word	0x2000061c

0800a458 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a458:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a45a:	f7ff fdad 	bl	8009fb8 <LoRaMacIsBusy>
 800a45e:	b130      	cbz	r0, 800a46e <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a460:	4b0b      	ldr	r3, [pc, #44]	; (800a490 <LoRaMacStop+0x38>)
 800a462:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a466:	2b01      	cmp	r3, #1
 800a468:	d010      	beq.n	800a48c <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a46a:	2001      	movs	r0, #1
}
 800a46c:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <LoRaMacStop+0x3c>)
 800a470:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a474:	2b02      	cmp	r3, #2
 800a476:	d005      	beq.n	800a484 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <LoRaMacStop+0x38>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a480:	2000      	movs	r0, #0
 800a482:	e7f3      	b.n	800a46c <LoRaMacStop+0x14>
            Radio.Sleep( );
 800a484:	4b04      	ldr	r3, [pc, #16]	; (800a498 <LoRaMacStop+0x40>)
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	4798      	blx	r3
 800a48a:	e7f5      	b.n	800a478 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800a48c:	2000      	movs	r0, #0
 800a48e:	e7ed      	b.n	800a46c <LoRaMacStop+0x14>
 800a490:	2000061c 	.word	0x2000061c
 800a494:	20008000 	.word	0x20008000
 800a498:	08013578 	.word	0x08013578

0800a49c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a49c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a49e:	4c14      	ldr	r4, [pc, #80]	; (800a4f0 <LoRaMacHalt+0x54>)
 800a4a0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a4a4:	f007 fea4 	bl	80121f0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a4a8:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a4ac:	f007 fea0 	bl	80121f0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a4b0:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a4b4:	f007 fe9c 	bl	80121f0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800a4b8:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800a4bc:	f007 fe98 	bl	80121f0 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a4c0:	f000 ff0a 	bl	800b2d8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <LoRaMacHalt+0x58>)
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800a4d0:	4e09      	ldr	r6, [pc, #36]	; (800a4f8 <LoRaMacHalt+0x5c>)
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff f926 	bl	8009724 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a4d8:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4807      	ldr	r0, [pc, #28]	; (800a4fc <LoRaMacHalt+0x60>)
 800a4e0:	f005 f85f 	bl	800f5a2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	bf00      	nop
 800a4f0:	2000061c 	.word	0x2000061c
 800a4f4:	08013578 	.word	0x08013578
 800a4f8:	20008000 	.word	0x20008000
 800a4fc:	20008778 	.word	0x20008778

0800a500 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	b089      	sub	sp, #36	; 0x24
 800a504:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a506:	4b2e      	ldr	r3, [pc, #184]	; (800a5c0 <LoRaMacQueryTxPossible+0xc0>)
 800a508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a50a:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a50c:	f993 00dd 	ldrsb.w	r0, [r3, #221]	; 0xdd
 800a510:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a514:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a518:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a520:	2900      	cmp	r1, #0
 800a522:	d047      	beq.n	800a5b4 <LoRaMacQueryTxPossible+0xb4>
 800a524:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800a526:	4b26      	ldr	r3, [pc, #152]	; (800a5c0 <LoRaMacQueryTxPossible+0xc0>)
 800a528:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800a52c:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a52e:	2100      	movs	r1, #0
 800a530:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a534:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800a538:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a53c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a53e:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800a542:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a546:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800a54a:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a54e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a552:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a556:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a55a:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a55e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800a562:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a566:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a56a:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a56e:	ab02      	add	r3, sp, #8
 800a570:	f10d 0206 	add.w	r2, sp, #6
 800a574:	f10d 0107 	add.w	r1, sp, #7
 800a578:	a803      	add	r0, sp, #12
 800a57a:	f000 fe91 	bl	800b2a0 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a57e:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a582:	f7fd fd09 	bl	8007f98 <GetMaxAppPayloadWithoutFOptsLength>
 800a586:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a588:	4668      	mov	r0, sp
 800a58a:	f000 ffd9 	bl	800b540 <LoRaMacCommandsGetSizeSerializedCmds>
 800a58e:	b998      	cbnz	r0, 800a5b8 <LoRaMacQueryTxPossible+0xb8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a590:	9b00      	ldr	r3, [sp, #0]
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d80a      	bhi.n	800a5ac <LoRaMacQueryTxPossible+0xac>
 800a596:	786a      	ldrb	r2, [r5, #1]
 800a598:	4293      	cmp	r3, r2
 800a59a:	d807      	bhi.n	800a5ac <LoRaMacQueryTxPossible+0xac>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a5a0:	9b00      	ldr	r3, [sp, #0]
 800a5a2:	441c      	add	r4, r3
 800a5a4:	42a2      	cmp	r2, r4
 800a5a6:	d309      	bcc.n	800a5bc <LoRaMacQueryTxPossible+0xbc>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a5a8:	b009      	add	sp, #36	; 0x24
 800a5aa:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a5b0:	2008      	movs	r0, #8
 800a5b2:	e7f9      	b.n	800a5a8 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a5b4:	2003      	movs	r0, #3
 800a5b6:	e7f7      	b.n	800a5a8 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a5b8:	2013      	movs	r0, #19
 800a5ba:	e7f5      	b.n	800a5a8 <LoRaMacQueryTxPossible+0xa8>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a5bc:	2008      	movs	r0, #8
 800a5be:	e7f3      	b.n	800a5a8 <LoRaMacQueryTxPossible+0xa8>
 800a5c0:	20008000 	.word	0x20008000

0800a5c4 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f000 8146 	beq.w	800a856 <LoRaMacMibGetRequestConfirm+0x292>
{
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a5d0:	7800      	ldrb	r0, [r0, #0]
 800a5d2:	283f      	cmp	r0, #63	; 0x3f
 800a5d4:	f200 813b 	bhi.w	800a84e <LoRaMacMibGetRequestConfirm+0x28a>
 800a5d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a5dc:	00450040 	.word	0x00450040
 800a5e0:	0050004b 	.word	0x0050004b
 800a5e4:	005b0055 	.word	0x005b0055
 800a5e8:	01390061 	.word	0x01390061
 800a5ec:	01390139 	.word	0x01390139
 800a5f0:	01390139 	.word	0x01390139
 800a5f4:	01390139 	.word	0x01390139
 800a5f8:	00690139 	.word	0x00690139
 800a5fc:	0075006f 	.word	0x0075006f
 800a600:	008a0082 	.word	0x008a0082
 800a604:	009a0092 	.word	0x009a0092
 800a608:	00a200af 	.word	0x00a200af
 800a60c:	00c200bc 	.word	0x00c200bc
 800a610:	00cc00c7 	.word	0x00cc00c7
 800a614:	00d600d1 	.word	0x00d600d1
 800a618:	00e100db 	.word	0x00e100db
 800a61c:	00e700ed 	.word	0x00e700ed
 800a620:	00f800f3 	.word	0x00f800f3
 800a624:	010c00fe 	.word	0x010c00fe
 800a628:	01080104 	.word	0x01080104
 800a62c:	01120139 	.word	0x01120139
 800a630:	01390139 	.word	0x01390139
 800a634:	01390139 	.word	0x01390139
 800a638:	01390139 	.word	0x01390139
 800a63c:	01390139 	.word	0x01390139
 800a640:	01390139 	.word	0x01390139
 800a644:	01390139 	.word	0x01390139
 800a648:	01390139 	.word	0x01390139
 800a64c:	011b0139 	.word	0x011b0139
 800a650:	01270121 	.word	0x01270121
 800a654:	0133012d 	.word	0x0133012d
 800a658:	013f013f 	.word	0x013f013f
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a65c:	4b80      	ldr	r3, [pc, #512]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a65e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a662:	7123      	strb	r3, [r4, #4]
            break;
 800a664:	e0fa      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a666:	4b7e      	ldr	r3, [pc, #504]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a668:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800a66c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a66e:	2000      	movs	r0, #0
            break;
 800a670:	e0f4      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800a672:	6860      	ldr	r0, [r4, #4]
 800a674:	f004 fe5a 	bl	800f32c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a678:	2000      	movs	r0, #0
            break;
 800a67a:	e0ef      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800a67c:	6860      	ldr	r0, [r4, #4]
 800a67e:	f004 fe73 	bl	800f368 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a682:	2000      	movs	r0, #0
            break;
 800a684:	e0ea      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a686:	4b76      	ldr	r3, [pc, #472]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a688:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a68c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a68e:	2000      	movs	r0, #0
            break;
 800a690:	e0e4      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a692:	4b73      	ldr	r3, [pc, #460]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a698:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a69a:	2000      	movs	r0, #0
            break;
 800a69c:	e0de      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800a69e:	1d21      	adds	r1, r4, #4
 800a6a0:	4b6f      	ldr	r3, [pc, #444]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a6a2:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800a6a6:	f004 fe7b 	bl	800f3a0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6aa:	2000      	movs	r0, #0
            break;
 800a6ac:	e0d6      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a6ae:	4b6c      	ldr	r3, [pc, #432]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a6b0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800a6b4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6b6:	2000      	movs	r0, #0
            break;
 800a6b8:	e0d0      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a6ba:	4b69      	ldr	r3, [pc, #420]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a6bc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a6c0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6c2:	2000      	movs	r0, #0
            break;
 800a6c4:	e0ca      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800a6c6:	231d      	movs	r3, #29
 800a6c8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a6cc:	a902      	add	r1, sp, #8
 800a6ce:	4b64      	ldr	r3, [pc, #400]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a6d0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a6d4:	f001 fe02 	bl	800c2dc <RegionGetPhyParam>
 800a6d8:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800a6da:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6dc:	2000      	movs	r0, #0
            break;
 800a6de:	e0bd      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a6e0:	3404      	adds	r4, #4
 800a6e2:	4b60      	ldr	r3, [pc, #384]	; (800a864 <LoRaMacMibGetRequestConfirm+0x2a0>)
 800a6e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6e8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6ec:	2000      	movs	r0, #0
            break;
 800a6ee:	e0b5      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a6f0:	3404      	adds	r4, #4
 800a6f2:	4b5d      	ldr	r3, [pc, #372]	; (800a868 <LoRaMacMibGetRequestConfirm+0x2a4>)
 800a6f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6f8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6fc:	2000      	movs	r0, #0
            break;
 800a6fe:	e0ad      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a700:	3404      	adds	r4, #4
 800a702:	4b5a      	ldr	r3, [pc, #360]	; (800a86c <LoRaMacMibGetRequestConfirm+0x2a8>)
 800a704:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a708:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a70c:	2000      	movs	r0, #0
            break;
 800a70e:	e0a5      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a710:	3404      	adds	r4, #4
 800a712:	4b57      	ldr	r3, [pc, #348]	; (800a870 <LoRaMacMibGetRequestConfirm+0x2ac>)
 800a714:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a718:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a71c:	2000      	movs	r0, #0
            break;
 800a71e:	e09d      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a720:	231b      	movs	r3, #27
 800a722:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a726:	a902      	add	r1, sp, #8
 800a728:	4b4d      	ldr	r3, [pc, #308]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a72a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a72e:	f001 fdd5 	bl	800c2dc <RegionGetPhyParam>
 800a732:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a734:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a736:	2000      	movs	r0, #0
            break;
 800a738:	e090      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a73a:	231a      	movs	r3, #26
 800a73c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a740:	a902      	add	r1, sp, #8
 800a742:	4b47      	ldr	r3, [pc, #284]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a744:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a748:	f001 fdc8 	bl	800c2dc <RegionGetPhyParam>
 800a74c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a74e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a750:	2000      	movs	r0, #0
            break;
 800a752:	e083      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a754:	4b42      	ldr	r3, [pc, #264]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a756:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a75a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a75c:	2000      	movs	r0, #0
            break;
 800a75e:	e07d      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a760:	4b3f      	ldr	r3, [pc, #252]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a764:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a766:	2000      	movs	r0, #0
            break;
 800a768:	e078      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a76a:	4b3d      	ldr	r3, [pc, #244]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a770:	2000      	movs	r0, #0
            break;
 800a772:	e073      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a774:	4b3a      	ldr	r3, [pc, #232]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a778:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a77a:	2000      	movs	r0, #0
            break;
 800a77c:	e06e      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a77e:	4b38      	ldr	r3, [pc, #224]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a782:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a784:	2000      	movs	r0, #0
            break;
 800a786:	e069      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a788:	4b35      	ldr	r3, [pc, #212]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a78c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a78e:	2000      	movs	r0, #0
            break;
 800a790:	e064      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a792:	4b33      	ldr	r3, [pc, #204]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a794:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800a798:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a79a:	2000      	movs	r0, #0
            break;
 800a79c:	e05e      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a79e:	4b30      	ldr	r3, [pc, #192]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a7a4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7a6:	2000      	movs	r0, #0
            break;
 800a7a8:	e058      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a7aa:	4b2d      	ldr	r3, [pc, #180]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7ac:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800a7b0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7b2:	2000      	movs	r0, #0
            break;
 800a7b4:	e052      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a7b6:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7b8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a7bc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7be:	2000      	movs	r0, #0
            break;
 800a7c0:	e04c      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a7c2:	4b27      	ldr	r3, [pc, #156]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7c8:	2000      	movs	r0, #0
            break;
 800a7ca:	e047      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a7cc:	4b24      	ldr	r3, [pc, #144]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7d2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7d4:	2000      	movs	r0, #0
            break;
 800a7d6:	e041      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a7d8:	4b21      	ldr	r3, [pc, #132]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7de:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7e0:	2000      	movs	r0, #0
            break;
 800a7e2:	e03b      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800a7e4:	4b1e      	ldr	r3, [pc, #120]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7e6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7e8:	2000      	movs	r0, #0
            break;
 800a7ea:	e037      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800a7ec:	4b21      	ldr	r3, [pc, #132]	; (800a874 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800a7ee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7f0:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800a7f2:	e033      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a7f4:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a7f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a7fa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7fc:	2000      	movs	r0, #0
            break;
 800a7fe:	e02d      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a800:	4b17      	ldr	r3, [pc, #92]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a802:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800a806:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a808:	f001 fe9e 	bl	800c548 <RegionGetVersion>
 800a80c:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a80e:	2000      	movs	r0, #0
            break;
 800a810:	e024      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a818:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a81a:	2000      	movs	r0, #0
            break;
 800a81c:	e01e      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a81e:	4b10      	ldr	r3, [pc, #64]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a820:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800a824:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a826:	2000      	movs	r0, #0
            break;
 800a828:	e018      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a82a:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a82c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800a830:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a832:	2000      	movs	r0, #0
            break;
 800a834:	e012      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800a836:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a838:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800a83c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a83e:	2000      	movs	r0, #0
            break;
 800a840:	e00c      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800a842:	4b07      	ldr	r3, [pc, #28]	; (800a860 <LoRaMacMibGetRequestConfirm+0x29c>)
 800a844:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a848:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a84a:	2000      	movs	r0, #0
            break;
 800a84c:	e006      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 fd46 	bl	800b2e0 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a854:	e002      	b.n	800a85c <LoRaMacMibGetRequestConfirm+0x298>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a856:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800a858:	4770      	bx	lr
    switch( mibGet->Type )
 800a85a:	2018      	movs	r0, #24
}
 800a85c:	b004      	add	sp, #16
 800a85e:	bd10      	pop	{r4, pc}
 800a860:	20008000 	.word	0x20008000
 800a864:	2000806c 	.word	0x2000806c
 800a868:	200080b4 	.word	0x200080b4
 800a86c:	20008074 	.word	0x20008074
 800a870:	200080bc 	.word	0x200080bc
 800a874:	20008778 	.word	0x20008778

0800a878 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a878:	b530      	push	{r4, r5, lr}
 800a87a:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f000 8280 	beq.w	800ad82 <LoRaMacMibSetRequestConfirm+0x50a>
 800a882:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a884:	4b9f      	ldr	r3, [pc, #636]	; (800ab04 <LoRaMacMibSetRequestConfirm+0x28c>)
 800a886:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a88a:	f013 0f02 	tst.w	r3, #2
 800a88e:	f040 827a 	bne.w	800ad86 <LoRaMacMibSetRequestConfirm+0x50e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a892:	7804      	ldrb	r4, [r0, #0]
 800a894:	2c3f      	cmp	r4, #63	; 0x3f
 800a896:	f200 8270 	bhi.w	800ad7a <LoRaMacMibSetRequestConfirm+0x502>
 800a89a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a89e:	0040      	.short	0x0040
 800a8a0:	004e0045 	.word	0x004e0045
 800a8a4:	005f0057 	.word	0x005f0057
 800a8a8:	006b0065 	.word	0x006b0065
 800a8ac:	0087007a 	.word	0x0087007a
 800a8b0:	00a10094 	.word	0x00a10094
 800a8b4:	00bb00ae 	.word	0x00bb00ae
 800a8b8:	00d500c8 	.word	0x00d500c8
 800a8bc:	00ed00e2 	.word	0x00ed00e2
 800a8c0:	00f3026e 	.word	0x00f3026e
 800a8c4:	013d0119 	.word	0x013d0119
 800a8c8:	0195016b 	.word	0x0195016b
 800a8cc:	01a50185 	.word	0x01a50185
 800a8d0:	01b501b0 	.word	0x01b501b0
 800a8d4:	01bf01ba 	.word	0x01bf01ba
 800a8d8:	01c901c4 	.word	0x01c901c4
 800a8dc:	020c01de 	.word	0x020c01de
 800a8e0:	022101f7 	.word	0x022101f7
 800a8e4:	02300228 	.word	0x02300228
 800a8e8:	023c0236 	.word	0x023c0236
 800a8ec:	0240026e 	.word	0x0240026e
 800a8f0:	026e026e 	.word	0x026e026e
 800a8f4:	026e026e 	.word	0x026e026e
 800a8f8:	026e026e 	.word	0x026e026e
 800a8fc:	026e026e 	.word	0x026e026e
 800a900:	026e026e 	.word	0x026e026e
 800a904:	026e026e 	.word	0x026e026e
 800a908:	026e026e 	.word	0x026e026e
 800a90c:	026e026e 	.word	0x026e026e
 800a910:	02560250 	.word	0x02560250
 800a914:	0262025c 	.word	0x0262025c
 800a918:	02780268 	.word	0x02780268
 800a91c:	0278      	.short	0x0278
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a91e:	7900      	ldrb	r0, [r0, #4]
 800a920:	f7ff f918 	bl	8009b54 <SwitchClass>
 800a924:	4604      	mov	r4, r0
            break;
 800a926:	e22f      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a928:	7903      	ldrb	r3, [r0, #4]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	f000 8231 	beq.w	800ad92 <LoRaMacMibSetRequestConfirm+0x51a>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a930:	4a75      	ldr	r2, [pc, #468]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800a932:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a936:	2400      	movs	r4, #0
 800a938:	e226      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a93a:	6840      	ldr	r0, [r0, #4]
 800a93c:	f004 fce8 	bl	800f310 <SecureElementSetDevEui>
 800a940:	4604      	mov	r4, r0
 800a942:	2800      	cmp	r0, #0
 800a944:	f000 8220 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a948:	2403      	movs	r4, #3
 800a94a:	e21d      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a94c:	6840      	ldr	r0, [r0, #4]
 800a94e:	f004 fcfb 	bl	800f348 <SecureElementSetJoinEui>
 800a952:	2800      	cmp	r0, #0
 800a954:	f040 8218 	bne.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a958:	4604      	mov	r4, r0
 800a95a:	e215      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a95c:	7902      	ldrb	r2, [r0, #4]
 800a95e:	4b6a      	ldr	r3, [pc, #424]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800a960:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a964:	2400      	movs	r4, #0
            break;
 800a966:	e20f      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a968:	6842      	ldr	r2, [r0, #4]
 800a96a:	4b67      	ldr	r3, [pc, #412]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800a96c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a970:	2400      	movs	r4, #0
            break;
 800a972:	e209      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800a974:	6841      	ldr	r1, [r0, #4]
 800a976:	4b64      	ldr	r3, [pc, #400]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800a978:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800a97c:	f004 fd02 	bl	800f384 <SecureElementSetDevAddr>
 800a980:	4604      	mov	r4, r0
 800a982:	2800      	cmp	r0, #0
 800a984:	f040 8207 	bne.w	800ad96 <LoRaMacMibSetRequestConfirm+0x51e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a988:	686a      	ldr	r2, [r5, #4]
 800a98a:	4b5f      	ldr	r3, [pc, #380]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800a98c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a990:	e1fa      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a992:	6841      	ldr	r1, [r0, #4]
 800a994:	2900      	cmp	r1, #0
 800a996:	f000 8200 	beq.w	800ad9a <LoRaMacMibSetRequestConfirm+0x522>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a99a:	2000      	movs	r0, #0
 800a99c:	f001 fa7e 	bl	800be9c <LoRaMacCryptoSetKey>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f000 81f0 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9a8:	2411      	movs	r4, #17
 800a9aa:	e1ed      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a9ac:	6841      	ldr	r1, [r0, #4]
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	f000 81f5 	beq.w	800ad9e <LoRaMacMibSetRequestConfirm+0x526>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	f001 fa71 	bl	800be9c <LoRaMacCryptoSetKey>
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f000 81e3 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9c2:	2411      	movs	r4, #17
 800a9c4:	e1e0      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800a9c6:	6841      	ldr	r1, [r0, #4]
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	f000 81ea 	beq.w	800ada2 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a9ce:	2008      	movs	r0, #8
 800a9d0:	f001 fa64 	bl	800be9c <LoRaMacCryptoSetKey>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f000 81d6 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9dc:	2411      	movs	r4, #17
 800a9de:	e1d3      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800a9e0:	6841      	ldr	r1, [r0, #4]
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	f000 81df 	beq.w	800ada6 <LoRaMacMibSetRequestConfirm+0x52e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a9e8:	2009      	movs	r0, #9
 800a9ea:	f001 fa57 	bl	800be9c <LoRaMacCryptoSetKey>
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f000 81c9 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9f6:	2411      	movs	r4, #17
 800a9f8:	e1c6      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800a9fa:	6841      	ldr	r1, [r0, #4]
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	f000 81d4 	beq.w	800adaa <LoRaMacMibSetRequestConfirm+0x532>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800aa02:	200c      	movs	r0, #12
 800aa04:	f001 fa4a 	bl	800be9c <LoRaMacCryptoSetKey>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f000 81bc 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa10:	2411      	movs	r4, #17
 800aa12:	e1b9      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800aa14:	6841      	ldr	r1, [r0, #4]
 800aa16:	2900      	cmp	r1, #0
 800aa18:	f000 81c9 	beq.w	800adae <LoRaMacMibSetRequestConfirm+0x536>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800aa1c:	200d      	movs	r0, #13
 800aa1e:	f001 fa3d 	bl	800be9c <LoRaMacCryptoSetKey>
 800aa22:	4604      	mov	r4, r0
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f000 81af 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa2a:	2411      	movs	r4, #17
 800aa2c:	e1ac      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800aa2e:	6841      	ldr	r1, [r0, #4]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	f000 81be 	beq.w	800adb2 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800aa36:	200e      	movs	r0, #14
 800aa38:	f001 fa30 	bl	800be9c <LoRaMacCryptoSetKey>
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f000 81a2 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa44:	2411      	movs	r4, #17
 800aa46:	e19f      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800aa48:	6841      	ldr	r1, [r0, #4]
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	f000 81b3 	beq.w	800adb6 <LoRaMacMibSetRequestConfirm+0x53e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800aa50:	200f      	movs	r0, #15
 800aa52:	f001 fa23 	bl	800be9c <LoRaMacCryptoSetKey>
 800aa56:	4604      	mov	r4, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f000 8195 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa5e:	2411      	movs	r4, #17
 800aa60:	e192      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800aa62:	7900      	ldrb	r0, [r0, #4]
 800aa64:	4b28      	ldr	r3, [pc, #160]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800aa66:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800aa6a:	4c28      	ldr	r4, [pc, #160]	; (800ab0c <LoRaMacMibSetRequestConfirm+0x294>)
 800aa6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6e:	4798      	blx	r3
            Radio.Sleep( );
 800aa70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa72:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa74:	2400      	movs	r4, #0
            break;
 800aa76:	e187      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800aa78:	7902      	ldrb	r2, [r0, #4]
 800aa7a:	4b23      	ldr	r3, [pc, #140]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800aa7c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aa80:	2400      	movs	r4, #0
            break;
 800aa82:	e181      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aa84:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aa88:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa8c:	4b1e      	ldr	r3, [pc, #120]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800aa8e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800aa92:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800aa96:	2207      	movs	r2, #7
 800aa98:	a901      	add	r1, sp, #4
 800aa9a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aa9e:	f001 fc51 	bl	800c344 <RegionVerify>
 800aaa2:	b908      	cbnz	r0, 800aaa8 <LoRaMacMibSetRequestConfirm+0x230>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aaa4:	2403      	movs	r4, #3
 800aaa6:	e16f      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800aaa8:	686b      	ldr	r3, [r5, #4]
 800aaaa:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800aaac:	2200      	movs	r2, #0
 800aaae:	a901      	add	r1, sp, #4
 800aab0:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800aab2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aab6:	f001 fc45 	bl	800c344 <RegionVerify>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f000 817d 	beq.w	800adba <LoRaMacMibSetRequestConfirm+0x542>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800aac0:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <LoRaMacMibSetRequestConfirm+0x298>)
 800aac2:	3504      	adds	r5, #4
 800aac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aac8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aacc:	2400      	movs	r4, #0
 800aace:	e15b      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aad0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aad4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aad8:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <LoRaMacMibSetRequestConfirm+0x290>)
 800aada:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800aade:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800aae2:	2207      	movs	r2, #7
 800aae4:	a901      	add	r1, sp, #4
 800aae6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aaea:	f001 fc2b 	bl	800c344 <RegionVerify>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f000 8165 	beq.w	800adbe <LoRaMacMibSetRequestConfirm+0x546>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800aaf4:	4b07      	ldr	r3, [pc, #28]	; (800ab14 <LoRaMacMibSetRequestConfirm+0x29c>)
 800aaf6:	3504      	adds	r5, #4
 800aaf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aafc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab00:	2400      	movs	r4, #0
 800ab02:	e141      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
 800ab04:	2000061c 	.word	0x2000061c
 800ab08:	20008000 	.word	0x20008000
 800ab0c:	08013578 	.word	0x08013578
 800ab10:	2000806c 	.word	0x2000806c
 800ab14:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ab18:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ab1c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab20:	4bb1      	ldr	r3, [pc, #708]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ab22:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ab26:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab2a:	2207      	movs	r2, #7
 800ab2c:	a901      	add	r1, sp, #4
 800ab2e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ab32:	f001 fc07 	bl	800c344 <RegionVerify>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f000 8143 	beq.w	800adc2 <LoRaMacMibSetRequestConfirm+0x54a>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ab3c:	4baa      	ldr	r3, [pc, #680]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ab3e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800ab42:	3504      	adds	r5, #4
 800ab44:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ab48:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab4c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d001      	beq.n	800ab58 <LoRaMacMibSetRequestConfirm+0x2e0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab54:	2400      	movs	r4, #0
 800ab56:	e117      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab58:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800ab5c:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 800ab60:	2c00      	cmp	r4, #0
 800ab62:	f000 8111 	beq.w	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800ab66:	4ba1      	ldr	r3, [pc, #644]	; (800adec <LoRaMacMibSetRequestConfirm+0x574>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800ab6c:	f7fe fd36 	bl	80095dc <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab70:	2400      	movs	r4, #0
 800ab72:	e109      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ab74:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ab78:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab7c:	4b9a      	ldr	r3, [pc, #616]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ab7e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800ab82:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab86:	2207      	movs	r2, #7
 800ab88:	a901      	add	r1, sp, #4
 800ab8a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ab8e:	f001 fbd9 	bl	800c344 <RegionVerify>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f000 8117 	beq.w	800adc6 <LoRaMacMibSetRequestConfirm+0x54e>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ab98:	4b95      	ldr	r3, [pc, #596]	; (800adf0 <LoRaMacMibSetRequestConfirm+0x578>)
 800ab9a:	3504      	adds	r5, #4
 800ab9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aba0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aba4:	2400      	movs	r4, #0
 800aba6:	e0ef      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800aba8:	6843      	ldr	r3, [r0, #4]
 800abaa:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800abac:	2301      	movs	r3, #1
 800abae:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800abb2:	a902      	add	r1, sp, #8
 800abb4:	4b8c      	ldr	r3, [pc, #560]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800abb6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800abba:	f001 fbe1 	bl	800c380 <RegionChanMaskSet>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f000 8103 	beq.w	800adca <LoRaMacMibSetRequestConfirm+0x552>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abc4:	2400      	movs	r4, #0
 800abc6:	e0df      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800abc8:	6843      	ldr	r3, [r0, #4]
 800abca:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800abcc:	2300      	movs	r3, #0
 800abce:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800abd2:	a902      	add	r1, sp, #8
 800abd4:	4b84      	ldr	r3, [pc, #528]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800abd6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800abda:	f001 fbd1 	bl	800c380 <RegionChanMaskSet>
 800abde:	2800      	cmp	r0, #0
 800abe0:	f000 80f5 	beq.w	800adce <LoRaMacMibSetRequestConfirm+0x556>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abe4:	2400      	movs	r4, #0
 800abe6:	e0cf      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800abe8:	7902      	ldrb	r2, [r0, #4]
 800abea:	1e53      	subs	r3, r2, #1
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b0e      	cmp	r3, #14
 800abf0:	f200 80ef 	bhi.w	800add2 <LoRaMacMibSetRequestConfirm+0x55a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800abf4:	4b7c      	ldr	r3, [pc, #496]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800abf6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abfa:	2400      	movs	r4, #0
 800abfc:	e0c4      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800abfe:	6842      	ldr	r2, [r0, #4]
 800ac00:	4b79      	ldr	r3, [pc, #484]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac02:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac04:	2400      	movs	r4, #0
            break;
 800ac06:	e0bf      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ac08:	6842      	ldr	r2, [r0, #4]
 800ac0a:	4b77      	ldr	r3, [pc, #476]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac0c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac0e:	2400      	movs	r4, #0
            break;
 800ac10:	e0ba      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ac12:	6842      	ldr	r2, [r0, #4]
 800ac14:	4b74      	ldr	r3, [pc, #464]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac16:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac18:	2400      	movs	r4, #0
            break;
 800ac1a:	e0b5      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ac1c:	6842      	ldr	r2, [r0, #4]
 800ac1e:	4b72      	ldr	r3, [pc, #456]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac22:	2400      	movs	r4, #0
            break;
 800ac24:	e0b0      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ac26:	6842      	ldr	r2, [r0, #4]
 800ac28:	4b6f      	ldr	r3, [pc, #444]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac2a:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac2c:	2400      	movs	r4, #0
            break;
 800ac2e:	e0ab      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ac30:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ac34:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ac38:	2206      	movs	r2, #6
 800ac3a:	a901      	add	r1, sp, #4
 800ac3c:	4b6a      	ldr	r3, [pc, #424]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac3e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ac42:	f001 fb7f 	bl	800c344 <RegionVerify>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f000 80c5 	beq.w	800add6 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ac4c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ac50:	4b65      	ldr	r3, [pc, #404]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac52:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac56:	2400      	movs	r4, #0
 800ac58:	e096      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ac5a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ac5e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ac62:	4b61      	ldr	r3, [pc, #388]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac64:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ac68:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ac6c:	2205      	movs	r2, #5
 800ac6e:	a901      	add	r1, sp, #4
 800ac70:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ac74:	f001 fb66 	bl	800c344 <RegionVerify>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f000 80ae 	beq.w	800adda <LoRaMacMibSetRequestConfirm+0x562>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ac7e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ac82:	4b59      	ldr	r3, [pc, #356]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac88:	2400      	movs	r4, #0
 800ac8a:	e07d      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ac8c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ac90:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ac94:	220a      	movs	r2, #10
 800ac96:	a901      	add	r1, sp, #4
 800ac98:	4b53      	ldr	r3, [pc, #332]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ac9a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ac9e:	f001 fb51 	bl	800c344 <RegionVerify>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f000 809b 	beq.w	800adde <LoRaMacMibSetRequestConfirm+0x566>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800aca8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800acac:	4b4e      	ldr	r3, [pc, #312]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800acae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acb2:	2400      	movs	r4, #0
 800acb4:	e068      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800acb6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800acba:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800acbe:	2209      	movs	r2, #9
 800acc0:	a901      	add	r1, sp, #4
 800acc2:	4b49      	ldr	r3, [pc, #292]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800acc4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800acc8:	f001 fb3c 	bl	800c344 <RegionVerify>
 800accc:	2800      	cmp	r0, #0
 800acce:	f000 8088 	beq.w	800ade2 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800acd2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800acd6:	4b44      	ldr	r3, [pc, #272]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800acd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acdc:	2400      	movs	r4, #0
 800acde:	e053      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ace0:	6842      	ldr	r2, [r0, #4]
 800ace2:	4b41      	ldr	r3, [pc, #260]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ace4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800ace8:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acea:	2400      	movs	r4, #0
            break;
 800acec:	e04c      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800acee:	7902      	ldrb	r2, [r0, #4]
 800acf0:	4b3d      	ldr	r3, [pc, #244]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800acf2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800acf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acfa:	2400      	movs	r4, #0
            break;
 800acfc:	e044      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800acfe:	6842      	ldr	r2, [r0, #4]
 800ad00:	4b39      	ldr	r3, [pc, #228]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad06:	2400      	movs	r4, #0
            break;
 800ad08:	e03e      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ad0a:	6842      	ldr	r2, [r0, #4]
 800ad0c:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad12:	2400      	movs	r4, #0
            break;
 800ad14:	e038      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800ad16:	f7fe fd69 	bl	80097ec <RestoreNvmData>
 800ad1a:	4604      	mov	r4, r0
            break;
 800ad1c:	e034      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ad1e:	7983      	ldrb	r3, [r0, #6]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d901      	bls.n	800ad28 <LoRaMacMibSetRequestConfirm+0x4b0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad24:	2403      	movs	r4, #3
 800ad26:	e02f      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ad28:	6842      	ldr	r2, [r0, #4]
 800ad2a:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad2c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ad30:	6840      	ldr	r0, [r0, #4]
 800ad32:	f000 ff55 	bl	800bbe0 <LoRaMacCryptoSetLrWanVersion>
 800ad36:	4604      	mov	r4, r0
 800ad38:	b330      	cbz	r0, 800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad3a:	2411      	movs	r4, #17
 800ad3c:	e024      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ad3e:	6842      	ldr	r2, [r0, #4]
 800ad40:	4b29      	ldr	r3, [pc, #164]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad46:	2400      	movs	r4, #0
            break;
 800ad48:	e01e      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ad4a:	8882      	ldrh	r2, [r0, #4]
 800ad4c:	4b26      	ldr	r3, [pc, #152]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad4e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad52:	2400      	movs	r4, #0
            break;
 800ad54:	e018      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ad56:	8882      	ldrh	r2, [r0, #4]
 800ad58:	4b23      	ldr	r3, [pc, #140]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad5a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad5e:	2400      	movs	r4, #0
            break;
 800ad60:	e012      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ad62:	8882      	ldrh	r2, [r0, #4]
 800ad64:	4b20      	ldr	r3, [pc, #128]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad66:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad6a:	2400      	movs	r4, #0
            break;
 800ad6c:	e00c      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ad6e:	8882      	ldrh	r2, [r0, #4]
 800ad70:	4b1d      	ldr	r3, [pc, #116]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x570>)
 800ad72:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad76:	2400      	movs	r4, #0
            break;
 800ad78:	e006      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ad7a:	f000 fab3 	bl	800b2e4 <LoRaMacMibClassBSetRequestConfirm>
 800ad7e:	4604      	mov	r4, r0
            break;
 800ad80:	e002      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ad82:	2403      	movs	r4, #3
 800ad84:	e000      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_BUSY;
 800ad86:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800ad88:	4620      	mov	r0, r4
 800ad8a:	b005      	add	sp, #20
 800ad8c:	bd30      	pop	{r4, r5, pc}
    switch( mibSet->Type )
 800ad8e:	2418      	movs	r4, #24
 800ad90:	e7fa      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad92:	2403      	movs	r4, #3
 800ad94:	e7f8      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad96:	2403      	movs	r4, #3
 800ad98:	e7f6      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad9a:	2403      	movs	r4, #3
 800ad9c:	e7f4      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad9e:	2403      	movs	r4, #3
 800ada0:	e7f2      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ada2:	2403      	movs	r4, #3
 800ada4:	e7f0      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ada6:	2403      	movs	r4, #3
 800ada8:	e7ee      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adaa:	2403      	movs	r4, #3
 800adac:	e7ec      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adae:	2403      	movs	r4, #3
 800adb0:	e7ea      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adb2:	2403      	movs	r4, #3
 800adb4:	e7e8      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adb6:	2403      	movs	r4, #3
 800adb8:	e7e6      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adba:	2403      	movs	r4, #3
 800adbc:	e7e4      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adbe:	2403      	movs	r4, #3
 800adc0:	e7e2      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adc2:	2403      	movs	r4, #3
 800adc4:	e7e0      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adc6:	2403      	movs	r4, #3
 800adc8:	e7de      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adca:	2403      	movs	r4, #3
 800adcc:	e7dc      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adce:	2403      	movs	r4, #3
 800add0:	e7da      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add2:	2403      	movs	r4, #3
 800add4:	e7d8      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add6:	2403      	movs	r4, #3
 800add8:	e7d6      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adda:	2403      	movs	r4, #3
 800addc:	e7d4      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adde:	2403      	movs	r4, #3
 800ade0:	e7d2      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ade2:	2403      	movs	r4, #3
 800ade4:	e7d0      	b.n	800ad88 <LoRaMacMibSetRequestConfirm+0x510>
 800ade6:	bf00      	nop
 800ade8:	20008000 	.word	0x20008000
 800adec:	08013578 	.word	0x08013578
 800adf0:	200080bc 	.word	0x200080bc

0800adf4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	b084      	sub	sp, #16
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800adf8:	2300      	movs	r3, #0
 800adfa:	f8ad 3008 	strh.w	r3, [sp, #8]

    if( mlmeRequest == NULL )
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f000 80d0 	beq.w	800afa4 <LoRaMacMlmeRequest+0x1b0>
 800ae04:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ae06:	f7ff f8d7 	bl	8009fb8 <LoRaMacIsBusy>
 800ae0a:	b118      	cbz	r0, 800ae14 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800ae0c:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800ae0e:	4620      	mov	r0, r4
 800ae10:	b004      	add	sp, #16
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ae14:	f000 fd18 	bl	800b848 <LoRaMacConfirmQueueIsFull>
 800ae18:	b108      	cbz	r0, 800ae1e <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800ae1a:	2401      	movs	r4, #1
 800ae1c:	e7f7      	b.n	800ae0e <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ae1e:	f000 fd0d 	bl	800b83c <LoRaMacConfirmQueueGetCnt>
 800ae22:	b1f8      	cbz	r0, 800ae64 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae24:	4b60      	ldr	r3, [pc, #384]	; (800afa8 <LoRaMacMlmeRequest+0x1b4>)
 800ae26:	2101      	movs	r1, #1
 800ae28:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ae2c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800ae30:	f042 0204 	orr.w	r2, r2, #4
 800ae34:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800ae38:	782b      	ldrb	r3, [r5, #0]
 800ae3a:	f88d 300c 	strb.w	r3, [sp, #12]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae3e:	f88d 100d 	strb.w	r1, [sp, #13]
    queueElement.RestrictCommonReadyToHandle = false;
 800ae42:	2200      	movs	r2, #0
 800ae44:	f88d 200f 	strb.w	r2, [sp, #15]
    switch( mlmeRequest->Type )
 800ae48:	461c      	mov	r4, r3
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	2b0d      	cmp	r3, #13
 800ae4e:	f200 808f 	bhi.w	800af70 <LoRaMacMlmeRequest+0x17c>
 800ae52:	e8df f003 	tbb	[pc, r3]
 800ae56:	8d0d      	.short	0x8d0d
 800ae58:	42388d8d 	.word	0x42388d8d
 800ae5c:	508d8d47 	.word	0x508d8d47
 800ae60:	755f7e8d 	.word	0x755f7e8d
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ae64:	2214      	movs	r2, #20
 800ae66:	2100      	movs	r1, #0
 800ae68:	4850      	ldr	r0, [pc, #320]	; (800afac <LoRaMacMlmeRequest+0x1b8>)
 800ae6a:	f004 fbb2 	bl	800f5d2 <memset1>
 800ae6e:	e7d9      	b.n	800ae24 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ae70:	4b4d      	ldr	r3, [pc, #308]	; (800afa8 <LoRaMacMlmeRequest+0x1b4>)
 800ae72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ae76:	f013 0f20 	tst.w	r3, #32
 800ae7a:	d1c8      	bne.n	800ae0e <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	f7fe fdab 	bl	80099d8 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ae82:	4c4b      	ldr	r4, [pc, #300]	; (800afb0 <LoRaMacMlmeRequest+0x1bc>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ae8a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ae8e:	f001 fb15 	bl	800c4bc <RegionAlternateDr>
 800ae92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800ae96:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800ae9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ae9e:	2307      	movs	r3, #7
 800aea0:	f88d 300d 	strb.w	r3, [sp, #13]
            status = SendReJoinReq( JOIN_REQ );
 800aea4:	20ff      	movs	r0, #255	; 0xff
 800aea6:	f7fe feeb 	bl	8009c80 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800aeaa:	4604      	mov	r4, r0
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d060      	beq.n	800af72 <LoRaMacMlmeRequest+0x17e>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800aeb0:	4e3f      	ldr	r6, [pc, #252]	; (800afb0 <LoRaMacMlmeRequest+0x1bc>)
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800aeb8:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800aebc:	f001 fafe 	bl	800c4bc <RegionAlternateDr>
 800aec0:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800aec4:	e055      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800aec6:	2200      	movs	r2, #0
 800aec8:	a902      	add	r1, sp, #8
 800aeca:	2002      	movs	r0, #2
 800aecc:	f000 faaa 	bl	800b424 <LoRaMacCommandsAddCmd>
 800aed0:	4604      	mov	r4, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d04d      	beq.n	800af72 <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aed6:	2413      	movs	r4, #19
 800aed8:	e04b      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800aeda:	88a8      	ldrh	r0, [r5, #4]
 800aedc:	f7fe fef2 	bl	8009cc4 <SetTxContinuousWave>
 800aee0:	4604      	mov	r4, r0
            break;
 800aee2:	e046      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800aee4:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800aee8:	b2d2      	uxtb	r2, r2
 800aeea:	68a9      	ldr	r1, [r5, #8]
 800aeec:	88a8      	ldrh	r0, [r5, #4]
 800aeee:	f7fc ff53 	bl	8007d98 <SetTxContinuousWave1>
 800aef2:	4604      	mov	r4, r0
            break;
 800aef4:	e03d      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800aef6:	a901      	add	r1, sp, #4
 800aef8:	200d      	movs	r0, #13
 800aefa:	f000 fadf 	bl	800b4bc <LoRaMacCommandsGetCmd>
 800aefe:	4604      	mov	r4, r0
 800af00:	b3b8      	cbz	r0, 800af72 <LoRaMacMlmeRequest+0x17e>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800af02:	2200      	movs	r2, #0
 800af04:	a902      	add	r1, sp, #8
 800af06:	200d      	movs	r0, #13
 800af08:	f000 fa8c 	bl	800b424 <LoRaMacCommandsAddCmd>
 800af0c:	4604      	mov	r4, r0
 800af0e:	b380      	cbz	r0, 800af72 <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af10:	2413      	movs	r4, #19
            break;
 800af12:	e02e      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800af14:	4b26      	ldr	r3, [pc, #152]	; (800afb0 <LoRaMacMlmeRequest+0x1bc>)
 800af16:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800af1a:	b10b      	cbz	r3, 800af20 <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800af1c:	2402      	movs	r4, #2
 800af1e:	e028      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800af20:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800af22:	f004 0007 	and.w	r0, r4, #7
 800af26:	f000 f9d6 	bl	800b2d6 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800af2a:	f88d 4008 	strb.w	r4, [sp, #8]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800af2e:	2201      	movs	r2, #1
 800af30:	a902      	add	r1, sp, #8
 800af32:	2010      	movs	r0, #16
 800af34:	f000 fa76 	bl	800b424 <LoRaMacCommandsAddCmd>
 800af38:	4604      	mov	r4, r0
 800af3a:	b1d0      	cbz	r0, 800af72 <LoRaMacMlmeRequest+0x17e>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af3c:	2413      	movs	r4, #19
 800af3e:	e018      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800af40:	2200      	movs	r2, #0
 800af42:	a902      	add	r1, sp, #8
 800af44:	2012      	movs	r0, #18
 800af46:	f000 fa6d 	bl	800b424 <LoRaMacCommandsAddCmd>
 800af4a:	4604      	mov	r4, r0
 800af4c:	b188      	cbz	r0, 800af72 <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af4e:	2413      	movs	r4, #19
 800af50:	e00f      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
            queueElement.RestrictCommonReadyToHandle = true;
 800af52:	2301      	movs	r3, #1
 800af54:	f88d 300f 	strb.w	r3, [sp, #15]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800af58:	f000 f9ae 	bl	800b2b8 <LoRaMacClassBIsAcquisitionInProgress>
 800af5c:	b108      	cbz	r0, 800af62 <LoRaMacMlmeRequest+0x16e>
                status = LORAMAC_STATUS_BUSY;
 800af5e:	2401      	movs	r4, #1
 800af60:	e007      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800af62:	f000 f9a6 	bl	800b2b2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800af66:	2000      	movs	r0, #0
 800af68:	f000 f9a8 	bl	800b2bc <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800af6c:	2400      	movs	r4, #0
 800af6e:	e000      	b.n	800af72 <LoRaMacMlmeRequest+0x17e>
    switch( mlmeRequest->Type )
 800af70:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800af72:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <LoRaMacMlmeRequest+0x1b4>)
 800af74:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800af78:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800af7a:	b17c      	cbz	r4, 800af9c <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800af7c:	f000 fc5e 	bl	800b83c <LoRaMacConfirmQueueGetCnt>
 800af80:	2800      	cmp	r0, #0
 800af82:	f47f af44 	bne.w	800ae0e <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <LoRaMacMlmeRequest+0x1b4>)
 800af88:	2100      	movs	r1, #0
 800af8a:	f883 1410 	strb.w	r1, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800af8e:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800af92:	f361 0282 	bfi	r2, r1, #2, #1
 800af96:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800af9a:	e738      	b.n	800ae0e <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800af9c:	a803      	add	r0, sp, #12
 800af9e:	f000 fb83 	bl	800b6a8 <LoRaMacConfirmQueueAdd>
 800afa2:	e734      	b.n	800ae0e <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800afa4:	2403      	movs	r4, #3
 800afa6:	e732      	b.n	800ae0e <LoRaMacMlmeRequest+0x1a>
 800afa8:	2000061c 	.word	0x2000061c
 800afac:	20000a64 	.word	0x20000a64
 800afb0:	20008000 	.word	0x20008000

0800afb4 <LoRaMacMcpsRequest>:
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f000 80b0 	beq.w	800b11a <LoRaMacMcpsRequest+0x166>
{
 800afba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	460d      	mov	r5, r1
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800afc8:	f7fe fff6 	bl	8009fb8 <LoRaMacIsBusy>
 800afcc:	4606      	mov	r6, r0
 800afce:	b118      	cbz	r0, 800afd8 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800afd0:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800afd2:	b008      	add	sp, #32
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800afd8:	4641      	mov	r1, r8
 800afda:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800afde:	4f51      	ldr	r7, [pc, #324]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800afe0:	2214      	movs	r2, #20
 800afe2:	f207 4034 	addw	r0, r7, #1076	; 0x434
 800afe6:	f004 faf4 	bl	800f5d2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
    MacCtx.AckTimeoutRetriesCounter = 1;
 800aff0:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
    switch( mcpsRequest->Type )
 800aff4:	7823      	ldrb	r3, [r4, #0]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d059      	beq.n	800b0ae <LoRaMacMcpsRequest+0xfa>
 800affa:	2b03      	cmp	r3, #3
 800affc:	d06f      	beq.n	800b0de <LoRaMacMcpsRequest+0x12a>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d042      	beq.n	800b088 <LoRaMacMcpsRequest+0xd4>
 800b002:	2700      	movs	r7, #0
 800b004:	46ba      	mov	sl, r7
 800b006:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b008:	2302      	movs	r3, #2
 800b00a:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b00e:	4b46      	ldr	r3, [pc, #280]	; (800b128 <LoRaMacMcpsRequest+0x174>)
 800b010:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b014:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b018:	a906      	add	r1, sp, #24
 800b01a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b01e:	f001 f95d 	bl	800c2dc <RegionGetPhyParam>
 800b022:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b024:	b240      	sxtb	r0, r0
 800b026:	42b8      	cmp	r0, r7
 800b028:	bfb8      	it	lt
 800b02a:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800b02c:	2e00      	cmp	r6, #0
 800b02e:	d06e      	beq.n	800b10e <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800b030:	4b3d      	ldr	r3, [pc, #244]	; (800b128 <LoRaMacMcpsRequest+0x174>)
 800b032:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b036:	b99b      	cbnz	r3, 800b060 <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800b038:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b03c:	4b3a      	ldr	r3, [pc, #232]	; (800b128 <LoRaMacMcpsRequest+0x174>)
 800b03e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b042:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b046:	2205      	movs	r2, #5
 800b048:	a903      	add	r1, sp, #12
 800b04a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b04e:	f001 f979 	bl	800c344 <RegionVerify>
 800b052:	2800      	cmp	r0, #0
 800b054:	d063      	beq.n	800b11e <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b056:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800b05a:	4b33      	ldr	r3, [pc, #204]	; (800b128 <LoRaMacMcpsRequest+0x174>)
 800b05c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800b060:	9500      	str	r5, [sp, #0]
 800b062:	4643      	mov	r3, r8
 800b064:	4652      	mov	r2, sl
 800b066:	4649      	mov	r1, r9
 800b068:	a804      	add	r0, sp, #16
 800b06a:	f7fe ff19 	bl	8009ea0 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b06e:	2800      	cmp	r0, #0
 800b070:	d148      	bne.n	800b104 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b072:	7822      	ldrb	r2, [r4, #0]
 800b074:	4b2b      	ldr	r3, [pc, #172]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800b076:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b07a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800b07e:	f042 0201 	orr.w	r2, r2, #1
 800b082:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800b086:	e043      	b.n	800b110 <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800b088:	2601      	movs	r6, #1
 800b08a:	f887 640d 	strb.w	r6, [r7, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b08e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b092:	2202      	movs	r2, #2
 800b094:	f362 1347 	bfi	r3, r2, #5, #3
 800b098:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800b09c:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800b0a0:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800b0a4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800b0a8:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800b0ac:	e7ac      	b.n	800b008 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b0ae:	7be3      	ldrb	r3, [r4, #15]
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	bf28      	it	cs
 800b0b4:	2308      	movcs	r3, #8
 800b0b6:	4a1b      	ldr	r2, [pc, #108]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800b0b8:	f882 340d 	strb.w	r3, [r2, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b0bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b0c0:	2204      	movs	r2, #4
 800b0c2:	f362 1347 	bfi	r3, r2, #5, #3
 800b0c6:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b0ca:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b0ce:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b0d2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b0d6:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800b0da:	2601      	movs	r6, #1
            break;
 800b0dc:	e794      	b.n	800b008 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800b0de:	2601      	movs	r6, #1
 800b0e0:	4b10      	ldr	r3, [pc, #64]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800b0e2:	f883 640d 	strb.w	r6, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b0e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b0ea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b0ee:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b0f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b0f6:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b0fa:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800b0fe:	f04f 0900 	mov.w	r9, #0
            break;
 800b102:	e781      	b.n	800b008 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800b104:	4b07      	ldr	r3, [pc, #28]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800b10c:	e000      	b.n	800b110 <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b10e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b110:	4b04      	ldr	r3, [pc, #16]	; (800b124 <LoRaMacMcpsRequest+0x170>)
 800b112:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800b116:	6123      	str	r3, [r4, #16]
    return status;
 800b118:	e75b      	b.n	800afd2 <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b11a:	2003      	movs	r0, #3
}
 800b11c:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b11e:	2003      	movs	r0, #3
 800b120:	e757      	b.n	800afd2 <LoRaMacMcpsRequest+0x1e>
 800b122:	bf00      	nop
 800b124:	2000061c 	.word	0x2000061c
 800b128:	20008000 	.word	0x20008000

0800b12c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b12c:	b510      	push	{r4, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b132:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b136:	220f      	movs	r2, #15
 800b138:	a901      	add	r1, sp, #4
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b13c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b140:	f001 f900 	bl	800c344 <RegionVerify>
 800b144:	b148      	cbz	r0, 800b15a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <LoRaMacTestSetDutyCycleOn+0x34>)
 800b148:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b14c:	4a05      	ldr	r2, [pc, #20]	; (800b164 <LoRaMacTestSetDutyCycleOn+0x38>)
 800b14e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b152:	f043 0320 	orr.w	r3, r3, #32
 800b156:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800b15a:	b002      	add	sp, #8
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	20008000 	.word	0x20008000
 800b164:	2000061c 	.word	0x2000061c

0800b168 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b168:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b16a:	f7ff f975 	bl	800a458 <LoRaMacStop>
 800b16e:	b110      	cbz	r0, 800b176 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b170:	2401      	movs	r4, #1
    }
}
 800b172:	4620      	mov	r0, r4
 800b174:	bd38      	pop	{r3, r4, r5, pc}
 800b176:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b178:	4d0c      	ldr	r5, [pc, #48]	; (800b1ac <LoRaMacDeInitialization+0x44>)
 800b17a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b17e:	f007 f837 	bl	80121f0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b182:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b186:	f007 f833 	bl	80121f0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b18a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b18e:	f007 f82f 	bl	80121f0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800b192:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800b196:	f007 f82b 	bl	80121f0 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b19a:	f000 f89d 	bl	800b2d8 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f7fe fc1a 	bl	80099d8 <ResetMacParameters>
        Radio.Sleep( );
 800b1a4:	4b02      	ldr	r3, [pc, #8]	; (800b1b0 <LoRaMacDeInitialization+0x48>)
 800b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a8:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b1aa:	e7e2      	b.n	800b172 <LoRaMacDeInitialization+0xa>
 800b1ac:	2000061c 	.word	0x2000061c
 800b1b0:	08013578 	.word	0x08013578

0800b1b4 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b8:	b089      	sub	sp, #36	; 0x24
 800b1ba:	460f      	mov	r7, r1
 800b1bc:	4616      	mov	r6, r2
 800b1be:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b1c0:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800b1c4:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b1c8:	6883      	ldr	r3, [r0, #8]
 800b1ca:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800b1cc:	f890 8005 	ldrb.w	r8, [r0, #5]
 800b1d0:	f1b8 0f00 	cmp.w	r8, #0
 800b1d4:	d107      	bne.n	800b1e6 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800b1d6:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b1da:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800b1de:	4640      	mov	r0, r8
 800b1e0:	b009      	add	sp, #36	; 0x24
 800b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e6:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b1ee:	7c83      	ldrb	r3, [r0, #18]
 800b1f0:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b1f4:	a906      	add	r1, sp, #24
 800b1f6:	7cc0      	ldrb	r0, [r0, #19]
 800b1f8:	f001 f870 	bl	800c2dc <RegionGetPhyParam>
 800b1fc:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800b1fe:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800b202:	464a      	mov	r2, r9
 800b204:	45d1      	cmp	r9, sl
 800b206:	bfb8      	it	lt
 800b208:	4652      	movlt	r2, sl
 800b20a:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800b20c:	45d1      	cmp	r9, sl
 800b20e:	dc04      	bgt.n	800b21a <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800b214:	4691      	mov	r9, r2
            adrAckReq = false;
 800b216:	4698      	mov	r8, r3
 800b218:	e7dd      	b.n	800b1d6 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b21a:	68a2      	ldr	r2, [r4, #8]
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d201      	bcs.n	800b226 <CalcNextV10X+0x72>
                adrAckReq = false;
 800b222:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b226:	89e1      	ldrh	r1, [r4, #14]
 800b228:	440b      	add	r3, r1
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d202      	bcs.n	800b234 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800b22e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b232:	e7d0      	b.n	800b1d6 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b234:	2308      	movs	r3, #8
 800b236:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b23a:	a906      	add	r1, sp, #24
 800b23c:	7ce0      	ldrb	r0, [r4, #19]
 800b23e:	f001 f84d 	bl	800c2dc <RegionGetPhyParam>
 800b242:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800b244:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b248:	68a3      	ldr	r3, [r4, #8]
 800b24a:	89e2      	ldrh	r2, [r4, #14]
 800b24c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b250:	fb02 3311 	mls	r3, r2, r1, r3
 800b254:	2b01      	cmp	r3, #1
 800b256:	d002      	beq.n	800b25e <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800b258:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b25c:	e7bb      	b.n	800b1d6 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b25e:	2322      	movs	r3, #34	; 0x22
 800b260:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b26a:	7ca3      	ldrb	r3, [r4, #18]
 800b26c:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b270:	a906      	add	r1, sp, #24
 800b272:	7ce0      	ldrb	r0, [r4, #19]
 800b274:	f001 f832 	bl	800c2dc <RegionGetPhyParam>
 800b278:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800b27a:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800b27e:	45ca      	cmp	sl, r9
 800b280:	d1a9      	bne.n	800b1d6 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800b282:	f894 8004 	ldrb.w	r8, [r4, #4]
 800b286:	f1b8 0f00 	cmp.w	r8, #0
 800b28a:	d0a4      	beq.n	800b1d6 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b28c:	2302      	movs	r3, #2
 800b28e:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800b292:	a902      	add	r1, sp, #8
 800b294:	7ce0      	ldrb	r0, [r4, #19]
 800b296:	f001 f847 	bl	800c328 <RegionInitDefaults>
                        adrAckReq = false;
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	e79a      	b.n	800b1d6 <CalcNextV10X+0x22>

0800b2a0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b2a0:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800b2a2:	7884      	ldrb	r4, [r0, #2]
 800b2a4:	b10c      	cbz	r4, 800b2aa <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b2a6:	2000      	movs	r0, #0
}
 800b2a8:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800b2aa:	f7ff ff83 	bl	800b1b4 <CalcNextV10X>
 800b2ae:	e7fb      	b.n	800b2a8 <LoRaMacAdrCalcNext+0x8>

0800b2b0 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2b0:	4770      	bx	lr

0800b2b2 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2b2:	4770      	bx	lr

0800b2b4 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2b4:	4770      	bx	lr

0800b2b6 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2b6:	4770      	bx	lr

0800b2b8 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	4770      	bx	lr

0800b2bc <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2bc:	4770      	bx	lr

0800b2be <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2be:	4770      	bx	lr

0800b2c0 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2c0:	4770      	bx	lr

0800b2c2 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	4770      	bx	lr

0800b2c6 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	4770      	bx	lr

0800b2ca <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	4770      	bx	lr

0800b2ce <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	4770      	bx	lr

0800b2d2 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	4770      	bx	lr

0800b2d6 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2d6:	4770      	bx	lr

0800b2d8 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2d8:	4770      	bx	lr

0800b2da <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2da:	4770      	bx	lr

0800b2dc <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2dc:	2002      	movs	r0, #2
 800b2de:	4770      	bx	lr

0800b2e0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2e0:	2002      	movs	r0, #2
 800b2e2:	4770      	bx	lr

0800b2e4 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2e4:	2002      	movs	r0, #2
 800b2e6:	4770      	bx	lr

0800b2e8 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2e8:	4770      	bx	lr

0800b2ea <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	4770      	bx	lr

0800b2ee <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2ee:	4770      	bx	lr

0800b2f0 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2f0:	4770      	bx	lr

0800b2f2 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	4770      	bx	lr

0800b2f6 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	4770      	bx	lr

0800b2fa <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2fa:	4770      	bx	lr

0800b2fc <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b2fc:	4770      	bx	lr

0800b2fe <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b2fe:	2300      	movs	r3, #0
 800b300:	2b0f      	cmp	r3, #15
 800b302:	d804      	bhi.n	800b30e <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b304:	5cc2      	ldrb	r2, [r0, r3]
 800b306:	b922      	cbnz	r2, 800b312 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b308:	3301      	adds	r3, #1
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	e7f8      	b.n	800b300 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b30e:	2001      	movs	r0, #1
 800b310:	4770      	bx	lr
            return false;
 800b312:	2000      	movs	r0, #0
}
 800b314:	4770      	bx	lr
	...

0800b318 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b318:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b31a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b31c:	0125      	lsls	r5, r4, #4
 800b31e:	f105 0308 	add.w	r3, r5, #8
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <MallocNewMacCommandSlot+0x24>)
 800b324:	441d      	add	r5, r3
 800b326:	4628      	mov	r0, r5
 800b328:	f7ff ffe9 	bl	800b2fe <IsSlotFree>
 800b32c:	b920      	cbnz	r0, 800b338 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800b32e:	3401      	adds	r4, #1
 800b330:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b332:	2c0f      	cmp	r4, #15
 800b334:	d1f2      	bne.n	800b31c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b336:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b338:	4628      	mov	r0, r5
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000b38 	.word	0x20000b38

0800b340 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b340:	b120      	cbz	r0, 800b34c <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b342:	2200      	movs	r2, #0
 800b344:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b346:	6042      	str	r2, [r0, #4]

    return true;
 800b348:	2001      	movs	r0, #1
 800b34a:	4770      	bx	lr
        return false;
 800b34c:	2000      	movs	r0, #0
}
 800b34e:	4770      	bx	lr

0800b350 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b350:	4603      	mov	r3, r0
 800b352:	b160      	cbz	r0, 800b36e <LinkedListAdd+0x1e>
 800b354:	b169      	cbz	r1, 800b372 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b356:	6802      	ldr	r2, [r0, #0]
 800b358:	b13a      	cbz	r2, 800b36a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	b102      	cbz	r2, 800b360 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b35e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b360:	2200      	movs	r2, #0
 800b362:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b364:	6059      	str	r1, [r3, #4]

    return true;
 800b366:	2001      	movs	r0, #1
 800b368:	4770      	bx	lr
        list->First = element;
 800b36a:	6001      	str	r1, [r0, #0]
 800b36c:	e7f5      	b.n	800b35a <LinkedListAdd+0xa>
        return false;
 800b36e:	2000      	movs	r0, #0
 800b370:	4770      	bx	lr
 800b372:	2000      	movs	r0, #0
}
 800b374:	4770      	bx	lr

0800b376 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b376:	b160      	cbz	r0, 800b392 <LinkedListGetPrevious+0x1c>
 800b378:	b161      	cbz	r1, 800b394 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b37a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b37c:	4281      	cmp	r1, r0
 800b37e:	d102      	bne.n	800b386 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b380:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b382:	4770      	bx	lr
            curElement = curElement->Next;
 800b384:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b386:	2800      	cmp	r0, #0
 800b388:	d0fb      	beq.n	800b382 <LinkedListGetPrevious+0xc>
 800b38a:	6803      	ldr	r3, [r0, #0]
 800b38c:	428b      	cmp	r3, r1
 800b38e:	d1f9      	bne.n	800b384 <LinkedListGetPrevious+0xe>
 800b390:	4770      	bx	lr
 800b392:	4770      	bx	lr
        return NULL;
 800b394:	4608      	mov	r0, r1
 800b396:	4770      	bx	lr

0800b398 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b398:	b1b8      	cbz	r0, 800b3ca <LinkedListRemove+0x32>
{
 800b39a:	b538      	push	{r3, r4, r5, lr}
 800b39c:	460c      	mov	r4, r1
 800b39e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b3a0:	b1a9      	cbz	r1, 800b3ce <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b3a2:	f7ff ffe8 	bl	800b376 <LinkedListGetPrevious>

    if( list->First == element )
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	d009      	beq.n	800b3c0 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b3ac:	686b      	ldr	r3, [r5, #4]
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	d009      	beq.n	800b3c6 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b3b2:	b108      	cbz	r0, 800b3b8 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	6023      	str	r3, [r4, #0]

    return true;
 800b3bc:	2001      	movs	r0, #1
}
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	e7f2      	b.n	800b3ac <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b3c6:	6068      	str	r0, [r5, #4]
 800b3c8:	e7f3      	b.n	800b3b2 <LinkedListRemove+0x1a>
        return false;
 800b3ca:	2000      	movs	r0, #0
}
 800b3cc:	4770      	bx	lr
        return false;
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e7f5      	b.n	800b3be <LinkedListRemove+0x26>

0800b3d2 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b3d2:	2805      	cmp	r0, #5
 800b3d4:	d006      	beq.n	800b3e4 <IsSticky+0x12>
 800b3d6:	d307      	bcc.n	800b3e8 <IsSticky+0x16>
 800b3d8:	3808      	subs	r0, #8
 800b3da:	b2c0      	uxtb	r0, r0
 800b3dc:	2802      	cmp	r0, #2
 800b3de:	d905      	bls.n	800b3ec <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	4770      	bx	lr
    switch( cid )
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	4770      	bx	lr
            return false;
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	4770      	bx	lr
    switch( cid )
 800b3ec:	2001      	movs	r0, #1
    }
}
 800b3ee:	4770      	bx	lr

0800b3f0 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	4770      	bx	lr

0800b3f4 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b3f4:	b130      	cbz	r0, 800b404 <FreeMacCommandSlot+0x10>
{
 800b3f6:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b3f8:	2210      	movs	r2, #16
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	f004 f8e9 	bl	800f5d2 <memset1>
    return true;
 800b400:	2001      	movs	r0, #1
}
 800b402:	bd08      	pop	{r3, pc}
        return false;
 800b404:	2000      	movs	r0, #0
}
 800b406:	4770      	bx	lr

0800b408 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b408:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b40a:	4c05      	ldr	r4, [pc, #20]	; (800b420 <LoRaMacCommandsInit+0x18>)
 800b40c:	22fc      	movs	r2, #252	; 0xfc
 800b40e:	2100      	movs	r1, #0
 800b410:	4620      	mov	r0, r4
 800b412:	f004 f8de 	bl	800f5d2 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b416:	4620      	mov	r0, r4
 800b418:	f7ff ff92 	bl	800b340 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b41c:	2000      	movs	r0, #0
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	20000b38 	.word	0x20000b38

0800b424 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b424:	b321      	cbz	r1, 800b470 <LoRaMacCommandsAddCmd+0x4c>
{
 800b426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b428:	4605      	mov	r5, r0
 800b42a:	4614      	mov	r4, r2
 800b42c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b42e:	f7ff ff73 	bl	800b318 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b432:	4606      	mov	r6, r0
 800b434:	b1f0      	cbz	r0, 800b474 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b436:	4601      	mov	r1, r0
 800b438:	4810      	ldr	r0, [pc, #64]	; (800b47c <LoRaMacCommandsAddCmd+0x58>)
 800b43a:	f7ff ff89 	bl	800b350 <LinkedListAdd>
 800b43e:	b1d8      	cbz	r0, 800b478 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b440:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b442:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b444:	b2a2      	uxth	r2, r4
 800b446:	4639      	mov	r1, r7
 800b448:	1d70      	adds	r0, r6, #5
 800b44a:	f004 f8aa 	bl	800f5a2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b44e:	4628      	mov	r0, r5
 800b450:	f7ff ffbf 	bl	800b3d2 <IsSticky>
 800b454:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800b456:	4628      	mov	r0, r5
 800b458:	f7ff ffca 	bl	800b3f0 <IsConfirmationRequired>
 800b45c:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b45e:	4b07      	ldr	r3, [pc, #28]	; (800b47c <LoRaMacCommandsAddCmd+0x58>)
 800b460:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b464:	4414      	add	r4, r2
 800b466:	3401      	adds	r4, #1
 800b468:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800b46c:	2000      	movs	r0, #0
}
 800b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b470:	2001      	movs	r0, #1
}
 800b472:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b474:	2002      	movs	r0, #2
 800b476:	e7fa      	b.n	800b46e <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800b478:	2005      	movs	r0, #5
 800b47a:	e7f8      	b.n	800b46e <LoRaMacCommandsAddCmd+0x4a>
 800b47c:	20000b38 	.word	0x20000b38

0800b480 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b480:	b1a0      	cbz	r0, 800b4ac <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b482:	b510      	push	{r4, lr}
 800b484:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b486:	4601      	mov	r1, r0
 800b488:	480b      	ldr	r0, [pc, #44]	; (800b4b8 <LoRaMacCommandsRemoveCmd+0x38>)
 800b48a:	f7ff ff85 	bl	800b398 <LinkedListRemove>
 800b48e:	b178      	cbz	r0, 800b4b0 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b490:	68a1      	ldr	r1, [r4, #8]
 800b492:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <LoRaMacCommandsRemoveCmd+0x38>)
 800b494:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800b498:	1a5b      	subs	r3, r3, r1
 800b49a:	3b01      	subs	r3, #1
 800b49c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f7ff ffa7 	bl	800b3f4 <FreeMacCommandSlot>
 800b4a6:	b128      	cbz	r0, 800b4b4 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b4a8:	2000      	movs	r0, #0
}
 800b4aa:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b4ac:	2001      	movs	r0, #1
}
 800b4ae:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b4b0:	2003      	movs	r0, #3
 800b4b2:	e7fa      	b.n	800b4aa <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b4b4:	2005      	movs	r0, #5
 800b4b6:	e7f8      	b.n	800b4aa <LoRaMacCommandsRemoveCmd+0x2a>
 800b4b8:	20000b38 	.word	0x20000b38

0800b4bc <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <LoRaMacCommandsGetCmd+0x1c>)
 800b4be:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b4c0:	e000      	b.n	800b4c4 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800b4c2:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800b4c4:	b113      	cbz	r3, 800b4cc <LoRaMacCommandsGetCmd+0x10>
 800b4c6:	791a      	ldrb	r2, [r3, #4]
 800b4c8:	4282      	cmp	r2, r0
 800b4ca:	d1fa      	bne.n	800b4c2 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800b4cc:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800b4ce:	b10b      	cbz	r3, 800b4d4 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b4d4:	2003      	movs	r0, #3
}
 800b4d6:	4770      	bx	lr
 800b4d8:	20000b38 	.word	0x20000b38

0800b4dc <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b4de:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b4e0:	b120      	cbz	r0, 800b4ec <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b4e2:	7b03      	ldrb	r3, [r0, #12]
 800b4e4:	b11b      	cbz	r3, 800b4ee <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b4e6:	6800      	ldr	r0, [r0, #0]
 800b4e8:	e7fa      	b.n	800b4e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b4ea:	bd10      	pop	{r4, pc}
 800b4ec:	4770      	bx	lr
{
 800b4ee:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b4f0:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b4f2:	f7ff ffc5 	bl	800b480 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b4f6:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0f6      	beq.n	800b4ea <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b4fc:	7b03      	ldrb	r3, [r0, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0f6      	beq.n	800b4f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b502:	6800      	ldr	r0, [r0, #0]
 800b504:	e7f8      	b.n	800b4f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b506:	bf00      	nop
 800b508:	20000b38 	.word	0x20000b38

0800b50c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b50c:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b50e:	4b0b      	ldr	r3, [pc, #44]	; (800b53c <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800b510:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b512:	e000      	b.n	800b516 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b514:	4634      	mov	r4, r6
    while( curElement != NULL )
 800b516:	b17c      	cbz	r4, 800b538 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800b518:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b51a:	7925      	ldrb	r5, [r4, #4]
 800b51c:	4628      	mov	r0, r5
 800b51e:	f7ff ff58 	bl	800b3d2 <IsSticky>
 800b522:	2800      	cmp	r0, #0
 800b524:	d0f6      	beq.n	800b514 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800b526:	4628      	mov	r0, r5
 800b528:	f7ff ff62 	bl	800b3f0 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d1f1      	bne.n	800b514 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b530:	4620      	mov	r0, r4
 800b532:	f7ff ffa5 	bl	800b480 <LoRaMacCommandsRemoveCmd>
 800b536:	e7ed      	b.n	800b514 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b538:	2000      	movs	r0, #0
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	20000b38 	.word	0x20000b38

0800b540 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b540:	b128      	cbz	r0, 800b54e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b542:	4a04      	ldr	r2, [pc, #16]	; (800b554 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b544:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800b548:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b54e:	2001      	movs	r0, #1
}
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	20000b38 	.word	0x20000b38

0800b558 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b55c:	4b16      	ldr	r3, [pc, #88]	; (800b5b8 <LoRaMacCommandsSerializeCmds+0x60>)
 800b55e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b560:	b32a      	cbz	r2, 800b5ae <LoRaMacCommandsSerializeCmds+0x56>
 800b562:	4607      	mov	r7, r0
 800b564:	4688      	mov	r8, r1
 800b566:	4616      	mov	r6, r2
 800b568:	b319      	cbz	r1, 800b5b2 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b56a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b56c:	b194      	cbz	r4, 800b594 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b56e:	1a7a      	subs	r2, r7, r1
 800b570:	68a3      	ldr	r3, [r4, #8]
 800b572:	3301      	adds	r3, #1
 800b574:	429a      	cmp	r2, r3
 800b576:	d30d      	bcc.n	800b594 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b578:	1c4d      	adds	r5, r1, #1
 800b57a:	b2ed      	uxtb	r5, r5
 800b57c:	7923      	ldrb	r3, [r4, #4]
 800b57e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b580:	8922      	ldrh	r2, [r4, #8]
 800b582:	1d61      	adds	r1, r4, #5
 800b584:	1970      	adds	r0, r6, r5
 800b586:	f004 f80c 	bl	800f5a2 <memcpy1>
            itr += curElement->PayloadSize;
 800b58a:	68a3      	ldr	r3, [r4, #8]
 800b58c:	441d      	add	r5, r3
 800b58e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b590:	6824      	ldr	r4, [r4, #0]
 800b592:	e7eb      	b.n	800b56c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b594:	b12c      	cbz	r4, 800b5a2 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b596:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b598:	4620      	mov	r0, r4
 800b59a:	f7ff ff71 	bl	800b480 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b59e:	462c      	mov	r4, r5
 800b5a0:	e7f8      	b.n	800b594 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	f7ff ffcc 	bl	800b540 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b5a8:	2000      	movs	r0, #0
}
 800b5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e7fb      	b.n	800b5aa <LoRaMacCommandsSerializeCmds+0x52>
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	e7f9      	b.n	800b5aa <LoRaMacCommandsSerializeCmds+0x52>
 800b5b6:	bf00      	nop
 800b5b8:	20000b38 	.word	0x20000b38

0800b5bc <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b5bc:	1e83      	subs	r3, r0, #2
 800b5be:	2b11      	cmp	r3, #17
 800b5c0:	d80a      	bhi.n	800b5d8 <LoRaMacCommandsGetCmdSize+0x1c>
 800b5c2:	e8df f003 	tbb	[pc, r3]
 800b5c6:	0b23      	.short	0x0b23
 800b5c8:	110f240d 	.word	0x110f240d
 800b5cc:	09171513 	.word	0x09171513
 800b5d0:	09091909 	.word	0x09091909
 800b5d4:	211f1d1b 	.word	0x211f1d1b
 800b5d8:	2000      	movs	r0, #0
 800b5da:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b5dc:	2005      	movs	r0, #5
            break;
 800b5de:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b5e0:	2002      	movs	r0, #2
            break;
 800b5e2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b5e4:	2001      	movs	r0, #1
            break;
 800b5e6:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b5e8:	2006      	movs	r0, #6
            break;
 800b5ea:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b5ec:	2002      	movs	r0, #2
            break;
 800b5ee:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b5f0:	2002      	movs	r0, #2
            break;
 800b5f2:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b5f4:	2005      	movs	r0, #5
            break;
 800b5f6:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b5f8:	2006      	movs	r0, #6
            break;
 800b5fa:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b5fc:	2001      	movs	r0, #1
            break;
 800b5fe:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b600:	2005      	movs	r0, #5
            break;
 800b602:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b604:	2004      	movs	r0, #4
            break;
 800b606:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b608:	2004      	movs	r0, #4
            break;
 800b60a:	4770      	bx	lr
            cidSize = 3;
 800b60c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b60e:	4770      	bx	lr

0800b610 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b610:	4b03      	ldr	r3, [pc, #12]	; (800b620 <IncreaseBufferPointer+0x10>)
 800b612:	4298      	cmp	r0, r3
 800b614:	d001      	beq.n	800b61a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b616:	3004      	adds	r0, #4
 800b618:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b61a:	4802      	ldr	r0, [pc, #8]	; (800b624 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000c50 	.word	0x20000c50
 800b624:	20000c40 	.word	0x20000c40

0800b628 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b628:	b108      	cbz	r0, 800b62e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b62a:	2000      	movs	r0, #0
 800b62c:	4770      	bx	lr
        return true;
 800b62e:	2001      	movs	r0, #1
}
 800b630:	4770      	bx	lr

0800b632 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b632:	2804      	cmp	r0, #4
 800b634:	d801      	bhi.n	800b63a <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b636:	2000      	movs	r0, #0
 800b638:	4770      	bx	lr
        return true;
 800b63a:	2001      	movs	r0, #1
}
 800b63c:	4770      	bx	lr
	...

0800b640 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	4606      	mov	r6, r0
 800b644:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <GetElement+0x3c>)
 800b648:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b64c:	4638      	mov	r0, r7
 800b64e:	f7ff ffeb 	bl	800b628 <IsListEmpty>
 800b652:	b970      	cbnz	r0, 800b672 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b654:	2500      	movs	r5, #0
 800b656:	42af      	cmp	r7, r5
 800b658:	d909      	bls.n	800b66e <GetElement+0x2e>
    {
        if( element->Request == request )
 800b65a:	7823      	ldrb	r3, [r4, #0]
 800b65c:	42b3      	cmp	r3, r6
 800b65e:	d00a      	beq.n	800b676 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b660:	4620      	mov	r0, r4
 800b662:	f7ff ffd5 	bl	800b610 <IncreaseBufferPointer>
 800b666:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b668:	3501      	adds	r5, #1
 800b66a:	b2ed      	uxtb	r5, r5
 800b66c:	e7f3      	b.n	800b656 <GetElement+0x16>
    }

    return NULL;
 800b66e:	2000      	movs	r0, #0
}
 800b670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b672:	2000      	movs	r0, #0
 800b674:	e7fc      	b.n	800b670 <GetElement+0x30>
            return element;
 800b676:	4620      	mov	r0, r4
 800b678:	e7fa      	b.n	800b670 <GetElement+0x30>
 800b67a:	bf00      	nop
 800b67c:	20000c34 	.word	0x20000c34

0800b680 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b680:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b682:	4c08      	ldr	r4, [pc, #32]	; (800b6a4 <LoRaMacConfirmQueueInit+0x24>)
 800b684:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b68c:	f104 000c 	add.w	r0, r4, #12
 800b690:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b692:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b694:	2214      	movs	r2, #20
 800b696:	21ff      	movs	r1, #255	; 0xff
 800b698:	f003 ff9b 	bl	800f5d2 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b6a2:	bd10      	pop	{r4, pc}
 800b6a4:	20000c34 	.word	0x20000c34

0800b6a8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b6ac:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <LoRaMacConfirmQueueAdd+0x44>)
 800b6ae:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b6b2:	f7ff ffbe 	bl	800b632 <IsListFull>
 800b6b6:	b9b8      	cbnz	r0, 800b6e8 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b6b8:	4c0c      	ldr	r4, [pc, #48]	; (800b6ec <LoRaMacConfirmQueueAdd+0x44>)
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	782a      	ldrb	r2, [r5, #0]
 800b6be:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	786a      	ldrb	r2, [r5, #1]
 800b6c4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	78ea      	ldrb	r2, [r5, #3]
 800b6ca:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b6cc:	68a3      	ldr	r3, [r4, #8]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b6d2:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b6dc:	68a0      	ldr	r0, [r4, #8]
 800b6de:	f7ff ff97 	bl	800b610 <IncreaseBufferPointer>
 800b6e2:	60a0      	str	r0, [r4, #8]

    return true;
 800b6e4:	2001      	movs	r0, #1
}
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e7fc      	b.n	800b6e6 <LoRaMacConfirmQueueAdd+0x3e>
 800b6ec:	20000c34 	.word	0x20000c34

0800b6f0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b6f0:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b6f2:	4b09      	ldr	r3, [pc, #36]	; (800b718 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b6f4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7ff ff95 	bl	800b628 <IsListEmpty>
 800b6fe:	b948      	cbnz	r0, 800b714 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b700:	4d05      	ldr	r5, [pc, #20]	; (800b718 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b702:	3c01      	subs	r4, #1
 800b704:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b708:	6868      	ldr	r0, [r5, #4]
 800b70a:	f7ff ff81 	bl	800b610 <IncreaseBufferPointer>
 800b70e:	6068      	str	r0, [r5, #4]

    return true;
 800b710:	2001      	movs	r0, #1
}
 800b712:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b714:	2000      	movs	r0, #0
 800b716:	e7fc      	b.n	800b712 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b718:	20000c34 	.word	0x20000c34

0800b71c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4605      	mov	r5, r0
 800b720:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b722:	4b08      	ldr	r3, [pc, #32]	; (800b744 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b724:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b728:	f7ff ff7e 	bl	800b628 <IsListEmpty>
 800b72c:	b948      	cbnz	r0, 800b742 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b72e:	4b05      	ldr	r3, [pc, #20]	; (800b744 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	6859      	ldr	r1, [r3, #4]
 800b734:	4620      	mov	r0, r4
 800b736:	f7ff ff83 	bl	800b640 <GetElement>
        if( element != NULL )
 800b73a:	b110      	cbz	r0, 800b742 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b73c:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b73e:	2201      	movs	r2, #1
 800b740:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	20000c34 	.word	0x20000c34

0800b748 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b748:	b510      	push	{r4, lr}
 800b74a:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b74e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b752:	f7ff ff69 	bl	800b628 <IsListEmpty>
 800b756:	b940      	cbnz	r0, 800b76a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b758:	4b06      	ldr	r3, [pc, #24]	; (800b774 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	6859      	ldr	r1, [r3, #4]
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ff6e 	bl	800b640 <GetElement>
        if( element != NULL )
 800b764:	b118      	cbz	r0, 800b76e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b766:	7840      	ldrb	r0, [r0, #1]
 800b768:	e000      	b.n	800b76c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b76a:	2001      	movs	r0, #1
}
 800b76c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b76e:	2001      	movs	r0, #1
 800b770:	e7fc      	b.n	800b76c <LoRaMacConfirmQueueGetStatus+0x24>
 800b772:	bf00      	nop
 800b774:	20000c34 	.word	0x20000c34

0800b778 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b77e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b780:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b784:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b788:	f7ff ff4e 	bl	800b628 <IsListEmpty>
 800b78c:	b150      	cbz	r0, 800b7a4 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b790:	2301      	movs	r3, #1
 800b792:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b794:	4620      	mov	r0, r4
 800b796:	f7ff ff3b 	bl	800b610 <IncreaseBufferPointer>
 800b79a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b79c:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	4283      	cmp	r3, r0
 800b7a2:	d0f4      	beq.n	800b78e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b7a4:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b7a6:	78e3      	ldrb	r3, [r4, #3]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1f3      	bne.n	800b794 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b7ac:	e7f0      	b.n	800b790 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b7ae:	bf00      	nop
 800b7b0:	20000c34 	.word	0x20000c34

0800b7b4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b7b4:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b7b6:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b7b8:	689a      	ldr	r2, [r3, #8]
 800b7ba:	6859      	ldr	r1, [r3, #4]
 800b7bc:	f7ff ff40 	bl	800b640 <GetElement>
 800b7c0:	b100      	cbz	r0, 800b7c4 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b7c2:	2001      	movs	r0, #1
    }
    return false;
}
 800b7c4:	bd08      	pop	{r3, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000c34 	.word	0x20000c34

0800b7cc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b7d2:	4b19      	ldr	r3, [pc, #100]	; (800b838 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b7d4:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800b7d8:	2204      	movs	r2, #4
 800b7da:	2100      	movs	r1, #0
 800b7dc:	eb0d 0002 	add.w	r0, sp, r2
 800b7e0:	f003 fef7 	bl	800f5d2 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800b7e4:	2400      	movs	r4, #0
 800b7e6:	e00d      	b.n	800b804 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b7e8:	781a      	ldrb	r2, [r3, #0]
 800b7ea:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b7ee:	785a      	ldrb	r2, [r3, #1]
 800b7f0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b7f4:	78db      	ldrb	r3, [r3, #3]
 800b7f6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b7fa:	f7ff ff79 	bl	800b6f0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b7fe:	b1a5      	cbz	r5, 800b82a <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b800:	3401      	adds	r4, #1
 800b802:	b2e4      	uxtb	r4, r4
 800b804:	42bc      	cmp	r4, r7
 800b806:	d214      	bcs.n	800b832 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b808:	4b0b      	ldr	r3, [pc, #44]	; (800b838 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	7852      	ldrb	r2, [r2, #1]
 800b814:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b81a:	2d00      	cmp	r5, #0
 800b81c:	d0e4      	beq.n	800b7e8 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b81e:	4b06      	ldr	r3, [pc, #24]	; (800b838 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	4630      	mov	r0, r6
 800b826:	4798      	blx	r3
 800b828:	e7e7      	b.n	800b7fa <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b82a:	a801      	add	r0, sp, #4
 800b82c:	f7ff ff3c 	bl	800b6a8 <LoRaMacConfirmQueueAdd>
 800b830:	e7e6      	b.n	800b800 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800b832:	b003      	add	sp, #12
 800b834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b836:	bf00      	nop
 800b838:	20000c34 	.word	0x20000c34

0800b83c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b83c:	4b01      	ldr	r3, [pc, #4]	; (800b844 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b83e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b842:	4770      	bx	lr
 800b844:	20000c34 	.word	0x20000c34

0800b848 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b848:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b84a:	4b03      	ldr	r3, [pc, #12]	; (800b858 <LoRaMacConfirmQueueIsFull+0x10>)
 800b84c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b850:	f7ff feef 	bl	800b632 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b854:	bd08      	pop	{r3, pc}
 800b856:	bf00      	nop
 800b858:	20000c34 	.word	0x20000c34

0800b85c <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b85c:	b410      	push	{r4}
 800b85e:	9c01      	ldr	r4, [sp, #4]
 800b860:	9902      	ldr	r1, [sp, #8]
 800b862:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b864:	b1da      	cbz	r2, 800b89e <PrepareB0+0x42>
 800b866:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b868:	2049      	movs	r0, #73	; 0x49
 800b86a:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800b86c:	2000      	movs	r0, #0
 800b86e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b870:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b872:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b874:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b876:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b878:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b87a:	0a23      	lsrs	r3, r4, #8
 800b87c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b87e:	0c23      	lsrs	r3, r4, #16
 800b880:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b882:	0e24      	lsrs	r4, r4, #24
 800b884:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b886:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b888:	0a0b      	lsrs	r3, r1, #8
 800b88a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b88c:	0c0b      	lsrs	r3, r1, #16
 800b88e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b890:	0e09      	lsrs	r1, r1, #24
 800b892:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b894:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b896:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b89a:	bc10      	pop	{r4}
 800b89c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b89e:	200a      	movs	r0, #10
 800b8a0:	e7fb      	b.n	800b89a <PrepareB0+0x3e>
	...

0800b8a4 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d80e      	bhi.n	800b8c8 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b8aa:	469c      	mov	ip, r3
 800b8ac:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <GetKeyAddrItem+0x28>)
 800b8ae:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b8b2:	4282      	cmp	r2, r0
 800b8b4:	d002      	beq.n	800b8bc <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	e7f4      	b.n	800b8a6 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b8bc:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <GetKeyAddrItem+0x28>)
 800b8be:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b8c2:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b8c8:	200c      	movs	r0, #12
}
 800b8ca:	4770      	bx	lr
 800b8cc:	20000100 	.word	0x20000100

0800b8d0 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b8d0:	b1f1      	cbz	r1, 800b910 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b8d2:	3801      	subs	r0, #1
 800b8d4:	2803      	cmp	r0, #3
 800b8d6:	d81d      	bhi.n	800b914 <GetLastFcntDown+0x44>
 800b8d8:	e8df f000 	tbb	[pc, r0]
 800b8dc:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b8e0:	4a0d      	ldr	r2, [pc, #52]	; (800b918 <GetLastFcntDown+0x48>)
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	6912      	ldr	r2, [r2, #16]
 800b8e6:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b8e8:	2000      	movs	r0, #0
            break;
 800b8ea:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b8ec:	4a0a      	ldr	r2, [pc, #40]	; (800b918 <GetLastFcntDown+0x48>)
 800b8ee:	6812      	ldr	r2, [r2, #0]
 800b8f0:	6952      	ldr	r2, [r2, #20]
 800b8f2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b8f4:	2000      	movs	r0, #0
            break;
 800b8f6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b8f8:	4a07      	ldr	r2, [pc, #28]	; (800b918 <GetLastFcntDown+0x48>)
 800b8fa:	6812      	ldr	r2, [r2, #0]
 800b8fc:	6992      	ldr	r2, [r2, #24]
 800b8fe:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b900:	2000      	movs	r0, #0
            break;
 800b902:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b904:	4a04      	ldr	r2, [pc, #16]	; (800b918 <GetLastFcntDown+0x48>)
 800b906:	6812      	ldr	r2, [r2, #0]
 800b908:	69d2      	ldr	r2, [r2, #28]
 800b90a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b90c:	2000      	movs	r0, #0
            break;
 800b90e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b910:	200a      	movs	r0, #10
 800b912:	4770      	bx	lr
    switch( fCntID )
 800b914:	2005      	movs	r0, #5
}
 800b916:	4770      	bx	lr
 800b918:	20000c58 	.word	0x20000c58

0800b91c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b91c:	b510      	push	{r4, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b926:	a901      	add	r1, sp, #4
 800b928:	f7ff ffd2 	bl	800b8d0 <GetLastFcntDown>
 800b92c:	b948      	cbnz	r0, 800b942 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	42a3      	cmp	r3, r4
 800b932:	d309      	bcc.n	800b948 <CheckFCntDown+0x2c>
 800b934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b938:	d001      	beq.n	800b93e <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b93a:	2000      	movs	r0, #0
 800b93c:	e002      	b.n	800b944 <CheckFCntDown+0x28>
        return true;
 800b93e:	2001      	movs	r0, #1
 800b940:	e000      	b.n	800b944 <CheckFCntDown+0x28>
        return false;
 800b942:	2000      	movs	r0, #0
    }
}
 800b944:	b002      	add	sp, #8
 800b946:	bd10      	pop	{r4, pc}
        return true;
 800b948:	2001      	movs	r0, #1
 800b94a:	e7fb      	b.n	800b944 <CheckFCntDown+0x28>

0800b94c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b94c:	3801      	subs	r0, #1
 800b94e:	2803      	cmp	r0, #3
 800b950:	d815      	bhi.n	800b97e <UpdateFCntDown+0x32>
 800b952:	e8df f000 	tbb	[pc, r0]
 800b956:	0702      	.short	0x0702
 800b958:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b95a:	4b09      	ldr	r3, [pc, #36]	; (800b980 <UpdateFCntDown+0x34>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800b960:	6219      	str	r1, [r3, #32]
            break;
 800b962:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <UpdateFCntDown+0x34>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800b96a:	6219      	str	r1, [r3, #32]
            break;
 800b96c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b96e:	4b04      	ldr	r3, [pc, #16]	; (800b980 <UpdateFCntDown+0x34>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800b974:	6219      	str	r1, [r3, #32]
            break;
 800b976:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b978:	4b01      	ldr	r3, [pc, #4]	; (800b980 <UpdateFCntDown+0x34>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b97e:	4770      	bx	lr
 800b980:	20000c58 	.word	0x20000c58

0800b984 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b984:	4b0a      	ldr	r3, [pc, #40]	; (800b9b0 <ResetFCnts+0x2c>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	2300      	movs	r3, #0
 800b98a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b98c:	f04f 31ff 	mov.w	r1, #4294967295
 800b990:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b992:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800b994:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b996:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b998:	2b00      	cmp	r3, #0
 800b99a:	dd00      	ble.n	800b99e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800b99c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800b99e:	1d99      	adds	r1, r3, #6
 800b9a0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a8:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	e7f4      	b.n	800b998 <ResetFCnts+0x14>
 800b9ae:	bf00      	nop
 800b9b0:	20000c58 	.word	0x20000c58

0800b9b4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800b9b4:	4b03      	ldr	r3, [pc, #12]	; (800b9c4 <IsJoinNonce10xOk+0x10>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800b9ba:	4283      	cmp	r3, r0
 800b9bc:	bf2c      	ite	cs
 800b9be:	2000      	movcs	r0, #0
 800b9c0:	2001      	movcc	r0, #1
 800b9c2:	4770      	bx	lr
 800b9c4:	20000c58 	.word	0x20000c58

0800b9c8 <ComputeCmacB0>:
{
 800b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b9d0:	b1f0      	cbz	r0, 800ba10 <ComputeCmacB0+0x48>
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	4615      	mov	r5, r2
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	4680      	mov	r8, r0
 800b9da:	b1de      	cbz	r6, 800ba14 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b9dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b9e0:	d81a      	bhi.n	800ba18 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b9e2:	af04      	add	r7, sp, #16
 800b9e4:	9702      	str	r7, [sp, #8]
 800b9e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7ff ff31 	bl	800b85c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b9fa:	9600      	str	r6, [sp, #0]
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	4622      	mov	r2, r4
 800ba00:	4641      	mov	r1, r8
 800ba02:	4638      	mov	r0, r7
 800ba04:	f003 fb7a 	bl	800f0fc <SecureElementComputeAesCmac>
 800ba08:	b940      	cbnz	r0, 800ba1c <ComputeCmacB0+0x54>
}
 800ba0a:	b008      	add	sp, #32
 800ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba10:	200a      	movs	r0, #10
 800ba12:	e7fa      	b.n	800ba0a <ComputeCmacB0+0x42>
 800ba14:	200a      	movs	r0, #10
 800ba16:	e7f8      	b.n	800ba0a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ba18:	200e      	movs	r0, #14
 800ba1a:	e7f6      	b.n	800ba0a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba1c:	200f      	movs	r0, #15
 800ba1e:	e7f4      	b.n	800ba0a <ComputeCmacB0+0x42>

0800ba20 <DeriveSessionKey10x>:
{
 800ba20:	b510      	push	{r4, lr}
 800ba22:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800ba24:	2400      	movs	r4, #0
 800ba26:	9400      	str	r4, [sp, #0]
 800ba28:	9401      	str	r4, [sp, #4]
 800ba2a:	9402      	str	r4, [sp, #8]
 800ba2c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800ba2e:	2808      	cmp	r0, #8
 800ba30:	d003      	beq.n	800ba3a <DeriveSessionKey10x+0x1a>
 800ba32:	2809      	cmp	r0, #9
 800ba34:	d025      	beq.n	800ba82 <DeriveSessionKey10x+0x62>
 800ba36:	200b      	movs	r0, #11
 800ba38:	e021      	b.n	800ba7e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800ba3a:	2401      	movs	r4, #1
 800ba3c:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800ba40:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800ba44:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ba48:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800ba4c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ba50:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800ba54:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800ba58:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ba5c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800ba60:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800ba64:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800ba68:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800ba6c:	0a1b      	lsrs	r3, r3, #8
 800ba6e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800ba72:	4602      	mov	r2, r0
 800ba74:	2101      	movs	r1, #1
 800ba76:	4668      	mov	r0, sp
 800ba78:	f003 fbde 	bl	800f238 <SecureElementDeriveAndStoreKey>
 800ba7c:	b928      	cbnz	r0, 800ba8a <DeriveSessionKey10x+0x6a>
}
 800ba7e:	b004      	add	sp, #16
 800ba80:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800ba82:	2402      	movs	r4, #2
 800ba84:	f88d 4000 	strb.w	r4, [sp]
            break;
 800ba88:	e7da      	b.n	800ba40 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba8a:	200f      	movs	r0, #15
 800ba8c:	e7f7      	b.n	800ba7e <DeriveSessionKey10x+0x5e>

0800ba8e <PayloadEncrypt>:
{
 800ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	4690      	mov	r8, r2
 800ba96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d052      	beq.n	800bb42 <PayloadEncrypt+0xb4>
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800baa0:	2600      	movs	r6, #0
 800baa2:	9604      	str	r6, [sp, #16]
 800baa4:	9605      	str	r6, [sp, #20]
 800baa6:	9606      	str	r6, [sp, #24]
 800baa8:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800baaa:	9600      	str	r6, [sp, #0]
 800baac:	9601      	str	r6, [sp, #4]
 800baae:	9602      	str	r6, [sp, #8]
 800bab0:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800bab2:	2701      	movs	r7, #1
 800bab4:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800bab8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800babc:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800bac0:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bac4:	0a19      	lsrs	r1, r3, #8
 800bac6:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800baca:	0c19      	lsrs	r1, r3, #16
 800bacc:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bad0:	0e1b      	lsrs	r3, r3, #24
 800bad2:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800bad6:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bada:	0a13      	lsrs	r3, r2, #8
 800badc:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bae0:	0c13      	lsrs	r3, r2, #16
 800bae2:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bae6:	0e12      	lsrs	r2, r2, #24
 800bae8:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800baec:	e014      	b.n	800bb18 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800baee:	18f2      	adds	r2, r6, r3
 800baf0:	5ca0      	ldrb	r0, [r4, r2]
 800baf2:	f103 0120 	add.w	r1, r3, #32
 800baf6:	4469      	add	r1, sp
 800baf8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800bafc:	4048      	eors	r0, r1
 800bafe:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bb00:	3301      	adds	r3, #1
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	462a      	mov	r2, r5
 800bb06:	2d10      	cmp	r5, #16
 800bb08:	bfa8      	it	ge
 800bb0a:	2210      	movge	r2, #16
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	dbee      	blt.n	800baee <PayloadEncrypt+0x60>
        size -= 16;
 800bb10:	3d10      	subs	r5, #16
 800bb12:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800bb14:	3610      	adds	r6, #16
 800bb16:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	dd0e      	ble.n	800bb3a <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800bb1c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800bb20:	3701      	adds	r7, #1
 800bb22:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bb24:	ab04      	add	r3, sp, #16
 800bb26:	4642      	mov	r2, r8
 800bb28:	2110      	movs	r1, #16
 800bb2a:	4668      	mov	r0, sp
 800bb2c:	f003 fb0b 	bl	800f146 <SecureElementAesEncrypt>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0e6      	beq.n	800bb04 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb36:	200f      	movs	r0, #15
 800bb38:	e000      	b.n	800bb3c <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800bb3a:	2000      	movs	r0, #0
}
 800bb3c:	b008      	add	sp, #32
 800bb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb42:	200a      	movs	r0, #10
 800bb44:	e7fa      	b.n	800bb3c <PayloadEncrypt+0xae>

0800bb46 <VerifyCmacB0>:
    if( msg == 0 )
 800bb46:	b368      	cbz	r0, 800bba4 <VerifyCmacB0+0x5e>
{
 800bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4c:	b0c8      	sub	sp, #288	; 0x120
 800bb4e:	460c      	mov	r4, r1
 800bb50:	4615      	mov	r5, r2
 800bb52:	461e      	mov	r6, r3
 800bb54:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bb56:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bb5a:	d825      	bhi.n	800bba8 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bb5c:	af04      	add	r7, sp, #16
 800bb5e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bb62:	2100      	movs	r1, #0
 800bb64:	4638      	mov	r0, r7
 800bb66:	f003 fd34 	bl	800f5d2 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800bb6a:	9702      	str	r7, [sp, #8]
 800bb6c:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7ff fe6d 	bl	800b85c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bb82:	4622      	mov	r2, r4
 800bb84:	4641      	mov	r1, r8
 800bb86:	a808      	add	r0, sp, #32
 800bb88:	f003 fd0b 	bl	800f5a2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800bb90:	f104 0110 	add.w	r1, r4, #16
 800bb94:	4638      	mov	r0, r7
 800bb96:	f003 fac0 	bl	800f11a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb9a:	b130      	cbz	r0, 800bbaa <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bb9c:	2801      	cmp	r0, #1
 800bb9e:	d004      	beq.n	800bbaa <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bba0:	200f      	movs	r0, #15
 800bba2:	e002      	b.n	800bbaa <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bba4:	200a      	movs	r0, #10
}
 800bba6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bba8:	200e      	movs	r0, #14
}
 800bbaa:	b048      	add	sp, #288	; 0x120
 800bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbb0 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bbb0:	b188      	cbz	r0, 800bbd6 <LoRaMacCryptoInit+0x26>
{
 800bbb2:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800bbb4:	4c09      	ldr	r4, [pc, #36]	; (800bbdc <LoRaMacCryptoInit+0x2c>)
 800bbb6:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bbb8:	2228      	movs	r2, #40	; 0x28
 800bbba:	2100      	movs	r1, #0
 800bbbc:	f003 fd09 	bl	800f5d2 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bbc6:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bbc8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bbca:	2400      	movs	r4, #0
 800bbcc:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800bbce:	f7ff fed9 	bl	800b984 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800bbd2:	4620      	mov	r0, r4
}
 800bbd4:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bbd6:	2009      	movs	r0, #9
}
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20000c58 	.word	0x20000c58

0800bbe0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bbe0:	4b02      	ldr	r3, [pc, #8]	; (800bbec <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	20000c58 	.word	0x20000c58

0800bbf0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bbf0:	b130      	cbz	r0, 800bc00 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bbf2:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <LoRaMacCryptoGetFCntUp+0x14>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc00:	200a      	movs	r0, #10
}
 800bc02:	4770      	bx	lr
 800bc04:	20000c58 	.word	0x20000c58

0800bc08 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800bc0e:	2200      	movs	r2, #0
 800bc10:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bc12:	b363      	cbz	r3, 800bc6e <LoRaMacCryptoGetFCntDown+0x66>
 800bc14:	460d      	mov	r5, r1
 800bc16:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bc18:	a901      	add	r1, sp, #4
 800bc1a:	f7ff fe59 	bl	800b8d0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bc1e:	b9b8      	cbnz	r0, 800bc50 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc26:	d015      	beq.n	800bc54 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bc2c:	2a00      	cmp	r2, #0
 800bc2e:	dd13      	ble.n	800bc58 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bc30:	4413      	add	r3, r2
 800bc32:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bc34:	4b10      	ldr	r3, [pc, #64]	; (800bc78 <LoRaMacCryptoGetFCntDown+0x70>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	789a      	ldrb	r2, [r3, #2]
 800bc3a:	b94a      	cbnz	r2, 800bc50 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	9901      	ldr	r1, [sp, #4]
 800bc40:	1a5b      	subs	r3, r3, r1
 800bc42:	eb61 0101 	sbc.w	r1, r1, r1
 800bc46:	42ab      	cmp	r3, r5
 800bc48:	f171 0300 	sbcs.w	r3, r1, #0
 800bc4c:	da11      	bge.n	800bc72 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800bc4e:	4610      	mov	r0, r2
}
 800bc50:	b002      	add	sp, #8
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800bc54:	6034      	str	r4, [r6, #0]
 800bc56:	e7ed      	b.n	800bc34 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800bc58:	b132      	cbz	r2, 800bc68 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bc5a:	0c1b      	lsrs	r3, r3, #16
 800bc5c:	041b      	lsls	r3, r3, #16
 800bc5e:	4423      	add	r3, r4
 800bc60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bc64:	6033      	str	r3, [r6, #0]
 800bc66:	e7e5      	b.n	800bc34 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800bc68:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bc6a:	2007      	movs	r0, #7
 800bc6c:	e7f0      	b.n	800bc50 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc6e:	200a      	movs	r0, #10
 800bc70:	e7ee      	b.n	800bc50 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800bc72:	2008      	movs	r0, #8
 800bc74:	e7ec      	b.n	800bc50 <LoRaMacCryptoGetFCntDown+0x48>
 800bc76:	bf00      	nop
 800bc78:	20000c58 	.word	0x20000c58

0800bc7c <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bc7c:	4601      	mov	r1, r0
 800bc7e:	b908      	cbnz	r0, 800bc84 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc80:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bc82:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bc84:	2300      	movs	r3, #0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	dd01      	ble.n	800bc8e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <LoRaMacCryptoSetMulticastReference+0x30>)
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800bc96:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800bc9a:	f103 0c06 	add.w	ip, r3, #6
 800bc9e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800bca2:	3204      	adds	r2, #4
 800bca4:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bca6:	3301      	adds	r3, #1
 800bca8:	e7ed      	b.n	800bc86 <LoRaMacCryptoSetMulticastReference+0xa>
 800bcaa:	bf00      	nop
 800bcac:	20000c58 	.word	0x20000c58

0800bcb0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bcb0:	b300      	cbz	r0, 800bcf4 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800bcb2:	b510      	push	{r4, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800bcbc:	a803      	add	r0, sp, #12
 800bcbe:	f003 fb19 	bl	800f2f4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800bcc2:	4b10      	ldr	r3, [pc, #64]	; (800bd04 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bcca:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800bccc:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 fa33 	bl	800c13a <LoRaMacSerializerJoinRequest>
 800bcd4:	b980      	cbnz	r0, 800bcf8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bcd6:	4623      	mov	r3, r4
 800bcd8:	f853 1b18 	ldr.w	r1, [r3], #24
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	2301      	movs	r3, #1
 800bce0:	2213      	movs	r2, #19
 800bce2:	f003 fa0b 	bl	800f0fc <SecureElementComputeAesCmac>
 800bce6:	b950      	cbnz	r0, 800bcfe <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 fa26 	bl	800c13a <LoRaMacSerializerJoinRequest>
 800bcee:	b120      	cbz	r0, 800bcfa <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bcf0:	2011      	movs	r0, #17
 800bcf2:	e002      	b.n	800bcfa <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcf4:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bcf6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bcf8:	2011      	movs	r0, #17
}
 800bcfa:	b004      	add	sp, #16
 800bcfc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bcfe:	200f      	movs	r0, #15
 800bd00:	e7fb      	b.n	800bcfa <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800bd02:	bf00      	nop
 800bd04:	20000c58 	.word	0x20000c58

0800bd08 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d036      	beq.n	800bd7a <LoRaMacCryptoSecureMessage+0x72>
{
 800bd0c:	b530      	push	{r4, r5, lr}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	4604      	mov	r4, r0
 800bd12:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bd14:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <LoRaMacCryptoSecureMessage+0x84>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	4283      	cmp	r3, r0
 800bd1c:	d82f      	bhi.n	800bd7e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800bd1e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800bd22:	b342      	cbz	r2, 800bd76 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800bd24:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800bd26:	42a3      	cmp	r3, r4
 800bd28:	d209      	bcs.n	800bd3e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bd2a:	9401      	str	r4, [sp, #4]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	68ab      	ldr	r3, [r5, #8]
 800bd32:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bd36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bd38:	f7ff fea9 	bl	800ba8e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd3c:	bb10      	cbnz	r0, 800bd84 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 fa31 	bl	800c1a6 <LoRaMacSerializerData>
 800bd44:	b9e8      	cbnz	r0, 800bd82 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bd46:	7929      	ldrb	r1, [r5, #4]
 800bd48:	3904      	subs	r1, #4
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800bd50:	9303      	str	r3, [sp, #12]
 800bd52:	9402      	str	r4, [sp, #8]
 800bd54:	68ab      	ldr	r3, [r5, #8]
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	2208      	movs	r2, #8
 800bd5e:	b289      	uxth	r1, r1
 800bd60:	f7ff fe32 	bl	800b9c8 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd64:	b970      	cbnz	r0, 800bd84 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 fa1d 	bl	800c1a6 <LoRaMacSerializerData>
 800bd6c:	b960      	cbnz	r0, 800bd88 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bd6e:	4b07      	ldr	r3, [pc, #28]	; (800bd8c <LoRaMacCryptoSecureMessage+0x84>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800bd74:	e006      	b.n	800bd84 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800bd76:	2208      	movs	r2, #8
 800bd78:	e7d5      	b.n	800bd26 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd7a:	200a      	movs	r0, #10
}
 800bd7c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bd7e:	2006      	movs	r0, #6
 800bd80:	e000      	b.n	800bd84 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bd82:	2011      	movs	r0, #17
}
 800bd84:	b005      	add	sp, #20
 800bd86:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bd88:	2011      	movs	r0, #17
 800bd8a:	e7fb      	b.n	800bd84 <LoRaMacCryptoSecureMessage+0x7c>
 800bd8c:	20000c58 	.word	0x20000c58

0800bd90 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd94:	b087      	sub	sp, #28
 800bd96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800bd98:	2e00      	cmp	r6, #0
 800bd9a:	d049      	beq.n	800be30 <LoRaMacCryptoUnsecureMessage+0xa0>
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	4688      	mov	r8, r1
 800bda0:	4617      	mov	r7, r2
 800bda2:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f7ff fdb8 	bl	800b91c <CheckFCntDown>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d041      	beq.n	800be34 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 f963 	bl	800c07c <LoRaMacParserData>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d141      	bne.n	800be3e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800bdba:	a905      	add	r1, sp, #20
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f7ff fd71 	bl	800b8a4 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d136      	bne.n	800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800bdc8:	9b05      	ldr	r3, [sp, #20]
 800bdca:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800bdce:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800bdd0:	68b3      	ldr	r3, [r6, #8]
 800bdd2:	4543      	cmp	r3, r8
 800bdd4:	d135      	bne.n	800be42 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bdd6:	7b33      	ldrb	r3, [r6, #12]
 800bdd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800bddc:	491a      	ldr	r1, [pc, #104]	; (800be48 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800bdde:	6809      	ldr	r1, [r1, #0]
 800bde0:	7889      	ldrb	r1, [r1, #2]
 800bde2:	b901      	cbnz	r1, 800bde6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800bde4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bde6:	7931      	ldrb	r1, [r6, #4]
 800bde8:	3904      	subs	r1, #4
 800bdea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800bdec:	9003      	str	r0, [sp, #12]
 800bdee:	9402      	str	r4, [sp, #8]
 800bdf0:	f8cd 8004 	str.w	r8, [sp, #4]
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	9000      	str	r0, [sp, #0]
 800bdf8:	b289      	uxth	r1, r1
 800bdfa:	6830      	ldr	r0, [r6, #0]
 800bdfc:	f7ff fea3 	bl	800bb46 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be00:	4605      	mov	r5, r0
 800be02:	b9c0      	cbnz	r0, 800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800be04:	f896 3020 	ldrb.w	r3, [r6, #32]
 800be08:	b90b      	cbnz	r3, 800be0e <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800be0a:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800be0e:	9401      	str	r4, [sp, #4]
 800be10:	2301      	movs	r3, #1
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	4643      	mov	r3, r8
 800be16:	464a      	mov	r2, r9
 800be18:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800be1c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800be1e:	f7ff fe36 	bl	800ba8e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be22:	4605      	mov	r5, r0
 800be24:	b938      	cbnz	r0, 800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800be26:	4621      	mov	r1, r4
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff fd8f 	bl	800b94c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800be2e:	e002      	b.n	800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be30:	250a      	movs	r5, #10
 800be32:	e000      	b.n	800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800be34:	2506      	movs	r5, #6
}
 800be36:	4628      	mov	r0, r5
 800be38:	b007      	add	sp, #28
 800be3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800be3e:	2510      	movs	r5, #16
 800be40:	e7f9      	b.n	800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800be42:	2502      	movs	r5, #2
 800be44:	e7f7      	b.n	800be36 <LoRaMacCryptoUnsecureMessage+0xa6>
 800be46:	bf00      	nop
 800be48:	20000c58 	.word	0x20000c58

0800be4c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800be4c:	b500      	push	{lr}
 800be4e:	b085      	sub	sp, #20
 800be50:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800be52:	2300      	movs	r3, #0
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	9302      	str	r3, [sp, #8]
 800be5a:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800be5c:	290b      	cmp	r1, #11
 800be5e:	d007      	beq.n	800be70 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800be60:	290c      	cmp	r1, #12
 800be62:	d013      	beq.n	800be8c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800be64:	290a      	cmp	r1, #10
 800be66:	d00c      	beq.n	800be82 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800be68:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800be6a:	b005      	add	sp, #20
 800be6c:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800be70:	2801      	cmp	r0, #1
 800be72:	d001      	beq.n	800be78 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800be74:	2100      	movs	r1, #0
 800be76:	e00a      	b.n	800be8e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800be78:	2320      	movs	r3, #32
 800be7a:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800be7e:	2100      	movs	r1, #0
 800be80:	e005      	b.n	800be8e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800be82:	2330      	movs	r3, #48	; 0x30
 800be84:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800be88:	2100      	movs	r1, #0
            break;
 800be8a:	e000      	b.n	800be8e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800be8c:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800be8e:	4668      	mov	r0, sp
 800be90:	f003 f9d2 	bl	800f238 <SecureElementDeriveAndStoreKey>
 800be94:	2800      	cmp	r0, #0
 800be96:	d0e8      	beq.n	800be6a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800be98:	200f      	movs	r0, #15
 800be9a:	e7e6      	b.n	800be6a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800be9c <LoRaMacCryptoSetKey>:
{
 800be9c:	b510      	push	{r4, lr}
 800be9e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bea0:	f003 f988 	bl	800f1b4 <SecureElementSetKey>
 800bea4:	b998      	cbnz	r0, 800bece <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800bea6:	b104      	cbz	r4, 800beaa <LoRaMacCryptoSetKey+0xe>
}
 800bea8:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800beaa:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <LoRaMacCryptoSetKey+0x40>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	210b      	movs	r1, #11
 800beb0:	7898      	ldrb	r0, [r3, #2]
 800beb2:	f7ff ffcb 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
 800beb6:	b960      	cbnz	r0, 800bed2 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800beb8:	210c      	movs	r1, #12
 800beba:	f7ff ffc7 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
 800bebe:	b950      	cbnz	r0, 800bed6 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bec0:	210a      	movs	r1, #10
 800bec2:	f7ff ffc3 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0ee      	beq.n	800bea8 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800beca:	200f      	movs	r0, #15
 800becc:	e7ec      	b.n	800bea8 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bece:	200f      	movs	r0, #15
 800bed0:	e7ea      	b.n	800bea8 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bed2:	200f      	movs	r0, #15
 800bed4:	e7e8      	b.n	800bea8 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bed6:	200f      	movs	r0, #15
 800bed8:	e7e6      	b.n	800bea8 <LoRaMacCryptoSetKey+0xc>
 800beda:	bf00      	nop
 800bedc:	20000c58 	.word	0x20000c58

0800bee0 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	d06c      	beq.n	800bfbe <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee6:	b08f      	sub	sp, #60	; 0x3c
 800bee8:	4607      	mov	r7, r0
 800beea:	460d      	mov	r5, r1
 800beec:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800beee:	2900      	cmp	r1, #0
 800bef0:	d067      	beq.n	800bfc2 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bef2:	2600      	movs	r6, #0
 800bef4:	9605      	str	r6, [sp, #20]
 800bef6:	221d      	movs	r2, #29
 800bef8:	4631      	mov	r1, r6
 800befa:	a806      	add	r0, sp, #24
 800befc:	f006 fbfc 	bl	80126f8 <memset>
    uint8_t versionMinor         = 0;
 800bf00:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800bf04:	4b33      	ldr	r3, [pc, #204]	; (800bfd4 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800bf0a:	f10d 0313 	add.w	r3, sp, #19
 800bf0e:	9302      	str	r3, [sp, #8]
 800bf10:	ab05      	add	r3, sp, #20
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	7923      	ldrb	r3, [r4, #4]
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	4632      	mov	r2, r6
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4638      	mov	r0, r7
 800bf20:	f003 f9aa 	bl	800f278 <SecureElementProcessJoinAccept>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d14e      	bne.n	800bfc6 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800bf28:	7922      	ldrb	r2, [r4, #4]
 800bf2a:	a905      	add	r1, sp, #20
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	f003 fb38 	bl	800f5a2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 f850 	bl	800bfd8 <LoRaMacParserJoinAccept>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d147      	bne.n	800bfcc <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800bf3c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800bf3e:	79e3      	ldrb	r3, [r4, #7]
 800bf40:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800bf44:	7a23      	ldrb	r3, [r4, #8]
 800bf46:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7ff fd32 	bl	800b9b4 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d03d      	beq.n	800bfd0 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800bf54:	4b1f      	ldr	r3, [pc, #124]	; (800bfd4 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800bf5a:	210b      	movs	r1, #11
 800bf5c:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800bf60:	f7ff ff74 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf64:	bb80      	cbnz	r0, 800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800bf66:	210c      	movs	r1, #12
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f7ff ff6f 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf6e:	bb58      	cbnz	r0, 800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800bf70:	210a      	movs	r1, #10
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7ff ff6a 	bl	800be4c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf78:	bb30      	cbnz	r0, 800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800bf7a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800bf7c:	7aa2      	ldrb	r2, [r4, #10]
 800bf7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800bf82:	7ae4      	ldrb	r4, [r4, #11]
 800bf84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800bf88:	4633      	mov	r3, r6
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	2009      	movs	r0, #9
 800bf90:	f7ff fd46 	bl	800ba20 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf94:	b9c0      	cbnz	r0, 800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800bf96:	4633      	mov	r3, r6
 800bf98:	4622      	mov	r2, r4
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	2008      	movs	r0, #8
 800bf9e:	f7ff fd3f 	bl	800ba20 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bfa2:	b988      	cbnz	r0, 800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800bfa4:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bfac:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800bfae:	2200      	movs	r2, #0
 800bfb0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bfb8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800bfba:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800bfbc:	e004      	b.n	800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfbe:	200a      	movs	r0, #10
}
 800bfc0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfc2:	200a      	movs	r0, #10
 800bfc4:	e000      	b.n	800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfc6:	200f      	movs	r0, #15
}
 800bfc8:	b00f      	add	sp, #60	; 0x3c
 800bfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bfcc:	2010      	movs	r0, #16
 800bfce:	e7fb      	b.n	800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bfd0:	2003      	movs	r0, #3
 800bfd2:	e7f9      	b.n	800bfc8 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800bfd4:	20000c58 	.word	0x20000c58

0800bfd8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d049      	beq.n	800c070 <LoRaMacParserJoinAccept+0x98>
{
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bfe0:	6801      	ldr	r1, [r0, #0]
 800bfe2:	2900      	cmp	r1, #0
 800bfe4:	d046      	beq.n	800c074 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bfe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfea:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800bfec:	2203      	movs	r2, #3
 800bfee:	3006      	adds	r0, #6
 800bff0:	f003 fad7 	bl	800f5a2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800bff4:	4620      	mov	r0, r4
 800bff6:	f850 1b09 	ldr.w	r1, [r0], #9
 800bffa:	2203      	movs	r2, #3
 800bffc:	3104      	adds	r1, #4
 800bffe:	f003 fad0 	bl	800f5a2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c002:	6821      	ldr	r1, [r4, #0]
 800c004:	79cb      	ldrb	r3, [r1, #7]
 800c006:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c008:	7a0a      	ldrb	r2, [r1, #8]
 800c00a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c00e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c010:	7a4a      	ldrb	r2, [r1, #9]
 800c012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c016:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c018:	7a8a      	ldrb	r2, [r1, #10]
 800c01a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c01e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c020:	7acb      	ldrb	r3, [r1, #11]
 800c022:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c024:	7b0b      	ldrb	r3, [r1, #12]
 800c026:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c028:	7923      	ldrb	r3, [r4, #4]
 800c02a:	2b21      	cmp	r3, #33	; 0x21
 800c02c:	d018      	beq.n	800c060 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c02e:	2b11      	cmp	r3, #17
 800c030:	dc22      	bgt.n	800c078 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c032:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c034:	6821      	ldr	r1, [r4, #0]
 800c036:	f102 0c01 	add.w	ip, r2, #1
 800c03a:	5c8b      	ldrb	r3, [r1, r2]
 800c03c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c03e:	1c90      	adds	r0, r2, #2
 800c040:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c044:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c048:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c04a:	3203      	adds	r2, #3
 800c04c:	5c08      	ldrb	r0, [r1, r0]
 800c04e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c052:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c054:	5c8a      	ldrb	r2, [r1, r2]
 800c056:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c05a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c05c:	2000      	movs	r0, #0
}
 800c05e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c060:	2210      	movs	r2, #16
 800c062:	310d      	adds	r1, #13
 800c064:	f104 0012 	add.w	r0, r4, #18
 800c068:	f003 fa9b 	bl	800f5a2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c06c:	221d      	movs	r2, #29
 800c06e:	e7e1      	b.n	800c034 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c070:	2002      	movs	r0, #2
}
 800c072:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c074:	2002      	movs	r0, #2
 800c076:	e7f2      	b.n	800c05e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800c078:	2001      	movs	r0, #1
 800c07a:	e7f0      	b.n	800c05e <LoRaMacParserJoinAccept+0x86>

0800c07c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d058      	beq.n	800c132 <LoRaMacParserData+0xb6>
{
 800c080:	b510      	push	{r4, lr}
 800c082:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c084:	6801      	ldr	r1, [r0, #0]
 800c086:	2900      	cmp	r1, #0
 800c088:	d055      	beq.n	800c136 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c08a:	780b      	ldrb	r3, [r1, #0]
 800c08c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c08e:	784b      	ldrb	r3, [r1, #1]
 800c090:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c092:	788a      	ldrb	r2, [r1, #2]
 800c094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c098:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c09a:	78ca      	ldrb	r2, [r1, #3]
 800c09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c0a2:	790a      	ldrb	r2, [r1, #4]
 800c0a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c0a8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c0aa:	794b      	ldrb	r3, [r1, #5]
 800c0ac:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c0ae:	798b      	ldrb	r3, [r1, #6]
 800c0b0:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c0b2:	79ca      	ldrb	r2, [r1, #7]
 800c0b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c0b8:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c0ba:	7b02      	ldrb	r2, [r0, #12]
 800c0bc:	f002 020f 	and.w	r2, r2, #15
 800c0c0:	3108      	adds	r1, #8
 800c0c2:	3010      	adds	r0, #16
 800c0c4:	f003 fa6d 	bl	800f5a2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c0c8:	7b23      	ldrb	r3, [r4, #12]
 800c0ca:	f003 030f 	and.w	r3, r3, #15
 800c0ce:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c0d8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c0dc:	7922      	ldrb	r2, [r4, #4]
 800c0de:	1a11      	subs	r1, r2, r0
 800c0e0:	2904      	cmp	r1, #4
 800c0e2:	dc16      	bgt.n	800c112 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	7923      	ldrb	r3, [r4, #4]
 800c0e8:	441a      	add	r2, r3
 800c0ea:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c0ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c0f0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c0f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c0f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c0fa:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c0fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c102:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c104:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c108:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c10c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c10e:	2000      	movs	r0, #0
}
 800c110:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	3309      	adds	r3, #9
 800c116:	5c08      	ldrb	r0, [r1, r0]
 800c118:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c11c:	1ad2      	subs	r2, r2, r3
 800c11e:	b2d2      	uxtb	r2, r2
 800c120:	3a04      	subs	r2, #4
 800c122:	b2d2      	uxtb	r2, r2
 800c124:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c128:	4419      	add	r1, r3
 800c12a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c12c:	f003 fa39 	bl	800f5a2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c130:	e7d8      	b.n	800c0e4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c132:	2002      	movs	r0, #2
}
 800c134:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c136:	2002      	movs	r0, #2
 800c138:	e7ea      	b.n	800c110 <LoRaMacParserData+0x94>

0800c13a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c13a:	b370      	cbz	r0, 800c19a <LoRaMacSerializerJoinRequest+0x60>
{
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c140:	6803      	ldr	r3, [r0, #0]
 800c142:	b363      	cbz	r3, 800c19e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c144:	7902      	ldrb	r2, [r0, #4]
 800c146:	2a16      	cmp	r2, #22
 800c148:	d92b      	bls.n	800c1a2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c14a:	7942      	ldrb	r2, [r0, #5]
 800c14c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c14e:	4601      	mov	r1, r0
 800c150:	f851 0b06 	ldr.w	r0, [r1], #6
 800c154:	2208      	movs	r2, #8
 800c156:	3001      	adds	r0, #1
 800c158:	f003 fa2e 	bl	800f5b8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c15c:	4621      	mov	r1, r4
 800c15e:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c162:	2208      	movs	r2, #8
 800c164:	3009      	adds	r0, #9
 800c166:	f003 fa27 	bl	800f5b8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c16a:	8ae2      	ldrh	r2, [r4, #22]
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c170:	8ae3      	ldrh	r3, [r4, #22]
 800c172:	6822      	ldr	r2, [r4, #0]
 800c174:	0a1b      	lsrs	r3, r3, #8
 800c176:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c178:	69a2      	ldr	r2, [r4, #24]
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c17e:	69a3      	ldr	r3, [r4, #24]
 800c180:	0a1b      	lsrs	r3, r3, #8
 800c182:	6822      	ldr	r2, [r4, #0]
 800c184:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c186:	8b62      	ldrh	r2, [r4, #26]
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c18c:	7ee2      	ldrb	r2, [r4, #27]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c192:	2317      	movs	r3, #23
 800c194:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c196:	2000      	movs	r0, #0
}
 800c198:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c19a:	2001      	movs	r0, #1
}
 800c19c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c19e:	2001      	movs	r0, #1
 800c1a0:	e7fa      	b.n	800c198 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c1a2:	2002      	movs	r0, #2
 800c1a4:	e7f8      	b.n	800c198 <LoRaMacSerializerJoinRequest+0x5e>

0800c1a6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d066      	beq.n	800c278 <LoRaMacSerializerData+0xd2>
{
 800c1aa:	b538      	push	{r3, r4, r5, lr}
 800c1ac:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1ae:	6801      	ldr	r1, [r0, #0]
 800c1b0:	2900      	cmp	r1, #0
 800c1b2:	d063      	beq.n	800c27c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c1b4:	7b02      	ldrb	r2, [r0, #12]
 800c1b6:	f002 020f 	and.w	r2, r2, #15
 800c1ba:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c1be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c1c2:	b10b      	cbz	r3, 800c1c8 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c1c4:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c1c8:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c1ce:	7922      	ldrb	r2, [r4, #4]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d355      	bcc.n	800c280 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1d4:	7963      	ldrb	r3, [r4, #5]
 800c1d6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c1d8:	68a2      	ldr	r2, [r4, #8]
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	0a1b      	lsrs	r3, r3, #8
 800c1e2:	6822      	ldr	r2, [r4, #0]
 800c1e4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c1e6:	8962      	ldrh	r2, [r4, #10]
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c1ec:	7ae2      	ldrb	r2, [r4, #11]
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	7b22      	ldrb	r2, [r4, #12]
 800c1f6:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c1f8:	89e2      	ldrh	r2, [r4, #14]
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c1fe:	89e3      	ldrh	r3, [r4, #14]
 800c200:	6822      	ldr	r2, [r4, #0]
 800c202:	0a1b      	lsrs	r3, r3, #8
 800c204:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c206:	4621      	mov	r1, r4
 800c208:	f851 0b10 	ldr.w	r0, [r1], #16
 800c20c:	7b22      	ldrb	r2, [r4, #12]
 800c20e:	f002 020f 	and.w	r2, r2, #15
 800c212:	3008      	adds	r0, #8
 800c214:	f003 f9c5 	bl	800f5a2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c218:	7b23      	ldrb	r3, [r4, #12]
 800c21a:	f003 030f 	and.w	r3, r3, #15
 800c21e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c222:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c226:	b12a      	cbz	r2, 800c234 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c228:	6822      	ldr	r2, [r4, #0]
 800c22a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c22e:	5551      	strb	r1, [r2, r5]
 800c230:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c23a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c23c:	4428      	add	r0, r5
 800c23e:	f003 f9b0 	bl	800f5a2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c242:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c246:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c248:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c24a:	6821      	ldr	r1, [r4, #0]
 800c24c:	1c5a      	adds	r2, r3, #1
 800c24e:	b292      	uxth	r2, r2
 800c250:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c252:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c254:	0a08      	lsrs	r0, r1, #8
 800c256:	6825      	ldr	r5, [r4, #0]
 800c258:	1c99      	adds	r1, r3, #2
 800c25a:	b289      	uxth	r1, r1
 800c25c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c25e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	1cda      	adds	r2, r3, #3
 800c264:	b292      	uxth	r2, r2
 800c266:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c268:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c26c:	6821      	ldr	r1, [r4, #0]
 800c26e:	3304      	adds	r3, #4
 800c270:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c272:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c274:	2000      	movs	r0, #0
}
 800c276:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c278:	2001      	movs	r0, #1
}
 800c27a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c27c:	2001      	movs	r0, #1
 800c27e:	e7fa      	b.n	800c276 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c280:	2002      	movs	r0, #2
 800c282:	e7f8      	b.n	800c276 <LoRaMacSerializerData+0xd0>

0800c284 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c284:	4b02      	ldr	r3, [pc, #8]	; (800c290 <NvmDataMgmtEvent+0xc>)
 800c286:	881a      	ldrh	r2, [r3, #0]
 800c288:	4310      	orrs	r0, r2
 800c28a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	20000c5c 	.word	0x20000c5c

0800c294 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c294:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c296:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <NvmDataMgmtStoreBegin+0x1c>)
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	b11b      	cbz	r3, 800c2a4 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c29c:	f7fe f8dc 	bl	800a458 <LoRaMacStop>
 800c2a0:	b918      	cbnz	r0, 800c2aa <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c2a2:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c2a4:	f06f 0001 	mvn.w	r0, #1
 800c2a8:	e7fb      	b.n	800c2a2 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c2aa:	f06f 0002 	mvn.w	r0, #2
 800c2ae:	e7f8      	b.n	800c2a2 <NvmDataMgmtStoreBegin+0xe>
 800c2b0:	20000c5c 	.word	0x20000c5c

0800c2b4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c2b4:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c2b6:	2400      	movs	r4, #0
 800c2b8:	4b02      	ldr	r3, [pc, #8]	; (800c2c4 <NvmDataMgmtStoreEnd+0x10>)
 800c2ba:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c2bc:	f7fe f8c0 	bl	800a440 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	bd10      	pop	{r4, pc}
 800c2c4:	20000c5c 	.word	0x20000c5c

0800c2c8 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c2c8:	2805      	cmp	r0, #5
 800c2ca:	d005      	beq.n	800c2d8 <RegionIsActive+0x10>
 800c2cc:	2808      	cmp	r0, #8
 800c2ce:	d001      	beq.n	800c2d4 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c2d0:	2000      	movs	r0, #0
        }
    }
}
 800c2d2:	4770      	bx	lr
    switch( region )
 800c2d4:	2001      	movs	r0, #1
 800c2d6:	4770      	bx	lr
 800c2d8:	2001      	movs	r0, #1
 800c2da:	4770      	bx	lr

0800c2dc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c2dc:	b500      	push	{lr}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	9200      	str	r2, [sp, #0]
    switch( region )
 800c2e8:	2b05      	cmp	r3, #5
 800c2ea:	d004      	beq.n	800c2f6 <RegionGetPhyParam+0x1a>
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d009      	beq.n	800c304 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c2f0:	9b00      	ldr	r3, [sp, #0]
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	e002      	b.n	800c2fc <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800c2f6:	f000 fdf9 	bl	800ceec <RegionEU868GetPhyParam>
 800c2fa:	9001      	str	r0, [sp, #4]
        }
    }
}
 800c2fc:	9801      	ldr	r0, [sp, #4]
 800c2fe:	b003      	add	sp, #12
 800c300:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800c304:	f001 fc1c 	bl	800db40 <RegionUS915GetPhyParam>
 800c308:	9001      	str	r0, [sp, #4]
 800c30a:	e7f7      	b.n	800c2fc <RegionGetPhyParam+0x20>

0800c30c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c30c:	b508      	push	{r3, lr}
 800c30e:	4603      	mov	r3, r0
 800c310:	4608      	mov	r0, r1
    switch( region )
 800c312:	2b05      	cmp	r3, #5
 800c314:	d002      	beq.n	800c31c <RegionSetBandTxDone+0x10>
 800c316:	2b08      	cmp	r3, #8
 800c318:	d003      	beq.n	800c322 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800c31a:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800c31c:	f000 fea8 	bl	800d070 <RegionEU868SetBandTxDone>
 800c320:	e7fb      	b.n	800c31a <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800c322:	f001 fce9 	bl	800dcf8 <RegionUS915SetBandTxDone>
 800c326:	e7f8      	b.n	800c31a <RegionSetBandTxDone+0xe>

0800c328 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c328:	b508      	push	{r3, lr}
 800c32a:	4603      	mov	r3, r0
 800c32c:	4608      	mov	r0, r1
    switch( region )
 800c32e:	2b05      	cmp	r3, #5
 800c330:	d002      	beq.n	800c338 <RegionInitDefaults+0x10>
 800c332:	2b08      	cmp	r3, #8
 800c334:	d003      	beq.n	800c33e <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800c336:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800c338:	f000 feb8 	bl	800d0ac <RegionEU868InitDefaults>
 800c33c:	e7fb      	b.n	800c336 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800c33e:	f001 fcf9 	bl	800dd34 <RegionUS915InitDefaults>
}
 800c342:	e7f8      	b.n	800c336 <RegionInitDefaults+0xe>

0800c344 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c344:	b508      	push	{r3, lr}
 800c346:	4603      	mov	r3, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
    switch( region )
 800c34c:	2b05      	cmp	r3, #5
 800c34e:	d003      	beq.n	800c358 <RegionVerify+0x14>
 800c350:	2b08      	cmp	r3, #8
 800c352:	d004      	beq.n	800c35e <RegionVerify+0x1a>
 800c354:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c356:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800c358:	f000 ff14 	bl	800d184 <RegionEU868Verify>
 800c35c:	e7fb      	b.n	800c356 <RegionVerify+0x12>
        US915_VERIFY( );
 800c35e:	f001 fd8f 	bl	800de80 <RegionUS915Verify>
 800c362:	e7f8      	b.n	800c356 <RegionVerify+0x12>

0800c364 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c364:	b508      	push	{r3, lr}
 800c366:	4603      	mov	r3, r0
 800c368:	4608      	mov	r0, r1
    switch( region )
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d002      	beq.n	800c374 <RegionApplyCFList+0x10>
 800c36e:	2b08      	cmp	r3, #8
 800c370:	d003      	beq.n	800c37a <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800c372:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800c374:	f001 fad8 	bl	800d928 <RegionEU868ApplyCFList>
 800c378:	e7fb      	b.n	800c372 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800c37a:	f001 fdb1 	bl	800dee0 <RegionUS915ApplyCFList>
}
 800c37e:	e7f8      	b.n	800c372 <RegionApplyCFList+0xe>

0800c380 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800c380:	b508      	push	{r3, lr}
 800c382:	4603      	mov	r3, r0
 800c384:	4608      	mov	r0, r1
    switch( region )
 800c386:	2b05      	cmp	r3, #5
 800c388:	d003      	beq.n	800c392 <RegionChanMaskSet+0x12>
 800c38a:	2b08      	cmp	r3, #8
 800c38c:	d004      	beq.n	800c398 <RegionChanMaskSet+0x18>
 800c38e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c390:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800c392:	f000 ff3d 	bl	800d210 <RegionEU868ChanMaskSet>
 800c396:	e7fb      	b.n	800c390 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800c398:	f001 fde4 	bl	800df64 <RegionUS915ChanMaskSet>
 800c39c:	e7f8      	b.n	800c390 <RegionChanMaskSet+0x10>

0800c39e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c39e:	b508      	push	{r3, lr}
 800c3a0:	4684      	mov	ip, r0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	461a      	mov	r2, r3
    switch( region )
 800c3a8:	f1bc 0f05 	cmp.w	ip, #5
 800c3ac:	d003      	beq.n	800c3b6 <RegionComputeRxWindowParameters+0x18>
 800c3ae:	f1bc 0f08 	cmp.w	ip, #8
 800c3b2:	d004      	beq.n	800c3be <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800c3b4:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c3b6:	9b02      	ldr	r3, [sp, #8]
 800c3b8:	f000 ff48 	bl	800d24c <RegionEU868ComputeRxWindowParameters>
 800c3bc:	e7fa      	b.n	800c3b4 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c3be:	9b02      	ldr	r3, [sp, #8]
 800c3c0:	f001 fe14 	bl	800dfec <RegionUS915ComputeRxWindowParameters>
}
 800c3c4:	e7f6      	b.n	800c3b4 <RegionComputeRxWindowParameters+0x16>

0800c3c6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c3c6:	b508      	push	{r3, lr}
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	4608      	mov	r0, r1
 800c3cc:	4611      	mov	r1, r2
    switch( region )
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d003      	beq.n	800c3da <RegionRxConfig+0x14>
 800c3d2:	2b08      	cmp	r3, #8
 800c3d4:	d004      	beq.n	800c3e0 <RegionRxConfig+0x1a>
 800c3d6:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c3d8:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800c3da:	f000 ff6d 	bl	800d2b8 <RegionEU868RxConfig>
 800c3de:	e7fb      	b.n	800c3d8 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800c3e0:	f001 fe32 	bl	800e048 <RegionUS915RxConfig>
 800c3e4:	e7f8      	b.n	800c3d8 <RegionRxConfig+0x12>

0800c3e6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c3e6:	b508      	push	{r3, lr}
 800c3e8:	4684      	mov	ip, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	461a      	mov	r2, r3
    switch( region )
 800c3f0:	f1bc 0f05 	cmp.w	ip, #5
 800c3f4:	d004      	beq.n	800c400 <RegionTxConfig+0x1a>
 800c3f6:	f1bc 0f08 	cmp.w	ip, #8
 800c3fa:	d004      	beq.n	800c406 <RegionTxConfig+0x20>
 800c3fc:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800c3fe:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800c400:	f000 ffde 	bl	800d3c0 <RegionEU868TxConfig>
 800c404:	e7fb      	b.n	800c3fe <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800c406:	f001 fe79 	bl	800e0fc <RegionUS915TxConfig>
 800c40a:	e7f8      	b.n	800c3fe <RegionTxConfig+0x18>

0800c40c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c40c:	b500      	push	{lr}
 800c40e:	b083      	sub	sp, #12
 800c410:	4684      	mov	ip, r0
 800c412:	4608      	mov	r0, r1
 800c414:	4611      	mov	r1, r2
 800c416:	461a      	mov	r2, r3
    switch( region )
 800c418:	f1bc 0f05 	cmp.w	ip, #5
 800c41c:	d006      	beq.n	800c42c <RegionLinkAdrReq+0x20>
 800c41e:	f1bc 0f08 	cmp.w	ip, #8
 800c422:	d009      	beq.n	800c438 <RegionLinkAdrReq+0x2c>
 800c424:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c426:	b003      	add	sp, #12
 800c428:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800c42c:	9b05      	ldr	r3, [sp, #20]
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	9b04      	ldr	r3, [sp, #16]
 800c432:	f001 f85d 	bl	800d4f0 <RegionEU868LinkAdrReq>
 800c436:	e7f6      	b.n	800c426 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800c438:	9b05      	ldr	r3, [sp, #20]
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	9b04      	ldr	r3, [sp, #16]
 800c43e:	f001 fed7 	bl	800e1f0 <RegionUS915LinkAdrReq>
 800c442:	e7f0      	b.n	800c426 <RegionLinkAdrReq+0x1a>

0800c444 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c444:	b508      	push	{r3, lr}
 800c446:	4603      	mov	r3, r0
 800c448:	4608      	mov	r0, r1
    switch( region )
 800c44a:	2b05      	cmp	r3, #5
 800c44c:	d003      	beq.n	800c456 <RegionRxParamSetupReq+0x12>
 800c44e:	2b08      	cmp	r3, #8
 800c450:	d004      	beq.n	800c45c <RegionRxParamSetupReq+0x18>
 800c452:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c454:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800c456:	f001 f90f 	bl	800d678 <RegionEU868RxParamSetupReq>
 800c45a:	e7fb      	b.n	800c454 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800c45c:	f002 f814 	bl	800e488 <RegionUS915RxParamSetupReq>
 800c460:	e7f8      	b.n	800c454 <RegionRxParamSetupReq+0x10>

0800c462 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800c462:	b508      	push	{r3, lr}
 800c464:	4603      	mov	r3, r0
 800c466:	4608      	mov	r0, r1
    switch( region )
 800c468:	2b05      	cmp	r3, #5
 800c46a:	d003      	beq.n	800c474 <RegionNewChannelReq+0x12>
 800c46c:	2b08      	cmp	r3, #8
 800c46e:	d004      	beq.n	800c47a <RegionNewChannelReq+0x18>
 800c470:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c472:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800c474:	f001 fa99 	bl	800d9aa <RegionEU868NewChannelReq>
 800c478:	e7fb      	b.n	800c472 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800c47a:	f002 f830 	bl	800e4de <RegionUS915NewChannelReq>
 800c47e:	e7f8      	b.n	800c472 <RegionNewChannelReq+0x10>

0800c480 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800c480:	b508      	push	{r3, lr}
 800c482:	4603      	mov	r3, r0
 800c484:	4608      	mov	r0, r1
    switch( region )
 800c486:	2b05      	cmp	r3, #5
 800c488:	d003      	beq.n	800c492 <RegionTxParamSetupReq+0x12>
 800c48a:	2b08      	cmp	r3, #8
 800c48c:	d004      	beq.n	800c498 <RegionTxParamSetupReq+0x18>
 800c48e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c490:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800c492:	f001 f915 	bl	800d6c0 <RegionEU868TxParamSetupReq>
 800c496:	e7fb      	b.n	800c490 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800c498:	f002 f824 	bl	800e4e4 <RegionUS915TxParamSetupReq>
 800c49c:	e7f8      	b.n	800c490 <RegionTxParamSetupReq+0x10>

0800c49e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800c49e:	b508      	push	{r3, lr}
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	4608      	mov	r0, r1
    switch( region )
 800c4a4:	2b05      	cmp	r3, #5
 800c4a6:	d003      	beq.n	800c4b0 <RegionDlChannelReq+0x12>
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d004      	beq.n	800c4b6 <RegionDlChannelReq+0x18>
 800c4ac:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c4ae:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800c4b0:	f001 f90a 	bl	800d6c8 <RegionEU868DlChannelReq>
 800c4b4:	e7fb      	b.n	800c4ae <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800c4b6:	f002 f818 	bl	800e4ea <RegionUS915DlChannelReq>
 800c4ba:	e7f8      	b.n	800c4ae <RegionDlChannelReq+0x10>

0800c4bc <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c4bc:	b508      	push	{r3, lr}
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	4611      	mov	r1, r2
    switch( region )
 800c4c4:	2b05      	cmp	r3, #5
 800c4c6:	d003      	beq.n	800c4d0 <RegionAlternateDr+0x14>
 800c4c8:	2b08      	cmp	r3, #8
 800c4ca:	d004      	beq.n	800c4d6 <RegionAlternateDr+0x1a>
 800c4cc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800c4ce:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800c4d0:	f001 f926 	bl	800d720 <RegionEU868AlternateDr>
 800c4d4:	e7fb      	b.n	800c4ce <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800c4d6:	f002 f80b 	bl	800e4f0 <RegionUS915AlternateDr>
 800c4da:	e7f8      	b.n	800c4ce <RegionAlternateDr+0x12>

0800c4dc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c4dc:	b508      	push	{r3, lr}
 800c4de:	4684      	mov	ip, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	461a      	mov	r2, r3
    switch( region )
 800c4e6:	f1bc 0f05 	cmp.w	ip, #5
 800c4ea:	d004      	beq.n	800c4f6 <RegionNextChannel+0x1a>
 800c4ec:	f1bc 0f08 	cmp.w	ip, #8
 800c4f0:	d005      	beq.n	800c4fe <RegionNextChannel+0x22>
 800c4f2:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800c4f4:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800c4f6:	9b02      	ldr	r3, [sp, #8]
 800c4f8:	f001 f914 	bl	800d724 <RegionEU868NextChannel>
 800c4fc:	e7fa      	b.n	800c4f4 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	f002 f81c 	bl	800e53c <RegionUS915NextChannel>
 800c504:	e7f6      	b.n	800c4f4 <RegionNextChannel+0x18>

0800c506 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c506:	b508      	push	{r3, lr}
 800c508:	4603      	mov	r3, r0
 800c50a:	4608      	mov	r0, r1
    switch( region )
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d002      	beq.n	800c516 <RegionSetContinuousWave+0x10>
 800c510:	2b08      	cmp	r3, #8
 800c512:	d003      	beq.n	800c51c <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800c514:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800c516:	f001 fa73 	bl	800da00 <RegionEU868SetContinuousWave>
 800c51a:	e7fb      	b.n	800c514 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800c51c:	f002 f8c2 	bl	800e6a4 <RegionUS915SetContinuousWave>
}
 800c520:	e7f8      	b.n	800c514 <RegionSetContinuousWave+0xe>

0800c522 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c522:	b508      	push	{r3, lr}
 800c524:	4684      	mov	ip, r0
 800c526:	4608      	mov	r0, r1
 800c528:	4611      	mov	r1, r2
 800c52a:	461a      	mov	r2, r3
    switch( region )
 800c52c:	f1bc 0f05 	cmp.w	ip, #5
 800c530:	d004      	beq.n	800c53c <RegionApplyDrOffset+0x1a>
 800c532:	f1bc 0f08 	cmp.w	ip, #8
 800c536:	d004      	beq.n	800c542 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c538:	b2c8      	uxtb	r0, r1
 800c53a:	e001      	b.n	800c540 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800c53c:	f001 fa8e 	bl	800da5c <RegionEU868ApplyDrOffset>
        }
    }
}
 800c540:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800c542:	f002 f8e3 	bl	800e70c <RegionUS915ApplyDrOffset>
 800c546:	e7fb      	b.n	800c540 <RegionApplyDrOffset+0x1e>

0800c548 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c548:	4800      	ldr	r0, [pc, #0]	; (800c54c <RegionGetVersion+0x4>)
 800c54a:	4770      	bx	lr
 800c54c:	01010003 	.word	0x01010003

0800c550 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800c550:	468c      	mov	ip, r1
 800c552:	b1a9      	cbz	r1, 800c580 <FindAvailable125kHzChannels+0x30>
 800c554:	b1b2      	cbz	r2, 800c584 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800c55a:	e001      	b.n	800c560 <FindAvailable125kHzChannels+0x10>
 800c55c:	3301      	adds	r3, #1
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b07      	cmp	r3, #7
 800c562:	d80b      	bhi.n	800c57c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800c564:	fa40 f103 	asr.w	r1, r0, r3
 800c568:	f011 0f01 	tst.w	r1, #1
 800c56c:	d0f6      	beq.n	800c55c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800c56e:	7811      	ldrb	r1, [r2, #0]
 800c570:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800c574:	7811      	ldrb	r1, [r2, #0]
 800c576:	3101      	adds	r1, #1
 800c578:	7011      	strb	r1, [r2, #0]
 800c57a:	e7ef      	b.n	800c55c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800c57c:	2000      	movs	r0, #0
 800c57e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c580:	2003      	movs	r0, #3
 800c582:	4770      	bx	lr
 800c584:	2003      	movs	r0, #3
}
 800c586:	4770      	bx	lr

0800c588 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800c588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800c58c:	2300      	movs	r3, #0
 800c58e:	9302      	str	r3, [sp, #8]
 800c590:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800c592:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800c596:	2800      	cmp	r0, #0
 800c598:	d03e      	beq.n	800c618 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800c59a:	460d      	mov	r5, r1
 800c59c:	4617      	mov	r7, r2
 800c59e:	4606      	mov	r6, r0
 800c5a0:	2900      	cmp	r1, #0
 800c5a2:	d03b      	beq.n	800c61c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	d03b      	beq.n	800c620 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800c5a8:	780c      	ldrb	r4, [r1, #0]
 800c5aa:	e017      	b.n	800c5dc <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800c5ac:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800c5b0:	0a00      	lsrs	r0, r0, #8
 800c5b2:	e019      	b.n	800c5e8 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800c5b4:	3901      	subs	r1, #1
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f002 ffe6 	bl	800f588 <randr>
 800c5bc:	f100 0310 	add.w	r3, r0, #16
 800c5c0:	eb0d 0003 	add.w	r0, sp, r3
 800c5c4:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800c5c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5cc:	703b      	strb	r3, [r7, #0]
 800c5ce:	e016      	b.n	800c5fe <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800c5d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5d4:	b9cb      	cbnz	r3, 800c60a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800c5d6:	782a      	ldrb	r2, [r5, #0]
 800c5d8:	42a2      	cmp	r2, r4
 800c5da:	d016      	beq.n	800c60a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800c5dc:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800c5de:	f014 0f01 	tst.w	r4, #1
 800c5e2:	d1e3      	bne.n	800c5ac <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800c5e4:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800c5e8:	f10d 0207 	add.w	r2, sp, #7
 800c5ec:	a902      	add	r1, sp, #8
 800c5ee:	f7ff ffaf 	bl	800c550 <FindAvailable125kHzChannels>
 800c5f2:	2803      	cmp	r0, #3
 800c5f4:	d00b      	beq.n	800c60e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800c5f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c5fa:	2900      	cmp	r1, #0
 800c5fc:	d1da      	bne.n	800c5b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800c5fe:	3401      	adds	r4, #1
 800c600:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800c602:	2c07      	cmp	r4, #7
 800c604:	d9e4      	bls.n	800c5d0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800c606:	2400      	movs	r4, #0
 800c608:	e7e2      	b.n	800c5d0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800c60a:	b913      	cbnz	r3, 800c612 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800c60c:	2003      	movs	r0, #3
}
 800c60e:	b005      	add	sp, #20
 800c610:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800c612:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800c614:	2000      	movs	r0, #0
 800c616:	e7fa      	b.n	800c60e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c618:	2003      	movs	r0, #3
 800c61a:	e7f8      	b.n	800c60e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c61c:	2003      	movs	r0, #3
 800c61e:	e7f6      	b.n	800c60e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c620:	2003      	movs	r0, #3
 800c622:	e7f4      	b.n	800c60e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800c624 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800c624:	fb02 1000 	mla	r0, r2, r0, r1
 800c628:	4770      	bx	lr

0800c62a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c62a:	b082      	sub	sp, #8
 800c62c:	f10d 0c08 	add.w	ip, sp, #8
 800c630:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c634:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c636:	b971      	cbnz	r1, 800c656 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c638:	4613      	mov	r3, r2
 800c63a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c63e:	d306      	bcc.n	800c64e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c640:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c644:	4293      	cmp	r3, r2
 800c646:	d80a      	bhi.n	800c65e <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c64c:	e000      	b.n	800c650 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c64e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c650:	4298      	cmp	r0, r3
 800c652:	bf38      	it	cc
 800c654:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c656:	b900      	cbnz	r0, 800c65a <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c658:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c65a:	b002      	add	sp, #8
 800c65c:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c65e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c662:	e7f5      	b.n	800c650 <GetDutyCycle+0x26>

0800c664 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c664:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c666:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c668:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c66a:	e001      	b.n	800c670 <CountChannels+0xc>
 800c66c:	3301      	adds	r3, #1
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	428b      	cmp	r3, r1
 800c672:	d207      	bcs.n	800c684 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c674:	2201      	movs	r2, #1
 800c676:	409a      	lsls	r2, r3
 800c678:	ea32 020c 	bics.w	r2, r2, ip
 800c67c:	d1f6      	bne.n	800c66c <CountChannels+0x8>
        {
            nbActiveBits++;
 800c67e:	3001      	adds	r0, #1
 800c680:	b2c0      	uxtb	r0, r0
 800c682:	e7f3      	b.n	800c66c <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c684:	4770      	bx	lr
	...

0800c688 <SetMaxTimeCredits>:
{
 800c688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c68c:	b089      	sub	sp, #36	; 0x24
 800c68e:	4604      	mov	r4, r0
 800c690:	460e      	mov	r6, r1
 800c692:	ad02      	add	r5, sp, #8
 800c694:	e885 000c 	stmia.w	r5, {r2, r3}
 800c698:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c69c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c6a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c6a4:	f005 fcee 	bl	8012084 <SysTimeToMs>
 800c6a8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c6b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7ff ffb7 	bl	800c62a <GetDutyCycle>
 800c6bc:	4605      	mov	r5, r0
    if( joined == false )
 800c6be:	2e00      	cmp	r6, #0
 800c6c0:	d14c      	bne.n	800c75c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c6c2:	2864      	cmp	r0, #100	; 0x64
 800c6c4:	d025      	beq.n	800c712 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c6c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c6ca:	d025      	beq.n	800c718 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c6cc:	4e27      	ldr	r6, [pc, #156]	; (800c76c <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c6ce:	68a1      	ldr	r1, [r4, #8]
 800c6d0:	a806      	add	r0, sp, #24
 800c6d2:	f005 fcf7 	bl	80120c4 <SysTimeFromMs>
 800c6d6:	9b07      	ldr	r3, [sp, #28]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	aa02      	add	r2, sp, #8
 800c6de:	ca06      	ldmia	r2, {r1, r2}
 800c6e0:	a804      	add	r0, sp, #16
 800c6e2:	f005 fc56 	bl	8011f92 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c6e6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ea:	d102      	bne.n	800c6f2 <SetMaxTimeCredits+0x6a>
 800c6ec:	f1b9 0f00 	cmp.w	r9, #0
 800c6f0:	d002      	beq.n	800c6f8 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c6f2:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	d012      	beq.n	800c71e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800c6f8:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	4a1c      	ldr	r2, [pc, #112]	; (800c770 <SetMaxTimeCredits+0xe8>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d812      	bhi.n	800c728 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800c702:	6863      	ldr	r3, [r4, #4]
 800c704:	b903      	cbnz	r3, 800c708 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800c706:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c708:	6126      	str	r6, [r4, #16]
}
 800c70a:	4628      	mov	r0, r5
 800c70c:	b009      	add	sp, #36	; 0x24
 800c70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800c712:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c714:	4e17      	ldr	r6, [pc, #92]	; (800c774 <SetMaxTimeCredits+0xec>)
 800c716:	e7da      	b.n	800c6ce <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c718:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c71a:	4e17      	ldr	r6, [pc, #92]	; (800c778 <SetMaxTimeCredits+0xf0>)
 800c71c:	e7d7      	b.n	800c6ce <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c71e:	9a04      	ldr	r2, [sp, #16]
 800c720:	4b16      	ldr	r3, [pc, #88]	; (800c77c <SetMaxTimeCredits+0xf4>)
 800c722:	429a      	cmp	r2, r3
 800c724:	d9ed      	bls.n	800c702 <SetMaxTimeCredits+0x7a>
 800c726:	e7e7      	b.n	800c6f8 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c728:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c72c:	3b30      	subs	r3, #48	; 0x30
 800c72e:	4a14      	ldr	r2, [pc, #80]	; (800c780 <SetMaxTimeCredits+0xf8>)
 800c730:	fba2 2303 	umull	r2, r3, r2, r3
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c738:	4a12      	ldr	r2, [pc, #72]	; (800c784 <SetMaxTimeCredits+0xfc>)
 800c73a:	fb02 f303 	mul.w	r3, r2, r3
 800c73e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c740:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c744:	3330      	adds	r3, #48	; 0x30
 800c746:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c74e:	ab04      	add	r3, sp, #16
 800c750:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c754:	f005 fc96 	bl	8012084 <SysTimeToMs>
 800c758:	60a0      	str	r0, [r4, #8]
 800c75a:	e7d2      	b.n	800c702 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800c75c:	f1b8 0f00 	cmp.w	r8, #0
 800c760:	d102      	bne.n	800c768 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800c762:	4e04      	ldr	r6, [pc, #16]	; (800c774 <SetMaxTimeCredits+0xec>)
 800c764:	60e6      	str	r6, [r4, #12]
 800c766:	e7cc      	b.n	800c702 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c768:	4e02      	ldr	r6, [pc, #8]	; (800c774 <SetMaxTimeCredits+0xec>)
 800c76a:	e7ca      	b.n	800c702 <SetMaxTimeCredits+0x7a>
 800c76c:	02932e00 	.word	0x02932e00
 800c770:	0001ec2f 	.word	0x0001ec2f
 800c774:	001b7740 	.word	0x001b7740
 800c778:	0112a880 	.word	0x0112a880
 800c77c:	0001517f 	.word	0x0001517f
 800c780:	c22e4507 	.word	0xc22e4507
 800c784:	00015180 	.word	0x00015180

0800c788 <UpdateTimeCredits>:
{
 800c788:	b570      	push	{r4, r5, r6, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	4604      	mov	r4, r0
 800c78e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	9200      	str	r2, [sp, #0]
 800c794:	ab06      	add	r3, sp, #24
 800c796:	cb0c      	ldmia	r3, {r2, r3}
 800c798:	f7ff ff76 	bl	800c688 <SetMaxTimeCredits>
 800c79c:	4605      	mov	r5, r0
    if( joined == true )
 800c79e:	b94e      	cbnz	r6, 800c7b4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800c7a0:	68e2      	ldr	r2, [r4, #12]
 800c7a2:	6923      	ldr	r3, [r4, #16]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d900      	bls.n	800c7aa <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800c7a8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c7aa:	9b08      	ldr	r3, [sp, #32]
 800c7ac:	6063      	str	r3, [r4, #4]
}
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	b002      	add	sp, #8
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c7b4:	6860      	ldr	r0, [r4, #4]
 800c7b6:	f005 fce5 	bl	8012184 <UTIL_TIMER_GetElapsedTime>
 800c7ba:	68e3      	ldr	r3, [r4, #12]
 800c7bc:	4403      	add	r3, r0
 800c7be:	60e3      	str	r3, [r4, #12]
 800c7c0:	e7ee      	b.n	800c7a0 <UpdateTimeCredits+0x18>

0800c7c2 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c7c2:	4288      	cmp	r0, r1
 800c7c4:	db03      	blt.n	800c7ce <RegionCommonValueInRange+0xc>
 800c7c6:	4290      	cmp	r0, r2
 800c7c8:	dd03      	ble.n	800c7d2 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	4770      	bx	lr
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	4770      	bx	lr
        return 1;
 800c7d2:	2001      	movs	r0, #1
}
 800c7d4:	4770      	bx	lr

0800c7d6 <RegionCommonChanVerifyDr>:
{
 800c7d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7da:	4682      	mov	sl, r0
 800c7dc:	460e      	mov	r6, r1
 800c7de:	4690      	mov	r8, r2
 800c7e0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c7e4:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	f7ff ffe9 	bl	800c7c2 <RegionCommonValueInRange>
 800c7f0:	b338      	cbz	r0, 800c842 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c7f2:	2500      	movs	r5, #0
 800c7f4:	462f      	mov	r7, r5
 800c7f6:	e01e      	b.n	800c836 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800c7f8:	3401      	adds	r4, #1
 800c7fa:	b2e4      	uxtb	r4, r4
 800c7fc:	2c0f      	cmp	r4, #15
 800c7fe:	d816      	bhi.n	800c82e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c800:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800c804:	4123      	asrs	r3, r4
 800c806:	f013 0f01 	tst.w	r3, #1
 800c80a:	d0f5      	beq.n	800c7f8 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c80c:	193b      	adds	r3, r7, r4
 800c80e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c812:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c816:	7a19      	ldrb	r1, [r3, #8]
 800c818:	090a      	lsrs	r2, r1, #4
 800c81a:	f001 010f 	and.w	r1, r1, #15
 800c81e:	4640      	mov	r0, r8
 800c820:	f7ff ffcf 	bl	800c7c2 <RegionCommonValueInRange>
 800c824:	2801      	cmp	r0, #1
 800c826:	d1e7      	bne.n	800c7f8 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800c828:	2001      	movs	r0, #1
}
 800c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c82e:	3710      	adds	r7, #16
 800c830:	b2ff      	uxtb	r7, r7
 800c832:	3501      	adds	r5, #1
 800c834:	b2ed      	uxtb	r5, r5
 800c836:	4557      	cmp	r7, sl
 800c838:	d201      	bcs.n	800c83e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c83a:	2400      	movs	r4, #0
 800c83c:	e7de      	b.n	800c7fc <RegionCommonChanVerifyDr+0x26>
    return false;
 800c83e:	2000      	movs	r0, #0
 800c840:	e7f3      	b.n	800c82a <RegionCommonChanVerifyDr+0x54>
        return false;
 800c842:	2000      	movs	r0, #0
 800c844:	e7f1      	b.n	800c82a <RegionCommonChanVerifyDr+0x54>

0800c846 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c846:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c84a:	0913      	lsrs	r3, r2, #4
 800c84c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c850:	d30e      	bcc.n	800c870 <RegionCommonChanDisable+0x2a>
 800c852:	4291      	cmp	r1, r2
 800c854:	d20e      	bcs.n	800c874 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c856:	f001 010f 	and.w	r1, r1, #15
 800c85a:	2301      	movs	r3, #1
 800c85c:	fa03 f101 	lsl.w	r1, r3, r1
 800c860:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c864:	ea22 0101 	bic.w	r1, r2, r1
 800c868:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c86c:	4618      	mov	r0, r3
 800c86e:	4770      	bx	lr
        return false;
 800c870:	2000      	movs	r0, #0
 800c872:	4770      	bx	lr
 800c874:	2000      	movs	r0, #0
}
 800c876:	4770      	bx	lr

0800c878 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c87a:	b188      	cbz	r0, 800c8a0 <RegionCommonCountChannels+0x28>
 800c87c:	460c      	mov	r4, r1
 800c87e:	4616      	mov	r6, r2
 800c880:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800c882:	2500      	movs	r5, #0
 800c884:	e008      	b.n	800c898 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c886:	2110      	movs	r1, #16
 800c888:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800c88c:	f7ff feea 	bl	800c664 <CountChannels>
 800c890:	4405      	add	r5, r0
 800c892:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c894:	3401      	adds	r4, #1
 800c896:	b2e4      	uxtb	r4, r4
 800c898:	42b4      	cmp	r4, r6
 800c89a:	d3f4      	bcc.n	800c886 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800c89c:	4628      	mov	r0, r5
 800c89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800c8a0:	2500      	movs	r5, #0
 800c8a2:	e7fb      	b.n	800c89c <RegionCommonCountChannels+0x24>

0800c8a4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c8a4:	4684      	mov	ip, r0
 800c8a6:	b158      	cbz	r0, 800c8c0 <RegionCommonChanMaskCopy+0x1c>
 800c8a8:	b109      	cbz	r1, 800c8ae <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e006      	b.n	800c8bc <RegionCommonChanMaskCopy+0x18>
 800c8ae:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c8b0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c8b4:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d3f7      	bcc.n	800c8b0 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800c8c0:	4770      	bx	lr

0800c8c2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	aa04      	add	r2, sp, #16
 800c8ce:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c8d2:	ca0c      	ldmia	r2, {r2, r3}
 800c8d4:	f7ff fea9 	bl	800c62a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c8d8:	68e3      	ldr	r3, [r4, #12]
 800c8da:	fb05 f000 	mul.w	r0, r5, r0
 800c8de:	4283      	cmp	r3, r0
 800c8e0:	d905      	bls.n	800c8ee <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c8e2:	1a18      	subs	r0, r3, r0
 800c8e4:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800c8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ea:	b002      	add	sp, #8
 800c8ec:	4770      	bx	lr
        band->TimeCredits = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60e3      	str	r3, [r4, #12]
}
 800c8f2:	e7f8      	b.n	800c8e6 <RegionCommonSetBandTxDone+0x24>

0800c8f4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	b089      	sub	sp, #36	; 0x24
 800c8fa:	4607      	mov	r7, r0
 800c8fc:	468b      	mov	fp, r1
 800c8fe:	4691      	mov	r9, r2
 800c900:	4698      	mov	r8, r3
 800c902:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c906:	f005 fc33 	bl	8012170 <UTIL_TIMER_GetCurrentTime>
 800c90a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c90c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800c90e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c910:	f04f 33ff 	mov.w	r3, #4294967295
 800c914:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c916:	e005      	b.n	800c924 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800c918:	2301      	movs	r3, #1
 800c91a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800c91c:	441e      	add	r6, r3
 800c91e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c920:	3401      	adds	r4, #1
 800c922:	b2e4      	uxtb	r4, r4
 800c924:	454c      	cmp	r4, r9
 800c926:	d25d      	bcs.n	800c9e4 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c928:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c92c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800c930:	9b04      	ldr	r3, [sp, #16]
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	ab13      	add	r3, sp, #76	; 0x4c
 800c936:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c93a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c93e:	4653      	mov	r3, sl
 800c940:	4642      	mov	r2, r8
 800c942:	4639      	mov	r1, r7
 800c944:	4628      	mov	r0, r5
 800c946:	f7ff ff1f 	bl	800c788 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c94a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c94c:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800c950:	68ea      	ldr	r2, [r5, #12]
 800c952:	429a      	cmp	r2, r3
 800c954:	d2e0      	bcs.n	800c918 <RegionCommonUpdateBandTimeOff+0x24>
 800c956:	f1b8 0f00 	cmp.w	r8, #0
 800c95a:	d101      	bne.n	800c960 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c95c:	2f00      	cmp	r7, #0
 800c95e:	d1db      	bne.n	800c918 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800c960:	2100      	movs	r1, #0
 800c962:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800c964:	6929      	ldr	r1, [r5, #16]
 800c966:	4299      	cmp	r1, r3
 800c968:	d307      	bcc.n	800c97a <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c96a:	1a9b      	subs	r3, r3, r2
 800c96c:	9a05      	ldr	r2, [sp, #20]
 800c96e:	429a      	cmp	r2, r3
 800c970:	bf28      	it	cs
 800c972:	461a      	movcs	r2, r3
 800c974:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800c976:	3601      	adds	r6, #1
 800c978:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800c97a:	2f00      	cmp	r7, #0
 800c97c:	d1d0      	bne.n	800c920 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800c97e:	2300      	movs	r3, #0
 800c980:	9306      	str	r3, [sp, #24]
 800c982:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c986:	2864      	cmp	r0, #100	; 0x64
 800c988:	d024      	beq.n	800c9d4 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c98a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c98e:	d025      	beq.n	800c9dc <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c990:	4b19      	ldr	r3, [pc, #100]	; (800c9f8 <RegionCommonUpdateBandTimeOff+0x104>)
 800c992:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c996:	4a18      	ldr	r2, [pc, #96]	; (800c9f8 <RegionCommonUpdateBandTimeOff+0x104>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d90c      	bls.n	800c9b6 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c99c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c9a0:	3b30      	subs	r3, #48	; 0x30
 800c9a2:	4a16      	ldr	r2, [pc, #88]	; (800c9fc <RegionCommonUpdateBandTimeOff+0x108>)
 800c9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a8:	0c1b      	lsrs	r3, r3, #16
 800c9aa:	4a15      	ldr	r2, [pc, #84]	; (800ca00 <RegionCommonUpdateBandTimeOff+0x10c>)
 800c9ac:	fb03 2202 	mla	r2, r3, r2, r2
 800c9b0:	9b06      	ldr	r3, [sp, #24]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c9b6:	ad06      	add	r5, sp, #24
 800c9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9be:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f005 fae5 	bl	8011f92 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c9c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c9cc:	f005 fb5a 	bl	8012084 <SysTimeToMs>
 800c9d0:	9005      	str	r0, [sp, #20]
 800c9d2:	e7a5      	b.n	800c920 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c9d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c9d8:	9306      	str	r3, [sp, #24]
 800c9da:	e7db      	b.n	800c994 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c9dc:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c9e0:	9306      	str	r3, [sp, #24]
 800c9e2:	e7d7      	b.n	800c994 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800c9e4:	b11e      	cbz	r6, 800c9ee <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800c9e6:	9805      	ldr	r0, [sp, #20]
 800c9e8:	b009      	add	sp, #36	; 0x24
 800c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	9305      	str	r3, [sp, #20]
 800c9f4:	e7f7      	b.n	800c9e6 <RegionCommonUpdateBandTimeOff+0xf2>
 800c9f6:	bf00      	nop
 800c9f8:	0001ec30 	.word	0x0001ec30
 800c9fc:	c22e4507 	.word	0xc22e4507
 800ca00:	00015180 	.word	0x00015180

0800ca04 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800ca04:	7803      	ldrb	r3, [r0, #0]
 800ca06:	2b03      	cmp	r3, #3
 800ca08:	d001      	beq.n	800ca0e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800ca0a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800ca0c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800ca0e:	7842      	ldrb	r2, [r0, #1]
 800ca10:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca14:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800ca16:	f003 030f 	and.w	r3, r3, #15
 800ca1a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800ca1c:	0913      	lsrs	r3, r2, #4
 800ca1e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800ca20:	7883      	ldrb	r3, [r0, #2]
 800ca22:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800ca24:	78c2      	ldrb	r2, [r0, #3]
 800ca26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca2a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800ca2c:	7903      	ldrb	r3, [r0, #4]
 800ca2e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800ca30:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800ca34:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800ca36:	f003 030f 	and.w	r3, r3, #15
 800ca3a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800ca3c:	2005      	movs	r0, #5
 800ca3e:	4770      	bx	lr

0800ca40 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	b085      	sub	sp, #20
 800ca46:	4604      	mov	r4, r0
 800ca48:	4688      	mov	r8, r1
 800ca4a:	4617      	mov	r7, r2
 800ca4c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800ca4e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800ca50:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800ca54:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800ca58:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800ca5c:	7943      	ldrb	r3, [r0, #5]
 800ca5e:	b92b      	cbnz	r3, 800ca6c <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800ca60:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800ca64:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800ca68:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800ca6c:	b355      	cbz	r5, 800cac4 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800ca6e:	f1ba 0f0f 	cmp.w	sl, #15
 800ca72:	d114      	bne.n	800ca9e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800ca74:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800ca78:	f1b9 0f0f 	cmp.w	r9, #15
 800ca7c:	d020      	beq.n	800cac0 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800ca7e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800ca82:	9303      	str	r3, [sp, #12]
 800ca84:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800ca88:	461c      	mov	r4, r3
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	4648      	mov	r0, r9
 800ca8e:	f7ff fe98 	bl	800c7c2 <RegionCommonValueInRange>
 800ca92:	b9b8      	cbnz	r0, 800cac4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800ca94:	454c      	cmp	r4, r9
 800ca96:	dc21      	bgt.n	800cadc <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800ca98:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800ca9c:	e012      	b.n	800cac4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800ca9e:	69a3      	ldr	r3, [r4, #24]
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800caac:	4652      	mov	r2, sl
 800caae:	6921      	ldr	r1, [r4, #16]
 800cab0:	7b20      	ldrb	r0, [r4, #12]
 800cab2:	f7ff fe90 	bl	800c7d6 <RegionCommonChanVerifyDr>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d1de      	bne.n	800ca78 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800caba:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800cabe:	e7db      	b.n	800ca78 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800cac0:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800cac4:	2d07      	cmp	r5, #7
 800cac6:	d00c      	beq.n	800cae2 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800cac8:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800cacc:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800cad0:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800cad4:	4628      	mov	r0, r5
 800cad6:	b005      	add	sp, #20
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800cadc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cae0:	e7f0      	b.n	800cac4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800cae2:	f1bb 0f00 	cmp.w	fp, #0
 800cae6:	d1ef      	bne.n	800cac8 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800cae8:	f04f 0b01 	mov.w	fp, #1
 800caec:	e7ec      	b.n	800cac8 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800caf0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800caf0:	4b02      	ldr	r3, [pc, #8]	; (800cafc <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800caf2:	fa03 f000 	lsl.w	r0, r3, r0
}
 800caf6:	fbb0 f0f1 	udiv	r0, r0, r1
 800cafa:	4770      	bx	lr
 800cafc:	000f4240 	.word	0x000f4240

0800cb00 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800cb00:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800cb04:	fbb3 f0f0 	udiv	r0, r3, r0
 800cb08:	4770      	bx	lr
	...

0800cb0c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800cb0c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cb0e:	f1a1 0c04 	sub.w	ip, r1, #4
 800cb12:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800cb16:	fb0e f202 	mul.w	r2, lr, r2
 800cb1a:	fb00 220c 	mla	r2, r0, ip, r2
 800cb1e:	0052      	lsls	r2, r2, #1
 800cb20:	d021      	beq.n	800cb66 <RegionCommonComputeRxWindowParameters+0x5a>
 800cb22:	4402      	add	r2, r0
 800cb24:	3a01      	subs	r2, #1
 800cb26:	fbb2 f2f0 	udiv	r2, r2, r0
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	bf38      	it	cc
 800cb2e:	4611      	movcc	r1, r2
 800cb30:	9a01      	ldr	r2, [sp, #4]
 800cb32:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cb34:	0082      	lsls	r2, r0, #2
 800cb36:	fb00 f101 	mul.w	r1, r0, r1
 800cb3a:	b1b9      	cbz	r1, 800cb6c <RegionCommonComputeRxWindowParameters+0x60>
 800cb3c:	3101      	adds	r1, #1
 800cb3e:	0849      	lsrs	r1, r1, #1
 800cb40:	1a51      	subs	r1, r2, r1
 800cb42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb46:	fb02 1313 	mls	r3, r2, r3, r1
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd10      	ble.n	800cb70 <RegionCommonComputeRxWindowParameters+0x64>
 800cb4e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800cb52:	4a0b      	ldr	r2, [pc, #44]	; (800cb80 <RegionCommonComputeRxWindowParameters+0x74>)
 800cb54:	fb82 1203 	smull	r1, r2, r2, r3
 800cb58:	17db      	asrs	r3, r3, #31
 800cb5a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800cb5e:	9a02      	ldr	r2, [sp, #8]
 800cb60:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800cb62:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800cb66:	fbb2 f2f0 	udiv	r2, r2, r0
 800cb6a:	e7de      	b.n	800cb2a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800cb6c:	0849      	lsrs	r1, r1, #1
 800cb6e:	e7e7      	b.n	800cb40 <RegionCommonComputeRxWindowParameters+0x34>
 800cb70:	4a03      	ldr	r2, [pc, #12]	; (800cb80 <RegionCommonComputeRxWindowParameters+0x74>)
 800cb72:	fb82 1203 	smull	r1, r2, r2, r3
 800cb76:	17db      	asrs	r3, r3, #31
 800cb78:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800cb7c:	e7ef      	b.n	800cb5e <RegionCommonComputeRxWindowParameters+0x52>
 800cb7e:	bf00      	nop
 800cb80:	10624dd3 	.word	0x10624dd3

0800cb84 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	460d      	mov	r5, r1
 800cb88:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800cb8a:	0040      	lsls	r0, r0, #1
 800cb8c:	f7f3 fe1e 	bl	80007cc <__aeabi_ui2f>
 800cb90:	4601      	mov	r1, r0
 800cb92:	4628      	mov	r0, r5
 800cb94:	f7f3 fd68 	bl	8000668 <__aeabi_fsub>
 800cb98:	4621      	mov	r1, r4
 800cb9a:	f7f3 fd65 	bl	8000668 <__aeabi_fsub>
 800cb9e:	f7f3 fc57 	bl	8000450 <__aeabi_f2d>
 800cba2:	f005 fdb1 	bl	8012708 <floor>
 800cba6:	f7f3 fd33 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800cbaa:	b240      	sxtb	r0, r0
 800cbac:	bd38      	pop	{r3, r4, r5, pc}

0800cbae <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800cbae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	9200      	str	r2, [sp, #0]
 800cbba:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cbbc:	2600      	movs	r6, #0
 800cbbe:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800cbc0:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800cbc2:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cbc4:	e04a      	b.n	800cc5c <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cbc6:	7a3a      	ldrb	r2, [r7, #8]
 800cbc8:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800cbcc:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cbd0:	b252      	sxtb	r2, r2
 800cbd2:	b249      	sxtb	r1, r1
 800cbd4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800cbd8:	f7ff fdf3 	bl	800c7c2 <RegionCommonValueInRange>
 800cbdc:	b178      	cbz	r0, 800cbfe <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800cbde:	68ea      	ldr	r2, [r5, #12]
 800cbe0:	7a7b      	ldrb	r3, [r7, #9]
 800cbe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cbe6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
 800cbec:	b35b      	cbz	r3, 800cc46 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800cbee:	f109 0301 	add.w	r3, r9, #1
 800cbf2:	eb08 0204 	add.w	r2, r8, r4
 800cbf6:	f80b 2009 	strb.w	r2, [fp, r9]
 800cbfa:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800cbfe:	3401      	adds	r4, #1
 800cc00:	b2e4      	uxtb	r4, r4
 800cc02:	2c0f      	cmp	r4, #15
 800cc04:	d824      	bhi.n	800cc50 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cc06:	686b      	ldr	r3, [r5, #4]
 800cc08:	0072      	lsls	r2, r6, #1
 800cc0a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800cc0e:	4123      	asrs	r3, r4
 800cc10:	f013 0f01 	tst.w	r3, #1
 800cc14:	d0f3      	beq.n	800cbfe <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cc16:	68a8      	ldr	r0, [r5, #8]
 800cc18:	eb08 0304 	add.w	r3, r8, r4
 800cc1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cc20:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800cc24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d0e8      	beq.n	800cbfe <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cc2c:	782b      	ldrb	r3, [r5, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1c9      	bne.n	800cbc6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800cc32:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0c6      	beq.n	800cbc6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800cc38:	5a9b      	ldrh	r3, [r3, r2]
 800cc3a:	fa43 f104 	asr.w	r1, r3, r4
 800cc3e:	f011 0f01 	tst.w	r1, #1
 800cc42:	d1c0      	bne.n	800cbc6 <RegionCommonCountNbOfEnabledChannels+0x18>
 800cc44:	e7db      	b.n	800cbfe <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800cc46:	f10a 0a01 	add.w	sl, sl, #1
 800cc4a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800cc4e:	e7d6      	b.n	800cbfe <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cc50:	f108 0810 	add.w	r8, r8, #16
 800cc54:	fa5f f888 	uxtb.w	r8, r8
 800cc58:	3601      	adds	r6, #1
 800cc5a:	b2f6      	uxtb	r6, r6
 800cc5c:	fa1f f388 	uxth.w	r3, r8
 800cc60:	8a2a      	ldrh	r2, [r5, #16]
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d201      	bcs.n	800cc6a <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800cc66:	2400      	movs	r4, #0
 800cc68:	e7cb      	b.n	800cc02 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800cc6a:	9b00      	ldr	r3, [sp, #0]
 800cc6c:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	f883 a000 	strb.w	sl, [r3]
}
 800cc76:	b003      	add	sp, #12
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc7c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc80:	b085      	sub	sp, #20
 800cc82:	4604      	mov	r4, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	4616      	mov	r6, r2
 800cc88:	461d      	mov	r5, r3
 800cc8a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cc8e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cc92:	6840      	ldr	r0, [r0, #4]
 800cc94:	f005 fa76 	bl	8012184 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	1a1b      	subs	r3, r3, r0
 800cc9c:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800cca0:	2301      	movs	r3, #1
 800cca2:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ccaa:	6863      	ldr	r3, [r4, #4]
 800ccac:	b113      	cbz	r3, 800ccb4 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800ccae:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800ccb0:	4283      	cmp	r3, r0
 800ccb2:	d81e      	bhi.n	800ccf2 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800ccb8:	69e3      	ldr	r3, [r4, #28]
 800ccba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ccbe:	781f      	ldrb	r7, [r3, #0]
 800ccc0:	69a3      	ldr	r3, [r4, #24]
 800ccc2:	9303      	str	r3, [sp, #12]
 800ccc4:	ab01      	add	r3, sp, #4
 800ccc6:	f104 020c 	add.w	r2, r4, #12
 800ccca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccce:	e883 0003 	stmia.w	r3, {r0, r1}
 800ccd2:	7d23      	ldrb	r3, [r4, #20]
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	7a23      	ldrb	r3, [r4, #8]
 800ccd8:	7a62      	ldrb	r2, [r4, #9]
 800ccda:	4661      	mov	r1, ip
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f7ff fe09 	bl	800c8f4 <RegionCommonUpdateBandTimeOff>
 800cce2:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cce6:	4643      	mov	r3, r8
 800cce8:	462a      	mov	r2, r5
 800ccea:	4631      	mov	r1, r6
 800ccec:	69e0      	ldr	r0, [r4, #28]
 800ccee:	f7ff ff5e 	bl	800cbae <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800ccf2:	782b      	ldrb	r3, [r5, #0]
 800ccf4:	b923      	cbnz	r3, 800cd00 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800ccf6:	f898 3000 	ldrb.w	r3, [r8]
 800ccfa:	b13b      	cbz	r3, 800cd0c <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800ccfc:	200b      	movs	r0, #11
 800ccfe:	e002      	b.n	800cd06 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800cd00:	2000      	movs	r0, #0
 800cd02:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800cd06:	b005      	add	sp, #20
 800cd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800cd0c:	200c      	movs	r0, #12
 800cd0e:	e7fa      	b.n	800cd06 <RegionCommonIdentifyChannels+0x8a>

0800cd10 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800cd16:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800cd1a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800cd1e:	42a6      	cmp	r6, r4
 800cd20:	d011      	beq.n	800cd46 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800cd22:	3c01      	subs	r4, #1
 800cd24:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800cd26:	42a6      	cmp	r6, r4
 800cd28:	d00e      	beq.n	800cd48 <RegionCommonGetNextLowerTxDr+0x38>
 800cd2a:	68ab      	ldr	r3, [r5, #8]
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4633      	mov	r3, r6
 800cd36:	4622      	mov	r2, r4
 800cd38:	6869      	ldr	r1, [r5, #4]
 800cd3a:	78e8      	ldrb	r0, [r5, #3]
 800cd3c:	f7ff fd4b 	bl	800c7d6 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d0ee      	beq.n	800cd22 <RegionCommonGetNextLowerTxDr+0x12>
 800cd44:	e000      	b.n	800cd48 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800cd46:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800cd48:	4620      	mov	r0, r4
 800cd4a:	b002      	add	sp, #8
 800cd4c:	bd70      	pop	{r4, r5, r6, pc}

0800cd4e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800cd4e:	4288      	cmp	r0, r1
 800cd50:	bfb8      	it	lt
 800cd52:	4608      	movlt	r0, r1
 800cd54:	4770      	bx	lr
	...

0800cd58 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cd58:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800cd5c:	4a05      	ldr	r2, [pc, #20]	; (800cd74 <RegionCommonGetBandwidth+0x1c>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d004      	beq.n	800cd6c <RegionCommonGetBandwidth+0x14>
 800cd62:	4a05      	ldr	r2, [pc, #20]	; (800cd78 <RegionCommonGetBandwidth+0x20>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d103      	bne.n	800cd70 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800cd68:	2002      	movs	r0, #2
 800cd6a:	4770      	bx	lr
            return 1;
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800cd70:	2000      	movs	r0, #0
    }
}
 800cd72:	4770      	bx	lr
 800cd74:	0003d090 	.word	0x0003d090
 800cd78:	0007a120 	.word	0x0007a120

0800cd7c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cd7c:	b500      	push	{lr}
 800cd7e:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800cd80:	2805      	cmp	r0, #5
 800cd82:	d80e      	bhi.n	800cda2 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800cd84:	9202      	str	r2, [sp, #8]
 800cd86:	9101      	str	r1, [sp, #4]
 800cd88:	4b0a      	ldr	r3, [pc, #40]	; (800cdb4 <RegionCommonRxConfigPrint+0x38>)
 800cd8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <RegionCommonRxConfigPrint+0x3c>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	2100      	movs	r1, #0
 800cd96:	2002      	movs	r0, #2
 800cd98:	f004 fed6 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cd9c:	b005      	add	sp, #20
 800cd9e:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cda2:	9201      	str	r2, [sp, #4]
 800cda4:	9100      	str	r1, [sp, #0]
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <RegionCommonRxConfigPrint+0x40>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	2100      	movs	r1, #0
 800cdac:	2002      	movs	r0, #2
 800cdae:	f004 fecb 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 800cdb2:	e7f3      	b.n	800cd9c <RegionCommonRxConfigPrint+0x20>
 800cdb4:	08012f18 	.word	0x08012f18
 800cdb8:	08012eb0 	.word	0x08012eb0
 800cdbc:	08012ed0 	.word	0x08012ed0

0800cdc0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800cdc0:	b500      	push	{lr}
 800cdc2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cdc4:	9101      	str	r1, [sp, #4]
 800cdc6:	9000      	str	r0, [sp, #0]
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <RegionCommonTxConfigPrint+0x1c>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2002      	movs	r0, #2
 800cdd0:	f004 feba 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 800cdd4:	b003      	add	sp, #12
 800cdd6:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdda:	bf00      	nop
 800cddc:	08012eec 	.word	0x08012eec

0800cde0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4604      	mov	r4, r0
 800cde4:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800cde6:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <VerifyRfFreq+0x74>)
 800cde8:	6a1b      	ldr	r3, [r3, #32]
 800cdea:	4798      	blx	r3
 800cdec:	b130      	cbz	r0, 800cdfc <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800cdee:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <VerifyRfFreq+0x78>)
 800cdf0:	4423      	add	r3, r4
 800cdf2:	4a1a      	ldr	r2, [pc, #104]	; (800ce5c <VerifyRfFreq+0x7c>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d802      	bhi.n	800cdfe <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800cdfc:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800cdfe:	4b18      	ldr	r3, [pc, #96]	; (800ce60 <VerifyRfFreq+0x80>)
 800ce00:	4423      	add	r3, r4
 800ce02:	4a18      	ldr	r2, [pc, #96]	; (800ce64 <VerifyRfFreq+0x84>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d802      	bhi.n	800ce0e <VerifyRfFreq+0x2e>
        *band = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	702b      	strb	r3, [r5, #0]
 800ce0c:	e7f6      	b.n	800cdfc <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <VerifyRfFreq+0x88>)
 800ce10:	4423      	add	r3, r4
 800ce12:	4a16      	ldr	r2, [pc, #88]	; (800ce6c <VerifyRfFreq+0x8c>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d802      	bhi.n	800ce1e <VerifyRfFreq+0x3e>
        *band = 1;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	702b      	strb	r3, [r5, #0]
 800ce1c:	e7ee      	b.n	800cdfc <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800ce1e:	4b14      	ldr	r3, [pc, #80]	; (800ce70 <VerifyRfFreq+0x90>)
 800ce20:	4423      	add	r3, r4
 800ce22:	4a14      	ldr	r2, [pc, #80]	; (800ce74 <VerifyRfFreq+0x94>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d802      	bhi.n	800ce2e <VerifyRfFreq+0x4e>
        *band = 5;
 800ce28:	2305      	movs	r3, #5
 800ce2a:	702b      	strb	r3, [r5, #0]
 800ce2c:	e7e6      	b.n	800cdfc <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800ce2e:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <VerifyRfFreq+0x98>)
 800ce30:	4423      	add	r3, r4
 800ce32:	4a12      	ldr	r2, [pc, #72]	; (800ce7c <VerifyRfFreq+0x9c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d802      	bhi.n	800ce3e <VerifyRfFreq+0x5e>
        *band = 3;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	702b      	strb	r3, [r5, #0]
 800ce3c:	e7de      	b.n	800cdfc <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ce3e:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <VerifyRfFreq+0xa0>)
 800ce40:	4423      	add	r3, r4
 800ce42:	4a10      	ldr	r2, [pc, #64]	; (800ce84 <VerifyRfFreq+0xa4>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d802      	bhi.n	800ce4e <VerifyRfFreq+0x6e>
        *band = 4;
 800ce48:	2304      	movs	r3, #4
 800ce4a:	702b      	strb	r3, [r5, #0]
 800ce4c:	e7d6      	b.n	800cdfc <VerifyRfFreq+0x1c>
        return false;
 800ce4e:	2000      	movs	r0, #0
 800ce50:	e7d4      	b.n	800cdfc <VerifyRfFreq+0x1c>
 800ce52:	bf00      	nop
 800ce54:	08013578 	.word	0x08013578
 800ce58:	cc8faa40 	.word	0xcc8faa40
 800ce5c:	001e847f 	.word	0x001e847f
 800ce60:	cc7125c0 	.word	0xcc7125c0
 800ce64:	002dc6c0 	.word	0x002dc6c0
 800ce68:	cc435eff 	.word	0xcc435eff
 800ce6c:	000927bf 	.word	0x000927bf
 800ce70:	cc38b0a0 	.word	0xcc38b0a0
 800ce74:	0007a120 	.word	0x0007a120
 800ce78:	cc2e0240 	.word	0xcc2e0240
 800ce7c:	0003d090 	.word	0x0003d090
 800ce80:	cc296e60 	.word	0xcc296e60
 800ce84:	000493e0 	.word	0x000493e0

0800ce88 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ce90:	4b13      	ldr	r3, [pc, #76]	; (800cee0 <GetTimeOnAir+0x58>)
 800ce92:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ce94:	4913      	ldr	r1, [pc, #76]	; (800cee4 <GetTimeOnAir+0x5c>)
 800ce96:	f7ff ff5f 	bl	800cd58 <RegionCommonGetBandwidth>
 800ce9a:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ce9c:	2d07      	cmp	r5, #7
 800ce9e:	d00e      	beq.n	800cebe <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800cea0:	4b11      	ldr	r3, [pc, #68]	; (800cee8 <GetTimeOnAir+0x60>)
 800cea2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cea4:	2001      	movs	r0, #1
 800cea6:	9003      	str	r0, [sp, #12]
 800cea8:	b2e4      	uxtb	r4, r4
 800ceaa:	9402      	str	r4, [sp, #8]
 800ceac:	2300      	movs	r3, #0
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	2308      	movs	r3, #8
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	4632      	mov	r2, r6
 800ceb8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ceba:	b004      	add	sp, #16
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800cebe:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <GetTimeOnAir+0x60>)
 800cec0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cec2:	2301      	movs	r3, #1
 800cec4:	9303      	str	r3, [sp, #12]
 800cec6:	b2e4      	uxtb	r4, r4
 800cec8:	9402      	str	r4, [sp, #8]
 800ceca:	2000      	movs	r0, #0
 800cecc:	9001      	str	r0, [sp, #4]
 800cece:	2305      	movs	r3, #5
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4603      	mov	r3, r0
 800ced4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ced8:	fb06 f202 	mul.w	r2, r6, r2
 800cedc:	47a8      	blx	r5
 800cede:	e7ec      	b.n	800ceba <GetTimeOnAir+0x32>
 800cee0:	08012f50 	.word	0x08012f50
 800cee4:	08012f30 	.word	0x08012f30
 800cee8:	08013578 	.word	0x08013578

0800ceec <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ceec:	b500      	push	{lr}
 800ceee:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cef0:	2300      	movs	r3, #0
 800cef2:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800cef4:	7803      	ldrb	r3, [r0, #0]
 800cef6:	3b0b      	subs	r3, #11
 800cef8:	2b2e      	cmp	r3, #46	; 0x2e
 800cefa:	d830      	bhi.n	800cf5e <RegionEU868GetPhyParam+0x72>
 800cefc:	e8df f003 	tbb	[pc, r3]
 800cf00:	403a3734 	.word	0x403a3734
 800cf04:	514d4946 	.word	0x514d4946
 800cf08:	615d5955 	.word	0x615d5955
 800cf0c:	6d2f6a2f 	.word	0x6d2f6a2f
 800cf10:	2f7c7973 	.word	0x2f7c7973
 800cf14:	1884802f 	.word	0x1884802f
 800cf18:	2f2f2f2f 	.word	0x2f2f2f2f
 800cf1c:	2f2f2f2f 	.word	0x2f2f2f2f
 800cf20:	2f2f2f2f 	.word	0x2f2f2f2f
 800cf24:	918a872f 	.word	0x918a872f
 800cf28:	97942f2f 	.word	0x97942f2f
 800cf2c:	9a2f      	.short	0x9a2f
 800cf2e:	a0          	.byte	0xa0
 800cf2f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800cf30:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cf34:	f88d 3004 	strb.w	r3, [sp, #4]
 800cf38:	2307      	movs	r3, #7
 800cf3a:	f88d 3005 	strb.w	r3, [sp, #5]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f88d 3006 	strb.w	r3, [sp, #6]
 800cf44:	2310      	movs	r3, #16
 800cf46:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cf4a:	4b41      	ldr	r3, [pc, #260]	; (800d050 <RegionEU868GetPhyParam+0x164>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cf52:	9202      	str	r2, [sp, #8]
 800cf54:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cf56:	a801      	add	r0, sp, #4
 800cf58:	f7ff feda 	bl	800cd10 <RegionCommonGetNextLowerTxDr>
 800cf5c:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800cf5e:	9804      	ldr	r0, [sp, #16]
 800cf60:	9005      	str	r0, [sp, #20]
}
 800cf62:	b007      	add	sp, #28
 800cf64:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cf68:	2340      	movs	r3, #64	; 0x40
 800cf6a:	9304      	str	r3, [sp, #16]
            break;
 800cf6c:	e7f7      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cf6e:	2320      	movs	r3, #32
 800cf70:	9304      	str	r3, [sp, #16]
            break;
 800cf72:	e7f4      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800cf74:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf78:	4a36      	ldr	r2, [pc, #216]	; (800d054 <RegionEU868GetPhyParam+0x168>)
 800cf7a:	5cd3      	ldrb	r3, [r2, r3]
 800cf7c:	9304      	str	r3, [sp, #16]
            break;
 800cf7e:	e7ee      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800cf80:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cf84:	4a34      	ldr	r2, [pc, #208]	; (800d058 <RegionEU868GetPhyParam+0x16c>)
 800cf86:	5cd3      	ldrb	r3, [r2, r3]
 800cf88:	9304      	str	r3, [sp, #16]
            break;
 800cf8a:	e7e8      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	9304      	str	r3, [sp, #16]
            break;
 800cf90:	e7e5      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800cf92:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cf96:	9304      	str	r3, [sp, #16]
            break;
 800cf98:	e7e1      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cf9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf9e:	9304      	str	r3, [sp, #16]
            break;
 800cfa0:	e7dd      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cfa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cfa6:	9304      	str	r3, [sp, #16]
            break;
 800cfa8:	e7d9      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cfaa:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfae:	9304      	str	r3, [sp, #16]
            break;
 800cfb0:	e7d5      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cfb2:	f241 7370 	movw	r3, #6000	; 0x1770
 800cfb6:	9304      	str	r3, [sp, #16]
            break;
 800cfb8:	e7d1      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800cfba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfbe:	9304      	str	r3, [sp, #16]
            break;
 800cfc0:	e7cd      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800cfc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cfc6:	4825      	ldr	r0, [pc, #148]	; (800d05c <RegionEU868GetPhyParam+0x170>)
 800cfc8:	f002 fade 	bl	800f588 <randr>
 800cfcc:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800cfd0:	9004      	str	r0, [sp, #16]
            break;
 800cfd2:	e7c4      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800cfd4:	4b22      	ldr	r3, [pc, #136]	; (800d060 <RegionEU868GetPhyParam+0x174>)
 800cfd6:	9304      	str	r3, [sp, #16]
            break;
 800cfd8:	e7c1      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800cfda:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <RegionEU868GetPhyParam+0x164>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800cfe2:	9304      	str	r3, [sp, #16]
            break;
 800cfe4:	e7bb      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800cfe6:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <RegionEU868GetPhyParam+0x164>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800cfee:	9304      	str	r3, [sp, #16]
            break;
 800cff0:	e7b5      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800cff2:	2310      	movs	r3, #16
 800cff4:	9304      	str	r3, [sp, #16]
            break;
 800cff6:	e7b2      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <RegionEU868GetPhyParam+0x164>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	9304      	str	r3, [sp, #16]
            break;
 800cffe:	e7ae      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d000:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d004:	9304      	str	r3, [sp, #16]
            break;
 800d006:	e7aa      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d008:	4b16      	ldr	r3, [pc, #88]	; (800d064 <RegionEU868GetPhyParam+0x178>)
 800d00a:	9304      	str	r3, [sp, #16]
            break;
 800d00c:	e7a7      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800d00e:	4b14      	ldr	r3, [pc, #80]	; (800d060 <RegionEU868GetPhyParam+0x174>)
 800d010:	9304      	str	r3, [sp, #16]
            break;
 800d012:	e7a4      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d014:	2311      	movs	r3, #17
 800d016:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800d01a:	2302      	movs	r3, #2
 800d01c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800d020:	e79d      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d022:	2303      	movs	r3, #3
 800d024:	9304      	str	r3, [sp, #16]
            break;
 800d026:	e79a      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800d028:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <RegionEU868GetPhyParam+0x174>)
 800d02a:	9304      	str	r3, [sp, #16]
            break;
 800d02c:	e797      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800d02e:	2303      	movs	r3, #3
 800d030:	9304      	str	r3, [sp, #16]
            break;
 800d032:	e794      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d034:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d038:	4a0b      	ldr	r2, [pc, #44]	; (800d068 <RegionEU868GetPhyParam+0x17c>)
 800d03a:	5cd3      	ldrb	r3, [r2, r3]
 800d03c:	9304      	str	r3, [sp, #16]
            break;
 800d03e:	e78e      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800d040:	490a      	ldr	r1, [pc, #40]	; (800d06c <RegionEU868GetPhyParam+0x180>)
 800d042:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d046:	f7ff fe87 	bl	800cd58 <RegionCommonGetBandwidth>
 800d04a:	9004      	str	r0, [sp, #16]
            break;
 800d04c:	e787      	b.n	800cf5e <RegionEU868GetPhyParam+0x72>
 800d04e:	bf00      	nop
 800d050:	20000c64 	.word	0x20000c64
 800d054:	08012f58 	.word	0x08012f58
 800d058:	08012f60 	.word	0x08012f60
 800d05c:	fffffc18 	.word	0xfffffc18
 800d060:	33d3e608 	.word	0x33d3e608
 800d064:	4009999a 	.word	0x4009999a
 800d068:	08012f50 	.word	0x08012f50
 800d06c:	08012f30 	.word	0x08012f30

0800d070 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d070:	b510      	push	{r4, lr}
 800d072:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d074:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <RegionEU868SetBandTxDone+0x34>)
 800d076:	681c      	ldr	r4, [r3, #0]
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <RegionEU868SetBandTxDone+0x38>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	7803      	ldrb	r3, [r0, #0]
 800d07e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d082:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d086:	7a5b      	ldrb	r3, [r3, #9]
 800d088:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d08c:	6903      	ldr	r3, [r0, #16]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	68c3      	ldr	r3, [r0, #12]
 800d092:	7842      	ldrb	r2, [r0, #1]
 800d094:	6881      	ldr	r1, [r0, #8]
 800d096:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d09a:	f7ff fc12 	bl	800c8c2 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800d09e:	b002      	add	sp, #8
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	bf00      	nop
 800d0a4:	20000c60 	.word	0x20000c60
 800d0a8:	20000c64 	.word	0x20000c64

0800d0ac <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	b0a4      	sub	sp, #144	; 0x90
 800d0b0:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d0b2:	2290      	movs	r2, #144	; 0x90
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	4668      	mov	r0, sp
 800d0b8:	f005 fb1e 	bl	80126f8 <memset>
 800d0bc:	2364      	movs	r3, #100	; 0x64
 800d0be:	f8ad 3000 	strh.w	r3, [sp]
 800d0c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d0c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0ca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800d0ce:	210a      	movs	r1, #10
 800d0d0:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800d0d4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800d0d8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d0dc:	7a23      	ldrb	r3, [r4, #8]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d031      	beq.n	800d146 <RegionEU868InitDefaults+0x9a>
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d03d      	beq.n	800d162 <RegionEU868InitDefaults+0xb6>
 800d0e6:	b10b      	cbz	r3, 800d0ec <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800d0e8:	b024      	add	sp, #144	; 0x90
 800d0ea:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d0fa      	beq.n	800d0e8 <RegionEU868InitDefaults+0x3c>
 800d0f2:	6863      	ldr	r3, [r4, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d0f7      	beq.n	800d0e8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d0f8:	4a1f      	ldr	r2, [pc, #124]	; (800d178 <RegionEU868InitDefaults+0xcc>)
 800d0fa:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d0fc:	4c1f      	ldr	r4, [pc, #124]	; (800d17c <RegionEU868InitDefaults+0xd0>)
 800d0fe:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d100:	2290      	movs	r2, #144	; 0x90
 800d102:	4669      	mov	r1, sp
 800d104:	f002 fa4d 	bl	800f5a2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d108:	6824      	ldr	r4, [r4, #0]
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <RegionEU868InitDefaults+0xd4>)
 800d10c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d114:	f104 0c0c 	add.w	ip, r4, #12
 800d118:	f103 020c 	add.w	r2, r3, #12
 800d11c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d11e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d122:	f104 0c18 	add.w	ip, r4, #24
 800d126:	3318      	adds	r3, #24
 800d128:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d12c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d130:	2307      	movs	r3, #7
 800d132:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d136:	2201      	movs	r2, #1
 800d138:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800d13c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800d140:	f7ff fbb0 	bl	800c8a4 <RegionCommonChanMaskCopy>
            break;
 800d144:	e7d0      	b.n	800d0e8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d146:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <RegionEU868InitDefaults+0xd0>)
 800d148:	6818      	ldr	r0, [r3, #0]
 800d14a:	2300      	movs	r3, #0
 800d14c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d14e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d150:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d152:	2201      	movs	r2, #1
 800d154:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d158:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d15c:	f7ff fba2 	bl	800c8a4 <RegionCommonChanMaskCopy>
            break;
 800d160:	e7c2      	b.n	800d0e8 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d162:	4b06      	ldr	r3, [pc, #24]	; (800d17c <RegionEU868InitDefaults+0xd0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800d16a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800d16e:	430a      	orrs	r2, r1
 800d170:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800d174:	e7b8      	b.n	800d0e8 <RegionEU868InitDefaults+0x3c>
 800d176:	bf00      	nop
 800d178:	20000c60 	.word	0x20000c60
 800d17c:	20000c64 	.word	0x20000c64
 800d180:	0801283c 	.word	0x0801283c

0800d184 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d184:	b500      	push	{lr}
 800d186:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800d188:	290f      	cmp	r1, #15
 800d18a:	d83c      	bhi.n	800d206 <RegionEU868Verify+0x82>
 800d18c:	e8df f001 	tbb	[pc, r1]
 800d190:	3b3b3b0a 	.word	0x3b3b3b0a
 800d194:	271d133b 	.word	0x271d133b
 800d198:	3b31313b 	.word	0x3b31313b
 800d19c:	083b3b3b 	.word	0x083b3b3b
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	e031      	b.n	800d208 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800d1aa:	f10d 0107 	add.w	r1, sp, #7
 800d1ae:	6800      	ldr	r0, [r0, #0]
 800d1b0:	f7ff fe16 	bl	800cde0 <VerifyRfFreq>
 800d1b4:	e028      	b.n	800d208 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800d1b6:	2207      	movs	r2, #7
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	f990 0000 	ldrsb.w	r0, [r0]
 800d1be:	f7ff fb00 	bl	800c7c2 <RegionCommonValueInRange>
 800d1c2:	3800      	subs	r0, #0
 800d1c4:	bf18      	it	ne
 800d1c6:	2001      	movne	r0, #1
 800d1c8:	e01e      	b.n	800d208 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d1ca:	2205      	movs	r2, #5
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	f990 0000 	ldrsb.w	r0, [r0]
 800d1d2:	f7ff faf6 	bl	800c7c2 <RegionCommonValueInRange>
 800d1d6:	3800      	subs	r0, #0
 800d1d8:	bf18      	it	ne
 800d1da:	2001      	movne	r0, #1
 800d1dc:	e014      	b.n	800d208 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d1de:	2207      	movs	r2, #7
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	f990 0000 	ldrsb.w	r0, [r0]
 800d1e6:	f7ff faec 	bl	800c7c2 <RegionCommonValueInRange>
 800d1ea:	3800      	subs	r0, #0
 800d1ec:	bf18      	it	ne
 800d1ee:	2001      	movne	r0, #1
 800d1f0:	e00a      	b.n	800d208 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d1f2:	2207      	movs	r2, #7
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	f990 0000 	ldrsb.w	r0, [r0]
 800d1fa:	f7ff fae2 	bl	800c7c2 <RegionCommonValueInRange>
 800d1fe:	3800      	subs	r0, #0
 800d200:	bf18      	it	ne
 800d202:	2001      	movne	r0, #1
 800d204:	e000      	b.n	800d208 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d206:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d208:	b003      	add	sp, #12
 800d20a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d210 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d210:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d212:	7903      	ldrb	r3, [r0, #4]
 800d214:	b11b      	cbz	r3, 800d21e <RegionEU868ChanMaskSet+0xe>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d00b      	beq.n	800d232 <RegionEU868ChanMaskSet+0x22>
 800d21a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d21c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d21e:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <RegionEU868ChanMaskSet+0x38>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2201      	movs	r2, #1
 800d224:	6801      	ldr	r1, [r0, #0]
 800d226:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800d22a:	f7ff fb3b 	bl	800c8a4 <RegionCommonChanMaskCopy>
    return true;
 800d22e:	2001      	movs	r0, #1
            break;
 800d230:	e7f4      	b.n	800d21c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d232:	4b05      	ldr	r3, [pc, #20]	; (800d248 <RegionEU868ChanMaskSet+0x38>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2201      	movs	r2, #1
 800d238:	6801      	ldr	r1, [r0, #0]
 800d23a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800d23e:	f7ff fb31 	bl	800c8a4 <RegionCommonChanMaskCopy>
    return true;
 800d242:	2001      	movs	r0, #1
            break;
 800d244:	e7ea      	b.n	800d21c <RegionEU868ChanMaskSet+0xc>
 800d246:	bf00      	nop
 800d248:	20000c64 	.word	0x20000c64

0800d24c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24e:	b083      	sub	sp, #12
 800d250:	460e      	mov	r6, r1
 800d252:	4617      	mov	r7, r2
 800d254:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d256:	2807      	cmp	r0, #7
 800d258:	bfa8      	it	ge
 800d25a:	2007      	movge	r0, #7
 800d25c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d25e:	4913      	ldr	r1, [pc, #76]	; (800d2ac <RegionEU868ComputeRxWindowParameters+0x60>)
 800d260:	f7ff fd7a 	bl	800cd58 <RegionCommonGetBandwidth>
 800d264:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d266:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d26a:	2b07      	cmp	r3, #7
 800d26c:	d017      	beq.n	800d29e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d26e:	4a0f      	ldr	r2, [pc, #60]	; (800d2ac <RegionEU868ComputeRxWindowParameters+0x60>)
 800d270:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d274:	4a0e      	ldr	r2, [pc, #56]	; (800d2b0 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d276:	5cd0      	ldrb	r0, [r2, r3]
 800d278:	f7ff fc3a 	bl	800caf0 <RegionCommonComputeSymbolTimeLoRa>
 800d27c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d27e:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <RegionEU868ComputeRxWindowParameters+0x68>)
 800d280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d282:	4798      	blx	r3
 800d284:	4603      	mov	r3, r0
 800d286:	f104 020c 	add.w	r2, r4, #12
 800d28a:	9201      	str	r2, [sp, #4]
 800d28c:	3408      	adds	r4, #8
 800d28e:	9400      	str	r4, [sp, #0]
 800d290:	463a      	mov	r2, r7
 800d292:	4631      	mov	r1, r6
 800d294:	4628      	mov	r0, r5
 800d296:	f7ff fc39 	bl	800cb0c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d29a:	b003      	add	sp, #12
 800d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d29e:	4a04      	ldr	r2, [pc, #16]	; (800d2b0 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d2a0:	5cd0      	ldrb	r0, [r2, r3]
 800d2a2:	f7ff fc2d 	bl	800cb00 <RegionCommonComputeSymbolTimeFsk>
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	e7e9      	b.n	800d27e <RegionEU868ComputeRxWindowParameters+0x32>
 800d2aa:	bf00      	nop
 800d2ac:	08012f30 	.word	0x08012f30
 800d2b0:	08012f50 	.word	0x08012f50
 800d2b4:	08013578 	.word	0x08013578

0800d2b8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2bc:	b08a      	sub	sp, #40	; 0x28
 800d2be:	4604      	mov	r4, r0
 800d2c0:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d2c2:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d2c6:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d2ca:	4b37      	ldr	r3, [pc, #220]	; (800d3a8 <RegionEU868RxConfig+0xf0>)
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	4798      	blx	r3
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d167      	bne.n	800d3a4 <RegionEU868RxConfig+0xec>
 800d2d4:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d2d6:	7ce3      	ldrb	r3, [r4, #19]
 800d2d8:	b983      	cbnz	r3, 800d2fc <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d2da:	4b34      	ldr	r3, [pc, #208]	; (800d3ac <RegionEU868RxConfig+0xf4>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	7823      	ldrb	r3, [r4, #0]
 800d2e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d2e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d2e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2f0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d2f4:	f1b8 0f00 	cmp.w	r8, #0
 800d2f8:	d100      	bne.n	800d2fc <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d2fa:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d2fc:	4b2c      	ldr	r3, [pc, #176]	; (800d3b0 <RegionEU868RxConfig+0xf8>)
 800d2fe:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d302:	4b29      	ldr	r3, [pc, #164]	; (800d3a8 <RegionEU868RxConfig+0xf0>)
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	4640      	mov	r0, r8
 800d308:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d30a:	2d07      	cmp	r5, #7
 800d30c:	d02b      	beq.n	800d366 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d30e:	4b26      	ldr	r3, [pc, #152]	; (800d3a8 <RegionEU868RxConfig+0xf0>)
 800d310:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d314:	7ca3      	ldrb	r3, [r4, #18]
 800d316:	9309      	str	r3, [sp, #36]	; 0x24
 800d318:	2601      	movs	r6, #1
 800d31a:	9608      	str	r6, [sp, #32]
 800d31c:	2300      	movs	r3, #0
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	9306      	str	r3, [sp, #24]
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	8922      	ldrh	r2, [r4, #8]
 800d32a:	9202      	str	r2, [sp, #8]
 800d32c:	2208      	movs	r2, #8
 800d32e:	9201      	str	r2, [sp, #4]
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	4633      	mov	r3, r6
 800d334:	464a      	mov	r2, r9
 800d336:	78a1      	ldrb	r1, [r4, #2]
 800d338:	4630      	mov	r0, r6
 800d33a:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800d33c:	7c63      	ldrb	r3, [r4, #17]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d02d      	beq.n	800d39e <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <RegionEU868RxConfig+0xfc>)
 800d344:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d346:	4b18      	ldr	r3, [pc, #96]	; (800d3a8 <RegionEU868RxConfig+0xf0>)
 800d348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d34a:	310d      	adds	r1, #13
 800d34c:	b2c9      	uxtb	r1, r1
 800d34e:	4630      	mov	r0, r6
 800d350:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d352:	462a      	mov	r2, r5
 800d354:	4641      	mov	r1, r8
 800d356:	7ce0      	ldrb	r0, [r4, #19]
 800d358:	f7ff fd10 	bl	800cd7c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800d35c:	703d      	strb	r5, [r7, #0]
    return true;
 800d35e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d360:	b00a      	add	sp, #40	; 0x28
 800d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d366:	4b10      	ldr	r3, [pc, #64]	; (800d3a8 <RegionEU868RxConfig+0xf0>)
 800d368:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d36c:	7ca3      	ldrb	r3, [r4, #18]
 800d36e:	9309      	str	r3, [sp, #36]	; 0x24
 800d370:	2000      	movs	r0, #0
 800d372:	9008      	str	r0, [sp, #32]
 800d374:	9007      	str	r0, [sp, #28]
 800d376:	9006      	str	r0, [sp, #24]
 800d378:	2301      	movs	r3, #1
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	9004      	str	r0, [sp, #16]
 800d37e:	9003      	str	r0, [sp, #12]
 800d380:	8923      	ldrh	r3, [r4, #8]
 800d382:	9302      	str	r3, [sp, #8]
 800d384:	2305      	movs	r3, #5
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <RegionEU868RxConfig+0x100>)
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	4603      	mov	r3, r0
 800d38e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d392:	fb02 f209 	mul.w	r2, r2, r9
 800d396:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d39a:	47d0      	blx	sl
 800d39c:	e7ce      	b.n	800d33c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d39e:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <RegionEU868RxConfig+0x104>)
 800d3a0:	5d59      	ldrb	r1, [r3, r5]
 800d3a2:	e7d0      	b.n	800d346 <RegionEU868RxConfig+0x8e>
        return false;
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e7db      	b.n	800d360 <RegionEU868RxConfig+0xa8>
 800d3a8:	08013578 	.word	0x08013578
 800d3ac:	20000c64 	.word	0x20000c64
 800d3b0:	08012f50 	.word	0x08012f50
 800d3b4:	08012f60 	.word	0x08012f60
 800d3b8:	00014585 	.word	0x00014585
 800d3bc:	08012f58 	.word	0x08012f58

0800d3c0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	b08d      	sub	sp, #52	; 0x34
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460f      	mov	r7, r1
 800d3ca:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d3cc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d3d0:	4a42      	ldr	r2, [pc, #264]	; (800d4dc <RegionEU868TxConfig+0x11c>)
 800d3d2:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d3d6:	4b42      	ldr	r3, [pc, #264]	; (800d4e0 <RegionEU868TxConfig+0x120>)
 800d3d8:	6819      	ldr	r1, [r3, #0]
 800d3da:	4d42      	ldr	r5, [pc, #264]	; (800d4e4 <RegionEU868TxConfig+0x124>)
 800d3dc:	682b      	ldr	r3, [r5, #0]
 800d3de:	7802      	ldrb	r2, [r0, #0]
 800d3e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3e8:	7a53      	ldrb	r3, [r2, #9]
 800d3ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3ee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d3f2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d3f6:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d3fa:	f7ff fca8 	bl	800cd4e <RegionCommonLimitTxPower>
 800d3fe:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d400:	4939      	ldr	r1, [pc, #228]	; (800d4e8 <RegionEU868TxConfig+0x128>)
 800d402:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d406:	f7ff fca7 	bl	800cd58 <RegionCommonGetBandwidth>
 800d40a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d40c:	68a2      	ldr	r2, [r4, #8]
 800d40e:	6861      	ldr	r1, [r4, #4]
 800d410:	4630      	mov	r0, r6
 800d412:	f7ff fbb7 	bl	800cb84 <RegionCommonComputeTxPower>
 800d416:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d418:	4b34      	ldr	r3, [pc, #208]	; (800d4ec <RegionEU868TxConfig+0x12c>)
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	6829      	ldr	r1, [r5, #0]
 800d41e:	7823      	ldrb	r3, [r4, #0]
 800d420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d424:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d428:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d42a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d42e:	2b07      	cmp	r3, #7
 800d430:	d031      	beq.n	800d496 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d432:	4b2e      	ldr	r3, [pc, #184]	; (800d4ec <RegionEU868TxConfig+0x12c>)
 800d434:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d438:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d43c:	9308      	str	r3, [sp, #32]
 800d43e:	2200      	movs	r2, #0
 800d440:	9207      	str	r2, [sp, #28]
 800d442:	9206      	str	r2, [sp, #24]
 800d444:	9205      	str	r2, [sp, #20]
 800d446:	2501      	movs	r5, #1
 800d448:	9504      	str	r5, [sp, #16]
 800d44a:	9203      	str	r2, [sp, #12]
 800d44c:	2308      	movs	r3, #8
 800d44e:	9302      	str	r3, [sp, #8]
 800d450:	9501      	str	r5, [sp, #4]
 800d452:	f8cd a000 	str.w	sl, [sp]
 800d456:	464b      	mov	r3, r9
 800d458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d45a:	4628      	mov	r0, r5
 800d45c:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d45e:	4b21      	ldr	r3, [pc, #132]	; (800d4e4 <RegionEU868TxConfig+0x124>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	7823      	ldrb	r3, [r4, #0]
 800d464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d468:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d46c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d470:	f7ff fca6 	bl	800cdc0 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d474:	89a1      	ldrh	r1, [r4, #12]
 800d476:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d47a:	f7ff fd05 	bl	800ce88 <GetTimeOnAir>
 800d47e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d482:	4b1a      	ldr	r3, [pc, #104]	; (800d4ec <RegionEU868TxConfig+0x12c>)
 800d484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d486:	7b21      	ldrb	r1, [r4, #12]
 800d488:	4628      	mov	r0, r5
 800d48a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d48c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d48e:	2001      	movs	r0, #1
 800d490:	b00d      	add	sp, #52	; 0x34
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d496:	4b15      	ldr	r3, [pc, #84]	; (800d4ec <RegionEU868TxConfig+0x12c>)
 800d498:	69dd      	ldr	r5, [r3, #28]
 800d49a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d49e:	fb03 f30a 	mul.w	r3, r3, sl
 800d4a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800d4a6:	9208      	str	r2, [sp, #32]
 800d4a8:	f04f 0b00 	mov.w	fp, #0
 800d4ac:	f8cd b01c 	str.w	fp, [sp, #28]
 800d4b0:	f8cd b018 	str.w	fp, [sp, #24]
 800d4b4:	f8cd b014 	str.w	fp, [sp, #20]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	9204      	str	r2, [sp, #16]
 800d4bc:	f8cd b00c 	str.w	fp, [sp, #12]
 800d4c0:	2205      	movs	r2, #5
 800d4c2:	9202      	str	r2, [sp, #8]
 800d4c4:	f8cd b004 	str.w	fp, [sp, #4]
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4d2:	4658      	mov	r0, fp
 800d4d4:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d4d6:	465d      	mov	r5, fp
 800d4d8:	e7c1      	b.n	800d45e <RegionEU868TxConfig+0x9e>
 800d4da:	bf00      	nop
 800d4dc:	08012f50 	.word	0x08012f50
 800d4e0:	20000c60 	.word	0x20000c60
 800d4e4:	20000c64 	.word	0x20000c64
 800d4e8:	08012f30 	.word	0x08012f30
 800d4ec:	08013578 	.word	0x08013578

0800d4f0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4f4:	b08f      	sub	sp, #60	; 0x3c
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	4689      	mov	r9, r1
 800d4fa:	4690      	mov	r8, r2
 800d4fc:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d4fe:	2400      	movs	r4, #0
 800d500:	940c      	str	r4, [sp, #48]	; 0x30
 800d502:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d506:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800d50a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d50c:	e030      	b.n	800d570 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d50e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d512:	2607      	movs	r6, #7
 800d514:	e012      	b.n	800d53c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d516:	4a57      	ldr	r2, [pc, #348]	; (800d674 <RegionEU868LinkAdrReq+0x184>)
 800d518:	6812      	ldr	r2, [r2, #0]
 800d51a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d51e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d522:	b13a      	cbz	r2, 800d534 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d524:	2201      	movs	r2, #1
 800d526:	fa02 f20c 	lsl.w	r2, r2, ip
 800d52a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d52e:	430a      	orrs	r2, r1
 800d530:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d534:	f10c 0c01 	add.w	ip, ip, #1
 800d538:	fa5f fc8c 	uxtb.w	ip, ip
 800d53c:	f1bc 0f0f 	cmp.w	ip, #15
 800d540:	d816      	bhi.n	800d570 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d542:	2b06      	cmp	r3, #6
 800d544:	d0e7      	beq.n	800d516 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d546:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800d54a:	fa4e fe0c 	asr.w	lr, lr, ip
 800d54e:	f01e 0f01 	tst.w	lr, #1
 800d552:	d0ef      	beq.n	800d534 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d554:	4a47      	ldr	r2, [pc, #284]	; (800d674 <RegionEU868LinkAdrReq+0x184>)
 800d556:	6812      	ldr	r2, [r2, #0]
 800d558:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d55c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d560:	2a00      	cmp	r2, #0
 800d562:	d1e7      	bne.n	800d534 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d564:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800d568:	e7e4      	b.n	800d534 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d56a:	2606      	movs	r6, #6
 800d56c:	e000      	b.n	800d570 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d56e:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d570:	7a2b      	ldrb	r3, [r5, #8]
 800d572:	42a3      	cmp	r3, r4
 800d574:	d918      	bls.n	800d5a8 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d576:	6868      	ldr	r0, [r5, #4]
 800d578:	a90c      	add	r1, sp, #48	; 0x30
 800d57a:	4420      	add	r0, r4
 800d57c:	f7ff fa42 	bl	800ca04 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d580:	b190      	cbz	r0, 800d5a8 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800d582:	4404      	add	r4, r0
 800d584:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800d586:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d58a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d58e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d592:	b90b      	cbnz	r3, 800d598 <RegionEU868LinkAdrReq+0xa8>
 800d594:	2a00      	cmp	r2, #0
 800d596:	d0e8      	beq.n	800d56a <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d598:	1e5a      	subs	r2, r3, #1
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	2a04      	cmp	r2, #4
 800d59e:	d9e6      	bls.n	800d56e <RegionEU868LinkAdrReq+0x7e>
 800d5a0:	2b06      	cmp	r3, #6
 800d5a2:	d9b4      	bls.n	800d50e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800d5a4:	2606      	movs	r6, #6
 800d5a6:	e7e3      	b.n	800d570 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d5ae:	7a6b      	ldrb	r3, [r5, #9]
 800d5b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800d5b4:	a80a      	add	r0, sp, #40	; 0x28
 800d5b6:	f7ff fc99 	bl	800ceec <RegionEU868GetPhyParam>
 800d5ba:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800d5bc:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d5c0:	7aab      	ldrb	r3, [r5, #10]
 800d5c2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d5c6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d5ca:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d5ce:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d5d2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d5d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d5da:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d5de:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d5e2:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d5e6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d5ea:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d5ee:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d5f2:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d5f6:	2310      	movs	r3, #16
 800d5f8:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d5fc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800d600:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d602:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d606:	2307      	movs	r3, #7
 800d608:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d60c:	4a19      	ldr	r2, [pc, #100]	; (800d674 <RegionEU868LinkAdrReq+0x184>)
 800d60e:	6812      	ldr	r2, [r2, #0]
 800d610:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d612:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d616:	2300      	movs	r3, #0
 800d618:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d620:	ab0c      	add	r3, sp, #48	; 0x30
 800d622:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d626:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800d62a:	a801      	add	r0, sp, #4
 800d62c:	f7ff fa08 	bl	800ca40 <RegionCommonLinkAdrReqVerifyParams>
 800d630:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d632:	2807      	cmp	r0, #7
 800d634:	d010      	beq.n	800d658 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d636:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d63a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d63e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d642:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d646:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d64a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d64c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d64e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d650:	4628      	mov	r0, r5
 800d652:	b00f      	add	sp, #60	; 0x3c
 800d654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d658:	4e06      	ldr	r6, [pc, #24]	; (800d674 <RegionEU868LinkAdrReq+0x184>)
 800d65a:	6830      	ldr	r0, [r6, #0]
 800d65c:	220c      	movs	r2, #12
 800d65e:	2100      	movs	r1, #0
 800d660:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d664:	f001 ffb5 	bl	800f5d2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d668:	6833      	ldr	r3, [r6, #0]
 800d66a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800d66e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800d672:	e7e0      	b.n	800d636 <RegionEU868LinkAdrReq+0x146>
 800d674:	20000c64 	.word	0x20000c64

0800d678 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d678:	b530      	push	{r4, r5, lr}
 800d67a:	b083      	sub	sp, #12
 800d67c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d684:	f10d 0107 	add.w	r1, sp, #7
 800d688:	6840      	ldr	r0, [r0, #4]
 800d68a:	f7ff fba9 	bl	800cde0 <VerifyRfFreq>
 800d68e:	b1a8      	cbz	r0, 800d6bc <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800d690:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d692:	2207      	movs	r2, #7
 800d694:	2100      	movs	r1, #0
 800d696:	f994 0000 	ldrsb.w	r0, [r4]
 800d69a:	f7ff f892 	bl	800c7c2 <RegionCommonValueInRange>
 800d69e:	b908      	cbnz	r0, 800d6a4 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800d6a0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d6a4:	2205      	movs	r2, #5
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d6ac:	f7ff f889 	bl	800c7c2 <RegionCommonValueInRange>
 800d6b0:	b908      	cbnz	r0, 800d6b6 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d6b2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	b003      	add	sp, #12
 800d6ba:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d6bc:	2506      	movs	r5, #6
 800d6be:	e7e8      	b.n	800d692 <RegionEU868RxParamSetupReq+0x1a>

0800d6c0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800d6d2:	7803      	ldrb	r3, [r0, #0]
 800d6d4:	2b0f      	cmp	r3, #15
 800d6d6:	d902      	bls.n	800d6de <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800d6d8:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800d6da:	b002      	add	sp, #8
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d6e0:	f10d 0107 	add.w	r1, sp, #7
 800d6e4:	6840      	ldr	r0, [r0, #4]
 800d6e6:	f7ff fb7b 	bl	800cde0 <VerifyRfFreq>
 800d6ea:	b170      	cbz	r0, 800d70a <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800d6ec:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d6ee:	4b0b      	ldr	r3, [pc, #44]	; (800d71c <RegionEU868DlChannelReq+0x54>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	7823      	ldrb	r3, [r4, #0]
 800d6f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d6f8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d6fc:	b909      	cbnz	r1, 800d702 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800d6fe:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800d702:	2803      	cmp	r0, #3
 800d704:	d003      	beq.n	800d70e <RegionEU868DlChannelReq+0x46>
    return status;
 800d706:	b240      	sxtb	r0, r0
 800d708:	e7e7      	b.n	800d6da <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800d70a:	2002      	movs	r0, #2
 800d70c:	e7ef      	b.n	800d6ee <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d70e:	6861      	ldr	r1, [r4, #4]
 800d710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d718:	6059      	str	r1, [r3, #4]
 800d71a:	e7f4      	b.n	800d706 <RegionEU868DlChannelReq+0x3e>
 800d71c:	20000c64 	.word	0x20000c64

0800d720 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d720:	4770      	bx	lr
	...

0800d724 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d726:	b097      	sub	sp, #92	; 0x5c
 800d728:	4604      	mov	r4, r0
 800d72a:	460f      	mov	r7, r1
 800d72c:	4616      	mov	r6, r2
 800d72e:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d730:	2100      	movs	r1, #0
 800d732:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800d736:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d73a:	9111      	str	r1, [sp, #68]	; 0x44
 800d73c:	9112      	str	r1, [sp, #72]	; 0x48
 800d73e:	9113      	str	r1, [sp, #76]	; 0x4c
 800d740:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d742:	2307      	movs	r3, #7
 800d744:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d748:	4b34      	ldr	r3, [pc, #208]	; (800d81c <RegionEU868NextChannel+0xf8>)
 800d74a:	6818      	ldr	r0, [r3, #0]
 800d74c:	2201      	movs	r2, #1
 800d74e:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d752:	f7ff f891 	bl	800c878 <RegionCommonCountChannels>
 800d756:	b938      	cbnz	r0, 800d768 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d758:	4b30      	ldr	r3, [pc, #192]	; (800d81c <RegionEU868NextChannel+0xf8>)
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d760:	f043 0307 	orr.w	r3, r3, #7
 800d764:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d768:	7a63      	ldrb	r3, [r4, #9]
 800d76a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d76e:	7a23      	ldrb	r3, [r4, #8]
 800d770:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d774:	4b29      	ldr	r3, [pc, #164]	; (800d81c <RegionEU868NextChannel+0xf8>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800d77c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d77e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d780:	4b27      	ldr	r3, [pc, #156]	; (800d820 <RegionEU868NextChannel+0xfc>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d786:	2310      	movs	r3, #16
 800d788:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d78c:	f10d 030a 	add.w	r3, sp, #10
 800d790:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d796:	6863      	ldr	r3, [r4, #4]
 800d798:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d79a:	7aa3      	ldrb	r3, [r4, #10]
 800d79c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d7a0:	2306      	movs	r3, #6
 800d7a2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d7a6:	ab0c      	add	r3, sp, #48	; 0x30
 800d7a8:	f104 020c 	add.w	r2, r4, #12
 800d7ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7b0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d7b4:	7d23      	ldrb	r3, [r4, #20]
 800d7b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d7ba:	8ae1      	ldrh	r1, [r4, #22]
 800d7bc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d7c0:	f7ff fb62 	bl	800ce88 <GetTimeOnAir>
 800d7c4:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d7c6:	ab03      	add	r3, sp, #12
 800d7c8:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d7ca:	9601      	str	r6, [sp, #4]
 800d7cc:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800d7d6:	aa11      	add	r2, sp, #68	; 0x44
 800d7d8:	4629      	mov	r1, r5
 800d7da:	a809      	add	r0, sp, #36	; 0x24
 800d7dc:	f7ff fa4e 	bl	800cc7c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	b120      	cbz	r0, 800d7ee <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d7e4:	280c      	cmp	r0, #12
 800d7e6:	d00f      	beq.n	800d808 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	b017      	add	sp, #92	; 0x5c
 800d7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d7ee:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800d7f2:	3901      	subs	r1, #1
 800d7f4:	f001 fec8 	bl	800f588 <randr>
 800d7f8:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800d7fc:	eb0d 0003 	add.w	r0, sp, r3
 800d800:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d804:	703b      	strb	r3, [r7, #0]
 800d806:	e7ef      	b.n	800d7e8 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <RegionEU868NextChannel+0xf8>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d810:	f043 0307 	orr.w	r3, r3, #7
 800d814:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800d818:	e7e6      	b.n	800d7e8 <RegionEU868NextChannel+0xc4>
 800d81a:	bf00      	nop
 800d81c:	20000c64 	.word	0x20000c64
 800d820:	20000c60 	.word	0x20000c60

0800d824 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d826:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d82e:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d830:	2d02      	cmp	r5, #2
 800d832:	d94f      	bls.n	800d8d4 <RegionEU868ChannelAdd+0xb0>
 800d834:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800d836:	2d0f      	cmp	r5, #15
 800d838:	d84e      	bhi.n	800d8d8 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d83a:	6803      	ldr	r3, [r0, #0]
 800d83c:	7a18      	ldrb	r0, [r3, #8]
 800d83e:	f340 0003 	sbfx	r0, r0, #0, #4
 800d842:	2207      	movs	r2, #7
 800d844:	2100      	movs	r1, #0
 800d846:	b240      	sxtb	r0, r0
 800d848:	f7fe ffbb 	bl	800c7c2 <RegionCommonValueInRange>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d03d      	beq.n	800d8cc <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800d850:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	7a18      	ldrb	r0, [r3, #8]
 800d856:	f340 1003 	sbfx	r0, r0, #4, #4
 800d85a:	2207      	movs	r2, #7
 800d85c:	2100      	movs	r1, #0
 800d85e:	b240      	sxtb	r0, r0
 800d860:	f7fe ffaf 	bl	800c7c2 <RegionCommonValueInRange>
 800d864:	b900      	cbnz	r0, 800d868 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800d866:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d868:	6820      	ldr	r0, [r4, #0]
 800d86a:	7a03      	ldrb	r3, [r0, #8]
 800d86c:	f343 0203 	sbfx	r2, r3, #0, #4
 800d870:	b252      	sxtb	r2, r2
 800d872:	f343 1303 	sbfx	r3, r3, #4, #4
 800d876:	b25b      	sxtb	r3, r3
 800d878:	429a      	cmp	r2, r3
 800d87a:	dd00      	ble.n	800d87e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800d87c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d87e:	f10d 0107 	add.w	r1, sp, #7
 800d882:	6800      	ldr	r0, [r0, #0]
 800d884:	f7ff faac 	bl	800cde0 <VerifyRfFreq>
 800d888:	b310      	cbz	r0, 800d8d0 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800d88a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d88c:	b106      	cbz	r6, 800d890 <RegionEU868ChannelAdd+0x6c>
 800d88e:	bb33      	cbnz	r3, 800d8de <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800d890:	bb3e      	cbnz	r6, 800d8e2 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d892:	bb43      	cbnz	r3, 800d8e6 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d894:	4f15      	ldr	r7, [pc, #84]	; (800d8ec <RegionEU868ChannelAdd+0xc8>)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	006e      	lsls	r6, r5, #1
 800d89a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d89e:	220c      	movs	r2, #12
 800d8a0:	6821      	ldr	r1, [r4, #0]
 800d8a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8a6:	f001 fe7c 	bl	800f5a2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	442e      	add	r6, r5
 800d8ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d8b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8b6:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	fa03 f505 	lsl.w	r5, r3, r5
 800d8be:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d8c2:	431d      	orrs	r5, r3
 800d8c4:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	e006      	b.n	800d8da <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800d8cc:	2601      	movs	r6, #1
 800d8ce:	e7c0      	b.n	800d852 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e7db      	b.n	800d88c <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d8d4:	2006      	movs	r0, #6
 800d8d6:	e000      	b.n	800d8da <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d8d8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d8da:	b003      	add	sp, #12
 800d8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d8de:	2006      	movs	r0, #6
 800d8e0:	e7fb      	b.n	800d8da <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d8e2:	2005      	movs	r0, #5
 800d8e4:	e7f9      	b.n	800d8da <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d8e6:	2004      	movs	r0, #4
 800d8e8:	e7f7      	b.n	800d8da <RegionEU868ChannelAdd+0xb6>
 800d8ea:	bf00      	nop
 800d8ec:	20000c64 	.word	0x20000c64

0800d8f0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d8f0:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d8f2:	2902      	cmp	r1, #2
 800d8f4:	d801      	bhi.n	800d8fa <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800d8f6:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800d8f8:	4770      	bx	lr
{
 800d8fa:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d8fc:	4b09      	ldr	r3, [pc, #36]	; (800d924 <RegionEU868ChannelsRemove+0x34>)
 800d8fe:	6818      	ldr	r0, [r3, #0]
 800d900:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d904:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d908:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d90c:	2200      	movs	r2, #0
 800d90e:	f840 200c 	str.w	r2, [r0, ip]
 800d912:	605a      	str	r2, [r3, #4]
 800d914:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d916:	2210      	movs	r2, #16
 800d918:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d91c:	f7fe ff93 	bl	800c846 <RegionCommonChanDisable>
}
 800d920:	bd08      	pop	{r3, pc}
 800d922:	bf00      	nop
 800d924:	20000c64 	.word	0x20000c64

0800d928 <RegionEU868ApplyCFList>:
{
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d92c:	2350      	movs	r3, #80	; 0x50
 800d92e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d932:	7903      	ldrb	r3, [r0, #4]
 800d934:	2b10      	cmp	r3, #16
 800d936:	d136      	bne.n	800d9a6 <RegionEU868ApplyCFList+0x7e>
 800d938:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d93a:	6803      	ldr	r3, [r0, #0]
 800d93c:	7bdd      	ldrb	r5, [r3, #15]
 800d93e:	2d00      	cmp	r5, #0
 800d940:	d131      	bne.n	800d9a6 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d942:	2403      	movs	r4, #3
 800d944:	e01b      	b.n	800d97e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d946:	6832      	ldr	r2, [r6, #0]
 800d948:	5d53      	ldrb	r3, [r2, r5]
 800d94a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d94c:	442a      	add	r2, r5
 800d94e:	7851      	ldrb	r1, [r2, #1]
 800d950:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d954:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d956:	7892      	ldrb	r2, [r2, #2]
 800d958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d95c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800d95e:	2264      	movs	r2, #100	; 0x64
 800d960:	fb02 f303 	mul.w	r3, r2, r3
 800d964:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	9304      	str	r3, [sp, #16]
 800d96a:	e011      	b.n	800d990 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800d96c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800d970:	4668      	mov	r0, sp
 800d972:	f7ff ffbd 	bl	800d8f0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d976:	3503      	adds	r5, #3
 800d978:	b2ed      	uxtb	r5, r5
 800d97a:	3401      	adds	r4, #1
 800d97c:	b2e4      	uxtb	r4, r4
 800d97e:	2c0f      	cmp	r4, #15
 800d980:	d811      	bhi.n	800d9a6 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d982:	2c07      	cmp	r4, #7
 800d984:	d9df      	bls.n	800d946 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d98a:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d98e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0ea      	beq.n	800d96c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d996:	ab03      	add	r3, sp, #12
 800d998:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d99a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800d99e:	a801      	add	r0, sp, #4
 800d9a0:	f7ff ff40 	bl	800d824 <RegionEU868ChannelAdd>
 800d9a4:	e7e7      	b.n	800d976 <RegionEU868ApplyCFList+0x4e>
}
 800d9a6:	b006      	add	sp, #24
 800d9a8:	bd70      	pop	{r4, r5, r6, pc}

0800d9aa <RegionEU868NewChannelReq>:
{
 800d9aa:	b500      	push	{lr}
 800d9ac:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d9ae:	6803      	ldr	r3, [r0, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	b952      	cbnz	r2, 800d9ca <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d9b4:	7903      	ldrb	r3, [r0, #4]
 800d9b6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d9ba:	a801      	add	r0, sp, #4
 800d9bc:	f7ff ff98 	bl	800d8f0 <RegionEU868ChannelsRemove>
 800d9c0:	b1d0      	cbz	r0, 800d9f8 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d9c2:	2003      	movs	r0, #3
}
 800d9c4:	b005      	add	sp, #20
 800d9c6:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d9ca:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d9cc:	7903      	ldrb	r3, [r0, #4]
 800d9ce:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d9d2:	a802      	add	r0, sp, #8
 800d9d4:	f7ff ff26 	bl	800d824 <RegionEU868ChannelAdd>
 800d9d8:	2806      	cmp	r0, #6
 800d9da:	d80b      	bhi.n	800d9f4 <RegionEU868NewChannelReq+0x4a>
 800d9dc:	e8df f000 	tbb	[pc, r0]
 800d9e0:	0a0a0a04 	.word	0x0a0a0a04
 800d9e4:	060e      	.short	0x060e
 800d9e6:	08          	.byte	0x08
 800d9e7:	00          	.byte	0x00
 800d9e8:	2003      	movs	r0, #3
 800d9ea:	e7eb      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800d9ec:	2001      	movs	r0, #1
                break;
 800d9ee:	e7e9      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d9f0:	2000      	movs	r0, #0
                break;
 800d9f2:	e7e7      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d9f4:	2000      	movs	r0, #0
                break;
 800d9f6:	e7e5      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e7e3      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800d9fc:	2002      	movs	r0, #2
 800d9fe:	e7e1      	b.n	800d9c4 <RegionEU868NewChannelReq+0x1a>

0800da00 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800da04:	4b12      	ldr	r3, [pc, #72]	; (800da50 <RegionEU868SetContinuousWave+0x50>)
 800da06:	6819      	ldr	r1, [r3, #0]
 800da08:	4d12      	ldr	r5, [pc, #72]	; (800da54 <RegionEU868SetContinuousWave+0x54>)
 800da0a:	682b      	ldr	r3, [r5, #0]
 800da0c:	7802      	ldrb	r2, [r0, #0]
 800da0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800da12:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800da16:	7a53      	ldrb	r3, [r2, #9]
 800da18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da1c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800da20:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800da24:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800da28:	f7ff f991 	bl	800cd4e <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800da2c:	682a      	ldr	r2, [r5, #0]
 800da2e:	7823      	ldrb	r3, [r4, #0]
 800da30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da34:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800da38:	68a2      	ldr	r2, [r4, #8]
 800da3a:	6861      	ldr	r1, [r4, #4]
 800da3c:	f7ff f8a2 	bl	800cb84 <RegionCommonComputeTxPower>
 800da40:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800da42:	4b05      	ldr	r3, [pc, #20]	; (800da58 <RegionEU868SetContinuousWave+0x58>)
 800da44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da46:	89a2      	ldrh	r2, [r4, #12]
 800da48:	4628      	mov	r0, r5
 800da4a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800da4c:	bd38      	pop	{r3, r4, r5, pc}
 800da4e:	bf00      	nop
 800da50:	20000c60 	.word	0x20000c60
 800da54:	20000c64 	.word	0x20000c64
 800da58:	08013578 	.word	0x08013578

0800da5c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800da5c:	1a88      	subs	r0, r1, r2
 800da5e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800da60:	2800      	cmp	r0, #0
 800da62:	db01      	blt.n	800da68 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800da64:	b2c0      	uxtb	r0, r0
 800da66:	4770      	bx	lr
        datarate = DR_0;
 800da68:	2000      	movs	r0, #0
 800da6a:	e7fb      	b.n	800da64 <RegionEU868ApplyDrOffset+0x8>

0800da6c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800da6c:	b510      	push	{r4, lr}
 800da6e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800da70:	4b10      	ldr	r3, [pc, #64]	; (800dab4 <VerifyRfFreq+0x48>)
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	4798      	blx	r3
 800da76:	b1c8      	cbz	r0, 800daac <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800da78:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <VerifyRfFreq+0x4c>)
 800da7a:	4423      	add	r3, r4
 800da7c:	4a0f      	ldr	r2, [pc, #60]	; (800dabc <VerifyRfFreq+0x50>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d813      	bhi.n	800daaa <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800da82:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800da86:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800da8a:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800da8e:	fba2 1203 	umull	r1, r2, r2, r3
 800da92:	0c92      	lsrs	r2, r2, #18
 800da94:	490a      	ldr	r1, [pc, #40]	; (800dac0 <VerifyRfFreq+0x54>)
 800da96:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800da9a:	b942      	cbnz	r2, 800daae <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800da9c:	4b09      	ldr	r3, [pc, #36]	; (800dac4 <VerifyRfFreq+0x58>)
 800da9e:	4423      	add	r3, r4
 800daa0:	4a09      	ldr	r2, [pc, #36]	; (800dac8 <VerifyRfFreq+0x5c>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d902      	bls.n	800daac <VerifyRfFreq+0x40>
    {
        return false;
 800daa6:	2000      	movs	r0, #0
 800daa8:	e000      	b.n	800daac <VerifyRfFreq+0x40>
        return false;
 800daaa:	2000      	movs	r0, #0
    }
    return true;
}
 800daac:	bd10      	pop	{r4, pc}
        return false;
 800daae:	2000      	movs	r0, #0
 800dab0:	e7fc      	b.n	800daac <VerifyRfFreq+0x40>
 800dab2:	bf00      	nop
 800dab4:	08013578 	.word	0x08013578
 800dab8:	c8f78f60 	.word	0xc8f78f60
 800dabc:	00401640 	.word	0x00401640
 800dac0:	000927c0 	.word	0x000927c0
 800dac4:	ca37fea0 	.word	0xca37fea0
 800dac8:	01808580 	.word	0x01808580

0800dacc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dacc:	b570      	push	{r4, r5, r6, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800dad2:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <GetTimeOnAir+0x30>)
 800dad4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800dad6:	490a      	ldr	r1, [pc, #40]	; (800db00 <GetTimeOnAir+0x34>)
 800dad8:	f7ff f93e 	bl	800cd58 <RegionCommonGetBandwidth>
 800dadc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dade:	4b09      	ldr	r3, [pc, #36]	; (800db04 <GetTimeOnAir+0x38>)
 800dae0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dae2:	2001      	movs	r0, #1
 800dae4:	9003      	str	r0, [sp, #12]
 800dae6:	b2e4      	uxtb	r4, r4
 800dae8:	9402      	str	r4, [sp, #8]
 800daea:	2200      	movs	r2, #0
 800daec:	9201      	str	r2, [sp, #4]
 800daee:	2208      	movs	r2, #8
 800daf0:	9200      	str	r2, [sp, #0]
 800daf2:	4603      	mov	r3, r0
 800daf4:	4632      	mov	r2, r6
 800daf6:	47a8      	blx	r5
}
 800daf8:	b004      	add	sp, #16
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	08012fbc 	.word	0x08012fbc
 800db00:	08012f68 	.word	0x08012f68
 800db04:	08013578 	.word	0x08013578

0800db08 <LimitTxPower>:
{
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	4606      	mov	r6, r0
 800db0c:	4615      	mov	r5, r2
 800db0e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800db10:	f7ff f91d 	bl	800cd4e <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800db14:	2d04      	cmp	r5, #4
 800db16:	d105      	bne.n	800db24 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800db18:	4634      	mov	r4, r6
 800db1a:	2e02      	cmp	r6, #2
 800db1c:	bfb8      	it	lt
 800db1e:	2402      	movlt	r4, #2
}
 800db20:	4620      	mov	r0, r4
 800db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db24:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800db26:	2204      	movs	r2, #4
 800db28:	2100      	movs	r1, #0
 800db2a:	4638      	mov	r0, r7
 800db2c:	f7fe fea4 	bl	800c878 <RegionCommonCountChannels>
 800db30:	2831      	cmp	r0, #49	; 0x31
 800db32:	d8f5      	bhi.n	800db20 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800db34:	4634      	mov	r4, r6
 800db36:	2e05      	cmp	r6, #5
 800db38:	bfb8      	it	lt
 800db3a:	2405      	movlt	r4, #5
 800db3c:	e7f0      	b.n	800db20 <LimitTxPower+0x18>
	...

0800db40 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800db40:	b500      	push	{lr}
 800db42:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800db44:	2300      	movs	r3, #0
 800db46:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800db48:	7803      	ldrb	r3, [r0, #0]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	2b38      	cmp	r3, #56	; 0x38
 800db4e:	d820      	bhi.n	800db92 <RegionUS915GetPhyParam+0x52>
 800db50:	e8df f003 	tbb	[pc, r3]
 800db54:	1f1f1f1d 	.word	0x1f1f1f1d
 800db58:	1f1f1f1f 	.word	0x1f1f1f1f
 800db5c:	3f3c1f1f 	.word	0x3f3c1f1f
 800db60:	4e1f4842 	.word	0x4e1f4842
 800db64:	5e5a5652 	.word	0x5e5a5652
 800db68:	6f1f6662 	.word	0x6f1f6662
 800db6c:	817b7572 	.word	0x817b7572
 800db70:	881f1f84 	.word	0x881f1f84
 800db74:	1f1f248b 	.word	0x1f1f248b
 800db78:	1f1f1f1f 	.word	0x1f1f1f1f
 800db7c:	1f1f1f1f 	.word	0x1f1f1f1f
 800db80:	8e1f1f1f 	.word	0x8e1f1f1f
 800db84:	1fa29f95 	.word	0x1fa29f95
 800db88:	b2afaca5 	.word	0xb2afaca5
 800db8c:	b8          	.byte	0xb8
 800db8d:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800db8e:	2308      	movs	r3, #8
 800db90:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800db92:	9804      	ldr	r0, [sp, #16]
 800db94:	9005      	str	r0, [sp, #20]
}
 800db96:	b007      	add	sp, #28
 800db98:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800db9c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dba0:	f88d 3004 	strb.w	r3, [sp, #4]
 800dba4:	2304      	movs	r3, #4
 800dba6:	f88d 3005 	strb.w	r3, [sp, #5]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f88d 3006 	strb.w	r3, [sp, #6]
 800dbb0:	2348      	movs	r3, #72	; 0x48
 800dbb2:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dbb6:	4b47      	ldr	r3, [pc, #284]	; (800dcd4 <RegionUS915GetPhyParam+0x194>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dbbe:	9202      	str	r2, [sp, #8]
 800dbc0:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800dbc2:	a801      	add	r0, sp, #4
 800dbc4:	f7ff f8a4 	bl	800cd10 <RegionCommonGetNextLowerTxDr>
 800dbc8:	9004      	str	r0, [sp, #16]
            break;
 800dbca:	e7e2      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800dbcc:	2340      	movs	r3, #64	; 0x40
 800dbce:	9304      	str	r3, [sp, #16]
            break;
 800dbd0:	e7df      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800dbd2:	2320      	movs	r3, #32
 800dbd4:	9304      	str	r3, [sp, #16]
            break;
 800dbd6:	e7dc      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800dbd8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dbdc:	4a3e      	ldr	r2, [pc, #248]	; (800dcd8 <RegionUS915GetPhyParam+0x198>)
 800dbde:	5cd3      	ldrb	r3, [r2, r3]
 800dbe0:	9304      	str	r3, [sp, #16]
            break;
 800dbe2:	e7d6      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800dbe4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dbe8:	4a3c      	ldr	r2, [pc, #240]	; (800dcdc <RegionUS915GetPhyParam+0x19c>)
 800dbea:	5cd3      	ldrb	r3, [r2, r3]
 800dbec:	9304      	str	r3, [sp, #16]
            break;
 800dbee:	e7d0      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800dbf0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dbf4:	9304      	str	r3, [sp, #16]
            break;
 800dbf6:	e7cc      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800dbf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbfc:	9304      	str	r3, [sp, #16]
            break;
 800dbfe:	e7c8      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800dc00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dc04:	9304      	str	r3, [sp, #16]
            break;
 800dc06:	e7c4      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800dc08:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc0c:	9304      	str	r3, [sp, #16]
            break;
 800dc0e:	e7c0      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800dc10:	f241 7370 	movw	r3, #6000	; 0x1770
 800dc14:	9304      	str	r3, [sp, #16]
            break;
 800dc16:	e7bc      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800dc18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc1c:	9304      	str	r3, [sp, #16]
            break;
 800dc1e:	e7b8      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800dc20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dc24:	482e      	ldr	r0, [pc, #184]	; (800dce0 <RegionUS915GetPhyParam+0x1a0>)
 800dc26:	f001 fcaf 	bl	800f588 <randr>
 800dc2a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800dc2e:	9004      	str	r0, [sp, #16]
            break;
 800dc30:	e7af      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800dc32:	4b2c      	ldr	r3, [pc, #176]	; (800dce4 <RegionUS915GetPhyParam+0x1a4>)
 800dc34:	9304      	str	r3, [sp, #16]
            break;
 800dc36:	e7ac      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800dc38:	2308      	movs	r3, #8
 800dc3a:	9304      	str	r3, [sp, #16]
            break;
 800dc3c:	e7a9      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800dc3e:	4b25      	ldr	r3, [pc, #148]	; (800dcd4 <RegionUS915GetPhyParam+0x194>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800dc46:	9304      	str	r3, [sp, #16]
            break;
 800dc48:	e7a3      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800dc4a:	4b22      	ldr	r3, [pc, #136]	; (800dcd4 <RegionUS915GetPhyParam+0x194>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800dc52:	9304      	str	r3, [sp, #16]
            break;
 800dc54:	e79d      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800dc56:	2348      	movs	r3, #72	; 0x48
 800dc58:	9304      	str	r3, [sp, #16]
            break;
 800dc5a:	e79a      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800dc5c:	4b1d      	ldr	r3, [pc, #116]	; (800dcd4 <RegionUS915GetPhyParam+0x194>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	9304      	str	r3, [sp, #16]
            break;
 800dc62:	e796      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800dc64:	4b20      	ldr	r3, [pc, #128]	; (800dce8 <RegionUS915GetPhyParam+0x1a8>)
 800dc66:	9304      	str	r3, [sp, #16]
            break;
 800dc68:	e793      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	9304      	str	r3, [sp, #16]
            break;
 800dc6e:	e790      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800dc70:	4a1e      	ldr	r2, [pc, #120]	; (800dcec <RegionUS915GetPhyParam+0x1ac>)
 800dc72:	491c      	ldr	r1, [pc, #112]	; (800dce4 <RegionUS915GetPhyParam+0x1a4>)
 800dc74:	7900      	ldrb	r0, [r0, #4]
 800dc76:	f7fe fcd5 	bl	800c624 <RegionBaseUSCalcDownlinkFrequency>
 800dc7a:	9004      	str	r0, [sp, #16]
            break;
 800dc7c:	e789      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800dc7e:	2317      	movs	r3, #23
 800dc80:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800dc84:	2305      	movs	r3, #5
 800dc86:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800dc90:	e77f      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800dc92:	2308      	movs	r3, #8
 800dc94:	9304      	str	r3, [sp, #16]
            break;
 800dc96:	e77c      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800dc98:	2308      	movs	r3, #8
 800dc9a:	9304      	str	r3, [sp, #16]
            break;
 800dc9c:	e779      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800dc9e:	4a13      	ldr	r2, [pc, #76]	; (800dcec <RegionUS915GetPhyParam+0x1ac>)
 800dca0:	4910      	ldr	r1, [pc, #64]	; (800dce4 <RegionUS915GetPhyParam+0x1a4>)
 800dca2:	7900      	ldrb	r0, [r0, #4]
 800dca4:	f7fe fcbe 	bl	800c624 <RegionBaseUSCalcDownlinkFrequency>
 800dca8:	9004      	str	r0, [sp, #16]
            break;
 800dcaa:	e772      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800dcac:	2308      	movs	r3, #8
 800dcae:	9304      	str	r3, [sp, #16]
            break;
 800dcb0:	e76f      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800dcb2:	2308      	movs	r3, #8
 800dcb4:	9304      	str	r3, [sp, #16]
            break;
 800dcb6:	e76c      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800dcb8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dcbc:	4a0c      	ldr	r2, [pc, #48]	; (800dcf0 <RegionUS915GetPhyParam+0x1b0>)
 800dcbe:	5cd3      	ldrb	r3, [r2, r3]
 800dcc0:	9304      	str	r3, [sp, #16]
            break;
 800dcc2:	e766      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800dcc4:	490b      	ldr	r1, [pc, #44]	; (800dcf4 <RegionUS915GetPhyParam+0x1b4>)
 800dcc6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800dcca:	f7ff f845 	bl	800cd58 <RegionCommonGetBandwidth>
 800dcce:	9004      	str	r0, [sp, #16]
            break;
 800dcd0:	e75f      	b.n	800db92 <RegionUS915GetPhyParam+0x52>
 800dcd2:	bf00      	nop
 800dcd4:	20000c6c 	.word	0x20000c6c
 800dcd8:	08012fdc 	.word	0x08012fdc
 800dcdc:	08012fcc 	.word	0x08012fcc
 800dce0:	fffffc18 	.word	0xfffffc18
 800dce4:	370870a0 	.word	0x370870a0
 800dce8:	4200999a 	.word	0x4200999a
 800dcec:	000927c0 	.word	0x000927c0
 800dcf0:	08012fbc 	.word	0x08012fbc
 800dcf4:	08012f68 	.word	0x08012f68

0800dcf8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800dcfc:	4b0b      	ldr	r3, [pc, #44]	; (800dd2c <RegionUS915SetBandTxDone+0x34>)
 800dcfe:	681c      	ldr	r4, [r3, #0]
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <RegionUS915SetBandTxDone+0x38>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	7803      	ldrb	r3, [r0, #0]
 800dd06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd0e:	7a5b      	ldrb	r3, [r3, #9]
 800dd10:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800dd14:	6903      	ldr	r3, [r0, #16]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	68c3      	ldr	r3, [r0, #12]
 800dd1a:	7842      	ldrb	r2, [r0, #1]
 800dd1c:	6881      	ldr	r1, [r0, #8]
 800dd1e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800dd22:	f7fe fdce 	bl	800c8c2 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800dd26:	b002      	add	sp, #8
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000c68 	.word	0x20000c68
 800dd30:	20000c6c 	.word	0x20000c6c

0800dd34 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800dd34:	b510      	push	{r4, lr}
 800dd36:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800dd38:	2301      	movs	r3, #1
 800dd3a:	f8ad 3000 	strh.w	r3, [sp]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f88d 3002 	strb.w	r3, [sp, #2]
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	9302      	str	r3, [sp, #8]
 800dd48:	9303      	str	r3, [sp, #12]
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800dd50:	7a04      	ldrb	r4, [r0, #8]
 800dd52:	b17c      	cbz	r4, 800dd74 <RegionUS915InitDefaults+0x40>
 800dd54:	3c01      	subs	r4, #1
 800dd56:	b2e4      	uxtb	r4, r4
 800dd58:	2c01      	cmp	r4, #1
 800dd5a:	f200 8082 	bhi.w	800de62 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dd5e:	4b42      	ldr	r3, [pc, #264]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800dd60:	6818      	ldr	r0, [r3, #0]
 800dd62:	2206      	movs	r2, #6
 800dd64:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800dd68:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800dd6c:	f7fe fd9a 	bl	800c8a4 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800dd70:	2300      	movs	r3, #0
 800dd72:	e074      	b.n	800de5e <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800dd74:	6803      	ldr	r3, [r0, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d073      	beq.n	800de62 <RegionUS915InitDefaults+0x12e>
 800dd7a:	6842      	ldr	r2, [r0, #4]
 800dd7c:	2a00      	cmp	r2, #0
 800dd7e:	d070      	beq.n	800de62 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800dd80:	493a      	ldr	r1, [pc, #232]	; (800de6c <RegionUS915InitDefaults+0x138>)
 800dd82:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800dd84:	4938      	ldr	r1, [pc, #224]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800dd86:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800dd8e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800dd92:	2218      	movs	r2, #24
 800dd94:	4669      	mov	r1, sp
 800dd96:	4618      	mov	r0, r3
 800dd98:	f001 fc03 	bl	800f5a2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800dd9c:	e011      	b.n	800ddc2 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800dd9e:	4b32      	ldr	r3, [pc, #200]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4933      	ldr	r1, [pc, #204]	; (800de70 <RegionUS915InitDefaults+0x13c>)
 800dda4:	4a33      	ldr	r2, [pc, #204]	; (800de74 <RegionUS915InitDefaults+0x140>)
 800dda6:	fb01 2204 	mla	r2, r1, r4, r2
 800ddaa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ddae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800ddb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800ddb6:	2230      	movs	r2, #48	; 0x30
 800ddb8:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ddba:	2200      	movs	r2, #0
 800ddbc:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ddbe:	3401      	adds	r4, #1
 800ddc0:	b2e4      	uxtb	r4, r4
 800ddc2:	2c3f      	cmp	r4, #63	; 0x3f
 800ddc4:	d9eb      	bls.n	800dd9e <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800ddc6:	2340      	movs	r3, #64	; 0x40
 800ddc8:	2b47      	cmp	r3, #71	; 0x47
 800ddca:	d814      	bhi.n	800ddf6 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800ddcc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800ddd0:	4a25      	ldr	r2, [pc, #148]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800ddd2:	6812      	ldr	r2, [r2, #0]
 800ddd4:	4c28      	ldr	r4, [pc, #160]	; (800de78 <RegionUS915InitDefaults+0x144>)
 800ddd6:	4929      	ldr	r1, [pc, #164]	; (800de7c <RegionUS915InitDefaults+0x148>)
 800ddd8:	fb04 1100 	mla	r1, r4, r0, r1
 800dddc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dde0:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800dde4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800dde8:	2144      	movs	r1, #68	; 0x44
 800ddea:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ddec:	2100      	movs	r1, #0
 800ddee:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	e7e8      	b.n	800ddc8 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800ddf6:	4c1c      	ldr	r4, [pc, #112]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800ddf8:	6820      	ldr	r0, [r4, #0]
 800ddfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddfe:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800de02:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800de06:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800de0a:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800de0e:	23ff      	movs	r3, #255	; 0xff
 800de10:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800de14:	2300      	movs	r3, #0
 800de16:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800de1a:	2206      	movs	r2, #6
 800de1c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800de20:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800de24:	f7fe fd3e 	bl	800c8a4 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800de28:	4b10      	ldr	r3, [pc, #64]	; (800de6c <RegionUS915InitDefaults+0x138>)
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	6821      	ldr	r1, [r4, #0]
 800de2e:	2206      	movs	r2, #6
 800de30:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800de34:	3090      	adds	r0, #144	; 0x90
 800de36:	f7fe fd35 	bl	800c8a4 <RegionCommonChanMaskCopy>
            break;
 800de3a:	e012      	b.n	800de62 <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800de3c:	4a0b      	ldr	r2, [pc, #44]	; (800de6c <RegionUS915InitDefaults+0x138>)
 800de3e:	6811      	ldr	r1, [r2, #0]
 800de40:	4a09      	ldr	r2, [pc, #36]	; (800de68 <RegionUS915InitDefaults+0x134>)
 800de42:	6812      	ldr	r2, [r2, #0]
 800de44:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800de48:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800de4c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800de50:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800de54:	4022      	ands	r2, r4
 800de56:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800de5a:	3301      	adds	r3, #1
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b05      	cmp	r3, #5
 800de60:	d9ec      	bls.n	800de3c <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800de62:	b006      	add	sp, #24
 800de64:	bd10      	pop	{r4, pc}
 800de66:	bf00      	nop
 800de68:	20000c6c 	.word	0x20000c6c
 800de6c:	20000c68 	.word	0x20000c68
 800de70:	00030d40 	.word	0x00030d40
 800de74:	35c80160 	.word	0x35c80160
 800de78:	00186a00 	.word	0x00186a00
 800de7c:	35d2afc0 	.word	0x35d2afc0

0800de80 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800de80:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800de82:	290a      	cmp	r1, #10
 800de84:	d829      	bhi.n	800deda <RegionUS915Verify+0x5a>
 800de86:	e8df f001 	tbb	[pc, r1]
 800de8a:	2806      	.short	0x2806
 800de8c:	0a282828 	.word	0x0a282828
 800de90:	1e28140a 	.word	0x1e28140a
 800de94:	1e          	.byte	0x1e
 800de95:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800de96:	6800      	ldr	r0, [r0, #0]
 800de98:	f7ff fde8 	bl	800da6c <VerifyRfFreq>
 800de9c:	e01e      	b.n	800dedc <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800de9e:	2204      	movs	r2, #4
 800dea0:	2100      	movs	r1, #0
 800dea2:	f990 0000 	ldrsb.w	r0, [r0]
 800dea6:	f7fe fc8c 	bl	800c7c2 <RegionCommonValueInRange>
 800deaa:	3800      	subs	r0, #0
 800deac:	bf18      	it	ne
 800deae:	2001      	movne	r0, #1
 800deb0:	e014      	b.n	800dedc <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800deb2:	220d      	movs	r2, #13
 800deb4:	2108      	movs	r1, #8
 800deb6:	f990 0000 	ldrsb.w	r0, [r0]
 800deba:	f7fe fc82 	bl	800c7c2 <RegionCommonValueInRange>
 800debe:	3800      	subs	r0, #0
 800dec0:	bf18      	it	ne
 800dec2:	2001      	movne	r0, #1
 800dec4:	e00a      	b.n	800dedc <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800dec6:	220e      	movs	r2, #14
 800dec8:	2100      	movs	r1, #0
 800deca:	f990 0000 	ldrsb.w	r0, [r0]
 800dece:	f7fe fc78 	bl	800c7c2 <RegionCommonValueInRange>
 800ded2:	3800      	subs	r0, #0
 800ded4:	bf18      	it	ne
 800ded6:	2001      	movne	r0, #1
 800ded8:	e000      	b.n	800dedc <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800deda:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800dedc:	bd08      	pop	{r3, pc}
	...

0800dee0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800dee0:	7903      	ldrb	r3, [r0, #4]
 800dee2:	2b10      	cmp	r3, #16
 800dee4:	d138      	bne.n	800df58 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800dee6:	6803      	ldr	r3, [r0, #0]
 800dee8:	7bdb      	ldrb	r3, [r3, #15]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d134      	bne.n	800df58 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800deee:	2200      	movs	r2, #0
 800def0:	4613      	mov	r3, r2
 800def2:	2a04      	cmp	r2, #4
 800def4:	d82f      	bhi.n	800df56 <RegionUS915ApplyCFList+0x76>
{
 800def6:	b530      	push	{r4, r5, lr}
 800def8:	e012      	b.n	800df20 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800defa:	4d18      	ldr	r5, [pc, #96]	; (800df5c <RegionUS915ApplyCFList+0x7c>)
 800defc:	682d      	ldr	r5, [r5, #0]
 800defe:	f501 7c10 	add.w	ip, r1, #576	; 0x240
 800df02:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800df06:	3148      	adds	r1, #72	; 0x48
 800df08:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 800df0c:	ea04 040c 	and.w	r4, r4, ip
 800df10:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800df14:	3301      	adds	r3, #1
 800df16:	b2db      	uxtb	r3, r3
 800df18:	3202      	adds	r2, #2
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	2b04      	cmp	r3, #4
 800df1e:	d819      	bhi.n	800df54 <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800df20:	6805      	ldr	r5, [r0, #0]
 800df22:	490f      	ldr	r1, [pc, #60]	; (800df60 <RegionUS915ApplyCFList+0x80>)
 800df24:	680c      	ldr	r4, [r1, #0]
 800df26:	4619      	mov	r1, r3
 800df28:	f815 c002 	ldrb.w	ip, [r5, r2]
 800df2c:	f503 7510 	add.w	r5, r3, #576	; 0x240
 800df30:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800df34:	f8d0 e000 	ldr.w	lr, [r0]
 800df38:	4496      	add	lr, r2
 800df3a:	f89e e001 	ldrb.w	lr, [lr, #1]
 800df3e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800df42:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800df46:	2b04      	cmp	r3, #4
 800df48:	d1d7      	bne.n	800defa <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800df4a:	fa5f fc8c 	uxtb.w	ip, ip
 800df4e:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 800df52:	e7d2      	b.n	800defa <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800df54:	bd30      	pop	{r4, r5, pc}
 800df56:	4770      	bx	lr
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	20000c68 	.word	0x20000c68
 800df60:	20000c6c 	.word	0x20000c6c

0800df64 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800df68:	2204      	movs	r2, #4
 800df6a:	2100      	movs	r1, #0
 800df6c:	6800      	ldr	r0, [r0, #0]
 800df6e:	f7fe fc83 	bl	800c878 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800df72:	2801      	cmp	r0, #1
 800df74:	d033      	beq.n	800dfde <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800df76:	792c      	ldrb	r4, [r5, #4]
 800df78:	b11c      	cbz	r4, 800df82 <RegionUS915ChanMaskSet+0x1e>
 800df7a:	2c01      	cmp	r4, #1
 800df7c:	d025      	beq.n	800dfca <RegionUS915ChanMaskSet+0x66>
 800df7e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800df80:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800df82:	4e18      	ldr	r6, [pc, #96]	; (800dfe4 <RegionUS915ChanMaskSet+0x80>)
 800df84:	6830      	ldr	r0, [r6, #0]
 800df86:	2206      	movs	r2, #6
 800df88:	6829      	ldr	r1, [r5, #0]
 800df8a:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800df8e:	f7fe fc89 	bl	800c8a4 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800df92:	6835      	ldr	r5, [r6, #0]
 800df94:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800df98:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800df9c:	2300      	movs	r3, #0
 800df9e:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800dfa2:	e00e      	b.n	800dfc2 <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800dfa4:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <RegionUS915ChanMaskSet+0x84>)
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800dfac:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800dfb0:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800dfb4:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800dfb8:	4003      	ands	r3, r0
 800dfba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800dfbe:	3401      	adds	r4, #1
 800dfc0:	b2e4      	uxtb	r4, r4
 800dfc2:	2c05      	cmp	r4, #5
 800dfc4:	d9ee      	bls.n	800dfa4 <RegionUS915ChanMaskSet+0x40>
    return true;
 800dfc6:	2001      	movs	r0, #1
 800dfc8:	e7da      	b.n	800df80 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800dfca:	4b06      	ldr	r3, [pc, #24]	; (800dfe4 <RegionUS915ChanMaskSet+0x80>)
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	2206      	movs	r2, #6
 800dfd0:	6829      	ldr	r1, [r5, #0]
 800dfd2:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 800dfd6:	f7fe fc65 	bl	800c8a4 <RegionCommonChanMaskCopy>
    return true;
 800dfda:	2001      	movs	r0, #1
            break;
 800dfdc:	e7d0      	b.n	800df80 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800dfde:	2000      	movs	r0, #0
 800dfe0:	e7ce      	b.n	800df80 <RegionUS915ChanMaskSet+0x1c>
 800dfe2:	bf00      	nop
 800dfe4:	20000c6c 	.word	0x20000c6c
 800dfe8:	20000c68 	.word	0x20000c68

0800dfec <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	b083      	sub	sp, #12
 800dff0:	460e      	mov	r6, r1
 800dff2:	4617      	mov	r7, r2
 800dff4:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800dff6:	280d      	cmp	r0, #13
 800dff8:	bfa8      	it	ge
 800dffa:	200d      	movge	r0, #13
 800dffc:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800dffe:	4d0f      	ldr	r5, [pc, #60]	; (800e03c <RegionUS915ComputeRxWindowParameters+0x50>)
 800e000:	4629      	mov	r1, r5
 800e002:	f7fe fea9 	bl	800cd58 <RegionCommonGetBandwidth>
 800e006:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800e008:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e00c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800e010:	4a0b      	ldr	r2, [pc, #44]	; (800e040 <RegionUS915ComputeRxWindowParameters+0x54>)
 800e012:	5cd0      	ldrb	r0, [r2, r3]
 800e014:	f7fe fd6c 	bl	800caf0 <RegionCommonComputeSymbolTimeLoRa>
 800e018:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e01a:	4b0a      	ldr	r3, [pc, #40]	; (800e044 <RegionUS915ComputeRxWindowParameters+0x58>)
 800e01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e01e:	4798      	blx	r3
 800e020:	4603      	mov	r3, r0
 800e022:	f104 020c 	add.w	r2, r4, #12
 800e026:	9201      	str	r2, [sp, #4]
 800e028:	3408      	adds	r4, #8
 800e02a:	9400      	str	r4, [sp, #0]
 800e02c:	463a      	mov	r2, r7
 800e02e:	4631      	mov	r1, r6
 800e030:	4628      	mov	r0, r5
 800e032:	f7fe fd6b 	bl	800cb0c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800e036:	b003      	add	sp, #12
 800e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	08012f68 	.word	0x08012f68
 800e040:	08012fbc 	.word	0x08012fbc
 800e044:	08013578 	.word	0x08013578

0800e048 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e04c:	b08b      	sub	sp, #44	; 0x2c
 800e04e:	4604      	mov	r4, r0
 800e050:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800e052:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e056:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e058:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <RegionUS915RxConfig+0x9c>)
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4798      	blx	r3
 800e05e:	2800      	cmp	r0, #0
 800e060:	d13d      	bne.n	800e0de <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e062:	7ce3      	ldrb	r3, [r4, #19]
 800e064:	b933      	cbnz	r3, 800e074 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800e066:	7827      	ldrb	r7, [r4, #0]
 800e068:	f007 0307 	and.w	r3, r7, #7
 800e06c:	4a1e      	ldr	r2, [pc, #120]	; (800e0e8 <RegionUS915RxConfig+0xa0>)
 800e06e:	4f1f      	ldr	r7, [pc, #124]	; (800e0ec <RegionUS915RxConfig+0xa4>)
 800e070:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800e074:	4b1e      	ldr	r3, [pc, #120]	; (800e0f0 <RegionUS915RxConfig+0xa8>)
 800e076:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800e07a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e0e4 <RegionUS915RxConfig+0x9c>
 800e07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e082:	4638      	mov	r0, r7
 800e084:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e086:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800e08a:	7ca3      	ldrb	r3, [r4, #18]
 800e08c:	9309      	str	r3, [sp, #36]	; 0x24
 800e08e:	2001      	movs	r0, #1
 800e090:	9008      	str	r0, [sp, #32]
 800e092:	2200      	movs	r2, #0
 800e094:	9207      	str	r2, [sp, #28]
 800e096:	9206      	str	r2, [sp, #24]
 800e098:	9205      	str	r2, [sp, #20]
 800e09a:	9204      	str	r2, [sp, #16]
 800e09c:	9203      	str	r2, [sp, #12]
 800e09e:	8923      	ldrh	r3, [r4, #8]
 800e0a0:	9302      	str	r3, [sp, #8]
 800e0a2:	2308      	movs	r3, #8
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	9200      	str	r2, [sp, #0]
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	464a      	mov	r2, r9
 800e0ac:	78a1      	ldrb	r1, [r4, #2]
 800e0ae:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800e0b0:	7c63      	ldrb	r3, [r4, #17]
 800e0b2:	b18b      	cbz	r3, 800e0d8 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800e0b4:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <RegionUS915RxConfig+0xac>)
 800e0b6:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e0b8:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <RegionUS915RxConfig+0x9c>)
 800e0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0bc:	310d      	adds	r1, #13
 800e0be:	b2c9      	uxtb	r1, r1
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	7ce0      	ldrb	r0, [r4, #19]
 800e0ca:	f7fe fe57 	bl	800cd7c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e0ce:	702e      	strb	r6, [r5, #0]
    return true;
 800e0d0:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800e0d2:	b00b      	add	sp, #44	; 0x2c
 800e0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800e0d8:	4b07      	ldr	r3, [pc, #28]	; (800e0f8 <RegionUS915RxConfig+0xb0>)
 800e0da:	5d99      	ldrb	r1, [r3, r6]
 800e0dc:	e7ec      	b.n	800e0b8 <RegionUS915RxConfig+0x70>
        return false;
 800e0de:	2000      	movs	r0, #0
 800e0e0:	e7f7      	b.n	800e0d2 <RegionUS915RxConfig+0x8a>
 800e0e2:	bf00      	nop
 800e0e4:	08013578 	.word	0x08013578
 800e0e8:	000927c0 	.word	0x000927c0
 800e0ec:	370870a0 	.word	0x370870a0
 800e0f0:	08012fbc 	.word	0x08012fbc
 800e0f4:	08012fcc 	.word	0x08012fcc
 800e0f8:	08012fdc 	.word	0x08012fdc

0800e0fc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	b08d      	sub	sp, #52	; 0x34
 800e102:	4604      	mov	r4, r0
 800e104:	468b      	mov	fp, r1
 800e106:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800e108:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e10c:	4b32      	ldr	r3, [pc, #200]	; (800e1d8 <RegionUS915TxConfig+0xdc>)
 800e10e:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800e112:	4b32      	ldr	r3, [pc, #200]	; (800e1dc <RegionUS915TxConfig+0xe0>)
 800e114:	6818      	ldr	r0, [r3, #0]
 800e116:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800e1e0 <RegionUS915TxConfig+0xe4>
 800e11a:	f8d9 3000 	ldr.w	r3, [r9]
 800e11e:	7821      	ldrb	r1, [r4, #0]
 800e120:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e124:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e128:	7a49      	ldrb	r1, [r1, #9]
 800e12a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e12e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e132:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e136:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800e13a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800e13e:	f7ff fce3 	bl	800db08 <LimitTxPower>
 800e142:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800e144:	4927      	ldr	r1, [pc, #156]	; (800e1e4 <RegionUS915TxConfig+0xe8>)
 800e146:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e14a:	f7fe fe05 	bl	800cd58 <RegionCommonGetBandwidth>
 800e14e:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800e150:	2200      	movs	r2, #0
 800e152:	4925      	ldr	r1, [pc, #148]	; (800e1e8 <RegionUS915TxConfig+0xec>)
 800e154:	4630      	mov	r0, r6
 800e156:	f7fe fd15 	bl	800cb84 <RegionCommonComputeTxPower>
 800e15a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e15c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800e1ec <RegionUS915TxConfig+0xf0>
 800e160:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e164:	f8d9 1000 	ldr.w	r1, [r9]
 800e168:	7823      	ldrb	r3, [r4, #0]
 800e16a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e16e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e172:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e174:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e178:	9308      	str	r3, [sp, #32]
 800e17a:	2200      	movs	r2, #0
 800e17c:	9207      	str	r2, [sp, #28]
 800e17e:	9206      	str	r2, [sp, #24]
 800e180:	9205      	str	r2, [sp, #20]
 800e182:	2501      	movs	r5, #1
 800e184:	9504      	str	r5, [sp, #16]
 800e186:	9203      	str	r2, [sp, #12]
 800e188:	2308      	movs	r3, #8
 800e18a:	9302      	str	r3, [sp, #8]
 800e18c:	9501      	str	r5, [sp, #4]
 800e18e:	f8cd a000 	str.w	sl, [sp]
 800e192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e196:	4628      	mov	r0, r5
 800e198:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800e19c:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e19e:	f8d9 2000 	ldr.w	r2, [r9]
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1a8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e1ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e1b0:	f7fe fe06 	bl	800cdc0 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800e1b4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800e1b8:	7b21      	ldrb	r1, [r4, #12]
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e1be:	89a1      	ldrh	r1, [r4, #12]
 800e1c0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e1c4:	f7ff fc82 	bl	800dacc <GetTimeOnAir>
 800e1c8:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800e1ca:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	b00d      	add	sp, #52	; 0x34
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d6:	bf00      	nop
 800e1d8:	08012fbc 	.word	0x08012fbc
 800e1dc:	20000c68 	.word	0x20000c68
 800e1e0:	20000c6c 	.word	0x20000c6c
 800e1e4:	08012f68 	.word	0x08012f68
 800e1e8:	41f00000 	.word	0x41f00000
 800e1ec:	08013578 	.word	0x08013578

0800e1f0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1f4:	b091      	sub	sp, #68	; 0x44
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	4688      	mov	r8, r1
 800e1fa:	4617      	mov	r7, r2
 800e1fc:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e1fe:	2400      	movs	r4, #0
 800e200:	940e      	str	r4, [sp, #56]	; 0x38
 800e202:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800e206:	940b      	str	r4, [sp, #44]	; 0x2c
 800e208:	940c      	str	r4, [sp, #48]	; 0x30
 800e20a:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800e20c:	4b9c      	ldr	r3, [pc, #624]	; (800e480 <RegionUS915LinkAdrReq+0x290>)
 800e20e:	6819      	ldr	r1, [r3, #0]
 800e210:	2206      	movs	r2, #6
 800e212:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800e216:	a80b      	add	r0, sp, #44	; 0x2c
 800e218:	f7fe fb44 	bl	800c8a4 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e21c:	e00d      	b.n	800e23a <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800e21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e222:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800e226:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800e22a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800e22e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e232:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e236:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e23a:	7a2b      	ldrb	r3, [r5, #8]
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	f240 8081 	bls.w	800e344 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e242:	6868      	ldr	r0, [r5, #4]
 800e244:	a90e      	add	r1, sp, #56	; 0x38
 800e246:	4420      	add	r0, r4
 800e248:	f7fe fbdc 	bl	800ca04 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d079      	beq.n	800e344 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800e250:	4404      	add	r4, r0
 800e252:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800e254:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800e258:	f1bc 0f06 	cmp.w	ip, #6
 800e25c:	d0df      	beq.n	800e21e <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800e25e:	f1bc 0f07 	cmp.w	ip, #7
 800e262:	d00a      	beq.n	800e27a <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800e264:	f1bc 0f05 	cmp.w	ip, #5
 800e268:	d068      	beq.n	800e33c <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800e26a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e26e:	aa10      	add	r2, sp, #64	; 0x40
 800e270:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800e274:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800e278:	e7df      	b.n	800e23a <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800e27a:	2300      	movs	r3, #0
 800e27c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800e280:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800e284:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800e288:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800e28c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800e290:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e294:	e7d1      	b.n	800e23a <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800e296:	aa10      	add	r2, sp, #64	; 0x40
 800e298:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e29c:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e2a0:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800e2a4:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e2a8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e2b2:	3101      	adds	r1, #1
 800e2b4:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800e2b6:	f10c 0c01 	add.w	ip, ip, #1
 800e2ba:	fa5f fc8c 	uxtb.w	ip, ip
 800e2be:	f1bc 0f07 	cmp.w	ip, #7
 800e2c2:	d8ba      	bhi.n	800e23a <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800e2c4:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	fa03 f30c 	lsl.w	r3, r3, ip
 800e2ce:	421a      	tst	r2, r3
 800e2d0:	d011      	beq.n	800e2f6 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800e2d2:	f01c 0f01 	tst.w	ip, #1
 800e2d6:	d1de      	bne.n	800e296 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800e2d8:	aa10      	add	r2, sp, #64	; 0x40
 800e2da:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e2de:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e2e2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800e2e6:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800e2ea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e2f4:	e7df      	b.n	800e2b6 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800e2f6:	f01c 0f01 	tst.w	ip, #1
 800e2fa:	d10f      	bne.n	800e31c <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800e2fc:	aa10      	add	r2, sp, #64	; 0x40
 800e2fe:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800e302:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800e306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e30a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e30e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e312:	ea22 0303 	bic.w	r3, r2, r3
 800e316:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800e31a:	e7cc      	b.n	800e2b6 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800e31c:	aa10      	add	r2, sp, #64	; 0x40
 800e31e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800e322:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800e326:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800e32a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e32e:	ea22 0303 	bic.w	r3, r2, r3
 800e332:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800e336:	3101      	adds	r1, #1
 800e338:	b2c9      	uxtb	r1, r1
 800e33a:	e7bc      	b.n	800e2b6 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800e33c:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800e340:	4661      	mov	r1, ip
 800e342:	e7bc      	b.n	800e2be <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e344:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e348:	2b03      	cmp	r3, #3
 800e34a:	dd58      	ble.n	800e3fe <RegionUS915LinkAdrReq+0x20e>
 800e34c:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e350:	2302      	movs	r3, #2
 800e352:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e356:	7a6b      	ldrb	r3, [r5, #9]
 800e358:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800e35c:	a809      	add	r0, sp, #36	; 0x24
 800e35e:	f7ff fbef 	bl	800db40 <RegionUS915GetPhyParam>
 800e362:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800e364:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e368:	7aab      	ldrb	r3, [r5, #10]
 800e36a:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e36e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e372:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e376:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e37a:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e37e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e382:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e386:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e38a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e38e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e392:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e396:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e39a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800e39e:	2348      	movs	r3, #72	; 0x48
 800e3a0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800e3a4:	ab0b      	add	r3, sp, #44	; 0x2c
 800e3a6:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e3a8:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800e3ac:	2304      	movs	r3, #4
 800e3ae:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e3b2:	4b33      	ldr	r3, [pc, #204]	; (800e480 <RegionUS915LinkAdrReq+0x290>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800e3b8:	230e      	movs	r3, #14
 800e3ba:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e3c8:	ab0e      	add	r3, sp, #56	; 0x38
 800e3ca:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e3ce:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800e3d2:	4668      	mov	r0, sp
 800e3d4:	f7fe fb34 	bl	800ca40 <RegionCommonLinkAdrReqVerifyParams>
 800e3d8:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e3da:	2807      	cmp	r0, #7
 800e3dc:	d01c      	beq.n	800e418 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e3de:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800e3e2:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800e3e6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800e3ea:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800e3ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e3f0:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800e3f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e3f4:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	b011      	add	sp, #68	; 0x44
 800e3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800e3fe:	2204      	movs	r2, #4
 800e400:	2100      	movs	r1, #0
 800e402:	a80b      	add	r0, sp, #44	; 0x2c
 800e404:	f7fe fa38 	bl	800c878 <RegionCommonCountChannels>
 800e408:	2801      	cmp	r0, #1
 800e40a:	d902      	bls.n	800e412 <RegionUS915LinkAdrReq+0x222>
 800e40c:	f04f 0907 	mov.w	r9, #7
 800e410:	e79e      	b.n	800e350 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800e412:	f04f 0906 	mov.w	r9, #6
 800e416:	e79b      	b.n	800e350 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800e418:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800e480 <RegionUS915LinkAdrReq+0x290>
 800e41c:	f8d9 0000 	ldr.w	r0, [r9]
 800e420:	2206      	movs	r2, #6
 800e422:	a90b      	add	r1, sp, #44	; 0x2c
 800e424:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800e428:	f7fe fa3c 	bl	800c8a4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800e42c:	4b15      	ldr	r3, [pc, #84]	; (800e484 <RegionUS915LinkAdrReq+0x294>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f8d9 2000 	ldr.w	r2, [r9]
 800e434:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800e438:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800e43c:	4001      	ands	r1, r0
 800e43e:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800e442:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 800e446:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800e44a:	4001      	ands	r1, r0
 800e44c:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800e450:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 800e454:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800e458:	4001      	ands	r1, r0
 800e45a:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800e45e:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 800e462:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800e466:	4001      	ands	r1, r0
 800e468:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e46c:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 800e470:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800e474:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 800e478:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800e47c:	e7af      	b.n	800e3de <RegionUS915LinkAdrReq+0x1ee>
 800e47e:	bf00      	nop
 800e480:	20000c6c 	.word	0x20000c6c
 800e484:	20000c68 	.word	0x20000c68

0800e488 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e48c:	6840      	ldr	r0, [r0, #4]
 800e48e:	f7ff faed 	bl	800da6c <VerifyRfFreq>
 800e492:	b310      	cbz	r0, 800e4da <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800e494:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800e496:	220d      	movs	r2, #13
 800e498:	2108      	movs	r1, #8
 800e49a:	f994 0000 	ldrsb.w	r0, [r4]
 800e49e:	f7fe f990 	bl	800c7c2 <RegionCommonValueInRange>
 800e4a2:	b908      	cbnz	r0, 800e4a8 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e4a4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e4a8:	2207      	movs	r2, #7
 800e4aa:	2105      	movs	r1, #5
 800e4ac:	f994 0000 	ldrsb.w	r0, [r4]
 800e4b0:	f7fe f987 	bl	800c7c2 <RegionCommonValueInRange>
 800e4b4:	2801      	cmp	r0, #1
 800e4b6:	d003      	beq.n	800e4c0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800e4b8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800e4bc:	2b0d      	cmp	r3, #13
 800e4be:	dd01      	ble.n	800e4c4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800e4c0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800e4c4:	2203      	movs	r2, #3
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e4cc:	f7fe f979 	bl	800c7c2 <RegionCommonValueInRange>
 800e4d0:	b908      	cbnz	r0, 800e4d6 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e4d2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e4da:	2506      	movs	r5, #6
 800e4dc:	e7db      	b.n	800e496 <RegionUS915RxParamSetupReq+0xe>

0800e4de <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e4de:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e2:	4770      	bx	lr

0800e4e4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e8:	4770      	bx	lr

0800e4ea <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800e4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ee:	4770      	bx	lr

0800e4f0 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800e4f0:	b9b1      	cbnz	r1, 800e520 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <RegionUS915AlternateDr+0x44>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800e500:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <RegionUS915AlternateDr+0x44>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800e508:	4b0b      	ldr	r3, [pc, #44]	; (800e538 <RegionUS915AlternateDr+0x48>)
 800e50a:	fba3 1302 	umull	r1, r3, r3, r2
 800e50e:	085b      	lsrs	r3, r3, #1
 800e510:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e51a:	d009      	beq.n	800e530 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800e51c:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800e51e:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800e520:	4b04      	ldr	r3, [pc, #16]	; (800e534 <RegionUS915AlternateDr+0x44>)
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800e528:	3b01      	subs	r3, #1
 800e52a:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800e52e:	e7e7      	b.n	800e500 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800e530:	2004      	movs	r0, #4
 800e532:	4770      	bx	lr
 800e534:	20000c68 	.word	0x20000c68
 800e538:	38e38e39 	.word	0x38e38e39

0800e53c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e540:	b0a4      	sub	sp, #144	; 0x90
 800e542:	4604      	mov	r4, r0
 800e544:	460e      	mov	r6, r1
 800e546:	4690      	mov	r8, r2
 800e548:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800e54a:	2500      	movs	r5, #0
 800e54c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800e550:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800e554:	9511      	str	r5, [sp, #68]	; 0x44
 800e556:	2244      	movs	r2, #68	; 0x44
 800e558:	4629      	mov	r1, r5
 800e55a:	a812      	add	r0, sp, #72	; 0x48
 800e55c:	f004 f8cc 	bl	80126f8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800e560:	4b4e      	ldr	r3, [pc, #312]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	2204      	movs	r2, #4
 800e566:	4629      	mov	r1, r5
 800e568:	3090      	adds	r0, #144	; 0x90
 800e56a:	f7fe f985 	bl	800c878 <RegionCommonCountChannels>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d054      	beq.n	800e61c <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800e572:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e576:	2b03      	cmp	r3, #3
 800e578:	dd0a      	ble.n	800e590 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800e57a:	4b48      	ldr	r3, [pc, #288]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800e582:	b92a      	cbnz	r2, 800e590 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800e584:	4a46      	ldr	r2, [pc, #280]	; (800e6a0 <RegionUS915NextChannel+0x164>)
 800e586:	6812      	ldr	r2, [r2, #0]
 800e588:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 800e58c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e590:	7a63      	ldrb	r3, [r4, #9]
 800e592:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e596:	7a23      	ldrb	r3, [r4, #8]
 800e598:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800e59c:	4b3f      	ldr	r3, [pc, #252]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800e5a4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e5a6:	4a3e      	ldr	r2, [pc, #248]	; (800e6a0 <RegionUS915NextChannel+0x164>)
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800e5ac:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800e5ae:	2348      	movs	r3, #72	; 0x48
 800e5b0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e5b8:	6823      	ldr	r3, [r4, #0]
 800e5ba:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e5bc:	6863      	ldr	r3, [r4, #4]
 800e5be:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e5c0:	7aa3      	ldrb	r3, [r4, #10]
 800e5c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e5cc:	ab0c      	add	r3, sp, #48	; 0x30
 800e5ce:	f104 020c 	add.w	r2, r4, #12
 800e5d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5d6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e5da:	7d23      	ldrb	r3, [r4, #20]
 800e5dc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e5e0:	8ae1      	ldrh	r1, [r4, #22]
 800e5e2:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e5e6:	f7ff fa71 	bl	800dacc <GetTimeOnAir>
 800e5ea:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e5ec:	ab03      	add	r3, sp, #12
 800e5ee:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e5f0:	f8cd 8004 	str.w	r8, [sp, #4]
 800e5f4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800e5fe:	aa11      	add	r2, sp, #68	; 0x44
 800e600:	4639      	mov	r1, r7
 800e602:	a809      	add	r0, sp, #36	; 0x24
 800e604:	f7fe fb3a 	bl	800cc7c <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e608:	4605      	mov	r5, r0
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d141      	bne.n	800e692 <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 800e60e:	7a63      	ldrb	r3, [r4, #9]
 800e610:	b99b      	cbnz	r3, 800e63a <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800e612:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e616:	b1eb      	cbz	r3, 800e654 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800e618:	4603      	mov	r3, r0
 800e61a:	e029      	b.n	800e670 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800e61c:	4d1f      	ldr	r5, [pc, #124]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e61e:	6828      	ldr	r0, [r5, #0]
 800e620:	4b1f      	ldr	r3, [pc, #124]	; (800e6a0 <RegionUS915NextChannel+0x164>)
 800e622:	6819      	ldr	r1, [r3, #0]
 800e624:	2204      	movs	r2, #4
 800e626:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800e62a:	3090      	adds	r0, #144	; 0x90
 800e62c:	f7fe f93a 	bl	800c8a4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800e638:	e79b      	b.n	800e572 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e63a:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800e63e:	3901      	subs	r1, #1
 800e640:	f000 ffa2 	bl	800f588 <randr>
 800e644:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800e648:	eb0d 0003 	add.w	r0, sp, r3
 800e64c:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800e650:	7033      	strb	r3, [r6, #0]
 800e652:	e017      	b.n	800e684 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800e654:	4b11      	ldr	r3, [pc, #68]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e656:	6818      	ldr	r0, [r3, #0]
 800e658:	4632      	mov	r2, r6
 800e65a:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800e65e:	3090      	adds	r0, #144	; 0x90
 800e660:	f7fd ff92 	bl	800c588 <RegionBaseUSComputeNext125kHzJoinChannel>
 800e664:	2803      	cmp	r0, #3
 800e666:	d10d      	bne.n	800e684 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e668:	4605      	mov	r5, r0
 800e66a:	e012      	b.n	800e692 <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800e66c:	3301      	adds	r3, #1
 800e66e:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800e670:	4a0a      	ldr	r2, [pc, #40]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e672:	6812      	ldr	r2, [r2, #0]
 800e674:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 800e678:	4118      	asrs	r0, r3
 800e67a:	f010 0f01 	tst.w	r0, #1
 800e67e:	d0f5      	beq.n	800e66c <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 800e680:	3340      	adds	r3, #64	; 0x40
 800e682:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800e684:	4b05      	ldr	r3, [pc, #20]	; (800e69c <RegionUS915NextChannel+0x160>)
 800e686:	6818      	ldr	r0, [r3, #0]
 800e688:	2248      	movs	r2, #72	; 0x48
 800e68a:	7831      	ldrb	r1, [r6, #0]
 800e68c:	3090      	adds	r0, #144	; 0x90
 800e68e:	f7fe f8da 	bl	800c846 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800e692:	4628      	mov	r0, r5
 800e694:	b024      	add	sp, #144	; 0x90
 800e696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69a:	bf00      	nop
 800e69c:	20000c68 	.word	0x20000c68
 800e6a0:	20000c6c 	.word	0x20000c6c

0800e6a4 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800e6a8:	4b14      	ldr	r3, [pc, #80]	; (800e6fc <RegionUS915SetContinuousWave+0x58>)
 800e6aa:	6819      	ldr	r1, [r3, #0]
 800e6ac:	4d14      	ldr	r5, [pc, #80]	; (800e700 <RegionUS915SetContinuousWave+0x5c>)
 800e6ae:	682b      	ldr	r3, [r5, #0]
 800e6b0:	7802      	ldrb	r2, [r0, #0]
 800e6b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e6b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e6ba:	7a52      	ldrb	r2, [r2, #9]
 800e6bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e6c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e6c4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e6c8:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e6cc:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800e6d0:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e6d4:	f7ff fa18 	bl	800db08 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e6d8:	682a      	ldr	r2, [r5, #0]
 800e6da:	7823      	ldrb	r3, [r4, #0]
 800e6dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e6e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4907      	ldr	r1, [pc, #28]	; (800e704 <RegionUS915SetContinuousWave+0x60>)
 800e6e8:	f7fe fa4c 	bl	800cb84 <RegionCommonComputeTxPower>
 800e6ec:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e6ee:	4b06      	ldr	r3, [pc, #24]	; (800e708 <RegionUS915SetContinuousWave+0x64>)
 800e6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f2:	89a2      	ldrh	r2, [r4, #12]
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800e6f8:	bd38      	pop	{r3, r4, r5, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20000c68 	.word	0x20000c68
 800e700:	20000c6c 	.word	0x20000c6c
 800e704:	41f00000 	.word	0x41f00000
 800e708:	08013578 	.word	0x08013578

0800e70c <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800e70c:	4b04      	ldr	r3, [pc, #16]	; (800e720 <RegionUS915ApplyDrOffset+0x14>)
 800e70e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e712:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800e714:	2800      	cmp	r0, #0
 800e716:	db01      	blt.n	800e71c <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800e718:	b2c0      	uxtb	r0, r0
 800e71a:	4770      	bx	lr
        datarate = DR_0;
 800e71c:	2000      	movs	r0, #0
 800e71e:	e7fb      	b.n	800e718 <RegionUS915ApplyDrOffset+0xc>
 800e720:	08012fa8 	.word	0x08012fa8

0800e724 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e724:	b510      	push	{r4, lr}
 800e726:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e728:	2210      	movs	r2, #16
 800e72a:	2100      	movs	r1, #0
 800e72c:	30f1      	adds	r0, #241	; 0xf1
 800e72e:	f000 ff50 	bl	800f5d2 <memset1>
    ctx->M_n = 0;
 800e732:	2100      	movs	r1, #0
 800e734:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e738:	22f0      	movs	r2, #240	; 0xf0
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 ff49 	bl	800f5d2 <memset1>
}
 800e740:	bd10      	pop	{r4, pc}

0800e742 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e742:	b508      	push	{r3, lr}
 800e744:	4602      	mov	r2, r0
 800e746:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e748:	2110      	movs	r1, #16
 800e74a:	f000 fb3b 	bl	800edc4 <lorawan_aes_set_key>
}
 800e74e:	bd08      	pop	{r3, pc}

0800e750 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	4604      	mov	r4, r0
 800e758:	460d      	mov	r5, r1
 800e75a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e75c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e760:	2b00      	cmp	r3, #0
 800e762:	d054      	beq.n	800e80e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e764:	f1c3 0810 	rsb	r8, r3, #16
 800e768:	4647      	mov	r7, r8
 800e76a:	4590      	cmp	r8, r2
 800e76c:	bf28      	it	cs
 800e76e:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e770:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e774:	b2ba      	uxth	r2, r7
 800e776:	4418      	add	r0, r3
 800e778:	f000 ff13 	bl	800f5a2 <memcpy1>
        ctx->M_n += mlen;
 800e77c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e780:	443b      	add	r3, r7
 800e782:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e786:	2b0f      	cmp	r3, #15
 800e788:	d94d      	bls.n	800e826 <AES_CMAC_Update+0xd6>
 800e78a:	45b0      	cmp	r8, r6
 800e78c:	d24b      	bcs.n	800e826 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e78e:	2300      	movs	r3, #0
 800e790:	e008      	b.n	800e7a4 <AES_CMAC_Update+0x54>
 800e792:	18e2      	adds	r2, r4, r3
 800e794:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e798:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e79c:	4041      	eors	r1, r0
 800e79e:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	2b0f      	cmp	r3, #15
 800e7a6:	ddf4      	ble.n	800e792 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e7a8:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e7ac:	2210      	movs	r2, #16
 800e7ae:	4641      	mov	r1, r8
 800e7b0:	4668      	mov	r0, sp
 800e7b2:	f000 fef6 	bl	800f5a2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	4669      	mov	r1, sp
 800e7ba:	4668      	mov	r0, sp
 800e7bc:	f000 fb84 	bl	800eec8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e7c0:	2210      	movs	r2, #16
 800e7c2:	4669      	mov	r1, sp
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	f000 feec 	bl	800f5a2 <memcpy1>

        data += mlen;
 800e7ca:	443d      	add	r5, r7
        len -= mlen;
 800e7cc:	1bf6      	subs	r6, r6, r7
 800e7ce:	e01e      	b.n	800e80e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e7d0:	eb04 0e03 	add.w	lr, r4, r3
 800e7d4:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e7d8:	5cea      	ldrb	r2, [r5, r3]
 800e7da:	ea8c 0c02 	eor.w	ip, ip, r2
 800e7de:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	2b0f      	cmp	r3, #15
 800e7e6:	ddf3      	ble.n	800e7d0 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e7e8:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800e7ec:	2210      	movs	r2, #16
 800e7ee:	4639      	mov	r1, r7
 800e7f0:	4668      	mov	r0, sp
 800e7f2:	f000 fed6 	bl	800f5a2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e7f6:	4622      	mov	r2, r4
 800e7f8:	4669      	mov	r1, sp
 800e7fa:	4668      	mov	r0, sp
 800e7fc:	f000 fb64 	bl	800eec8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e800:	2210      	movs	r2, #16
 800e802:	4669      	mov	r1, sp
 800e804:	4638      	mov	r0, r7
 800e806:	f000 fecc 	bl	800f5a2 <memcpy1>

        data += 16;
 800e80a:	3510      	adds	r5, #16
        len -= 16;
 800e80c:	3e10      	subs	r6, #16
    while( len > 16 )
 800e80e:	2e10      	cmp	r6, #16
 800e810:	d901      	bls.n	800e816 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e812:	2300      	movs	r3, #0
 800e814:	e7e6      	b.n	800e7e4 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e816:	b2b2      	uxth	r2, r6
 800e818:	4629      	mov	r1, r5
 800e81a:	f204 1001 	addw	r0, r4, #257	; 0x101
 800e81e:	f000 fec0 	bl	800f5a2 <memcpy1>
    ctx->M_n = len;
 800e822:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800e826:	b004      	add	sp, #16
 800e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e82c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e82c:	b530      	push	{r4, r5, lr}
 800e82e:	b089      	sub	sp, #36	; 0x24
 800e830:	4605      	mov	r5, r0
 800e832:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e834:	2210      	movs	r2, #16
 800e836:	2100      	movs	r1, #0
 800e838:	eb0d 0002 	add.w	r0, sp, r2
 800e83c:	f000 fec9 	bl	800f5d2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e840:	4622      	mov	r2, r4
 800e842:	a904      	add	r1, sp, #16
 800e844:	4608      	mov	r0, r1
 800e846:	f000 fb3f 	bl	800eec8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e84a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	db01      	blt.n	800e856 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e852:	2300      	movs	r3, #0
 800e854:	e030      	b.n	800e8b8 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e856:	2300      	movs	r3, #0
 800e858:	2b0e      	cmp	r3, #14
 800e85a:	dc11      	bgt.n	800e880 <AES_CMAC_Final+0x54>
 800e85c:	f103 0220 	add.w	r2, r3, #32
 800e860:	eb0d 0102 	add.w	r1, sp, r2
 800e864:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e868:	3301      	adds	r3, #1
 800e86a:	f103 0220 	add.w	r2, r3, #32
 800e86e:	446a      	add	r2, sp
 800e870:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e874:	09d2      	lsrs	r2, r2, #7
 800e876:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e87a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e87e:	e7eb      	b.n	800e858 <AES_CMAC_Final+0x2c>
 800e880:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e884:	005b      	lsls	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e88c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e890:	f88d 301f 	strb.w	r3, [sp, #31]
 800e894:	e017      	b.n	800e8c6 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e896:	f103 0220 	add.w	r2, r3, #32
 800e89a:	eb0d 0102 	add.w	r1, sp, r2
 800e89e:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	f103 0220 	add.w	r2, r3, #32
 800e8a8:	446a      	add	r2, sp
 800e8aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e8ae:	09d2      	lsrs	r2, r2, #7
 800e8b0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e8b4:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e8b8:	2b0e      	cmp	r3, #14
 800e8ba:	ddec      	ble.n	800e896 <AES_CMAC_Final+0x6a>
 800e8bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e8c6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800e8ca:	2810      	cmp	r0, #16
 800e8cc:	d014      	beq.n	800e8f8 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e8ce:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	db30      	blt.n	800e938 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	e041      	b.n	800e95e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e8da:	18e1      	adds	r1, r4, r3
 800e8dc:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e8e0:	f103 0020 	add.w	r0, r3, #32
 800e8e4:	4468      	add	r0, sp
 800e8e6:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e8ea:	4042      	eors	r2, r0
 800e8ec:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	2b0f      	cmp	r3, #15
 800e8f4:	ddf1      	ble.n	800e8da <AES_CMAC_Final+0xae>
 800e8f6:	e059      	b.n	800e9ac <AES_CMAC_Final+0x180>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	e7fa      	b.n	800e8f2 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e8fc:	f103 0220 	add.w	r2, r3, #32
 800e900:	eb0d 0102 	add.w	r1, sp, r2
 800e904:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e908:	3301      	adds	r3, #1
 800e90a:	f103 0220 	add.w	r2, r3, #32
 800e90e:	446a      	add	r2, sp
 800e910:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e914:	09d2      	lsrs	r2, r2, #7
 800e916:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e91a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e91e:	2b0e      	cmp	r3, #14
 800e920:	ddec      	ble.n	800e8fc <AES_CMAC_Final+0xd0>
 800e922:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e92e:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e932:	f88d 301f 	strb.w	r3, [sp, #31]
 800e936:	e019      	b.n	800e96c <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e938:	2300      	movs	r3, #0
 800e93a:	e7f0      	b.n	800e91e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e93c:	f103 0220 	add.w	r2, r3, #32
 800e940:	eb0d 0102 	add.w	r1, sp, r2
 800e944:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e948:	3301      	adds	r3, #1
 800e94a:	f103 0220 	add.w	r2, r3, #32
 800e94e:	446a      	add	r2, sp
 800e950:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e954:	09d2      	lsrs	r2, r2, #7
 800e956:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e95a:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e95e:	2b0e      	cmp	r3, #14
 800e960:	ddec      	ble.n	800e93c <AES_CMAC_Final+0x110>
 800e962:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e96c:	4420      	add	r0, r4
 800e96e:	2380      	movs	r3, #128	; 0x80
 800e970:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e974:	e003      	b.n	800e97e <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e976:	4423      	add	r3, r4
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e97e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e982:	3301      	adds	r3, #1
 800e984:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800e988:	2b0f      	cmp	r3, #15
 800e98a:	d9f4      	bls.n	800e976 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e98c:	2300      	movs	r3, #0
 800e98e:	e00b      	b.n	800e9a8 <AES_CMAC_Final+0x17c>
 800e990:	18e1      	adds	r1, r4, r3
 800e992:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e996:	f103 0020 	add.w	r0, r3, #32
 800e99a:	4468      	add	r0, sp
 800e99c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e9a0:	4042      	eors	r2, r0
 800e9a2:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	2b0f      	cmp	r3, #15
 800e9aa:	ddf1      	ble.n	800e990 <AES_CMAC_Final+0x164>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e009      	b.n	800e9c4 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e9b0:	18e2      	adds	r2, r4, r3
 800e9b2:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800e9b6:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800e9ba:	ea8c 0c01 	eor.w	ip, ip, r1
 800e9be:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	2b0f      	cmp	r3, #15
 800e9c6:	ddf3      	ble.n	800e9b0 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e9c8:	2210      	movs	r2, #16
 800e9ca:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800e9ce:	4668      	mov	r0, sp
 800e9d0:	f000 fde7 	bl	800f5a2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e9d4:	4622      	mov	r2, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	4668      	mov	r0, sp
 800e9da:	f000 fa75 	bl	800eec8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e9de:	2210      	movs	r2, #16
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	eb0d 0002 	add.w	r0, sp, r2
 800e9e6:	f000 fdf4 	bl	800f5d2 <memset1>
}
 800e9ea:	b009      	add	sp, #36	; 0x24
 800e9ec:	bd30      	pop	{r4, r5, pc}

0800e9ee <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e9ee:	780b      	ldrb	r3, [r1, #0]
 800e9f0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e9f2:	784b      	ldrb	r3, [r1, #1]
 800e9f4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e9f6:	788b      	ldrb	r3, [r1, #2]
 800e9f8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e9fa:	78cb      	ldrb	r3, [r1, #3]
 800e9fc:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e9fe:	790b      	ldrb	r3, [r1, #4]
 800ea00:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ea02:	794b      	ldrb	r3, [r1, #5]
 800ea04:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ea06:	798b      	ldrb	r3, [r1, #6]
 800ea08:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ea0a:	79cb      	ldrb	r3, [r1, #7]
 800ea0c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ea0e:	7a0b      	ldrb	r3, [r1, #8]
 800ea10:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ea12:	7a4b      	ldrb	r3, [r1, #9]
 800ea14:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ea16:	7a8b      	ldrb	r3, [r1, #10]
 800ea18:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ea1a:	7acb      	ldrb	r3, [r1, #11]
 800ea1c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ea1e:	7b0b      	ldrb	r3, [r1, #12]
 800ea20:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ea22:	7b4b      	ldrb	r3, [r1, #13]
 800ea24:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ea26:	7b8b      	ldrb	r3, [r1, #14]
 800ea28:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ea2a:	7bcb      	ldrb	r3, [r1, #15]
 800ea2c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800ea2e:	4770      	bx	lr

0800ea30 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800ea30:	e004      	b.n	800ea3c <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ea32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea36:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	1e53      	subs	r3, r2, #1
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2a00      	cmp	r2, #0
 800ea42:	d1f6      	bne.n	800ea32 <copy_block_nn+0x2>
}
 800ea44:	4770      	bx	lr

0800ea46 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ea46:	780b      	ldrb	r3, [r1, #0]
 800ea48:	7802      	ldrb	r2, [r0, #0]
 800ea4a:	4053      	eors	r3, r2
 800ea4c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ea4e:	784b      	ldrb	r3, [r1, #1]
 800ea50:	7842      	ldrb	r2, [r0, #1]
 800ea52:	4053      	eors	r3, r2
 800ea54:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ea56:	788b      	ldrb	r3, [r1, #2]
 800ea58:	7882      	ldrb	r2, [r0, #2]
 800ea5a:	4053      	eors	r3, r2
 800ea5c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ea5e:	78cb      	ldrb	r3, [r1, #3]
 800ea60:	78c2      	ldrb	r2, [r0, #3]
 800ea62:	4053      	eors	r3, r2
 800ea64:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ea66:	790b      	ldrb	r3, [r1, #4]
 800ea68:	7902      	ldrb	r2, [r0, #4]
 800ea6a:	4053      	eors	r3, r2
 800ea6c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ea6e:	794b      	ldrb	r3, [r1, #5]
 800ea70:	7942      	ldrb	r2, [r0, #5]
 800ea72:	4053      	eors	r3, r2
 800ea74:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ea76:	798b      	ldrb	r3, [r1, #6]
 800ea78:	7982      	ldrb	r2, [r0, #6]
 800ea7a:	4053      	eors	r3, r2
 800ea7c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ea7e:	79cb      	ldrb	r3, [r1, #7]
 800ea80:	79c2      	ldrb	r2, [r0, #7]
 800ea82:	4053      	eors	r3, r2
 800ea84:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ea86:	7a0b      	ldrb	r3, [r1, #8]
 800ea88:	7a02      	ldrb	r2, [r0, #8]
 800ea8a:	4053      	eors	r3, r2
 800ea8c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ea8e:	7a4b      	ldrb	r3, [r1, #9]
 800ea90:	7a42      	ldrb	r2, [r0, #9]
 800ea92:	4053      	eors	r3, r2
 800ea94:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ea96:	7a8b      	ldrb	r3, [r1, #10]
 800ea98:	7a82      	ldrb	r2, [r0, #10]
 800ea9a:	4053      	eors	r3, r2
 800ea9c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ea9e:	7acb      	ldrb	r3, [r1, #11]
 800eaa0:	7ac2      	ldrb	r2, [r0, #11]
 800eaa2:	4053      	eors	r3, r2
 800eaa4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800eaa6:	7b0b      	ldrb	r3, [r1, #12]
 800eaa8:	7b02      	ldrb	r2, [r0, #12]
 800eaaa:	4053      	eors	r3, r2
 800eaac:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800eaae:	7b4b      	ldrb	r3, [r1, #13]
 800eab0:	7b42      	ldrb	r2, [r0, #13]
 800eab2:	4053      	eors	r3, r2
 800eab4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800eab6:	7b8b      	ldrb	r3, [r1, #14]
 800eab8:	7b82      	ldrb	r2, [r0, #14]
 800eaba:	4053      	eors	r3, r2
 800eabc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800eabe:	7bcb      	ldrb	r3, [r1, #15]
 800eac0:	7bc2      	ldrb	r2, [r0, #15]
 800eac2:	4053      	eors	r3, r2
 800eac4:	73c3      	strb	r3, [r0, #15]
#endif
}
 800eac6:	4770      	bx	lr

0800eac8 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800eac8:	780b      	ldrb	r3, [r1, #0]
 800eaca:	f892 c000 	ldrb.w	ip, [r2]
 800eace:	ea83 030c 	eor.w	r3, r3, ip
 800ead2:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ead4:	784b      	ldrb	r3, [r1, #1]
 800ead6:	f892 c001 	ldrb.w	ip, [r2, #1]
 800eada:	ea83 030c 	eor.w	r3, r3, ip
 800eade:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800eae0:	788b      	ldrb	r3, [r1, #2]
 800eae2:	f892 c002 	ldrb.w	ip, [r2, #2]
 800eae6:	ea83 030c 	eor.w	r3, r3, ip
 800eaea:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800eaec:	78cb      	ldrb	r3, [r1, #3]
 800eaee:	f892 c003 	ldrb.w	ip, [r2, #3]
 800eaf2:	ea83 030c 	eor.w	r3, r3, ip
 800eaf6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800eaf8:	790b      	ldrb	r3, [r1, #4]
 800eafa:	f892 c004 	ldrb.w	ip, [r2, #4]
 800eafe:	ea83 030c 	eor.w	r3, r3, ip
 800eb02:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800eb04:	794b      	ldrb	r3, [r1, #5]
 800eb06:	f892 c005 	ldrb.w	ip, [r2, #5]
 800eb0a:	ea83 030c 	eor.w	r3, r3, ip
 800eb0e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800eb10:	798b      	ldrb	r3, [r1, #6]
 800eb12:	f892 c006 	ldrb.w	ip, [r2, #6]
 800eb16:	ea83 030c 	eor.w	r3, r3, ip
 800eb1a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800eb1c:	79cb      	ldrb	r3, [r1, #7]
 800eb1e:	f892 c007 	ldrb.w	ip, [r2, #7]
 800eb22:	ea83 030c 	eor.w	r3, r3, ip
 800eb26:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800eb28:	7a0b      	ldrb	r3, [r1, #8]
 800eb2a:	f892 c008 	ldrb.w	ip, [r2, #8]
 800eb2e:	ea83 030c 	eor.w	r3, r3, ip
 800eb32:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800eb34:	7a4b      	ldrb	r3, [r1, #9]
 800eb36:	f892 c009 	ldrb.w	ip, [r2, #9]
 800eb3a:	ea83 030c 	eor.w	r3, r3, ip
 800eb3e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800eb40:	7a8b      	ldrb	r3, [r1, #10]
 800eb42:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800eb46:	ea83 030c 	eor.w	r3, r3, ip
 800eb4a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800eb4c:	7acb      	ldrb	r3, [r1, #11]
 800eb4e:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800eb52:	ea83 030c 	eor.w	r3, r3, ip
 800eb56:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800eb58:	7b0b      	ldrb	r3, [r1, #12]
 800eb5a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800eb5e:	ea83 030c 	eor.w	r3, r3, ip
 800eb62:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800eb64:	7b4b      	ldrb	r3, [r1, #13]
 800eb66:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800eb6a:	ea83 030c 	eor.w	r3, r3, ip
 800eb6e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800eb70:	7b8b      	ldrb	r3, [r1, #14]
 800eb72:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800eb76:	ea83 030c 	eor.w	r3, r3, ip
 800eb7a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800eb7c:	7bcb      	ldrb	r3, [r1, #15]
 800eb7e:	7bd2      	ldrb	r2, [r2, #15]
 800eb80:	4053      	eors	r3, r2
 800eb82:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800eb84:	4770      	bx	lr

0800eb86 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800eb86:	b508      	push	{r3, lr}
    xor_block(d, k);
 800eb88:	f7ff ff5d 	bl	800ea46 <xor_block>
}
 800eb8c:	bd08      	pop	{r3, pc}
	...

0800eb90 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800eb90:	7802      	ldrb	r2, [r0, #0]
 800eb92:	4b18      	ldr	r3, [pc, #96]	; (800ebf4 <shift_sub_rows+0x64>)
 800eb94:	5c9a      	ldrb	r2, [r3, r2]
 800eb96:	7002      	strb	r2, [r0, #0]
 800eb98:	7902      	ldrb	r2, [r0, #4]
 800eb9a:	5c9a      	ldrb	r2, [r3, r2]
 800eb9c:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800eb9e:	7a02      	ldrb	r2, [r0, #8]
 800eba0:	5c9a      	ldrb	r2, [r3, r2]
 800eba2:	7202      	strb	r2, [r0, #8]
 800eba4:	7b02      	ldrb	r2, [r0, #12]
 800eba6:	5c9a      	ldrb	r2, [r3, r2]
 800eba8:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ebaa:	7842      	ldrb	r2, [r0, #1]
 800ebac:	7941      	ldrb	r1, [r0, #5]
 800ebae:	5c59      	ldrb	r1, [r3, r1]
 800ebb0:	7041      	strb	r1, [r0, #1]
 800ebb2:	7a41      	ldrb	r1, [r0, #9]
 800ebb4:	5c59      	ldrb	r1, [r3, r1]
 800ebb6:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ebb8:	7b41      	ldrb	r1, [r0, #13]
 800ebba:	5c59      	ldrb	r1, [r3, r1]
 800ebbc:	7241      	strb	r1, [r0, #9]
 800ebbe:	5c9a      	ldrb	r2, [r3, r2]
 800ebc0:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ebc2:	7882      	ldrb	r2, [r0, #2]
 800ebc4:	7a81      	ldrb	r1, [r0, #10]
 800ebc6:	5c59      	ldrb	r1, [r3, r1]
 800ebc8:	7081      	strb	r1, [r0, #2]
 800ebca:	5c9a      	ldrb	r2, [r3, r2]
 800ebcc:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ebce:	7982      	ldrb	r2, [r0, #6]
 800ebd0:	7b81      	ldrb	r1, [r0, #14]
 800ebd2:	5c59      	ldrb	r1, [r3, r1]
 800ebd4:	7181      	strb	r1, [r0, #6]
 800ebd6:	5c9a      	ldrb	r2, [r3, r2]
 800ebd8:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ebda:	7bc2      	ldrb	r2, [r0, #15]
 800ebdc:	7ac1      	ldrb	r1, [r0, #11]
 800ebde:	5c59      	ldrb	r1, [r3, r1]
 800ebe0:	73c1      	strb	r1, [r0, #15]
 800ebe2:	79c1      	ldrb	r1, [r0, #7]
 800ebe4:	5c59      	ldrb	r1, [r3, r1]
 800ebe6:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ebe8:	78c1      	ldrb	r1, [r0, #3]
 800ebea:	5c59      	ldrb	r1, [r3, r1]
 800ebec:	71c1      	strb	r1, [r0, #7]
 800ebee:	5c9b      	ldrb	r3, [r3, r2]
 800ebf0:	70c3      	strb	r3, [r0, #3]
}
 800ebf2:	4770      	bx	lr
 800ebf4:	080131ec 	.word	0x080131ec

0800ebf8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfc:	b084      	sub	sp, #16
 800ebfe:	4604      	mov	r4, r0
    block_copy(st, dt);
 800ec00:	4601      	mov	r1, r0
 800ec02:	4668      	mov	r0, sp
 800ec04:	f7ff fef3 	bl	800e9ee <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ec08:	f89d c000 	ldrb.w	ip, [sp]
 800ec0c:	4b6a      	ldr	r3, [pc, #424]	; (800edb8 <mix_sub_columns+0x1c0>)
 800ec0e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ec12:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ec16:	4a69      	ldr	r2, [pc, #420]	; (800edbc <mix_sub_columns+0x1c4>)
 800ec18:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ec1c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ec20:	4967      	ldr	r1, [pc, #412]	; (800edc0 <mix_sub_columns+0x1c8>)
 800ec22:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ec26:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800ec2a:	5dce      	ldrb	r6, [r1, r7]
 800ec2c:	ea80 0009 	eor.w	r0, r0, r9
 800ec30:	4068      	eors	r0, r5
 800ec32:	4070      	eors	r0, r6
 800ec34:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ec36:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ec3a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ec3e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ec42:	ea80 0a0a 	eor.w	sl, r0, sl
 800ec46:	ea89 090a 	eor.w	r9, r9, sl
 800ec4a:	ea86 0609 	eor.w	r6, r6, r9
 800ec4e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ec50:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ec54:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ec58:	5dd6      	ldrb	r6, [r2, r7]
 800ec5a:	ea80 0008 	eor.w	r0, r0, r8
 800ec5e:	ea8e 0000 	eor.w	r0, lr, r0
 800ec62:	4070      	eors	r0, r6
 800ec64:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ec66:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ec6a:	5dd8      	ldrb	r0, [r3, r7]
 800ec6c:	ea86 0608 	eor.w	r6, r6, r8
 800ec70:	4075      	eors	r5, r6
 800ec72:	4045      	eors	r5, r0
 800ec74:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ec76:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ec7a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ec7e:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800ec82:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ec86:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800ec8a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ec8e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800ec92:	5dce      	ldrb	r6, [r1, r7]
 800ec94:	ea80 0009 	eor.w	r0, r0, r9
 800ec98:	4068      	eors	r0, r5
 800ec9a:	4070      	eors	r0, r6
 800ec9c:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ec9e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800eca2:	f813 a008 	ldrb.w	sl, [r3, r8]
 800eca6:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ecaa:	ea80 0a0a 	eor.w	sl, r0, sl
 800ecae:	ea89 090a 	eor.w	r9, r9, sl
 800ecb2:	ea86 0609 	eor.w	r6, r6, r9
 800ecb6:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ecb8:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ecbc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ecc0:	5dd6      	ldrb	r6, [r2, r7]
 800ecc2:	ea80 0008 	eor.w	r0, r0, r8
 800ecc6:	ea8e 0000 	eor.w	r0, lr, r0
 800ecca:	4070      	eors	r0, r6
 800eccc:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ecce:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ecd2:	5dd8      	ldrb	r0, [r3, r7]
 800ecd4:	ea86 0608 	eor.w	r6, r6, r8
 800ecd8:	4075      	eors	r5, r6
 800ecda:	4045      	eors	r5, r0
 800ecdc:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ecde:	f89d c008 	ldrb.w	ip, [sp, #8]
 800ece2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ece6:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800ecea:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ecee:	f89d e002 	ldrb.w	lr, [sp, #2]
 800ecf2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800ecf6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800ecfa:	5dce      	ldrb	r6, [r1, r7]
 800ecfc:	ea80 0009 	eor.w	r0, r0, r9
 800ed00:	4068      	eors	r0, r5
 800ed02:	4070      	eors	r0, r6
 800ed04:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ed06:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ed0a:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ed0e:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ed12:	ea80 0a0a 	eor.w	sl, r0, sl
 800ed16:	ea89 090a 	eor.w	r9, r9, sl
 800ed1a:	ea86 0609 	eor.w	r6, r6, r9
 800ed1e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ed20:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ed24:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ed28:	5dd6      	ldrb	r6, [r2, r7]
 800ed2a:	ea80 0008 	eor.w	r0, r0, r8
 800ed2e:	ea8e 0000 	eor.w	r0, lr, r0
 800ed32:	4070      	eors	r0, r6
 800ed34:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ed36:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ed3a:	5dd8      	ldrb	r0, [r3, r7]
 800ed3c:	ea86 0608 	eor.w	r6, r6, r8
 800ed40:	4075      	eors	r5, r6
 800ed42:	4045      	eors	r5, r0
 800ed44:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ed46:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800ed4a:	5d98      	ldrb	r0, [r3, r6]
 800ed4c:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800ed50:	f812 9008 	ldrb.w	r9, [r2, r8]
 800ed54:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800ed58:	f811 c007 	ldrb.w	ip, [r1, r7]
 800ed5c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800ed60:	f811 e005 	ldrb.w	lr, [r1, r5]
 800ed64:	ea80 0009 	eor.w	r0, r0, r9
 800ed68:	ea8c 0000 	eor.w	r0, ip, r0
 800ed6c:	ea8e 0000 	eor.w	r0, lr, r0
 800ed70:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ed72:	5d88      	ldrb	r0, [r1, r6]
 800ed74:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ed78:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ed7c:	ea80 0a0a 	eor.w	sl, r0, sl
 800ed80:	ea89 090a 	eor.w	r9, r9, sl
 800ed84:	ea8e 0e09 	eor.w	lr, lr, r9
 800ed88:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ed8c:	f811 1008 	ldrb.w	r1, [r1, r8]
 800ed90:	f813 e007 	ldrb.w	lr, [r3, r7]
 800ed94:	5d57      	ldrb	r7, [r2, r5]
 800ed96:	4048      	eors	r0, r1
 800ed98:	ea8e 0000 	eor.w	r0, lr, r0
 800ed9c:	4078      	eors	r0, r7
 800ed9e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800eda0:	5d92      	ldrb	r2, [r2, r6]
 800eda2:	5d5b      	ldrb	r3, [r3, r5]
 800eda4:	4051      	eors	r1, r2
 800eda6:	ea8c 0c01 	eor.w	ip, ip, r1
 800edaa:	ea83 0c0c 	eor.w	ip, r3, ip
 800edae:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800edb2:	b004      	add	sp, #16
 800edb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb8:	08012fec 	.word	0x08012fec
 800edbc:	080130ec 	.word	0x080130ec
 800edc0:	080131ec 	.word	0x080131ec

0800edc4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edc8:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800edca:	f1a1 0310 	sub.w	r3, r1, #16
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	2a10      	cmp	r2, #16
 800edd2:	d807      	bhi.n	800ede4 <lorawan_aes_set_key+0x20>
 800edd4:	460d      	mov	r5, r1
 800edd6:	2301      	movs	r3, #1
 800edd8:	4093      	lsls	r3, r2
 800edda:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800edde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ede2:	b92b      	cbnz	r3, 800edf0 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800edea:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800edec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800edf0:	460a      	mov	r2, r1
 800edf2:	4601      	mov	r1, r0
 800edf4:	4620      	mov	r0, r4
 800edf6:	f7ff fe1b 	bl	800ea30 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800edfa:	f105 031c 	add.w	r3, r5, #28
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800ee06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ee10:	462b      	mov	r3, r5
 800ee12:	f04f 0c01 	mov.w	ip, #1
 800ee16:	e023      	b.n	800ee60 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800ee18:	2d18      	cmp	r5, #24
 800ee1a:	d901      	bls.n	800ee20 <lorawan_aes_set_key+0x5c>
 800ee1c:	2a10      	cmp	r2, #16
 800ee1e:	d047      	beq.n	800eeb0 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800ee20:	1b5a      	subs	r2, r3, r5
 800ee22:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ee24:	f814 9002 	ldrb.w	r9, [r4, r2]
 800ee28:	ea89 0808 	eor.w	r8, r9, r8
 800ee2c:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ee30:	f102 0801 	add.w	r8, r2, #1
 800ee34:	f814 8008 	ldrb.w	r8, [r4, r8]
 800ee38:	f100 0901 	add.w	r9, r0, #1
 800ee3c:	ea88 0707 	eor.w	r7, r8, r7
 800ee40:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ee44:	1c97      	adds	r7, r2, #2
 800ee46:	5de7      	ldrb	r7, [r4, r7]
 800ee48:	f100 0802 	add.w	r8, r0, #2
 800ee4c:	407e      	eors	r6, r7
 800ee4e:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ee52:	3203      	adds	r2, #3
 800ee54:	5ca6      	ldrb	r6, [r4, r2]
 800ee56:	1cc2      	adds	r2, r0, #3
 800ee58:	4071      	eors	r1, r6
 800ee5a:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	4573      	cmp	r3, lr
 800ee62:	d22c      	bcs.n	800eebe <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800ee64:	4618      	mov	r0, r3
 800ee66:	1f1a      	subs	r2, r3, #4
 800ee68:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800ee6c:	1eda      	subs	r2, r3, #3
 800ee6e:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800ee70:	1e9a      	subs	r2, r3, #2
 800ee72:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800ee74:	1e5a      	subs	r2, r3, #1
 800ee76:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800ee78:	fbb3 f2f5 	udiv	r2, r3, r5
 800ee7c:	fb05 3212 	mls	r2, r5, r2, r3
 800ee80:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ee84:	d1c8      	bne.n	800ee18 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800ee86:	4a0f      	ldr	r2, [pc, #60]	; (800eec4 <lorawan_aes_set_key+0x100>)
 800ee88:	f812 9007 	ldrb.w	r9, [r2, r7]
 800ee8c:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800ee90:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800ee92:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800ee94:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800ee98:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800ee9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eea0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800eea4:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800eea8:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800eeac:	46c8      	mov	r8, r9
 800eeae:	e7b7      	b.n	800ee20 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800eeb0:	4a04      	ldr	r2, [pc, #16]	; (800eec4 <lorawan_aes_set_key+0x100>)
 800eeb2:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800eeb6:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800eeb8:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800eeba:	5c51      	ldrb	r1, [r2, r1]
 800eebc:	e7b0      	b.n	800ee20 <lorawan_aes_set_key+0x5c>
    return 0;
 800eebe:	2000      	movs	r0, #0
 800eec0:	e794      	b.n	800edec <lorawan_aes_set_key+0x28>
 800eec2:	bf00      	nop
 800eec4:	080131ec 	.word	0x080131ec

0800eec8 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800eec8:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800eecc:	b31b      	cbz	r3, 800ef16 <lorawan_aes_encrypt+0x4e>
{
 800eece:	b570      	push	{r4, r5, r6, lr}
 800eed0:	b084      	sub	sp, #16
 800eed2:	460e      	mov	r6, r1
 800eed4:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800eed6:	4601      	mov	r1, r0
 800eed8:	4668      	mov	r0, sp
 800eeda:	f7ff fdf5 	bl	800eac8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800eede:	2401      	movs	r4, #1
 800eee0:	e009      	b.n	800eef6 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800eee2:	4668      	mov	r0, sp
 800eee4:	f7ff fe88 	bl	800ebf8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800eee8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800eeec:	4668      	mov	r0, sp
 800eeee:	f7ff fe4a 	bl	800eb86 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800eef2:	3401      	adds	r4, #1
 800eef4:	b2e4      	uxtb	r4, r4
 800eef6:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800eefa:	42a3      	cmp	r3, r4
 800eefc:	d8f1      	bhi.n	800eee2 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800eefe:	4668      	mov	r0, sp
 800ef00:	f7ff fe46 	bl	800eb90 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ef04:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800ef08:	4669      	mov	r1, sp
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f7ff fddc 	bl	800eac8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ef10:	2000      	movs	r0, #0
}
 800ef12:	b004      	add	sp, #16
 800ef14:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800ef16:	20ff      	movs	r0, #255	; 0xff
}
 800ef18:	4770      	bx	lr
	...

0800ef1c <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	2b0a      	cmp	r3, #10
 800ef20:	d817      	bhi.n	800ef52 <GetKeyByID+0x36>
{
 800ef22:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ef24:	4a0c      	ldr	r2, [pc, #48]	; (800ef58 <GetKeyByID+0x3c>)
 800ef26:	6814      	ldr	r4, [r2, #0]
 800ef28:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ef2c:	4422      	add	r2, r4
 800ef2e:	7e12      	ldrb	r2, [r2, #24]
 800ef30:	4282      	cmp	r2, r0
 800ef32:	d006      	beq.n	800ef42 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef34:	3301      	adds	r3, #1
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	2b0a      	cmp	r3, #10
 800ef3a:	d9f3      	bls.n	800ef24 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef3c:	2003      	movs	r0, #3
}
 800ef3e:	bc10      	pop	{r4}
 800ef40:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800ef42:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ef46:	f10c 0c18 	add.w	ip, ip, #24
 800ef4a:	4464      	add	r4, ip
 800ef4c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef4e:	2000      	movs	r0, #0
 800ef50:	e7f5      	b.n	800ef3e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef52:	2003      	movs	r0, #3
}
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	20000c70 	.word	0x20000c70

0800ef5c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef60:	b0cc      	sub	sp, #304	; 0x130
 800ef62:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef64:	b3a9      	cbz	r1, 800efd2 <ComputeCmac+0x76>
 800ef66:	4607      	mov	r7, r0
 800ef68:	4616      	mov	r6, r2
 800ef6a:	461c      	mov	r4, r3
 800ef6c:	4688      	mov	r8, r1
 800ef6e:	b395      	cbz	r5, 800efd6 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ef70:	a802      	add	r0, sp, #8
 800ef72:	f7ff fbd7 	bl	800e724 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef76:	a901      	add	r1, sp, #4
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7ff ffcf 	bl	800ef1c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef7e:	4604      	mov	r4, r0
 800ef80:	b118      	cbz	r0, 800ef8a <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800ef82:	4620      	mov	r0, r4
 800ef84:	b04c      	add	sp, #304	; 0x130
 800ef86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ef8a:	9901      	ldr	r1, [sp, #4]
 800ef8c:	3101      	adds	r1, #1
 800ef8e:	a802      	add	r0, sp, #8
 800ef90:	f7ff fbd7 	bl	800e742 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800ef94:	b127      	cbz	r7, 800efa0 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ef96:	2210      	movs	r2, #16
 800ef98:	4639      	mov	r1, r7
 800ef9a:	a802      	add	r0, sp, #8
 800ef9c:	f7ff fbd8 	bl	800e750 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800efa0:	4632      	mov	r2, r6
 800efa2:	4641      	mov	r1, r8
 800efa4:	a802      	add	r0, sp, #8
 800efa6:	f7ff fbd3 	bl	800e750 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800efaa:	a902      	add	r1, sp, #8
 800efac:	a848      	add	r0, sp, #288	; 0x120
 800efae:	f7ff fc3d 	bl	800e82c <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800efb2:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 800efb6:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800efba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800efbe:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 800efc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efc6:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800efca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800efce:	602b      	str	r3, [r5, #0]
 800efd0:	e7d7      	b.n	800ef82 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800efd2:	2402      	movs	r4, #2
 800efd4:	e7d5      	b.n	800ef82 <ComputeCmac+0x26>
 800efd6:	2402      	movs	r4, #2
 800efd8:	e7d3      	b.n	800ef82 <ComputeCmac+0x26>
	...

0800efdc <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800efdc:	b140      	cbz	r0, 800eff0 <SecureElementInit+0x14>
{
 800efde:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800efe0:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <SecureElementInit+0x18>)
 800efe2:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800efe4:	22d8      	movs	r2, #216	; 0xd8
 800efe6:	4904      	ldr	r1, [pc, #16]	; (800eff8 <SecureElementInit+0x1c>)
 800efe8:	f000 fadb 	bl	800f5a2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800efec:	2000      	movs	r0, #0
}
 800efee:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800eff0:	2002      	movs	r0, #2
}
 800eff2:	4770      	bx	lr
 800eff4:	20000c70 	.word	0x20000c70
 800eff8:	0803e500 	.word	0x0803e500

0800effc <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800effc:	2300      	movs	r3, #0
 800effe:	2b0a      	cmp	r3, #10
 800f000:	d817      	bhi.n	800f032 <SecureElementGetKeyByID+0x36>
{
 800f002:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f004:	4a0c      	ldr	r2, [pc, #48]	; (800f038 <SecureElementGetKeyByID+0x3c>)
 800f006:	6814      	ldr	r4, [r2, #0]
 800f008:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f00c:	4422      	add	r2, r4
 800f00e:	7e12      	ldrb	r2, [r2, #24]
 800f010:	4282      	cmp	r2, r0
 800f012:	d006      	beq.n	800f022 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f014:	3301      	adds	r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	2b0a      	cmp	r3, #10
 800f01a:	d9f3      	bls.n	800f004 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f01c:	2003      	movs	r0, #3
}
 800f01e:	bc10      	pop	{r4}
 800f020:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800f022:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800f026:	f10c 0c18 	add.w	ip, ip, #24
 800f02a:	4464      	add	r4, ip
 800f02c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f02e:	2000      	movs	r0, #0
 800f030:	e7f5      	b.n	800f01e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f032:	2003      	movs	r0, #3
}
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	20000c70 	.word	0x20000c70

0800f03c <PrintKey>:
{
 800f03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f040:	b099      	sub	sp, #100	; 0x64
 800f042:	4605      	mov	r5, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800f044:	a917      	add	r1, sp, #92	; 0x5c
 800f046:	f7ff ffd9 	bl	800effc <SecureElementGetKeyByID>
 800f04a:	4602      	mov	r2, r0
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d043      	beq.n	800f0d8 <PrintKey+0x9c>
}
 800f050:	b019      	add	sp, #100	; 0x64
 800f052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800f056:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f058:	7851      	ldrb	r1, [r2, #1]
 800f05a:	9113      	str	r1, [sp, #76]	; 0x4c
 800f05c:	7890      	ldrb	r0, [r2, #2]
 800f05e:	9014      	str	r0, [sp, #80]	; 0x50
 800f060:	78d4      	ldrb	r4, [r2, #3]
 800f062:	9415      	str	r4, [sp, #84]	; 0x54
 800f064:	7911      	ldrb	r1, [r2, #4]
 800f066:	7950      	ldrb	r0, [r2, #5]
 800f068:	7994      	ldrb	r4, [r2, #6]
 800f06a:	79d5      	ldrb	r5, [r2, #7]
 800f06c:	7a16      	ldrb	r6, [r2, #8]
 800f06e:	7a57      	ldrb	r7, [r2, #9]
 800f070:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f074:	f892 e00b 	ldrb.w	lr, [r2, #11]
 800f078:	f892 800c 	ldrb.w	r8, [r2, #12]
 800f07c:	f892 900d 	ldrb.w	r9, [r2, #13]
 800f080:	f892 a00e 	ldrb.w	sl, [r2, #14]
 800f084:	f892 b00f 	ldrb.w	fp, [r2, #15]
 800f088:	7c12      	ldrb	r2, [r2, #16]
 800f08a:	9210      	str	r2, [sp, #64]	; 0x40
 800f08c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800f090:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f094:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800f098:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f09c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800f0a0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800f0a4:	9709      	str	r7, [sp, #36]	; 0x24
 800f0a6:	9608      	str	r6, [sp, #32]
 800f0a8:	9507      	str	r5, [sp, #28]
 800f0aa:	9406      	str	r4, [sp, #24]
 800f0ac:	9005      	str	r0, [sp, #20]
 800f0ae:	9104      	str	r1, [sp, #16]
 800f0b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f0b2:	9403      	str	r4, [sp, #12]
 800f0b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f0b6:	9002      	str	r0, [sp, #8]
 800f0b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f0ba:	9101      	str	r1, [sp, #4]
 800f0bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f0c0:	4a0c      	ldr	r2, [pc, #48]	; (800f0f4 <PrintKey+0xb8>)
 800f0c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	4b0b      	ldr	r3, [pc, #44]	; (800f0f8 <PrintKey+0xbc>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	2002      	movs	r0, #2
 800f0d2:	f002 fd39 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800f0d6:	e7bb      	b.n	800f050 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f0d8:	2a0a      	cmp	r2, #10
 800f0da:	d8b9      	bhi.n	800f050 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800f0dc:	4613      	mov	r3, r2
 800f0de:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f0e2:	4804      	ldr	r0, [pc, #16]	; (800f0f4 <PrintKey+0xb8>)
 800f0e4:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 800f0e8:	42a9      	cmp	r1, r5
 800f0ea:	d0b4      	beq.n	800f056 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f0ec:	3201      	adds	r2, #1
 800f0ee:	b2d2      	uxtb	r2, r2
 800f0f0:	e7f2      	b.n	800f0d8 <PrintKey+0x9c>
 800f0f2:	bf00      	nop
 800f0f4:	08013484 	.word	0x08013484
 800f0f8:	080132ec 	.word	0x080132ec

0800f0fc <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800f0fc:	2b0b      	cmp	r3, #11
 800f0fe:	d80a      	bhi.n	800f116 <SecureElementComputeAesCmac+0x1a>
{
 800f100:	b500      	push	{lr}
 800f102:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f104:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f108:	f8cd c000 	str.w	ip, [sp]
 800f10c:	f7ff ff26 	bl	800ef5c <ComputeCmac>
}
 800f110:	b003      	add	sp, #12
 800f112:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f116:	2003      	movs	r0, #3
}
 800f118:	4770      	bx	lr

0800f11a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800f11a:	b190      	cbz	r0, 800f142 <SecureElementVerifyAesCmac+0x28>
{
 800f11c:	b510      	push	{r4, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	468c      	mov	ip, r1
 800f122:	4614      	mov	r4, r2
 800f124:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f126:	2000      	movs	r0, #0
 800f128:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f12a:	aa03      	add	r2, sp, #12
 800f12c:	9200      	str	r2, [sp, #0]
 800f12e:	4662      	mov	r2, ip
 800f130:	f7ff ff14 	bl	800ef5c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f134:	b918      	cbnz	r0, 800f13e <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800f136:	9b03      	ldr	r3, [sp, #12]
 800f138:	42a3      	cmp	r3, r4
 800f13a:	d000      	beq.n	800f13e <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f13c:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800f13e:	b004      	add	sp, #16
 800f140:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f142:	2002      	movs	r0, #2
}
 800f144:	4770      	bx	lr

0800f146 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f14a:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f14c:	b348      	cbz	r0, 800f1a2 <SecureElementAesEncrypt+0x5c>
 800f14e:	460d      	mov	r5, r1
 800f150:	4614      	mov	r4, r2
 800f152:	461e      	mov	r6, r3
 800f154:	4607      	mov	r7, r0
 800f156:	b33b      	cbz	r3, 800f1a8 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f158:	f011 0f0f 	tst.w	r1, #15
 800f15c:	d127      	bne.n	800f1ae <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f15e:	22f0      	movs	r2, #240	; 0xf0
 800f160:	2100      	movs	r1, #0
 800f162:	a801      	add	r0, sp, #4
 800f164:	f000 fa35 	bl	800f5d2 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f168:	4669      	mov	r1, sp
 800f16a:	4620      	mov	r0, r4
 800f16c:	f7ff fed6 	bl	800ef1c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f170:	4680      	mov	r8, r0
 800f172:	b118      	cbz	r0, 800f17c <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800f174:	4640      	mov	r0, r8
 800f176:	b03e      	add	sp, #248	; 0xf8
 800f178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f17c:	aa01      	add	r2, sp, #4
 800f17e:	2110      	movs	r1, #16
 800f180:	9800      	ldr	r0, [sp, #0]
 800f182:	3001      	adds	r0, #1
 800f184:	f7ff fe1e 	bl	800edc4 <lorawan_aes_set_key>
        uint8_t block = 0;
 800f188:	4644      	mov	r4, r8
        while( size != 0 )
 800f18a:	e007      	b.n	800f19c <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f18c:	aa01      	add	r2, sp, #4
 800f18e:	1931      	adds	r1, r6, r4
 800f190:	1938      	adds	r0, r7, r4
 800f192:	f7ff fe99 	bl	800eec8 <lorawan_aes_encrypt>
            block = block + 16;
 800f196:	3410      	adds	r4, #16
 800f198:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800f19a:	3d10      	subs	r5, #16
        while( size != 0 )
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	d1f5      	bne.n	800f18c <SecureElementAesEncrypt+0x46>
 800f1a0:	e7e8      	b.n	800f174 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800f1a2:	f04f 0802 	mov.w	r8, #2
 800f1a6:	e7e5      	b.n	800f174 <SecureElementAesEncrypt+0x2e>
 800f1a8:	f04f 0802 	mov.w	r8, #2
 800f1ac:	e7e2      	b.n	800f174 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f1ae:	f04f 0805 	mov.w	r8, #5
 800f1b2:	e7df      	b.n	800f174 <SecureElementAesEncrypt+0x2e>

0800f1b4 <SecureElementSetKey>:
{
 800f1b4:	b530      	push	{r4, r5, lr}
 800f1b6:	b085      	sub	sp, #20
    if( key == NULL )
 800f1b8:	2900      	cmp	r1, #0
 800f1ba:	d038      	beq.n	800f22e <SecureElementSetKey+0x7a>
 800f1bc:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1be:	2300      	movs	r3, #0
 800f1c0:	2b0a      	cmp	r3, #10
 800f1c2:	d830      	bhi.n	800f226 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f1c4:	4a1b      	ldr	r2, [pc, #108]	; (800f234 <SecureElementSetKey+0x80>)
 800f1c6:	6811      	ldr	r1, [r2, #0]
 800f1c8:	461c      	mov	r4, r3
 800f1ca:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800f1ce:	440a      	add	r2, r1
 800f1d0:	7e12      	ldrb	r2, [r2, #24]
 800f1d2:	4282      	cmp	r2, r0
 800f1d4:	d002      	beq.n	800f1dc <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	e7f1      	b.n	800f1c0 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800f1dc:	280d      	cmp	r0, #13
 800f1de:	d00a      	beq.n	800f1f6 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f1e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800f1e4:	3318      	adds	r3, #24
 800f1e6:	440b      	add	r3, r1
 800f1e8:	2210      	movs	r2, #16
 800f1ea:	4661      	mov	r1, ip
 800f1ec:	1c58      	adds	r0, r3, #1
 800f1ee:	f000 f9d8 	bl	800f5a2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f1f2:	2500      	movs	r5, #0
 800f1f4:	e018      	b.n	800f228 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	9301      	str	r3, [sp, #4]
 800f1fc:	9302      	str	r3, [sp, #8]
 800f1fe:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f200:	466b      	mov	r3, sp
 800f202:	220c      	movs	r2, #12
 800f204:	2110      	movs	r1, #16
 800f206:	4660      	mov	r0, ip
 800f208:	f7ff ff9d 	bl	800f146 <SecureElementAesEncrypt>
 800f20c:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f20e:	4b09      	ldr	r3, [pc, #36]	; (800f234 <SecureElementSetKey+0x80>)
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800f216:	3418      	adds	r4, #24
 800f218:	4420      	add	r0, r4
 800f21a:	2210      	movs	r2, #16
 800f21c:	4669      	mov	r1, sp
 800f21e:	3001      	adds	r0, #1
 800f220:	f000 f9bf 	bl	800f5a2 <memcpy1>
                return retval;
 800f224:	e000      	b.n	800f228 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f226:	2503      	movs	r5, #3
}
 800f228:	4628      	mov	r0, r5
 800f22a:	b005      	add	sp, #20
 800f22c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f22e:	2502      	movs	r5, #2
 800f230:	e7fa      	b.n	800f228 <SecureElementSetKey+0x74>
 800f232:	bf00      	nop
 800f234:	20000c70 	.word	0x20000c70

0800f238 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800f238:	b1d0      	cbz	r0, 800f270 <SecureElementDeriveAndStoreKey+0x38>
{
 800f23a:	b510      	push	{r4, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	4614      	mov	r4, r2
 800f240:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f242:	2a0c      	cmp	r2, #12
 800f244:	d101      	bne.n	800f24a <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f246:	290b      	cmp	r1, #11
 800f248:	d114      	bne.n	800f274 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f24a:	2300      	movs	r3, #0
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	9301      	str	r3, [sp, #4]
 800f250:	9302      	str	r3, [sp, #8]
 800f252:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f254:	466b      	mov	r3, sp
 800f256:	460a      	mov	r2, r1
 800f258:	2110      	movs	r1, #16
 800f25a:	4660      	mov	r0, ip
 800f25c:	f7ff ff73 	bl	800f146 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f260:	b108      	cbz	r0, 800f266 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f262:	b004      	add	sp, #16
 800f264:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800f266:	4669      	mov	r1, sp
 800f268:	4620      	mov	r0, r4
 800f26a:	f7ff ffa3 	bl	800f1b4 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f26e:	e7f8      	b.n	800f262 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800f270:	2002      	movs	r0, #2
}
 800f272:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f274:	2003      	movs	r0, #3
 800f276:	e7f4      	b.n	800f262 <SecureElementDeriveAndStoreKey+0x2a>

0800f278 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f27e:	9c07      	ldr	r4, [sp, #28]
 800f280:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f282:	b35b      	cbz	r3, 800f2dc <SecureElementProcessJoinAccept+0x64>
 800f284:	461f      	mov	r7, r3
 800f286:	b35c      	cbz	r4, 800f2e0 <SecureElementProcessJoinAccept+0x68>
 800f288:	b366      	cbz	r6, 800f2e4 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f28a:	2d21      	cmp	r5, #33	; 0x21
 800f28c:	d82c      	bhi.n	800f2e8 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f28e:	462a      	mov	r2, r5
 800f290:	4619      	mov	r1, r3
 800f292:	4620      	mov	r0, r4
 800f294:	f000 f985 	bl	800f5a2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f298:	1c63      	adds	r3, r4, #1
 800f29a:	2201      	movs	r2, #1
 800f29c:	1e69      	subs	r1, r5, #1
 800f29e:	18b8      	adds	r0, r7, r2
 800f2a0:	f7ff ff51 	bl	800f146 <SecureElementAesEncrypt>
 800f2a4:	bb10      	cbnz	r0, 800f2ec <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f2a6:	7ae3      	ldrb	r3, [r4, #11]
 800f2a8:	09db      	lsrs	r3, r3, #7
 800f2aa:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f2ac:	1961      	adds	r1, r4, r5
 800f2ae:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800f2b2:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800f2b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f2ba:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800f2be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f2c2:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800f2c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f2ca:	b98b      	cbnz	r3, 800f2f0 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	1f29      	subs	r1, r5, #4
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f7ff ff22 	bl	800f11a <SecureElementVerifyAesCmac>
 800f2d6:	b140      	cbz	r0, 800f2ea <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f2d8:	2001      	movs	r0, #1
 800f2da:	e006      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800f2dc:	2002      	movs	r0, #2
 800f2de:	e004      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>
 800f2e0:	2002      	movs	r0, #2
 800f2e2:	e002      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>
 800f2e4:	2002      	movs	r0, #2
 800f2e6:	e000      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f2e8:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800f2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f2ec:	2007      	movs	r0, #7
 800f2ee:	e7fc      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f2f0:	2004      	movs	r0, #4
 800f2f2:	e7fa      	b.n	800f2ea <SecureElementProcessJoinAccept+0x72>

0800f2f4 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 800f2f4:	b138      	cbz	r0, 800f306 <SecureElementRandomNumber+0x12>
{
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800f2fa:	4b04      	ldr	r3, [pc, #16]	; (800f30c <SecureElementRandomNumber+0x18>)
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	4798      	blx	r3
 800f300:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f302:	2000      	movs	r0, #0
}
 800f304:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f306:	2002      	movs	r0, #2
}
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	08013578 	.word	0x08013578

0800f310 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f310:	b140      	cbz	r0, 800f324 <SecureElementSetDevEui+0x14>
{
 800f312:	b508      	push	{r3, lr}
 800f314:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f316:	2208      	movs	r2, #8
 800f318:	4b03      	ldr	r3, [pc, #12]	; (800f328 <SecureElementSetDevEui+0x18>)
 800f31a:	6818      	ldr	r0, [r3, #0]
 800f31c:	f000 f941 	bl	800f5a2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f320:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f322:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f324:	2002      	movs	r0, #2
}
 800f326:	4770      	bx	lr
 800f328:	20000c70 	.word	0x20000c70

0800f32c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800f32c:	b138      	cbz	r0, 800f33e <SecureElementGetDevEui+0x12>
{
 800f32e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f330:	2208      	movs	r2, #8
 800f332:	4904      	ldr	r1, [pc, #16]	; (800f344 <SecureElementGetDevEui+0x18>)
 800f334:	6809      	ldr	r1, [r1, #0]
 800f336:	f000 f934 	bl	800f5a2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f33a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f33c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f33e:	2002      	movs	r0, #2
}
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	20000c70 	.word	0x20000c70

0800f348 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f348:	b148      	cbz	r0, 800f35e <SecureElementSetJoinEui+0x16>
{
 800f34a:	b508      	push	{r3, lr}
 800f34c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f34e:	4b05      	ldr	r3, [pc, #20]	; (800f364 <SecureElementSetJoinEui+0x1c>)
 800f350:	6818      	ldr	r0, [r3, #0]
 800f352:	2208      	movs	r2, #8
 800f354:	4410      	add	r0, r2
 800f356:	f000 f924 	bl	800f5a2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f35a:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f35c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f35e:	2002      	movs	r0, #2
}
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	20000c70 	.word	0x20000c70

0800f368 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800f368:	b140      	cbz	r0, 800f37c <SecureElementGetJoinEui+0x14>
{
 800f36a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f36c:	4a04      	ldr	r2, [pc, #16]	; (800f380 <SecureElementGetJoinEui+0x18>)
 800f36e:	6811      	ldr	r1, [r2, #0]
 800f370:	2208      	movs	r2, #8
 800f372:	4411      	add	r1, r2
 800f374:	f000 f915 	bl	800f5a2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f378:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f37a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800f37c:	2002      	movs	r0, #2
}
 800f37e:	4770      	bx	lr
 800f380:	20000c70 	.word	0x20000c70

0800f384 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f384:	2802      	cmp	r0, #2
 800f386:	d004      	beq.n	800f392 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f388:	4b04      	ldr	r3, [pc, #16]	; (800f39c <SecureElementSetDevAddr+0x18>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f38e:	2000      	movs	r0, #0
 800f390:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f392:	4b02      	ldr	r3, [pc, #8]	; (800f39c <SecureElementSetDevAddr+0x18>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6119      	str	r1, [r3, #16]
 800f398:	e7f9      	b.n	800f38e <SecureElementSetDevAddr+0xa>
 800f39a:	bf00      	nop
 800f39c:	20000c70 	.word	0x20000c70

0800f3a0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800f3a0:	b169      	cbz	r1, 800f3be <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f3a2:	2802      	cmp	r0, #2
 800f3a4:	d005      	beq.n	800f3b2 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f3a6:	4a07      	ldr	r2, [pc, #28]	; (800f3c4 <SecureElementGetDevAddr+0x24>)
 800f3a8:	6812      	ldr	r2, [r2, #0]
 800f3aa:	6952      	ldr	r2, [r2, #20]
 800f3ac:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f3b2:	4a04      	ldr	r2, [pc, #16]	; (800f3c4 <SecureElementGetDevAddr+0x24>)
 800f3b4:	6812      	ldr	r2, [r2, #0]
 800f3b6:	6912      	ldr	r2, [r2, #16]
 800f3b8:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f3ba:	2000      	movs	r0, #0
 800f3bc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800f3be:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	20000c70 	.word	0x20000c70

0800f3c8 <SecureElementInitMcuID>:
{
 800f3c8:	b530      	push	{r4, r5, lr}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800f3d4:	a802      	add	r0, sp, #8
 800f3d6:	f7ff ffa9 	bl	800f32c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f3da:	a901      	add	r1, sp, #4
 800f3dc:	2001      	movs	r0, #1
 800f3de:	f7ff ffdf 	bl	800f3a0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800f3e2:	b195      	cbz	r5, 800f40a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	2b07      	cmp	r3, #7
 800f3e8:	d808      	bhi.n	800f3fc <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800f3ea:	f103 0210 	add.w	r2, r3, #16
 800f3ee:	446a      	add	r2, sp
 800f3f0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800f3f4:	b9aa      	cbnz	r2, 800f422 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	e7f4      	b.n	800f3e6 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800f3fc:	2300      	movs	r3, #0
        if( id_init == false )
 800f3fe:	b923      	cbnz	r3, 800f40a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800f400:	a802      	add	r0, sp, #8
 800f402:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800f404:	a802      	add	r0, sp, #8
 800f406:	f7ff ff83 	bl	800f310 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f40a:	b13c      	cbz	r4, 800f41c <SecureElementInitMcuID+0x54>
 800f40c:	9b01      	ldr	r3, [sp, #4]
 800f40e:	b92b      	cbnz	r3, 800f41c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800f410:	a801      	add	r0, sp, #4
 800f412:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f414:	9901      	ldr	r1, [sp, #4]
 800f416:	2001      	movs	r0, #1
 800f418:	f7ff ffb4 	bl	800f384 <SecureElementSetDevAddr>
}
 800f41c:	2000      	movs	r0, #0
 800f41e:	b005      	add	sp, #20
 800f420:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800f422:	2301      	movs	r3, #1
 800f424:	e7eb      	b.n	800f3fe <SecureElementInitMcuID+0x36>
	...

0800f428 <PrintIds>:
{
 800f428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f42a:	b08f      	sub	sp, #60	; 0x3c
 800f42c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800f42e:	2400      	movs	r4, #0
 800f430:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 800f432:	a80a      	add	r0, sp, #40	; 0x28
 800f434:	f7ff ff7a 	bl	800f32c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800f438:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f43c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800f440:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 800f444:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800f448:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800f44c:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 800f450:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 800f454:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 800f458:	f8cd e01c 	str.w	lr, [sp, #28]
 800f45c:	f8cd c018 	str.w	ip, [sp, #24]
 800f460:	9705      	str	r7, [sp, #20]
 800f462:	9604      	str	r6, [sp, #16]
 800f464:	9003      	str	r0, [sp, #12]
 800f466:	9102      	str	r1, [sp, #8]
 800f468:	9201      	str	r2, [sp, #4]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4b20      	ldr	r3, [pc, #128]	; (800f4f0 <PrintIds+0xc8>)
 800f46e:	4622      	mov	r2, r4
 800f470:	4621      	mov	r1, r4
 800f472:	2002      	movs	r0, #2
 800f474:	f002 fb68 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800f478:	a80c      	add	r0, sp, #48	; 0x30
 800f47a:	f7ff ff75 	bl	800f368 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800f47e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f482:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800f486:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 800f48a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f48e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800f492:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 800f496:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 800f49a:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 800f49e:	f8cd e01c 	str.w	lr, [sp, #28]
 800f4a2:	f8cd c018 	str.w	ip, [sp, #24]
 800f4a6:	9705      	str	r7, [sp, #20]
 800f4a8:	9604      	str	r6, [sp, #16]
 800f4aa:	9003      	str	r0, [sp, #12]
 800f4ac:	9102      	str	r1, [sp, #8]
 800f4ae:	9201      	str	r2, [sp, #4]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <PrintIds+0xcc>)
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	2002      	movs	r0, #2
 800f4ba:	f002 fb45 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800f4be:	a909      	add	r1, sp, #36	; 0x24
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f7ff ff6d 	bl	800f3a0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800f4c6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f4ca:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800f4ce:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 800f4d2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800f4d6:	9003      	str	r0, [sp, #12]
 800f4d8:	9102      	str	r1, [sp, #8]
 800f4da:	9201      	str	r2, [sp, #4]
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	4b06      	ldr	r3, [pc, #24]	; (800f4f8 <PrintIds+0xd0>)
 800f4e0:	4622      	mov	r2, r4
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	2002      	movs	r0, #2
 800f4e6:	f002 fb2f 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 800f4ea:	b00f      	add	sp, #60	; 0x3c
 800f4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	08013348 	.word	0x08013348
 800f4f4:	08013388 	.word	0x08013388
 800f4f8:	080133c8 	.word	0x080133c8

0800f4fc <SecureElementPrintKeys>:
{
 800f4fc:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800f4fe:	2000      	movs	r0, #0
 800f500:	f7ff fd9c 	bl	800f03c <PrintKey>
    PrintKey( NWK_KEY );
 800f504:	2001      	movs	r0, #1
 800f506:	f7ff fd99 	bl	800f03c <PrintKey>
    PrintKey( APP_S_KEY );
 800f50a:	2009      	movs	r0, #9
 800f50c:	f7ff fd96 	bl	800f03c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f510:	2008      	movs	r0, #8
 800f512:	f7ff fd93 	bl	800f03c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800f516:	2000      	movs	r0, #0
 800f518:	f7ff ff86 	bl	800f428 <PrintIds>
}
 800f51c:	2000      	movs	r0, #0
 800f51e:	bd08      	pop	{r3, pc}

0800f520 <SecureElementPrintSessionKeys>:
{
 800f520:	b510      	push	{r4, lr}
 800f522:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800f524:	200b      	movs	r0, #11
 800f526:	f7ff fd89 	bl	800f03c <PrintKey>
    PrintKey( MC_KE_KEY );
 800f52a:	200c      	movs	r0, #12
 800f52c:	f7ff fd86 	bl	800f03c <PrintKey>
    PrintKey( APP_S_KEY );
 800f530:	2009      	movs	r0, #9
 800f532:	f7ff fd83 	bl	800f03c <PrintKey>
    PrintKey( NWK_S_KEY );
 800f536:	2008      	movs	r0, #8
 800f538:	f7ff fd80 	bl	800f03c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800f53c:	200a      	movs	r0, #10
 800f53e:	f7ff fd7d 	bl	800f03c <PrintKey>
    PrintIds( mode );
 800f542:	4620      	mov	r0, r4
 800f544:	f7ff ff70 	bl	800f428 <PrintIds>
}
 800f548:	2000      	movs	r0, #0
 800f54a:	bd10      	pop	{r4, pc}

0800f54c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800f54c:	4b09      	ldr	r3, [pc, #36]	; (800f574 <rand1+0x28>)
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	4909      	ldr	r1, [pc, #36]	; (800f578 <rand1+0x2c>)
 800f552:	f243 0039 	movw	r0, #12345	; 0x3039
 800f556:	fb01 0002 	mla	r0, r1, r2, r0
 800f55a:	6018      	str	r0, [r3, #0]
 800f55c:	2303      	movs	r3, #3
 800f55e:	fba3 2300 	umull	r2, r3, r3, r0
 800f562:	1ac2      	subs	r2, r0, r3
 800f564:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f568:	0f9b      	lsrs	r3, r3, #30
 800f56a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800f56e:	1ac0      	subs	r0, r0, r3
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	20000108 	.word	0x20000108
 800f578:	41c64e6d 	.word	0x41c64e6d

0800f57c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800f57c:	4b01      	ldr	r3, [pc, #4]	; (800f584 <srand1+0x8>)
 800f57e:	6018      	str	r0, [r3, #0]
}
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	20000108 	.word	0x20000108

0800f588 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4605      	mov	r5, r0
 800f58c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800f58e:	f7ff ffdd 	bl	800f54c <rand1>
 800f592:	1b61      	subs	r1, r4, r5
 800f594:	3101      	adds	r1, #1
 800f596:	fb90 f3f1 	sdiv	r3, r0, r1
 800f59a:	fb01 0013 	mls	r0, r1, r3, r0
}
 800f59e:	4428      	add	r0, r5
 800f5a0:	bd38      	pop	{r3, r4, r5, pc}

0800f5a2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f5a2:	e004      	b.n	800f5ae <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f5a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5a8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	1e53      	subs	r3, r2, #1
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	2a00      	cmp	r2, #0
 800f5b4:	d1f6      	bne.n	800f5a4 <memcpy1+0x2>
    }
}
 800f5b6:	4770      	bx	lr

0800f5b8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800f5b8:	1e53      	subs	r3, r2, #1
 800f5ba:	4418      	add	r0, r3
    while( size-- )
 800f5bc:	e004      	b.n	800f5c8 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800f5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5c2:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	1e53      	subs	r3, r2, #1
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	2a00      	cmp	r2, #0
 800f5ce:	d1f6      	bne.n	800f5be <memcpyr+0x6>
    }
}
 800f5d0:	4770      	bx	lr

0800f5d2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800f5d2:	e002      	b.n	800f5da <memset1+0x8>
    {
        *dst++ = value;
 800f5d4:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800f5d8:	461a      	mov	r2, r3
 800f5da:	1e53      	subs	r3, r2, #1
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	2a00      	cmp	r2, #0
 800f5e0:	d1f8      	bne.n	800f5d4 <memset1+0x2>
    }
}
 800f5e2:	4770      	bx	lr

0800f5e4 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800f5e4:	b1f0      	cbz	r0, 800f624 <Crc32+0x40>
{
 800f5e6:	b510      	push	{r4, lr}
 800f5e8:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800f5ea:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800f5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f2:	e00e      	b.n	800f612 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800f5f4:	f340 0c00 	sbfx	ip, r0, #0, #1
 800f5f8:	4a0b      	ldr	r2, [pc, #44]	; (800f628 <Crc32+0x44>)
 800f5fa:	ea0c 0202 	and.w	r2, ip, r2
 800f5fe:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800f602:	3301      	adds	r3, #1
 800f604:	b29b      	uxth	r3, r3
 800f606:	2b07      	cmp	r3, #7
 800f608:	d9f4      	bls.n	800f5f4 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800f60a:	f10e 0e01 	add.w	lr, lr, #1
 800f60e:	fa1f fe8e 	uxth.w	lr, lr
 800f612:	458e      	cmp	lr, r1
 800f614:	d204      	bcs.n	800f620 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800f616:	f814 300e 	ldrb.w	r3, [r4, lr]
 800f61a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800f61c:	2300      	movs	r3, #0
 800f61e:	e7f2      	b.n	800f606 <Crc32+0x22>
        }
    }

    return ~crc;
 800f620:	43c0      	mvns	r0, r0
}
 800f622:	bd10      	pop	{r4, pc}
        return 0;
 800f624:	2000      	movs	r0, #0
}
 800f626:	4770      	bx	lr
 800f628:	edb88320 	.word	0xedb88320

0800f62c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f62c:	2001      	movs	r0, #1
 800f62e:	4770      	bx	lr

0800f630 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f630:	280a      	cmp	r0, #10
 800f632:	d807      	bhi.n	800f644 <RadioGetLoRaBandwidthInHz+0x14>
 800f634:	e8df f000 	tbb	[pc, r0]
 800f638:	17110b20 	.word	0x17110b20
 800f63c:	061e1c1a 	.word	0x061e1c1a
 800f640:	0e08      	.short	0x0e08
 800f642:	14          	.byte	0x14
 800f643:	00          	.byte	0x00
 800f644:	2000      	movs	r0, #0
 800f646:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f648:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f64c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f64e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f652:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f654:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f658:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f65a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f65e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f660:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f664:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f666:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f66a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f66c:	4804      	ldr	r0, [pc, #16]	; (800f680 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f66e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f670:	4804      	ldr	r0, [pc, #16]	; (800f684 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f672:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f674:	4804      	ldr	r0, [pc, #16]	; (800f688 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f676:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f678:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	0001e848 	.word	0x0001e848
 800f684:	0003d090 	.word	0x0003d090
 800f688:	0007a120 	.word	0x0007a120

0800f68c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f68c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800f690:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f692:	b953      	cbnz	r3, 800f6aa <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f694:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800f696:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f698:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f69a:	b141      	cbz	r1, 800f6ae <RadioGetGfskTimeOnAirNumerator+0x22>
 800f69c:	2302      	movs	r3, #2
 800f69e:	f89d 0000 	ldrb.w	r0, [sp]
 800f6a2:	4418      	add	r0, r3
}
 800f6a4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f6a8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	e7f3      	b.n	800f696 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e7f5      	b.n	800f69e <RadioGetGfskTimeOnAirNumerator+0x12>

0800f6b2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f6b2:	b570      	push	{r4, r5, r6, lr}
 800f6b4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f6b8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f6bc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f6be:	f1a1 0c05 	sub.w	ip, r1, #5
 800f6c2:	f1bc 0f01 	cmp.w	ip, #1
 800f6c6:	d932      	bls.n	800f72e <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f6c8:	b918      	cbnz	r0, 800f6d2 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f6ca:	f1a1 060b 	sub.w	r6, r1, #11
 800f6ce:	2e01      	cmp	r6, #1
 800f6d0:	d935      	bls.n	800f73e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800f6d2:	2801      	cmp	r0, #1
 800f6d4:	d02f      	beq.n	800f736 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f6d6:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f6d8:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f6dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f6e0:	b38d      	cbz	r5, 800f746 <RadioGetLoRaTimeOnAirNumerator+0x94>
 800f6e2:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f6e6:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f6e8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f6ea:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f6ee:	b36c      	cbz	r4, 800f74c <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800f6f0:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f6f4:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f6f6:	2906      	cmp	r1, #6
 800f6f8:	d904      	bls.n	800f704 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f6fa:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f6fe:	b10e      	cbz	r6, 800f704 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f700:	1e88      	subs	r0, r1, #2
 800f702:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f704:	f1bc 0f00 	cmp.w	ip, #0
 800f708:	db23      	blt.n	800f752 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f70a:	4484      	add	ip, r0
 800f70c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f710:	fb9c fcf0 	sdiv	ip, ip, r0
 800f714:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f718:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f71c:	2906      	cmp	r1, #6
 800f71e:	d801      	bhi.n	800f724 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800f720:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f724:	0080      	lsls	r0, r0, #2
 800f726:	3001      	adds	r0, #1
 800f728:	3902      	subs	r1, #2
}
 800f72a:	4088      	lsls	r0, r1
 800f72c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f72e:	2b0b      	cmp	r3, #11
 800f730:	d8ca      	bhi.n	800f6c8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f732:	230c      	movs	r3, #12
 800f734:	e7c8      	b.n	800f6c8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f736:	290c      	cmp	r1, #12
 800f738:	d003      	beq.n	800f742 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f73a:	2600      	movs	r6, #0
 800f73c:	e7cc      	b.n	800f6d8 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f73e:	2601      	movs	r6, #1
 800f740:	e7ca      	b.n	800f6d8 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f742:	2601      	movs	r6, #1
 800f744:	e7c8      	b.n	800f6d8 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f746:	f04f 0c00 	mov.w	ip, #0
 800f74a:	e7cc      	b.n	800f6e6 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f74c:	f04f 0c14 	mov.w	ip, #20
 800f750:	e7d0      	b.n	800f6f4 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f752:	f04f 0c00 	mov.w	ip, #0
 800f756:	e7d8      	b.n	800f70a <RadioGetLoRaTimeOnAirNumerator+0x58>

0800f758 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75a:	b085      	sub	sp, #20
 800f75c:	460e      	mov	r6, r1
 800f75e:	4615      	mov	r5, r2
 800f760:	4619      	mov	r1, r3
 800f762:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f766:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f76a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f76e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f772:	b148      	cbz	r0, 800f788 <RadioTimeOnAir+0x30>
 800f774:	2801      	cmp	r0, #1
 800f776:	d012      	beq.n	800f79e <RadioTimeOnAir+0x46>
 800f778:	2501      	movs	r5, #1
 800f77a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800f77c:	442c      	add	r4, r5
 800f77e:	1e60      	subs	r0, r4, #1
}
 800f780:	fbb0 f0f5 	udiv	r0, r0, r5
 800f784:	b005      	add	sp, #20
 800f786:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f788:	f8cd c004 	str.w	ip, [sp, #4]
 800f78c:	9700      	str	r7, [sp, #0]
 800f78e:	4628      	mov	r0, r5
 800f790:	f7ff ff7c 	bl	800f68c <RadioGetGfskTimeOnAirNumerator>
 800f794:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f798:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f79c:	e7ee      	b.n	800f77c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f79e:	f8cd c008 	str.w	ip, [sp, #8]
 800f7a2:	9701      	str	r7, [sp, #4]
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	460a      	mov	r2, r1
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f7ff ff80 	bl	800f6b2 <RadioGetLoRaTimeOnAirNumerator>
 800f7b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f7b6:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f7ba:	4b03      	ldr	r3, [pc, #12]	; (800f7c8 <RadioTimeOnAir+0x70>)
 800f7bc:	5d98      	ldrb	r0, [r3, r6]
 800f7be:	f7ff ff37 	bl	800f630 <RadioGetLoRaBandwidthInHz>
 800f7c2:	4605      	mov	r5, r0
        break;
 800f7c4:	e7da      	b.n	800f77c <RadioTimeOnAir+0x24>
 800f7c6:	bf00      	nop
 800f7c8:	08013574 	.word	0x08013574

0800f7cc <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f7cc:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f7ce:	4b05      	ldr	r3, [pc, #20]	; (800f7e4 <RadioOnTxTimeoutProcess+0x18>)
 800f7d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f7d4:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f7d6:	4b04      	ldr	r3, [pc, #16]	; (800f7e8 <RadioOnTxTimeoutProcess+0x1c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	b113      	cbz	r3, 800f7e2 <RadioOnTxTimeoutProcess+0x16>
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	b103      	cbz	r3, 800f7e2 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f7e0:	4798      	blx	r3
    }
}
 800f7e2:	bd08      	pop	{r3, pc}
 800f7e4:	48000400 	.word	0x48000400
 800f7e8:	20000d74 	.word	0x20000d74

0800f7ec <RadioOnTxTimeoutIrq>:
{
 800f7ec:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f7ee:	f7ff ffed 	bl	800f7cc <RadioOnTxTimeoutProcess>
}
 800f7f2:	bd08      	pop	{r3, pc}

0800f7f4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f7f4:	b508      	push	{r3, lr}
 800f7f6:	4b05      	ldr	r3, [pc, #20]	; (800f80c <RadioOnRxTimeoutProcess+0x18>)
 800f7f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7fc:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f7fe:	4b04      	ldr	r3, [pc, #16]	; (800f810 <RadioOnRxTimeoutProcess+0x1c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	b113      	cbz	r3, 800f80a <RadioOnRxTimeoutProcess+0x16>
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	b103      	cbz	r3, 800f80a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800f808:	4798      	blx	r3
    }
}
 800f80a:	bd08      	pop	{r3, pc}
 800f80c:	48000400 	.word	0x48000400
 800f810:	20000d74 	.word	0x20000d74

0800f814 <RadioOnRxTimeoutIrq>:
{
 800f814:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f816:	f7ff ffed 	bl	800f7f4 <RadioOnRxTimeoutProcess>
}
 800f81a:	bd08      	pop	{r3, pc}

0800f81c <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800f81c:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 800f81e:	2300      	movs	r3, #0
 800f820:	e005      	b.n	800f82e <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800f822:	5ccc      	ldrb	r4, [r1, r3]
 800f824:	43e4      	mvns	r4, r4
 800f826:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800f828:	2400      	movs	r4, #0
 800f82a:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 800f82c:	3301      	adds	r3, #1
 800f82e:	429a      	cmp	r2, r3
 800f830:	dcf7      	bgt.n	800f822 <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800f832:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800f834:	461c      	mov	r4, r3
 800f836:	e013      	b.n	800f860 <payload_integration+0x44>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800f838:	f103 0c07 	add.w	ip, r3, #7
 800f83c:	e024      	b.n	800f888 <payload_integration+0x6c>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800f83e:	b2ed      	uxtb	r5, r5
 800f840:	5d4d      	ldrb	r5, [r1, r5]
 800f842:	fa45 fe0e 	asr.w	lr, r5, lr
 800f846:	f00e 0e01 	and.w	lr, lr, #1
        /* integration */
        prevInt ^= currBit;
 800f84a:	ea84 040e 	eor.w	r4, r4, lr
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800f84e:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800f852:	fa04 fc0c 	lsl.w	ip, r4, ip
 800f856:	5d46      	ldrb	r6, [r0, r5]
 800f858:	ea46 0c0c 	orr.w	ip, r6, ip
 800f85c:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 800f860:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f864:	da26      	bge.n	800f8b4 <payload_integration+0x98>
        index_bit = 7 - ( i % 8 );
 800f866:	425d      	negs	r5, r3
 800f868:	f003 0c07 	and.w	ip, r3, #7
 800f86c:	f005 0507 	and.w	r5, r5, #7
 800f870:	bf58      	it	pl
 800f872:	f1c5 0c00 	rsbpl	ip, r5, #0
 800f876:	fa5f fe8c 	uxtb.w	lr, ip
 800f87a:	f1ce 0e07 	rsb	lr, lr, #7
 800f87e:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800f882:	469c      	mov	ip, r3
 800f884:	2b00      	cmp	r3, #0
 800f886:	dbd7      	blt.n	800f838 <payload_integration+0x1c>
 800f888:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800f88c:	3301      	adds	r3, #1
 800f88e:	425e      	negs	r6, r3
 800f890:	f003 0c07 	and.w	ip, r3, #7
 800f894:	f006 0607 	and.w	r6, r6, #7
 800f898:	bf58      	it	pl
 800f89a:	f1c6 0c00 	rsbpl	ip, r6, #0
 800f89e:	fa5f fc8c 	uxtb.w	ip, ip
 800f8a2:	f1cc 0c07 	rsb	ip, ip, #7
 800f8a6:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800f8aa:	461e      	mov	r6, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	dac6      	bge.n	800f83e <payload_integration+0x22>
 800f8b0:	1dde      	adds	r6, r3, #7
 800f8b2:	e7c4      	b.n	800f83e <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f8b4:	01a3      	lsls	r3, r4, #6
 800f8b6:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800f8ba:	b25b      	sxtb	r3, r3
 800f8bc:	b91c      	cbnz	r4, 800f8c6 <payload_integration+0xaa>
 800f8be:	2120      	movs	r1, #32
 800f8c0:	430b      	orrs	r3, r1
 800f8c2:	5483      	strb	r3, [r0, r2]
}
 800f8c4:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	e7fa      	b.n	800f8c0 <payload_integration+0xa4>

0800f8ca <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	4770      	bx	lr

0800f8ce <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	4770      	bx	lr
	...

0800f8d4 <RadioSetMaxPayloadLength>:
{
 800f8d4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f8d6:	2801      	cmp	r0, #1
 800f8d8:	d004      	beq.n	800f8e4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f8da:	4b0a      	ldr	r3, [pc, #40]	; (800f904 <RadioSetMaxPayloadLength+0x30>)
 800f8dc:	7d5b      	ldrb	r3, [r3, #21]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d008      	beq.n	800f8f4 <RadioSetMaxPayloadLength+0x20>
}
 800f8e2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f8e4:	4b08      	ldr	r3, [pc, #32]	; (800f908 <RadioSetMaxPayloadLength+0x34>)
 800f8e6:	7019      	strb	r1, [r3, #0]
 800f8e8:	4806      	ldr	r0, [pc, #24]	; (800f904 <RadioSetMaxPayloadLength+0x30>)
 800f8ea:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8ec:	300e      	adds	r0, #14
 800f8ee:	f001 fe3d 	bl	801156c <SUBGRF_SetPacketParams>
 800f8f2:	e7f6      	b.n	800f8e2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f8f4:	4b04      	ldr	r3, [pc, #16]	; (800f908 <RadioSetMaxPayloadLength+0x34>)
 800f8f6:	7019      	strb	r1, [r3, #0]
 800f8f8:	4802      	ldr	r0, [pc, #8]	; (800f904 <RadioSetMaxPayloadLength+0x30>)
 800f8fa:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8fc:	300e      	adds	r0, #14
 800f8fe:	f001 fe35 	bl	801156c <SUBGRF_SetPacketParams>
}
 800f902:	e7ee      	b.n	800f8e2 <RadioSetMaxPayloadLength+0xe>
 800f904:	20000d90 	.word	0x20000d90
 800f908:	2000010c 	.word	0x2000010c

0800f90c <RadioRead>:
{
 800f90c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800f90e:	f001 f9c9 	bl	8010ca4 <SUBGRF_ReadRegister>
}
 800f912:	bd08      	pop	{r3, pc}

0800f914 <RadioWrite>:
{
 800f914:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800f916:	f001 f9b5 	bl	8010c84 <SUBGRF_WriteRegister>
}
 800f91a:	bd08      	pop	{r3, pc}

0800f91c <RadioTxCw>:
{
 800f91c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f91e:	f001 ff4f 	bl	80117c0 <SUBGRF_SetRfTxPower>
 800f922:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f924:	210e      	movs	r1, #14
 800f926:	f640 101f 	movw	r0, #2335	; 0x91f
 800f92a:	f001 f9ab 	bl	8010c84 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f92e:	2101      	movs	r1, #1
 800f930:	4620      	mov	r0, r4
 800f932:	f001 ff31 	bl	8011798 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f936:	f001 fb75 	bl	8011024 <SUBGRF_SetTxContinuousWave>
}
 800f93a:	bd10      	pop	{r4, pc}

0800f93c <RadioTxPrbs>:
{
 800f93c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f93e:	2101      	movs	r1, #1
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <RadioTxPrbs+0x24>)
 800f942:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f946:	f001 ff27 	bl	8011798 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f94a:	212d      	movs	r1, #45	; 0x2d
 800f94c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f950:	f7ff ffe0 	bl	800f914 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f954:	f001 fb6d 	bl	8011032 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f958:	4802      	ldr	r0, [pc, #8]	; (800f964 <RadioTxPrbs+0x28>)
 800f95a:	f001 faa3 	bl	8010ea4 <SUBGRF_SetTx>
}
 800f95e:	bd08      	pop	{r3, pc}
 800f960:	20000d90 	.word	0x20000d90
 800f964:	000fffff 	.word	0x000fffff

0800f968 <RadioSetRxDutyCycle>:
{
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	4604      	mov	r4, r0
 800f96c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f96e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800f972:	4e09      	ldr	r6, [pc, #36]	; (800f998 <RadioSetRxDutyCycle+0x30>)
 800f974:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f976:	2300      	movs	r3, #0
 800f978:	461a      	mov	r2, r3
 800f97a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f97e:	4608      	mov	r0, r1
 800f980:	f001 fc23 	bl	80111ca <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f984:	2100      	movs	r1, #0
 800f986:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800f98a:	f001 ff05 	bl	8011798 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f98e:	4629      	mov	r1, r5
 800f990:	4620      	mov	r0, r4
 800f992:	f001 fb17 	bl	8010fc4 <SUBGRF_SetRxDutyCycle>
}
 800f996:	bd70      	pop	{r4, r5, r6, pc}
 800f998:	20000d90 	.word	0x20000d90

0800f99c <RadioRxBoosted>:
{
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800f9a0:	f001 ffec 	bl	801197c <RFW_Is_Init>
 800f9a4:	2801      	cmp	r0, #1
 800f9a6:	d019      	beq.n	800f9dc <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f240 2162 	movw	r1, #610	; 0x262
 800f9b0:	4608      	mov	r0, r1
 800f9b2:	f001 fc0a 	bl	80111ca <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f9b6:	b9a4      	cbnz	r4, 800f9e2 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f9b8:	4c11      	ldr	r4, [pc, #68]	; (800fa00 <RadioRxBoosted+0x64>)
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f9be:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <RadioRxBoosted+0x68>)
 800f9c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f9c4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f9c6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f9ca:	f001 fee5 	bl	8011798 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f9ce:	7863      	ldrb	r3, [r4, #1]
 800f9d0:	b183      	cbz	r3, 800f9f4 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f9d2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f9d6:	f001 fad7 	bl	8010f88 <SUBGRF_SetRxBoosted>
}
 800f9da:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800f9dc:	f001 ffd6 	bl	801198c <RFW_ReceiveInit>
 800f9e0:	e7e9      	b.n	800f9b6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f9e2:	4d09      	ldr	r5, [pc, #36]	; (800fa08 <RadioRxBoosted+0x6c>)
 800f9e4:	4621      	mov	r1, r4
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f002 fca2 	bl	8012330 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f002 fc59 	bl	80122a4 <UTIL_TIMER_Start>
 800f9f2:	e7e1      	b.n	800f9b8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f9f4:	4b02      	ldr	r3, [pc, #8]	; (800fa00 <RadioRxBoosted+0x64>)
 800f9f6:	6898      	ldr	r0, [r3, #8]
 800f9f8:	0180      	lsls	r0, r0, #6
 800f9fa:	f001 fac5 	bl	8010f88 <SUBGRF_SetRxBoosted>
}
 800f9fe:	e7ec      	b.n	800f9da <RadioRxBoosted+0x3e>
 800fa00:	20000d90 	.word	0x20000d90
 800fa04:	48000400 	.word	0x48000400
 800fa08:	20000d78 	.word	0x20000d78

0800fa0c <RadioStandby>:
{
 800fa0c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800fa0e:	2000      	movs	r0, #0
 800fa10:	f001 fa2e 	bl	8010e70 <SUBGRF_SetStandby>
}
 800fa14:	bd08      	pop	{r3, pc}

0800fa16 <RadioGetStatus>:
{
 800fa16:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800fa18:	f001 f928 	bl	8010c6c <SUBGRF_GetOperatingMode>
 800fa1c:	2805      	cmp	r0, #5
 800fa1e:	d007      	beq.n	800fa30 <RadioGetStatus+0x1a>
 800fa20:	2807      	cmp	r0, #7
 800fa22:	d007      	beq.n	800fa34 <RadioGetStatus+0x1e>
 800fa24:	2804      	cmp	r0, #4
 800fa26:	d001      	beq.n	800fa2c <RadioGetStatus+0x16>
            return RF_IDLE;
 800fa28:	2000      	movs	r0, #0
}
 800fa2a:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800fa2c:	2002      	movs	r0, #2
 800fa2e:	e7fc      	b.n	800fa2a <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800fa30:	2001      	movs	r0, #1
 800fa32:	e7fa      	b.n	800fa2a <RadioGetStatus+0x14>
            return RF_CAD;
 800fa34:	2003      	movs	r0, #3
 800fa36:	e7f8      	b.n	800fa2a <RadioGetStatus+0x14>

0800fa38 <RadioIrqProcess>:
{
 800fa38:	b530      	push	{r4, r5, lr}
 800fa3a:	b083      	sub	sp, #12
    uint8_t size = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800fa42:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800fa44:	4ba5      	ldr	r3, [pc, #660]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fa46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800fa4a:	2b20      	cmp	r3, #32
 800fa4c:	d829      	bhi.n	800faa2 <RadioIrqProcess+0x6a>
 800fa4e:	b21a      	sxth	r2, r3
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	f000 8140 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
 800fa56:	3b01      	subs	r3, #1
 800fa58:	2b1f      	cmp	r3, #31
 800fa5a:	f200 813c 	bhi.w	800fcd6 <RadioIrqProcess+0x29e>
 800fa5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fa62:	0063      	.short	0x0063
 800fa64:	013a007f 	.word	0x013a007f
 800fa68:	013a00f7 	.word	0x013a00f7
 800fa6c:	013a013a 	.word	0x013a013a
 800fa70:	013a0127 	.word	0x013a0127
 800fa74:	013a013a 	.word	0x013a013a
 800fa78:	013a013a 	.word	0x013a013a
 800fa7c:	013a013a 	.word	0x013a013a
 800fa80:	013a0134 	.word	0x013a0134
 800fa84:	013a013a 	.word	0x013a013a
 800fa88:	013a013a 	.word	0x013a013a
 800fa8c:	013a013a 	.word	0x013a013a
 800fa90:	013a013a 	.word	0x013a013a
 800fa94:	013a013a 	.word	0x013a013a
 800fa98:	013a013a 	.word	0x013a013a
 800fa9c:	013a013a 	.word	0x013a013a
 800faa0:	0155      	.short	0x0155
 800faa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faa6:	f000 80b3 	beq.w	800fc10 <RadioIrqProcess+0x1d8>
 800faaa:	d928      	bls.n	800fafe <RadioIrqProcess+0xc6>
 800faac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fab0:	f040 8111 	bne.w	800fcd6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800fab4:	4b8a      	ldr	r3, [pc, #552]	; (800fce0 <RadioIrqProcess+0x2a8>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	2100      	movs	r1, #0
 800faba:	2002      	movs	r0, #2
 800fabc:	f002 f844 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800fac0:	f001 f8d4 	bl	8010c6c <SUBGRF_GetOperatingMode>
 800fac4:	2804      	cmp	r0, #4
 800fac6:	f000 80b0 	beq.w	800fc2a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800faca:	f001 f8cf 	bl	8010c6c <SUBGRF_GetOperatingMode>
 800face:	2805      	cmp	r0, #5
 800fad0:	f040 8101 	bne.w	800fcd6 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800fad4:	4b83      	ldr	r3, [pc, #524]	; (800fce4 <RadioIrqProcess+0x2ac>)
 800fad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fada:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800fadc:	4882      	ldr	r0, [pc, #520]	; (800fce8 <RadioIrqProcess+0x2b0>)
 800fade:	f002 fb87 	bl	80121f0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fae2:	2000      	movs	r0, #0
 800fae4:	f001 f9c4 	bl	8010e70 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fae8:	4b80      	ldr	r3, [pc, #512]	; (800fcec <RadioIrqProcess+0x2b4>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 80f2 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 80ee 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800fafa:	4798      	blx	r3
 800fafc:	e0eb      	b.n	800fcd6 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800fafe:	2b40      	cmp	r3, #64	; 0x40
 800fb00:	f000 811d 	beq.w	800fd3e <RadioIrqProcess+0x306>
 800fb04:	2b80      	cmp	r3, #128	; 0x80
 800fb06:	f040 80e6 	bne.w	800fcd6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	f001 f9b0 	bl	8010e70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fb10:	4b76      	ldr	r3, [pc, #472]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f000 80de 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 80da 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800fb22:	2000      	movs	r0, #0
 800fb24:	4798      	blx	r3
 800fb26:	e0d6      	b.n	800fcd6 <RadioIrqProcess+0x29e>
 800fb28:	4b6e      	ldr	r3, [pc, #440]	; (800fce4 <RadioIrqProcess+0x2ac>)
 800fb2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb2e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800fb30:	486f      	ldr	r0, [pc, #444]	; (800fcf0 <RadioIrqProcess+0x2b8>)
 800fb32:	f002 fb5d 	bl	80121f0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800fb36:	2000      	movs	r0, #0
 800fb38:	f001 f99a 	bl	8010e70 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800fb3c:	f001 ff20 	bl	8011980 <RFW_Is_LongPacketModeEnabled>
 800fb40:	2801      	cmp	r0, #1
 800fb42:	d00a      	beq.n	800fb5a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fb44:	4b69      	ldr	r3, [pc, #420]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 80c4 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 80c0 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800fb56:	4798      	blx	r3
 800fb58:	e0bd      	b.n	800fcd6 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800fb5a:	f001 ff1a 	bl	8011992 <RFW_DeInit_TxLongPacket>
 800fb5e:	e7f1      	b.n	800fb44 <RadioIrqProcess+0x10c>
 800fb60:	4b60      	ldr	r3, [pc, #384]	; (800fce4 <RadioIrqProcess+0x2ac>)
 800fb62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb66:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800fb68:	485f      	ldr	r0, [pc, #380]	; (800fce8 <RadioIrqProcess+0x2b0>)
 800fb6a:	f002 fb41 	bl	80121f0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fb6e:	4b5b      	ldr	r3, [pc, #364]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fb70:	785b      	ldrb	r3, [r3, #1]
 800fb72:	b303      	cbz	r3, 800fbb6 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800fb74:	22ff      	movs	r2, #255	; 0xff
 800fb76:	f10d 0107 	add.w	r1, sp, #7
 800fb7a:	485e      	ldr	r0, [pc, #376]	; (800fcf4 <RadioIrqProcess+0x2bc>)
 800fb7c:	f001 fdb6 	bl	80116ec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800fb80:	485d      	ldr	r0, [pc, #372]	; (800fcf8 <RadioIrqProcess+0x2c0>)
 800fb82:	f001 fdcd 	bl	8011720 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fb86:	4b59      	ldr	r3, [pc, #356]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f000 80a3 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
 800fb90:	689c      	ldr	r4, [r3, #8]
 800fb92:	2c00      	cmp	r4, #0
 800fb94:	f000 809f 	beq.w	800fcd6 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800fb98:	4b50      	ldr	r3, [pc, #320]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fb9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d11d      	bne.n	800fbde <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800fba2:	4a4e      	ldr	r2, [pc, #312]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fba4:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800fba8:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800fbac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fbb0:	4850      	ldr	r0, [pc, #320]	; (800fcf4 <RadioIrqProcess+0x2bc>)
 800fbb2:	47a0      	blx	r4
                break;
 800fbb4:	e08f      	b.n	800fcd6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	f001 f95a 	bl	8010e70 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	f640 1002 	movw	r0, #2306	; 0x902
 800fbc2:	f001 f85f 	bl	8010c84 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800fbc6:	f640 1044 	movw	r0, #2372	; 0x944
 800fbca:	f001 f86b 	bl	8010ca4 <SUBGRF_ReadRegister>
 800fbce:	f040 0102 	orr.w	r1, r0, #2
 800fbd2:	b2c9      	uxtb	r1, r1
 800fbd4:	f640 1044 	movw	r0, #2372	; 0x944
 800fbd8:	f001 f854 	bl	8010c84 <SUBGRF_WriteRegister>
 800fbdc:	e7ca      	b.n	800fb74 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800fbde:	4c3f      	ldr	r4, [pc, #252]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fbe0:	4669      	mov	r1, sp
 800fbe2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fbe4:	f001 fe7c 	bl	80118e0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800fbe8:	4b40      	ldr	r3, [pc, #256]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	689d      	ldr	r5, [r3, #8]
 800fbee:	9b00      	ldr	r3, [sp, #0]
 800fbf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fbf4:	4a41      	ldr	r2, [pc, #260]	; (800fcfc <RadioIrqProcess+0x2c4>)
 800fbf6:	fb82 1203 	smull	r1, r2, r2, r3
 800fbfa:	17db      	asrs	r3, r3, #31
 800fbfc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fc00:	b25b      	sxtb	r3, r3
 800fc02:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800fc06:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fc0a:	483a      	ldr	r0, [pc, #232]	; (800fcf4 <RadioIrqProcess+0x2bc>)
 800fc0c:	47a8      	blx	r5
                break;
 800fc0e:	e062      	b.n	800fcd6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800fc10:	2000      	movs	r0, #0
 800fc12:	f001 f92d 	bl	8010e70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fc16:	4b35      	ldr	r3, [pc, #212]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d05b      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d058      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800fc24:	2001      	movs	r0, #1
 800fc26:	4798      	blx	r3
 800fc28:	e055      	b.n	800fcd6 <RadioIrqProcess+0x29e>
 800fc2a:	4b2e      	ldr	r3, [pc, #184]	; (800fce4 <RadioIrqProcess+0x2ac>)
 800fc2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fc30:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800fc32:	482f      	ldr	r0, [pc, #188]	; (800fcf0 <RadioIrqProcess+0x2b8>)
 800fc34:	f002 fadc 	bl	80121f0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fc38:	2000      	movs	r0, #0
 800fc3a:	f001 f919 	bl	8010e70 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fc3e:	4b2b      	ldr	r3, [pc, #172]	; (800fcec <RadioIrqProcess+0x2b4>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d047      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d044      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800fc4c:	4798      	blx	r3
 800fc4e:	e042      	b.n	800fcd6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800fc50:	4b2b      	ldr	r3, [pc, #172]	; (800fd00 <RadioIrqProcess+0x2c8>)
 800fc52:	2201      	movs	r2, #1
 800fc54:	2100      	movs	r1, #0
 800fc56:	2002      	movs	r0, #2
 800fc58:	f001 ff76 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800fc5c:	4b1f      	ldr	r3, [pc, #124]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fc5e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fc60:	b3c9      	cbz	r1, 800fcd6 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800fc62:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800fc66:	f640 1003 	movw	r0, #2307	; 0x903
 800fc6a:	f7ff fe53 	bl	800f914 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800fc6e:	4c1b      	ldr	r4, [pc, #108]	; (800fcdc <RadioIrqProcess+0x2a4>)
 800fc70:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fc74:	f640 1004 	movw	r0, #2308	; 0x904
 800fc78:	f7ff fe4c 	bl	800f914 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800fc7c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800fc80:	f640 1005 	movw	r0, #2309	; 0x905
 800fc84:	f7ff fe46 	bl	800f914 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800fc88:	f640 1002 	movw	r0, #2306	; 0x902
 800fc8c:	f7ff fe3e 	bl	800f90c <RadioRead>
 800fc90:	f040 0101 	orr.w	r1, r0, #1
 800fc94:	b2c9      	uxtb	r1, r1
 800fc96:	f640 1002 	movw	r0, #2306	; 0x902
 800fc9a:	f7ff fe3b 	bl	800f914 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800fc9e:	2200      	movs	r2, #0
 800fca0:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fca2:	4613      	mov	r3, r2
 800fca4:	f240 2162 	movw	r1, #610	; 0x262
 800fca8:	4608      	mov	r0, r1
 800fcaa:	f001 fa8e 	bl	80111ca <SUBGRF_SetDioIrqParams>
 800fcae:	e012      	b.n	800fcd6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800fcb0:	4b14      	ldr	r3, [pc, #80]	; (800fd04 <RadioIrqProcess+0x2cc>)
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	2002      	movs	r0, #2
 800fcb8:	f001 ff46 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800fcbc:	f001 fe5e 	bl	801197c <RFW_Is_Init>
 800fcc0:	2801      	cmp	r0, #1
 800fcc2:	d108      	bne.n	800fcd6 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800fcc4:	f001 fe66 	bl	8011994 <RFW_ReceivePayload>
 800fcc8:	e005      	b.n	800fcd6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800fcca:	4b0f      	ldr	r3, [pc, #60]	; (800fd08 <RadioIrqProcess+0x2d0>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	2100      	movs	r1, #0
 800fcd0:	2002      	movs	r0, #2
 800fcd2:	f001 ff39 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
}
 800fcd6:	b003      	add	sp, #12
 800fcd8:	bd30      	pop	{r4, r5, pc}
 800fcda:	bf00      	nop
 800fcdc:	20000d90 	.word	0x20000d90
 800fce0:	08013508 	.word	0x08013508
 800fce4:	48000400 	.word	0x48000400
 800fce8:	20000d78 	.word	0x20000d78
 800fcec:	20000d74 	.word	0x20000d74
 800fcf0:	20000dec 	.word	0x20000dec
 800fcf4:	20000c74 	.word	0x20000c74
 800fcf8:	20000db4 	.word	0x20000db4
 800fcfc:	10624dd3 	.word	0x10624dd3
 800fd00:	0801351c 	.word	0x0801351c
 800fd04:	08013528 	.word	0x08013528
 800fd08:	08013534 	.word	0x08013534
        TimerStop( &RxTimeoutTimer );
 800fd0c:	4817      	ldr	r0, [pc, #92]	; (800fd6c <RadioIrqProcess+0x334>)
 800fd0e:	f002 fa6f 	bl	80121f0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fd12:	4b17      	ldr	r3, [pc, #92]	; (800fd70 <RadioIrqProcess+0x338>)
 800fd14:	785b      	ldrb	r3, [r3, #1]
 800fd16:	b173      	cbz	r3, 800fd36 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fd18:	4b16      	ldr	r3, [pc, #88]	; (800fd74 <RadioIrqProcess+0x33c>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d0da      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0d7      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800fd26:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800fd28:	4b13      	ldr	r3, [pc, #76]	; (800fd78 <RadioIrqProcess+0x340>)
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	2002      	movs	r0, #2
 800fd30:	f001 ff0a 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
 800fd34:	e7cf      	b.n	800fcd6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fd36:	2000      	movs	r0, #0
 800fd38:	f001 f89a 	bl	8010e70 <SUBGRF_SetStandby>
 800fd3c:	e7ec      	b.n	800fd18 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <RadioIrqProcess+0x344>)
 800fd40:	2201      	movs	r2, #1
 800fd42:	2100      	movs	r1, #0
 800fd44:	2002      	movs	r0, #2
 800fd46:	f001 feff 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800fd4a:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <RadioIrqProcess+0x338>)
 800fd4c:	785b      	ldrb	r3, [r3, #1]
 800fd4e:	b143      	cbz	r3, 800fd62 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800fd50:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <RadioIrqProcess+0x33c>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d0be      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d0bb      	beq.n	800fcd6 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800fd5e:	4798      	blx	r3
}
 800fd60:	e7b9      	b.n	800fcd6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800fd62:	2000      	movs	r0, #0
 800fd64:	f001 f884 	bl	8010e70 <SUBGRF_SetStandby>
 800fd68:	e7f2      	b.n	800fd50 <RadioIrqProcess+0x318>
 800fd6a:	bf00      	nop
 800fd6c:	20000d78 	.word	0x20000d78
 800fd70:	20000d90 	.word	0x20000d90
 800fd74:	20000d74 	.word	0x20000d74
 800fd78:	08013540 	.word	0x08013540
 800fd7c:	0801354c 	.word	0x0801354c

0800fd80 <RadioOnDioIrq>:
{
 800fd80:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800fd82:	4b03      	ldr	r3, [pc, #12]	; (800fd90 <RadioOnDioIrq+0x10>)
 800fd84:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800fd88:	f7ff fe56 	bl	800fa38 <RadioIrqProcess>
}
 800fd8c:	bd08      	pop	{r3, pc}
 800fd8e:	bf00      	nop
 800fd90:	20000d90 	.word	0x20000d90

0800fd94 <RadioGetWakeupTime>:
{
 800fd94:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800fd96:	f001 fd2a 	bl	80117ee <SUBGRF_GetRadioWakeUpTime>
}
 800fd9a:	3003      	adds	r0, #3
 800fd9c:	bd08      	pop	{r3, pc}

0800fd9e <RadioReadRegisters>:
{
 800fd9e:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800fda0:	f000 fffe 	bl	8010da0 <SUBGRF_ReadRegisters>
}
 800fda4:	bd08      	pop	{r3, pc}

0800fda6 <RadioWriteRegisters>:
{
 800fda6:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800fda8:	f000 ffb8 	bl	8010d1c <SUBGRF_WriteRegisters>
}
 800fdac:	bd08      	pop	{r3, pc}

0800fdae <RadioRssi>:
{
 800fdae:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800fdb0:	f001 fc6c 	bl	801168c <SUBGRF_GetRssiInst>
}
 800fdb4:	b200      	sxth	r0, r0
 800fdb6:	bd08      	pop	{r3, pc}

0800fdb8 <RadioSetTxContinuousWave>:
{
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800fdbc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800fdc0:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800fdc4:	f001 fa76 	bl	80112b4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f001 fcf9 	bl	80117c0 <SUBGRF_SetRfTxPower>
 800fdce:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800fdd0:	210e      	movs	r1, #14
 800fdd2:	f640 101f 	movw	r0, #2335	; 0x91f
 800fdd6:	f000 ff55 	bl	8010c84 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800fdda:	2101      	movs	r1, #1
 800fddc:	4628      	mov	r0, r5
 800fdde:	f001 fcdb 	bl	8011798 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800fde2:	f001 f91f 	bl	8011024 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800fde6:	4d04      	ldr	r5, [pc, #16]	; (800fdf8 <RadioSetTxContinuousWave+0x40>)
 800fde8:	4621      	mov	r1, r4
 800fdea:	4628      	mov	r0, r5
 800fdec:	f002 faa0 	bl	8012330 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f002 fa57 	bl	80122a4 <UTIL_TIMER_Start>
}
 800fdf6:	bd38      	pop	{r3, r4, r5, pc}
 800fdf8:	20000dec 	.word	0x20000dec

0800fdfc <RadioSetChannel>:
{
 800fdfc:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800fdfe:	f001 fa59 	bl	80112b4 <SUBGRF_SetRfFrequency>
}
 800fe02:	bd08      	pop	{r3, pc}

0800fe04 <RadioStartCad>:
{
 800fe04:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fe06:	2100      	movs	r1, #0
 800fe08:	4b07      	ldr	r3, [pc, #28]	; (800fe28 <RadioStartCad+0x24>)
 800fe0a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800fe0e:	f001 fcc3 	bl	8011798 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800fe12:	2300      	movs	r3, #0
 800fe14:	461a      	mov	r2, r3
 800fe16:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800fe1a:	4608      	mov	r0, r1
 800fe1c:	f001 f9d5 	bl	80111ca <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800fe20:	f001 f8f4 	bl	801100c <SUBGRF_SetCad>
}
 800fe24:	bd08      	pop	{r3, pc}
 800fe26:	bf00      	nop
 800fe28:	20000d90 	.word	0x20000d90

0800fe2c <RadioRx>:
{
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800fe30:	f001 fda4 	bl	801197c <RFW_Is_Init>
 800fe34:	2801      	cmp	r0, #1
 800fe36:	d019      	beq.n	800fe6c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fe38:	2300      	movs	r3, #0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f240 2162 	movw	r1, #610	; 0x262
 800fe40:	4608      	mov	r0, r1
 800fe42:	f001 f9c2 	bl	80111ca <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800fe46:	b9a4      	cbnz	r4, 800fe72 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800fe48:	4c11      	ldr	r4, [pc, #68]	; (800fe90 <RadioRx+0x64>)
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800fe4e:	4b11      	ldr	r3, [pc, #68]	; (800fe94 <RadioRx+0x68>)
 800fe50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe54:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800fe56:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800fe5a:	f001 fc9d 	bl	8011798 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800fe5e:	7863      	ldrb	r3, [r4, #1]
 800fe60:	b183      	cbz	r3, 800fe84 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fe62:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fe66:	f001 f83f 	bl	8010ee8 <SUBGRF_SetRx>
}
 800fe6a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800fe6c:	f001 fd8e 	bl	801198c <RFW_ReceiveInit>
 800fe70:	e7e9      	b.n	800fe46 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800fe72:	4d09      	ldr	r5, [pc, #36]	; (800fe98 <RadioRx+0x6c>)
 800fe74:	4621      	mov	r1, r4
 800fe76:	4628      	mov	r0, r5
 800fe78:	f002 fa5a 	bl	8012330 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f002 fa11 	bl	80122a4 <UTIL_TIMER_Start>
 800fe82:	e7e1      	b.n	800fe48 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800fe84:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <RadioRx+0x64>)
 800fe86:	6898      	ldr	r0, [r3, #8]
 800fe88:	0180      	lsls	r0, r0, #6
 800fe8a:	f001 f82d 	bl	8010ee8 <SUBGRF_SetRx>
}
 800fe8e:	e7ec      	b.n	800fe6a <RadioRx+0x3e>
 800fe90:	20000d90 	.word	0x20000d90
 800fe94:	48000400 	.word	0x48000400
 800fe98:	20000d78 	.word	0x20000d78

0800fe9c <RadioSleep>:
{
 800fe9c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800fe9e:	f04f 0004 	mov.w	r0, #4
 800fea2:	f000 ffc5 	bl	8010e30 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800fea6:	2002      	movs	r0, #2
 800fea8:	f7f1 fd8e 	bl	80019c8 <HAL_Delay>
}
 800feac:	bd08      	pop	{r3, pc}
	...

0800feb0 <RadioSend>:
{
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800feb8:	2300      	movs	r3, #0
 800feba:	461a      	mov	r2, r3
 800febc:	f240 2101 	movw	r1, #513	; 0x201
 800fec0:	4608      	mov	r0, r1
 800fec2:	f001 f982 	bl	80111ca <SUBGRF_SetDioIrqParams>
 800fec6:	4b5e      	ldr	r3, [pc, #376]	; (8010040 <RadioSend+0x190>)
 800fec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fecc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800fece:	4e5d      	ldr	r6, [pc, #372]	; (8010044 <RadioSend+0x194>)
 800fed0:	2101      	movs	r1, #1
 800fed2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800fed6:	f001 fc5f 	bl	8011798 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800feda:	7833      	ldrb	r3, [r6, #0]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d103      	bne.n	800fee8 <RadioSend+0x38>
 800fee0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800fee4:	2b06      	cmp	r3, #6
 800fee6:	d013      	beq.n	800ff10 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800fee8:	f640 0089 	movw	r0, #2185	; 0x889
 800feec:	f000 feda 	bl	8010ca4 <SUBGRF_ReadRegister>
 800fef0:	f040 0104 	orr.w	r1, r0, #4
 800fef4:	b2c9      	uxtb	r1, r1
 800fef6:	f640 0089 	movw	r0, #2185	; 0x889
 800fefa:	f000 fec3 	bl	8010c84 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800fefe:	4b51      	ldr	r3, [pc, #324]	; (8010044 <RadioSend+0x194>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	2b04      	cmp	r3, #4
 800ff04:	d819      	bhi.n	800ff3a <RadioSend+0x8a>
 800ff06:	e8df f003 	tbb	[pc, r3]
 800ff0a:	0e24      	.short	0x0e24
 800ff0c:	5024      	.short	0x5024
 800ff0e:	5d          	.byte	0x5d
 800ff0f:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800ff10:	f640 0089 	movw	r0, #2185	; 0x889
 800ff14:	f000 fec6 	bl	8010ca4 <SUBGRF_ReadRegister>
 800ff18:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800ff1c:	f640 0089 	movw	r0, #2185	; 0x889
 800ff20:	f000 feb0 	bl	8010c84 <SUBGRF_WriteRegister>
 800ff24:	e7eb      	b.n	800fefe <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ff26:	4847      	ldr	r0, [pc, #284]	; (8010044 <RadioSend+0x194>)
 800ff28:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ff2a:	300e      	adds	r0, #14
 800ff2c:	f001 fb1e 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ff30:	2200      	movs	r2, #0
 800ff32:	4621      	mov	r1, r4
 800ff34:	4628      	mov	r0, r5
 800ff36:	f000 ffcf 	bl	8010ed8 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ff3a:	4c43      	ldr	r4, [pc, #268]	; (8010048 <RadioSend+0x198>)
 800ff3c:	4b41      	ldr	r3, [pc, #260]	; (8010044 <RadioSend+0x194>)
 800ff3e:	6859      	ldr	r1, [r3, #4]
 800ff40:	4620      	mov	r0, r4
 800ff42:	f002 f9f5 	bl	8012330 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800ff46:	4620      	mov	r0, r4
 800ff48:	f002 f9ac 	bl	80122a4 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800ff4c:	2000      	movs	r0, #0
}
 800ff4e:	b002      	add	sp, #8
 800ff50:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ff52:	f001 fd13 	bl	801197c <RFW_Is_Init>
 800ff56:	2801      	cmp	r0, #1
 800ff58:	d00a      	beq.n	800ff70 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ff5a:	483a      	ldr	r0, [pc, #232]	; (8010044 <RadioSend+0x194>)
 800ff5c:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ff5e:	300e      	adds	r0, #14
 800ff60:	f001 fb04 	bl	801156c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800ff64:	2200      	movs	r2, #0
 800ff66:	4621      	mov	r1, r4
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f000 ffb5 	bl	8010ed8 <SUBGRF_SendPayload>
 800ff6e:	e7e4      	b.n	800ff3a <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ff70:	f10d 0207 	add.w	r2, sp, #7
 800ff74:	4621      	mov	r1, r4
 800ff76:	4628      	mov	r0, r5
 800ff78:	f001 fd05 	bl	8011986 <RFW_TransmitInit>
 800ff7c:	b968      	cbnz	r0, 800ff9a <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ff7e:	4831      	ldr	r0, [pc, #196]	; (8010044 <RadioSend+0x194>)
 800ff80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff84:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ff86:	300e      	adds	r0, #14
 800ff88:	f001 faf0 	bl	801156c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 ffa0 	bl	8010ed8 <SUBGRF_SendPayload>
 800ff98:	e7cf      	b.n	800ff3a <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800ff9a:	4b2c      	ldr	r3, [pc, #176]	; (801004c <RadioSend+0x19c>)
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	2002      	movs	r0, #2
 800ffa2:	f001 fdd1 	bl	8011b48 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800ffa6:	2003      	movs	r0, #3
 800ffa8:	e7d1      	b.n	800ff4e <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ffaa:	4826      	ldr	r0, [pc, #152]	; (8010044 <RadioSend+0x194>)
 800ffac:	2302      	movs	r3, #2
 800ffae:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ffb0:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ffb2:	300e      	adds	r0, #14
 800ffb4:	f001 fada 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ffb8:	2200      	movs	r2, #0
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f000 ff8b 	bl	8010ed8 <SUBGRF_SendPayload>
            break;
 800ffc2:	e7ba      	b.n	800ff3a <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 800ffc4:	4622      	mov	r2, r4
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	4821      	ldr	r0, [pc, #132]	; (8010050 <RadioSend+0x1a0>)
 800ffca:	f7ff fc27 	bl	800f81c <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ffce:	4e1d      	ldr	r6, [pc, #116]	; (8010044 <RadioSend+0x194>)
 800ffd0:	2302      	movs	r3, #2
 800ffd2:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ffd4:	1c65      	adds	r5, r4, #1
 800ffd6:	b2ed      	uxtb	r5, r5
 800ffd8:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ffda:	f106 000e 	add.w	r0, r6, #14
 800ffde:	f001 fac5 	bl	801156c <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	20f1      	movs	r0, #241	; 0xf1
 800ffe6:	f7ff fc95 	bl	800f914 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800ffea:	2100      	movs	r1, #0
 800ffec:	20f0      	movs	r0, #240	; 0xf0
 800ffee:	f7ff fc91 	bl	800f914 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800fff2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fff4:	2b64      	cmp	r3, #100	; 0x64
 800fff6:	d019      	beq.n	801002c <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800fff8:	21e1      	movs	r1, #225	; 0xe1
 800fffa:	20f3      	movs	r0, #243	; 0xf3
 800fffc:	f7ff fc8a 	bl	800f914 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8010000:	2104      	movs	r1, #4
 8010002:	20f2      	movs	r0, #242	; 0xf2
 8010004:	f7ff fc86 	bl	800f914 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8010008:	00e1      	lsls	r1, r4, #3
 801000a:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801000c:	0a09      	lsrs	r1, r1, #8
 801000e:	20f4      	movs	r0, #244	; 0xf4
 8010010:	f7ff fc80 	bl	800f914 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8010014:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8010018:	20f5      	movs	r0, #245	; 0xf5
 801001a:	f7ff fc7b 	bl	800f914 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801001e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010022:	4629      	mov	r1, r5
 8010024:	480a      	ldr	r0, [pc, #40]	; (8010050 <RadioSend+0x1a0>)
 8010026:	f000 ff57 	bl	8010ed8 <SUBGRF_SendPayload>
            break;
 801002a:	e786      	b.n	800ff3a <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801002c:	2170      	movs	r1, #112	; 0x70
 801002e:	20f3      	movs	r0, #243	; 0xf3
 8010030:	f7ff fc70 	bl	800f914 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8010034:	211d      	movs	r1, #29
 8010036:	20f2      	movs	r0, #242	; 0xf2
 8010038:	f7ff fc6c 	bl	800f914 <RadioWrite>
 801003c:	e7e4      	b.n	8010008 <RadioSend+0x158>
 801003e:	bf00      	nop
 8010040:	48000400 	.word	0x48000400
 8010044:	20000d90 	.word	0x20000d90
 8010048:	20000dec 	.word	0x20000dec
 801004c:	0801355c 	.word	0x0801355c
 8010050:	20000c74 	.word	0x20000c74

08010054 <RadioRandom>:
{
 8010054:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010056:	2300      	movs	r3, #0
 8010058:	461a      	mov	r2, r3
 801005a:	4619      	mov	r1, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f001 f8b4 	bl	80111ca <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010062:	f000 ff5b 	bl	8010f1c <SUBGRF_GetRandom>
}
 8010066:	bd08      	pop	{r3, pc}

08010068 <RadioSetModem>:
{
 8010068:	b510      	push	{r4, lr}
 801006a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 801006c:	4b1c      	ldr	r3, [pc, #112]	; (80100e0 <RadioSetModem+0x78>)
 801006e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010070:	f001 fc91 	bl	8011996 <RFW_SetRadioModem>
    switch( modem )
 8010074:	2c05      	cmp	r4, #5
 8010076:	d804      	bhi.n	8010082 <RadioSetModem+0x1a>
 8010078:	e8df f004 	tbb	[pc, r4]
 801007c:	1d03110a 	.word	0x1d03110a
 8010080:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010082:	2003      	movs	r0, #3
 8010084:	f001 f942 	bl	801130c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010088:	4b15      	ldr	r3, [pc, #84]	; (80100e0 <RadioSetModem+0x78>)
 801008a:	2200      	movs	r2, #0
 801008c:	735a      	strb	r2, [r3, #13]
}
 801008e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010090:	2000      	movs	r0, #0
 8010092:	f001 f93b 	bl	801130c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010096:	4b12      	ldr	r3, [pc, #72]	; (80100e0 <RadioSetModem+0x78>)
 8010098:	2200      	movs	r2, #0
 801009a:	735a      	strb	r2, [r3, #13]
        break;
 801009c:	e7f7      	b.n	801008e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801009e:	2001      	movs	r0, #1
 80100a0:	f001 f934 	bl	801130c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80100a4:	4b0e      	ldr	r3, [pc, #56]	; (80100e0 <RadioSetModem+0x78>)
 80100a6:	7b5a      	ldrb	r2, [r3, #13]
 80100a8:	7b18      	ldrb	r0, [r3, #12]
 80100aa:	4282      	cmp	r2, r0
 80100ac:	d0ef      	beq.n	801008e <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80100ae:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80100b0:	f000 fade 	bl	8010670 <RadioSetPublicNetwork>
 80100b4:	e7eb      	b.n	801008e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80100b6:	2002      	movs	r0, #2
 80100b8:	f001 f928 	bl	801130c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80100bc:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <RadioSetModem+0x78>)
 80100be:	2200      	movs	r2, #0
 80100c0:	735a      	strb	r2, [r3, #13]
        break;
 80100c2:	e7e4      	b.n	801008e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80100c4:	2002      	movs	r0, #2
 80100c6:	f001 f921 	bl	801130c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <RadioSetModem+0x78>)
 80100cc:	2200      	movs	r2, #0
 80100ce:	735a      	strb	r2, [r3, #13]
        break;
 80100d0:	e7dd      	b.n	801008e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80100d2:	2000      	movs	r0, #0
 80100d4:	f001 f91a 	bl	801130c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80100d8:	4b01      	ldr	r3, [pc, #4]	; (80100e0 <RadioSetModem+0x78>)
 80100da:	2200      	movs	r2, #0
 80100dc:	735a      	strb	r2, [r3, #13]
}
 80100de:	e7d6      	b.n	801008e <RadioSetModem+0x26>
 80100e0:	20000d90 	.word	0x20000d90

080100e4 <RadioSetTxGenericConfig>:
{
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	b086      	sub	sp, #24
 80100ea:	4605      	mov	r5, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	4617      	mov	r7, r2
 80100f0:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 80100f2:	2100      	movs	r1, #0
 80100f4:	9104      	str	r1, [sp, #16]
 80100f6:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80100f8:	f001 fc3f 	bl	801197a <RFW_DeInit>
    switch( modem )
 80100fc:	2d03      	cmp	r5, #3
 80100fe:	f200 8156 	bhi.w	80103ae <RadioSetTxGenericConfig+0x2ca>
 8010102:	e8df f015 	tbh	[pc, r5, lsl #1]
 8010106:	007a      	.short	0x007a
 8010108:	014000dd 	.word	0x014000dd
 801010c:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 801010e:	7ca2      	ldrb	r2, [r4, #18]
 8010110:	2a08      	cmp	r2, #8
 8010112:	f200 8159 	bhi.w	80103c8 <RadioSetTxGenericConfig+0x2e4>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8010116:	68a1      	ldr	r1, [r4, #8]
 8010118:	a804      	add	r0, sp, #16
 801011a:	f001 fe2b 	bl	8011d74 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 8154 	beq.w	80103ce <RadioSetTxGenericConfig+0x2ea>
        else if( config->msk.BitRate <= 10000 )
 8010126:	f242 7210 	movw	r2, #10000	; 0x2710
 801012a:	4293      	cmp	r3, r2
 801012c:	d823      	bhi.n	8010176 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801012e:	4bae      	ldr	r3, [pc, #696]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010130:	2203      	movs	r2, #3
 8010132:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8010134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8010138:	6822      	ldr	r2, [r4, #0]
 801013a:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801013c:	7ce2      	ldrb	r2, [r4, #19]
 801013e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 8010142:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8010144:	6863      	ldr	r3, [r4, #4]
 8010146:	00da      	lsls	r2, r3, #3
 8010148:	4ba7      	ldr	r3, [pc, #668]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 801014a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801014c:	2204      	movs	r2, #4
 801014e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8010150:	7ca2      	ldrb	r2, [r4, #18]
 8010152:	00d2      	lsls	r2, r2, #3
 8010154:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8010156:	2200      	movs	r2, #0
 8010158:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801015a:	7da3      	ldrb	r3, [r4, #22]
 801015c:	2b02      	cmp	r3, #2
 801015e:	d018      	beq.n	8010192 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8010160:	7d23      	ldrb	r3, [r4, #20]
 8010162:	2b02      	cmp	r3, #2
 8010164:	d015      	beq.n	8010192 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8010166:	7d62      	ldrb	r2, [r4, #21]
 8010168:	4b9f      	ldr	r3, [pc, #636]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 801016a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801016c:	7da2      	ldrb	r2, [r4, #22]
 801016e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8010170:	7d22      	ldrb	r2, [r4, #20]
 8010172:	755a      	strb	r2, [r3, #21]
 8010174:	e026      	b.n	80101c4 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010176:	4b9c      	ldr	r3, [pc, #624]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010178:	2500      	movs	r5, #0
 801017a:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801017c:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8010180:	6822      	ldr	r2, [r4, #0]
 8010182:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8010184:	7ce2      	ldrb	r2, [r4, #19]
 8010186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801018a:	6822      	ldr	r2, [r4, #0]
 801018c:	0892      	lsrs	r2, r2, #2
 801018e:	641a      	str	r2, [r3, #64]	; 0x40
 8010190:	e7d8      	b.n	8010144 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8010192:	7d62      	ldrb	r2, [r4, #21]
 8010194:	f102 030f 	add.w	r3, r2, #15
 8010198:	b2db      	uxtb	r3, r3
 801019a:	2b01      	cmp	r3, #1
 801019c:	d901      	bls.n	80101a2 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801019e:	2a01      	cmp	r2, #1
 80101a0:	d128      	bne.n	80101f4 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig = config;
 80101a2:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 80101a4:	2301      	movs	r3, #1
 80101a6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80101aa:	4a90      	ldr	r2, [pc, #576]	; (80103ec <RadioSetTxGenericConfig+0x308>)
 80101ac:	4b90      	ldr	r3, [pc, #576]	; (80103f0 <RadioSetTxGenericConfig+0x30c>)
 80101ae:	6819      	ldr	r1, [r3, #0]
 80101b0:	a801      	add	r0, sp, #4
 80101b2:	f001 fbdf 	bl	8011974 <RFW_Init>
 80101b6:	b9e8      	cbnz	r0, 80101f4 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80101b8:	4b8b      	ldr	r3, [pc, #556]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80101be:	2101      	movs	r1, #1
 80101c0:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80101c2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80101c4:	f7ff fc22 	bl	800fa0c <RadioStandby>
        RadioSetModem( radio_modem );
 80101c8:	4628      	mov	r0, r5
 80101ca:	f7ff ff4d 	bl	8010068 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80101ce:	4d86      	ldr	r5, [pc, #536]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 80101d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80101d4:	f001 f942 	bl	801145c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80101d8:	f105 000e 	add.w	r0, r5, #14
 80101dc:	f001 f9c6 	bl	801156c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80101e0:	a804      	add	r0, sp, #16
 80101e2:	f000 fdab 	bl	8010d3c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80101e6:	8a20      	ldrh	r0, [r4, #16]
 80101e8:	f000 fd7f 	bl	8010cea <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80101ec:	89a0      	ldrh	r0, [r4, #12]
 80101ee:	f000 fdc2 	bl	8010d76 <SUBGRF_SetCrcPolynomial>
        break;
 80101f2:	e0dc      	b.n	80103ae <RadioSetTxGenericConfig+0x2ca>
                return -1;
 80101f4:	f04f 30ff 	mov.w	r0, #4294967295
 80101f8:	e0e3      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
        if( config->fsk.BitRate == 0 )
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 80e9 	beq.w	80103d4 <RadioSetTxGenericConfig+0x2f0>
        if( config->fsk.SyncWordLength > 8 )
 8010202:	7ca2      	ldrb	r2, [r4, #18]
 8010204:	2a08      	cmp	r2, #8
 8010206:	f200 80e8 	bhi.w	80103da <RadioSetTxGenericConfig+0x2f6>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801020a:	68a1      	ldr	r1, [r4, #8]
 801020c:	a804      	add	r0, sp, #16
 801020e:	f001 fdb1 	bl	8011d74 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010212:	4b75      	ldr	r3, [pc, #468]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010214:	2200      	movs	r2, #0
 8010216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801021a:	6821      	ldr	r1, [r4, #0]
 801021c:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801021e:	7ce1      	ldrb	r1, [r4, #19]
 8010220:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8010224:	69a1      	ldr	r1, [r4, #24]
 8010226:	6419      	str	r1, [r3, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010228:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801022a:	6861      	ldr	r1, [r4, #4]
 801022c:	00c9      	lsls	r1, r1, #3
 801022e:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8010230:	2104      	movs	r1, #4
 8010232:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8010234:	7ca1      	ldrb	r1, [r4, #18]
 8010236:	00c9      	lsls	r1, r1, #3
 8010238:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801023a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801023c:	7da3      	ldrb	r3, [r4, #22]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d00a      	beq.n	8010258 <RadioSetTxGenericConfig+0x174>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8010242:	7d23      	ldrb	r3, [r4, #20]
 8010244:	2b02      	cmp	r3, #2
 8010246:	d007      	beq.n	8010258 <RadioSetTxGenericConfig+0x174>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8010248:	7d62      	ldrb	r2, [r4, #21]
 801024a:	4b67      	ldr	r3, [pc, #412]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 801024c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801024e:	7da2      	ldrb	r2, [r4, #22]
 8010250:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8010252:	7d22      	ldrb	r2, [r4, #20]
 8010254:	755a      	strb	r2, [r3, #21]
 8010256:	e018      	b.n	801028a <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8010258:	7d62      	ldrb	r2, [r4, #21]
 801025a:	f102 030f 	add.w	r3, r2, #15
 801025e:	b2db      	uxtb	r3, r3
 8010260:	2b01      	cmp	r3, #1
 8010262:	d901      	bls.n	8010268 <RadioSetTxGenericConfig+0x184>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8010264:	2a01      	cmp	r2, #1
 8010266:	d128      	bne.n	80102ba <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 8010268:	2301      	movs	r3, #1
 801026a:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 801026e:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8010270:	4a5e      	ldr	r2, [pc, #376]	; (80103ec <RadioSetTxGenericConfig+0x308>)
 8010272:	4b5f      	ldr	r3, [pc, #380]	; (80103f0 <RadioSetTxGenericConfig+0x30c>)
 8010274:	6819      	ldr	r1, [r3, #0]
 8010276:	a801      	add	r0, sp, #4
 8010278:	f001 fb7c 	bl	8011974 <RFW_Init>
 801027c:	b9e8      	cbnz	r0, 80102ba <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801027e:	4b5a      	ldr	r3, [pc, #360]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010280:	2200      	movs	r2, #0
 8010282:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8010284:	2101      	movs	r1, #1
 8010286:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8010288:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801028a:	f7ff fbbf 	bl	800fa0c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801028e:	2000      	movs	r0, #0
 8010290:	f7ff feea 	bl	8010068 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010294:	4d54      	ldr	r5, [pc, #336]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010296:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801029a:	f001 f8df 	bl	801145c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801029e:	f105 000e 	add.w	r0, r5, #14
 80102a2:	f001 f963 	bl	801156c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80102a6:	a804      	add	r0, sp, #16
 80102a8:	f000 fd48 	bl	8010d3c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80102ac:	8a20      	ldrh	r0, [r4, #16]
 80102ae:	f000 fd1c 	bl	8010cea <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80102b2:	89a0      	ldrh	r0, [r4, #12]
 80102b4:	f000 fd5f 	bl	8010d76 <SUBGRF_SetCrcPolynomial>
        break;
 80102b8:	e079      	b.n	80103ae <RadioSetTxGenericConfig+0x2ca>
                return -1;
 80102ba:	f04f 30ff 	mov.w	r0, #4294967295
 80102be:	e080      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80102c0:	4b49      	ldr	r3, [pc, #292]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80102c8:	7822      	ldrb	r2, [r4, #0]
 80102ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80102ce:	7862      	ldrb	r2, [r4, #1]
 80102d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80102d4:	78a2      	ldrb	r2, [r4, #2]
 80102d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80102da:	78e3      	ldrb	r3, [r4, #3]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d033      	beq.n	8010348 <RadioSetTxGenericConfig+0x264>
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d036      	beq.n	8010352 <RadioSetTxGenericConfig+0x26e>
 80102e4:	b35b      	cbz	r3, 801033e <RadioSetTxGenericConfig+0x25a>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80102e6:	4d40      	ldr	r5, [pc, #256]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 80102e8:	f04f 0801 	mov.w	r8, #1
 80102ec:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80102f0:	88a3      	ldrh	r3, [r4, #4]
 80102f2:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80102f4:	79a3      	ldrb	r3, [r4, #6]
 80102f6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80102f8:	79e3      	ldrb	r3, [r4, #7]
 80102fa:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80102fe:	7a23      	ldrb	r3, [r4, #8]
 8010300:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8010304:	f7ff fb82 	bl	800fa0c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8010308:	4640      	mov	r0, r8
 801030a:	f7ff fead 	bl	8010068 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801030e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8010312:	f001 f8a3 	bl	801145c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010316:	f105 000e 	add.w	r0, r5, #14
 801031a:	f001 f927 	bl	801156c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801031e:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8010322:	2b06      	cmp	r3, #6
 8010324:	d024      	beq.n	8010370 <RadioSetTxGenericConfig+0x28c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010326:	f640 0089 	movw	r0, #2185	; 0x889
 801032a:	f000 fcbb 	bl	8010ca4 <SUBGRF_ReadRegister>
 801032e:	f040 0104 	orr.w	r1, r0, #4
 8010332:	b2c9      	uxtb	r1, r1
 8010334:	f640 0089 	movw	r0, #2185	; 0x889
 8010338:	f000 fca4 	bl	8010c84 <SUBGRF_WriteRegister>
 801033c:	e037      	b.n	80103ae <RadioSetTxGenericConfig+0x2ca>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801033e:	4b2a      	ldr	r3, [pc, #168]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8010346:	e7ce      	b.n	80102e6 <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8010348:	4b27      	ldr	r3, [pc, #156]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8010350:	e7c9      	b.n	80102e6 <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8010352:	7823      	ldrb	r3, [r4, #0]
 8010354:	3b0b      	subs	r3, #11
 8010356:	b2db      	uxtb	r3, r3
 8010358:	2b01      	cmp	r3, #1
 801035a:	d904      	bls.n	8010366 <RadioSetTxGenericConfig+0x282>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801035c:	4b22      	ldr	r3, [pc, #136]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 801035e:	2200      	movs	r2, #0
 8010360:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010364:	e7bf      	b.n	80102e6 <RadioSetTxGenericConfig+0x202>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8010366:	4b20      	ldr	r3, [pc, #128]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010368:	2201      	movs	r2, #1
 801036a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801036e:	e7ba      	b.n	80102e6 <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010370:	f640 0089 	movw	r0, #2185	; 0x889
 8010374:	f000 fc96 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010378:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801037c:	f640 0089 	movw	r0, #2185	; 0x889
 8010380:	f000 fc80 	bl	8010c84 <SUBGRF_WriteRegister>
 8010384:	e013      	b.n	80103ae <RadioSetTxGenericConfig+0x2ca>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	3b01      	subs	r3, #1
 801038a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801038e:	d227      	bcs.n	80103e0 <RadioSetTxGenericConfig+0x2fc>
        RadioSetModem( MODEM_BPSK );
 8010390:	2003      	movs	r0, #3
 8010392:	f7ff fe69 	bl	8010068 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8010396:	4814      	ldr	r0, [pc, #80]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 8010398:	2302      	movs	r3, #2
 801039a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80103a2:	2316      	movs	r3, #22
 80103a4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80103a8:	3038      	adds	r0, #56	; 0x38
 80103aa:	f001 f857 	bl	801145c <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80103ae:	4638      	mov	r0, r7
 80103b0:	f001 fa06 	bl	80117c0 <SUBGRF_SetRfTxPower>
 80103b4:	4c0c      	ldr	r4, [pc, #48]	; (80103e8 <RadioSetTxGenericConfig+0x304>)
 80103b6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80103ba:	f001 fae3 	bl	8011984 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80103be:	6066      	str	r6, [r4, #4]
    return 0;
 80103c0:	2000      	movs	r0, #0
}
 80103c2:	b006      	add	sp, #24
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 80103c8:	f04f 30ff 	mov.w	r0, #4294967295
 80103cc:	e7f9      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80103ce:	f04f 30ff 	mov.w	r0, #4294967295
 80103d2:	e7f6      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80103d4:	f04f 30ff 	mov.w	r0, #4294967295
 80103d8:	e7f3      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80103da:	f04f 30ff 	mov.w	r0, #4294967295
 80103de:	e7f0      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80103e0:	f04f 30ff 	mov.w	r0, #4294967295
 80103e4:	e7ed      	b.n	80103c2 <RadioSetTxGenericConfig+0x2de>
 80103e6:	bf00      	nop
 80103e8:	20000d90 	.word	0x20000d90
 80103ec:	20000dec 	.word	0x20000dec
 80103f0:	20000d74 	.word	0x20000d74

080103f4 <RadioSetRxGenericConfig>:
{
 80103f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f8:	b086      	sub	sp, #24
 80103fa:	4606      	mov	r6, r0
 80103fc:	460c      	mov	r4, r1
 80103fe:	4615      	mov	r5, r2
 8010400:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8010402:	2300      	movs	r3, #0
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8010408:	f001 fab7 	bl	801197a <RFW_DeInit>
    if( rxContinuous != 0 )
 801040c:	b105      	cbz	r5, 8010410 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 801040e:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8010410:	3d00      	subs	r5, #0
 8010412:	bf18      	it	ne
 8010414:	2501      	movne	r5, #1
 8010416:	4b93      	ldr	r3, [pc, #588]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010418:	705d      	strb	r5, [r3, #1]
    switch( modem )
 801041a:	b136      	cbz	r6, 801042a <RadioSetRxGenericConfig+0x36>
 801041c:	2e01      	cmp	r6, #1
 801041e:	f000 808f 	beq.w	8010540 <RadioSetRxGenericConfig+0x14c>
 8010422:	2000      	movs	r0, #0
}
 8010424:	b006      	add	sp, #24
 8010426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801042a:	68a3      	ldr	r3, [r4, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	f000 810d 	beq.w	801064c <RadioSetRxGenericConfig+0x258>
 8010432:	68e3      	ldr	r3, [r4, #12]
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 810c 	beq.w	8010652 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 801043a:	7fa2      	ldrb	r2, [r4, #30]
 801043c:	2a08      	cmp	r2, #8
 801043e:	f200 810b 	bhi.w	8010658 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8010442:	6921      	ldr	r1, [r4, #16]
 8010444:	a804      	add	r0, sp, #16
 8010446:	f001 fc95 	bl	8011d74 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	3800      	subs	r0, #0
 801044e:	bf18      	it	ne
 8010450:	2001      	movne	r0, #1
 8010452:	f000 fdf5 	bl	8011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010456:	4d83      	ldr	r5, [pc, #524]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010458:	2600      	movs	r6, #0
 801045a:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8010462:	f894 3020 	ldrb.w	r3, [r4, #32]
 8010466:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801046a:	6860      	ldr	r0, [r4, #4]
 801046c:	f001 fa20 	bl	80118b0 <SUBGRF_GetFskBandwidthRegValue>
 8010470:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010474:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8010476:	68e3      	ldr	r3, [r4, #12]
 8010478:	00db      	lsls	r3, r3, #3
 801047a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801047c:	7fe3      	ldrb	r3, [r4, #31]
 801047e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8010480:	7fa3      	ldrb	r3, [r4, #30]
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8010486:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801048a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801048c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8010490:	b973      	cbnz	r3, 80104b0 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8010492:	6961      	ldr	r1, [r4, #20]
 8010494:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8010496:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801049a:	2a02      	cmp	r2, #2
 801049c:	d012      	beq.n	80104c4 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d010      	beq.n	80104c4 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80104a2:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80104a6:	496f      	ldr	r1, [pc, #444]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 80104a8:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80104aa:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80104ac:	754b      	strb	r3, [r1, #21]
 80104ae:	e023      	b.n	80104f8 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	d003      	beq.n	80104bc <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80104b4:	4a6b      	ldr	r2, [pc, #428]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 80104b6:	21ff      	movs	r1, #255	; 0xff
 80104b8:	7591      	strb	r1, [r2, #22]
 80104ba:	e7ec      	b.n	8010496 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80104bc:	4a69      	ldr	r2, [pc, #420]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 80104be:	21ff      	movs	r1, #255	; 0xff
 80104c0:	7591      	strb	r1, [r2, #22]
 80104c2:	e7e8      	b.n	8010496 <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80104c4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80104c8:	f102 030f 	add.w	r3, r2, #15
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d901      	bls.n	80104d6 <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80104d2:	2a01      	cmp	r2, #1
 80104d4:	d131      	bne.n	801053a <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 80104dc:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80104de:	4a62      	ldr	r2, [pc, #392]	; (8010668 <RadioSetRxGenericConfig+0x274>)
 80104e0:	4b62      	ldr	r3, [pc, #392]	; (801066c <RadioSetRxGenericConfig+0x278>)
 80104e2:	6819      	ldr	r1, [r3, #0]
 80104e4:	a801      	add	r0, sp, #4
 80104e6:	f001 fa45 	bl	8011974 <RFW_Init>
 80104ea:	bb30      	cbnz	r0, 801053a <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80104ec:	4b5d      	ldr	r3, [pc, #372]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 80104ee:	2200      	movs	r2, #0
 80104f0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80104f2:	2101      	movs	r1, #1
 80104f4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80104f6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80104f8:	f7ff fa88 	bl	800fa0c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80104fc:	2000      	movs	r0, #0
 80104fe:	f7ff fdb3 	bl	8010068 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010502:	4d58      	ldr	r5, [pc, #352]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010504:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8010508:	f000 ffa8 	bl	801145c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801050c:	f105 000e 	add.w	r0, r5, #14
 8010510:	f001 f82c 	bl	801156c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010514:	a804      	add	r0, sp, #16
 8010516:	f000 fc11 	bl	8010d3c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801051a:	8ba0      	ldrh	r0, [r4, #28]
 801051c:	f000 fbe5 	bl	8010cea <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8010520:	8b20      	ldrh	r0, [r4, #24]
 8010522:	f000 fc28 	bl	8010d76 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8010526:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801052a:	fb03 f707 	mul.w	r7, r3, r7
 801052e:	68a3      	ldr	r3, [r4, #8]
 8010530:	fbb7 f7f3 	udiv	r7, r7, r3
 8010534:	60af      	str	r7, [r5, #8]
    return status;
 8010536:	2000      	movs	r0, #0
        break;
 8010538:	e774      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
                return -1;
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	e771      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8010540:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 808b 	beq.w	801065e <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8010548:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 801054c:	2b01      	cmp	r3, #1
 801054e:	d055      	beq.n	80105fc <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8010550:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8010554:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010556:	3800      	subs	r0, #0
 8010558:	bf18      	it	ne
 801055a:	2001      	movne	r0, #1
 801055c:	f000 fd70 	bl	8011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010560:	b2f8      	uxtb	r0, r7
 8010562:	f000 fd7a 	bl	801105a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010566:	4b3f      	ldr	r3, [pc, #252]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010568:	2201      	movs	r2, #1
 801056a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801056e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8010572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8010576:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801057a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801057e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8010582:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8010586:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801058a:	2b01      	cmp	r3, #1
 801058c:	d03e      	beq.n	801060c <RadioSetRxGenericConfig+0x218>
 801058e:	2b02      	cmp	r3, #2
 8010590:	d041      	beq.n	8010616 <RadioSetRxGenericConfig+0x222>
 8010592:	b3b3      	cbz	r3, 8010602 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010594:	4d33      	ldr	r5, [pc, #204]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010596:	2601      	movs	r6, #1
 8010598:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801059a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801059c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801059e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80105a2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80105a4:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80105a8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80105ac:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80105b0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80105b4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80105b8:	f7ff fa28 	bl	800fa0c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80105bc:	4630      	mov	r0, r6
 80105be:	f7ff fd53 	bl	8010068 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80105c2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80105c6:	f000 ff49 	bl	801145c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80105ca:	f105 000e 	add.w	r0, r5, #14
 80105ce:	f000 ffcd 	bl	801156c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80105d2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80105d6:	42b3      	cmp	r3, r6
 80105d8:	d02d      	beq.n	8010636 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80105da:	f240 7036 	movw	r0, #1846	; 0x736
 80105de:	f000 fb61 	bl	8010ca4 <SUBGRF_ReadRegister>
 80105e2:	f040 0104 	orr.w	r1, r0, #4
 80105e6:	b2c9      	uxtb	r1, r1
 80105e8:	f240 7036 	movw	r0, #1846	; 0x736
 80105ec:	f000 fb4a 	bl	8010c84 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80105f0:	4b1c      	ldr	r3, [pc, #112]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 80105f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105f6:	609a      	str	r2, [r3, #8]
    return status;
 80105f8:	2000      	movs	r0, #0
        break;
 80105fa:	e713      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80105fc:	f894 8014 	ldrb.w	r8, [r4, #20]
 8010600:	e7a8      	b.n	8010554 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8010602:	4b18      	ldr	r3, [pc, #96]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010604:	2200      	movs	r2, #0
 8010606:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801060a:	e7c3      	b.n	8010594 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801060c:	4b15      	ldr	r3, [pc, #84]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 801060e:	2201      	movs	r2, #1
 8010610:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8010614:	e7be      	b.n	8010594 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8010616:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801061a:	3b0b      	subs	r3, #11
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b01      	cmp	r3, #1
 8010620:	d904      	bls.n	801062c <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8010622:	4b10      	ldr	r3, [pc, #64]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 8010624:	2200      	movs	r2, #0
 8010626:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801062a:	e7b3      	b.n	8010594 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801062c:	4b0d      	ldr	r3, [pc, #52]	; (8010664 <RadioSetRxGenericConfig+0x270>)
 801062e:	2201      	movs	r2, #1
 8010630:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8010634:	e7ae      	b.n	8010594 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010636:	f240 7036 	movw	r0, #1846	; 0x736
 801063a:	f000 fb33 	bl	8010ca4 <SUBGRF_ReadRegister>
 801063e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010642:	f240 7036 	movw	r0, #1846	; 0x736
 8010646:	f000 fb1d 	bl	8010c84 <SUBGRF_WriteRegister>
 801064a:	e7d1      	b.n	80105f0 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 801064c:	f04f 30ff 	mov.w	r0, #4294967295
 8010650:	e6e8      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
 8010652:	f04f 30ff 	mov.w	r0, #4294967295
 8010656:	e6e5      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
            return -1;
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	e6e2      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
            return -1;
 801065e:	f04f 30ff 	mov.w	r0, #4294967295
 8010662:	e6df      	b.n	8010424 <RadioSetRxGenericConfig+0x30>
 8010664:	20000d90 	.word	0x20000d90
 8010668:	20000d78 	.word	0x20000d78
 801066c:	20000d74 	.word	0x20000d74

08010670 <RadioSetPublicNetwork>:
{
 8010670:	b510      	push	{r4, lr}
 8010672:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010674:	4b0e      	ldr	r3, [pc, #56]	; (80106b0 <RadioSetPublicNetwork+0x40>)
 8010676:	7318      	strb	r0, [r3, #12]
 8010678:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801067a:	2001      	movs	r0, #1
 801067c:	f7ff fcf4 	bl	8010068 <RadioSetModem>
    if( enable == true )
 8010680:	b154      	cbz	r4, 8010698 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8010682:	2134      	movs	r1, #52	; 0x34
 8010684:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010688:	f000 fafc 	bl	8010c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801068c:	2144      	movs	r1, #68	; 0x44
 801068e:	f240 7041 	movw	r0, #1857	; 0x741
 8010692:	f000 faf7 	bl	8010c84 <SUBGRF_WriteRegister>
}
 8010696:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010698:	2114      	movs	r1, #20
 801069a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801069e:	f000 faf1 	bl	8010c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80106a2:	2124      	movs	r1, #36	; 0x24
 80106a4:	f240 7041 	movw	r0, #1857	; 0x741
 80106a8:	f000 faec 	bl	8010c84 <SUBGRF_WriteRegister>
}
 80106ac:	e7f3      	b.n	8010696 <RadioSetPublicNetwork+0x26>
 80106ae:	bf00      	nop
 80106b0:	20000d90 	.word	0x20000d90

080106b4 <RadioSetTxConfig>:
{
 80106b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b8:	b083      	sub	sp, #12
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	4691      	mov	r9, r2
 80106c0:	461f      	mov	r7, r3
 80106c2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80106c6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80106ca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 80106ce:	f001 f954 	bl	801197a <RFW_DeInit>
    switch( modem )
 80106d2:	2c01      	cmp	r4, #1
 80106d4:	d05d      	beq.n	8010792 <RadioSetTxConfig+0xde>
 80106d6:	2c04      	cmp	r4, #4
 80106d8:	f000 80aa 	beq.w	8010830 <RadioSetTxConfig+0x17c>
 80106dc:	b19c      	cbz	r4, 8010706 <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80106de:	4628      	mov	r0, r5
 80106e0:	f001 f86e 	bl	80117c0 <SUBGRF_SetRfTxPower>
 80106e4:	4c5a      	ldr	r4, [pc, #360]	; (8010850 <RadioSetTxConfig+0x19c>)
 80106e6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80106ea:	210e      	movs	r1, #14
 80106ec:	f640 101f 	movw	r0, #2335	; 0x91f
 80106f0:	f000 fac8 	bl	8010c84 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80106f4:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80106f8:	f001 f944 	bl	8011984 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80106fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106fe:	6063      	str	r3, [r4, #4]
}
 8010700:	b003      	add	sp, #12
 8010702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010706:	4c52      	ldr	r4, [pc, #328]	; (8010850 <RadioSetTxConfig+0x19c>)
 8010708:	f04f 0b00 	mov.w	fp, #0
 801070c:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010712:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010714:	230b      	movs	r3, #11
 8010716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801071a:	4638      	mov	r0, r7
 801071c:	f001 f8c8 	bl	80118b0 <SUBGRF_GetFskBandwidthRegValue>
 8010720:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010724:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010728:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801072c:	00f6      	lsls	r6, r6, #3
 801072e:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010730:	2304      	movs	r3, #4
 8010732:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010734:	2318      	movs	r3, #24
 8010736:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010738:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801073c:	f088 0801 	eor.w	r8, r8, #1
 8010740:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8010744:	f1ba 0f00 	cmp.w	sl, #0
 8010748:	d01f      	beq.n	801078a <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801074a:	22f2      	movs	r2, #242	; 0xf2
 801074c:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801074e:	4c40      	ldr	r4, [pc, #256]	; (8010850 <RadioSetTxConfig+0x19c>)
 8010750:	2301      	movs	r3, #1
 8010752:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010754:	f7ff f95a 	bl	800fa0c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8010758:	2000      	movs	r0, #0
 801075a:	f7ff fc85 	bl	8010068 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801075e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010762:	f000 fe7b 	bl	801145c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010766:	f104 000e 	add.w	r0, r4, #14
 801076a:	f000 feff 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801076e:	4a39      	ldr	r2, [pc, #228]	; (8010854 <RadioSetTxConfig+0x1a0>)
 8010770:	466b      	mov	r3, sp
 8010772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010776:	e883 0003 	stmia.w	r3, {r0, r1}
 801077a:	4618      	mov	r0, r3
 801077c:	f000 fade 	bl	8010d3c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010780:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010784:	f000 fab1 	bl	8010cea <SUBGRF_SetWhiteningSeed>
            break;
 8010788:	e7a9      	b.n	80106de <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801078a:	4b31      	ldr	r3, [pc, #196]	; (8010850 <RadioSetTxConfig+0x19c>)
 801078c:	2201      	movs	r2, #1
 801078e:	75da      	strb	r2, [r3, #23]
 8010790:	e7dd      	b.n	801074e <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010792:	4a2f      	ldr	r2, [pc, #188]	; (8010850 <RadioSetTxConfig+0x19c>)
 8010794:	2301      	movs	r3, #1
 8010796:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801079a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80107a2:	492d      	ldr	r1, [pc, #180]	; (8010858 <RadioSetTxConfig+0x1a4>)
 80107a4:	5dc9      	ldrb	r1, [r1, r7]
 80107a6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80107aa:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80107ae:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80107b2:	b91f      	cbnz	r7, 80107bc <RadioSetTxConfig+0x108>
 80107b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107b6:	3a0b      	subs	r2, #11
 80107b8:	2a01      	cmp	r2, #1
 80107ba:	d92b      	bls.n	8010814 <RadioSetTxConfig+0x160>
 80107bc:	2f01      	cmp	r7, #1
 80107be:	d026      	beq.n	801080e <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80107c0:	4a23      	ldr	r2, [pc, #140]	; (8010850 <RadioSetTxConfig+0x19c>)
 80107c2:	2100      	movs	r1, #0
 80107c4:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80107c8:	4a21      	ldr	r2, [pc, #132]	; (8010850 <RadioSetTxConfig+0x19c>)
 80107ca:	2101      	movs	r1, #1
 80107cc:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80107ce:	3b05      	subs	r3, #5
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	428b      	cmp	r3, r1
 80107d4:	d923      	bls.n	801081e <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80107d6:	4b1e      	ldr	r3, [pc, #120]	; (8010850 <RadioSetTxConfig+0x19c>)
 80107d8:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80107da:	4c1d      	ldr	r4, [pc, #116]	; (8010850 <RadioSetTxConfig+0x19c>)
 80107dc:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80107e0:	4b1e      	ldr	r3, [pc, #120]	; (801085c <RadioSetTxConfig+0x1a8>)
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80107e6:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80107ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80107ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80107f2:	f7ff f90b 	bl	800fa0c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80107f6:	2001      	movs	r0, #1
 80107f8:	f7ff fc36 	bl	8010068 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80107fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010800:	f000 fe2c 	bl	801145c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010804:	f104 000e 	add.w	r0, r4, #14
 8010808:	f000 feb0 	bl	801156c <SUBGRF_SetPacketParams>
            break;
 801080c:	e767      	b.n	80106de <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801080e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010810:	2a0c      	cmp	r2, #12
 8010812:	d1d5      	bne.n	80107c0 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010814:	4a0e      	ldr	r2, [pc, #56]	; (8010850 <RadioSetTxConfig+0x19c>)
 8010816:	2101      	movs	r1, #1
 8010818:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801081c:	e7d4      	b.n	80107c8 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 801081e:	2e0b      	cmp	r6, #11
 8010820:	d803      	bhi.n	801082a <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010822:	4613      	mov	r3, r2
 8010824:	220c      	movs	r2, #12
 8010826:	839a      	strh	r2, [r3, #28]
 8010828:	e7d7      	b.n	80107da <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801082a:	4b09      	ldr	r3, [pc, #36]	; (8010850 <RadioSetTxConfig+0x19c>)
 801082c:	839e      	strh	r6, [r3, #28]
 801082e:	e7d4      	b.n	80107da <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8010830:	2004      	movs	r0, #4
 8010832:	f7ff fc19 	bl	8010068 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8010836:	4806      	ldr	r0, [pc, #24]	; (8010850 <RadioSetTxConfig+0x19c>)
 8010838:	2302      	movs	r3, #2
 801083a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801083e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010840:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8010842:	2316      	movs	r3, #22
 8010844:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010848:	3038      	adds	r0, #56	; 0x38
 801084a:	f000 fe07 	bl	801145c <SUBGRF_SetModulationParams>
            break;
 801084e:	e746      	b.n	80106de <RadioSetTxConfig+0x2a>
 8010850:	20000d90 	.word	0x20000d90
 8010854:	08012860 	.word	0x08012860
 8010858:	08013574 	.word	0x08013574
 801085c:	2000010c 	.word	0x2000010c

08010860 <RadioSetRxConfig>:
{
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	b087      	sub	sp, #28
 8010866:	4604      	mov	r4, r0
 8010868:	460e      	mov	r6, r1
 801086a:	4615      	mov	r5, r2
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8010872:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8010876:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801087a:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 801087e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8010882:	4bb0      	ldr	r3, [pc, #704]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010884:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8010888:	f001 f877 	bl	801197a <RFW_DeInit>
    if( rxContinuous == true )
 801088c:	f1b8 0f00 	cmp.w	r8, #0
 8010890:	d001      	beq.n	8010896 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8010892:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8010896:	b16f      	cbz	r7, 80108b4 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8010898:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801089c:	4baa      	ldr	r3, [pc, #680]	; (8010b48 <RadioSetRxConfig+0x2e8>)
 801089e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80108a0:	2c01      	cmp	r4, #1
 80108a2:	f000 80d2 	beq.w	8010a4a <RadioSetRxConfig+0x1ea>
 80108a6:	2c05      	cmp	r4, #5
 80108a8:	d008      	beq.n	80108bc <RadioSetRxConfig+0x5c>
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d07c      	beq.n	80109a8 <RadioSetRxConfig+0x148>
}
 80108ae:	b007      	add	sp, #28
 80108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80108b4:	4ba4      	ldr	r3, [pc, #656]	; (8010b48 <RadioSetRxConfig+0x2e8>)
 80108b6:	22ff      	movs	r2, #255	; 0xff
 80108b8:	701a      	strb	r2, [r3, #0]
 80108ba:	e7f1      	b.n	80108a0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80108bc:	2001      	movs	r0, #1
 80108be:	f000 fbbf 	bl	8011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80108c2:	4ca0      	ldr	r4, [pc, #640]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 80108c4:	2700      	movs	r7, #0
 80108c6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80108ca:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80108cc:	2309      	movs	r3, #9
 80108ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80108d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80108d6:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80108d8:	4630      	mov	r0, r6
 80108da:	f000 ffe9 	bl	80118b0 <SUBGRF_GetFskBandwidthRegValue>
 80108de:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80108e2:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80108e4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80108e8:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80108ec:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80108ee:	2310      	movs	r3, #16
 80108f0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80108f2:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80108f4:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80108f6:	4b94      	ldr	r3, [pc, #592]	; (8010b48 <RadioSetRxConfig+0x2e8>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80108fc:	2301      	movs	r3, #1
 80108fe:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8010900:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8010902:	2005      	movs	r0, #5
 8010904:	f7ff fbb0 	bl	8010068 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010908:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801090c:	f000 fda6 	bl	801145c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010910:	f104 000e 	add.w	r0, r4, #14
 8010914:	f000 fe2a 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010918:	ab02      	add	r3, sp, #8
 801091a:	4a8c      	ldr	r2, [pc, #560]	; (8010b4c <RadioSetRxConfig+0x2ec>)
 801091c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010920:	e883 0003 	stmia.w	r3, {r0, r1}
 8010924:	4618      	mov	r0, r3
 8010926:	f000 fa09 	bl	8010d3c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801092a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801092e:	f000 f9dc 	bl	8010cea <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8010932:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8010936:	f7fe ffe9 	bl	800f90c <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801093a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 801093e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8010942:	f7fe ffe7 	bl	800f914 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8010946:	2104      	movs	r1, #4
 8010948:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801094c:	f7fe ffe2 	bl	800f914 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8010950:	f640 009b 	movw	r0, #2203	; 0x89b
 8010954:	f7fe ffda 	bl	800f90c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8010958:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801095c:	f041 0108 	orr.w	r1, r1, #8
 8010960:	f640 009b 	movw	r0, #2203	; 0x89b
 8010964:	f7fe ffd6 	bl	800f914 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8010968:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801096c:	f7fe ffce 	bl	800f90c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8010970:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8010974:	f041 0118 	orr.w	r1, r1, #24
 8010978:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801097c:	f7fe ffca 	bl	800f914 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8010980:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010984:	f7fe ffc2 	bl	800f90c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8010988:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801098c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8010990:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010994:	f7fe ffbe 	bl	800f914 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010998:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801099c:	fb03 fa0a 	mul.w	sl, r3, sl
 80109a0:	fbba f5f5 	udiv	r5, sl, r5
 80109a4:	60a5      	str	r5, [r4, #8]
            break;
 80109a6:	e782      	b.n	80108ae <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80109a8:	2000      	movs	r0, #0
 80109aa:	f000 fb49 	bl	8011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80109ae:	4c65      	ldr	r4, [pc, #404]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 80109b0:	f04f 0800 	mov.w	r8, #0
 80109b4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80109b8:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80109ba:	230b      	movs	r3, #11
 80109bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80109c0:	4630      	mov	r0, r6
 80109c2:	f000 ff75 	bl	80118b0 <SUBGRF_GetFskBandwidthRegValue>
 80109c6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80109ca:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80109ce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80109d2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80109d6:	2304      	movs	r3, #4
 80109d8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80109da:	2318      	movs	r3, #24
 80109dc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80109de:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80109e2:	f087 0701 	eor.w	r7, r7, #1
 80109e6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80109e8:	4b57      	ldr	r3, [pc, #348]	; (8010b48 <RadioSetRxConfig+0x2e8>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80109ee:	f1bb 0f00 	cmp.w	fp, #0
 80109f2:	d026      	beq.n	8010a42 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80109f4:	22f2      	movs	r2, #242	; 0xf2
 80109f6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80109f8:	4c52      	ldr	r4, [pc, #328]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 80109fa:	2301      	movs	r3, #1
 80109fc:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80109fe:	f7ff f805 	bl	800fa0c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010a02:	2000      	movs	r0, #0
 8010a04:	f7ff fb30 	bl	8010068 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010a08:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010a0c:	f000 fd26 	bl	801145c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010a10:	f104 000e 	add.w	r0, r4, #14
 8010a14:	f000 fdaa 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010a18:	4a4d      	ldr	r2, [pc, #308]	; (8010b50 <RadioSetRxConfig+0x2f0>)
 8010a1a:	ab04      	add	r3, sp, #16
 8010a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a20:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 f989 	bl	8010d3c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010a2e:	f000 f95c 	bl	8010cea <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010a32:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010a36:	fb03 fa0a 	mul.w	sl, r3, sl
 8010a3a:	fbba f5f5 	udiv	r5, sl, r5
 8010a3e:	60a5      	str	r5, [r4, #8]
            break;
 8010a40:	e735      	b.n	80108ae <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010a42:	4b40      	ldr	r3, [pc, #256]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a44:	2201      	movs	r2, #1
 8010a46:	75da      	strb	r2, [r3, #23]
 8010a48:	e7d6      	b.n	80109f8 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f000 faf8 	bl	8011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010a50:	4a3c      	ldr	r2, [pc, #240]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a52:	2301      	movs	r3, #1
 8010a54:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010a58:	b2eb      	uxtb	r3, r5
 8010a5a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010a5e:	493d      	ldr	r1, [pc, #244]	; (8010b54 <RadioSetRxConfig+0x2f4>)
 8010a60:	5d89      	ldrb	r1, [r1, r6]
 8010a62:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8010a66:	9901      	ldr	r1, [sp, #4]
 8010a68:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010a6c:	b91e      	cbnz	r6, 8010a76 <RadioSetRxConfig+0x216>
 8010a6e:	f1a5 020b 	sub.w	r2, r5, #11
 8010a72:	2a01      	cmp	r2, #1
 8010a74:	d94b      	bls.n	8010b0e <RadioSetRxConfig+0x2ae>
 8010a76:	2e01      	cmp	r6, #1
 8010a78:	d047      	beq.n	8010b0a <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010a7a:	4a32      	ldr	r2, [pc, #200]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010a82:	4a30      	ldr	r2, [pc, #192]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a84:	2101      	movs	r1, #1
 8010a86:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010a88:	3b05      	subs	r3, #5
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	428b      	cmp	r3, r1
 8010a8e:	d943      	bls.n	8010b18 <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010a90:	4b2c      	ldr	r3, [pc, #176]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a92:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010a96:	4c2b      	ldr	r4, [pc, #172]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010a98:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010a9a:	4b2b      	ldr	r3, [pc, #172]	; (8010b48 <RadioSetRxConfig+0x2e8>)
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010aa0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010aa4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8010aa8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010aac:	f7fe ffae 	bl	800fa0c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	f7ff fad9 	bl	8010068 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010ab6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010aba:	f000 fccf 	bl	801145c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010abe:	f104 000e 	add.w	r0, r4, #14
 8010ac2:	f000 fd53 	bl	801156c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010ac6:	fa5f f08a 	uxtb.w	r0, sl
 8010aca:	f000 fac6 	bl	801105a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8010ace:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8010ad2:	f000 f8e7 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010ad6:	f000 0101 	and.w	r1, r0, #1
 8010ada:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8010ade:	f000 f8d1 	bl	8010c84 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010ae2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d021      	beq.n	8010b2e <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010aea:	f240 7036 	movw	r0, #1846	; 0x736
 8010aee:	f000 f8d9 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010af2:	f040 0104 	orr.w	r1, r0, #4
 8010af6:	b2c9      	uxtb	r1, r1
 8010af8:	f240 7036 	movw	r0, #1846	; 0x736
 8010afc:	f000 f8c2 	bl	8010c84 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010b00:	4b10      	ldr	r3, [pc, #64]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b06:	609a      	str	r2, [r3, #8]
}
 8010b08:	e6d1      	b.n	80108ae <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010b0a:	2d0c      	cmp	r5, #12
 8010b0c:	d1b5      	bne.n	8010a7a <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010b0e:	4a0d      	ldr	r2, [pc, #52]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010b10:	2101      	movs	r1, #1
 8010b12:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010b16:	e7b4      	b.n	8010a82 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 8010b18:	f1b9 0f0b 	cmp.w	r9, #11
 8010b1c:	d803      	bhi.n	8010b26 <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010b1e:	4613      	mov	r3, r2
 8010b20:	220c      	movs	r2, #12
 8010b22:	839a      	strh	r2, [r3, #28]
 8010b24:	e7b7      	b.n	8010a96 <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010b26:	4b07      	ldr	r3, [pc, #28]	; (8010b44 <RadioSetRxConfig+0x2e4>)
 8010b28:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010b2c:	e7b3      	b.n	8010a96 <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010b2e:	f240 7036 	movw	r0, #1846	; 0x736
 8010b32:	f000 f8b7 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010b36:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010b3a:	f240 7036 	movw	r0, #1846	; 0x736
 8010b3e:	f000 f8a1 	bl	8010c84 <SUBGRF_WriteRegister>
 8010b42:	e7dd      	b.n	8010b00 <RadioSetRxConfig+0x2a0>
 8010b44:	20000d90 	.word	0x20000d90
 8010b48:	2000010c 	.word	0x2000010c
 8010b4c:	08012868 	.word	0x08012868
 8010b50:	08012860 	.word	0x08012860
 8010b54:	08013574 	.word	0x08013574

08010b58 <RadioIsChannelFree>:
{
 8010b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b5a:	b08b      	sub	sp, #44	; 0x2c
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	460f      	mov	r7, r1
 8010b60:	4616      	mov	r6, r2
 8010b62:	461d      	mov	r5, r3
    RadioStandby( );
 8010b64:	f7fe ff52 	bl	800fa0c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8010b68:	2000      	movs	r0, #0
 8010b6a:	f7ff fa7d 	bl	8010068 <RadioSetModem>
    RadioSetChannel( freq );
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7ff f944 	bl	800fdfc <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8010b74:	2301      	movs	r3, #1
 8010b76:	9309      	str	r3, [sp, #36]	; 0x24
 8010b78:	2400      	movs	r4, #0
 8010b7a:	9408      	str	r4, [sp, #32]
 8010b7c:	9407      	str	r4, [sp, #28]
 8010b7e:	9406      	str	r4, [sp, #24]
 8010b80:	9405      	str	r4, [sp, #20]
 8010b82:	9404      	str	r4, [sp, #16]
 8010b84:	9403      	str	r4, [sp, #12]
 8010b86:	9402      	str	r4, [sp, #8]
 8010b88:	2303      	movs	r3, #3
 8010b8a:	9301      	str	r3, [sp, #4]
 8010b8c:	9700      	str	r7, [sp, #0]
 8010b8e:	4623      	mov	r3, r4
 8010b90:	f44f 7216 	mov.w	r2, #600	; 0x258
 8010b94:	4639      	mov	r1, r7
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7ff fe62 	bl	8010860 <RadioSetRxConfig>
    RadioRx( 0 );
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f7ff f945 	bl	800fe2c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8010ba2:	f7ff f8f7 	bl	800fd94 <RadioGetWakeupTime>
 8010ba6:	f7f0 ff0f 	bl	80019c8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8010baa:	f001 fae1 	bl	8012170 <UTIL_TIMER_GetCurrentTime>
 8010bae:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f001 fae7 	bl	8012184 <UTIL_TIMER_GetElapsedTime>
 8010bb6:	42a8      	cmp	r0, r5
 8010bb8:	d206      	bcs.n	8010bc8 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f7ff f8f7 	bl	800fdae <RadioRssi>
        if( rssi > rssiThresh )
 8010bc0:	42b0      	cmp	r0, r6
 8010bc2:	ddf5      	ble.n	8010bb0 <RadioIsChannelFree+0x58>
            status = false;
 8010bc4:	2400      	movs	r4, #0
 8010bc6:	e000      	b.n	8010bca <RadioIsChannelFree+0x72>
    bool status = true;
 8010bc8:	2401      	movs	r4, #1
    RadioStandby( );
 8010bca:	f7fe ff1f 	bl	800fa0c <RadioStandby>
}
 8010bce:	4620      	mov	r0, r4
 8010bd0:	b00b      	add	sp, #44	; 0x2c
 8010bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010bd4 <RadioInit>:
{
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	b082      	sub	sp, #8
    RadioEvents = events;
 8010bd8:	4b1d      	ldr	r3, [pc, #116]	; (8010c50 <RadioInit+0x7c>)
 8010bda:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010bdc:	4d1d      	ldr	r5, [pc, #116]	; (8010c54 <RadioInit+0x80>)
 8010bde:	2400      	movs	r4, #0
 8010be0:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8010be2:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8010be4:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010be6:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8010be8:	481b      	ldr	r0, [pc, #108]	; (8010c58 <RadioInit+0x84>)
 8010bea:	f000 fb27 	bl	801123c <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010bee:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010bf0:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8010bf2:	f000 fa53 	bl	801109c <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f000 fd29 	bl	8011650 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010bfe:	2204      	movs	r2, #4
 8010c00:	4621      	mov	r1, r4
 8010c02:	2001      	movs	r0, #1
 8010c04:	f000 fb9c 	bl	8011340 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010c08:	4623      	mov	r3, r4
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010c10:	4608      	mov	r0, r1
 8010c12:	f000 fada 	bl	80111ca <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8010c16:	f7ff f941 	bl	800fe9c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8010c1a:	4e10      	ldr	r6, [pc, #64]	; (8010c5c <RadioInit+0x88>)
 8010c1c:	9400      	str	r4, [sp, #0]
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <RadioInit+0x8c>)
 8010c20:	4622      	mov	r2, r4
 8010c22:	f04f 31ff 	mov.w	r1, #4294967295
 8010c26:	4630      	mov	r0, r6
 8010c28:	f001 fa84 	bl	8012134 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8010c2c:	4d0d      	ldr	r5, [pc, #52]	; (8010c64 <RadioInit+0x90>)
 8010c2e:	9400      	str	r4, [sp, #0]
 8010c30:	4b0d      	ldr	r3, [pc, #52]	; (8010c68 <RadioInit+0x94>)
 8010c32:	4622      	mov	r2, r4
 8010c34:	f04f 31ff 	mov.w	r1, #4294967295
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f001 fa7b 	bl	8012134 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8010c3e:	4630      	mov	r0, r6
 8010c40:	f001 fad6 	bl	80121f0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8010c44:	4628      	mov	r0, r5
 8010c46:	f001 fad3 	bl	80121f0 <UTIL_TIMER_Stop>
}
 8010c4a:	b002      	add	sp, #8
 8010c4c:	bd70      	pop	{r4, r5, r6, pc}
 8010c4e:	bf00      	nop
 8010c50:	20000d74 	.word	0x20000d74
 8010c54:	20000d90 	.word	0x20000d90
 8010c58:	0800fd81 	.word	0x0800fd81
 8010c5c:	20000dec 	.word	0x20000dec
 8010c60:	0800f7ed 	.word	0x0800f7ed
 8010c64:	20000d78 	.word	0x20000d78
 8010c68:	0800f815 	.word	0x0800f815

08010c6c <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8010c6c:	4b01      	ldr	r3, [pc, #4]	; (8010c74 <SUBGRF_GetOperatingMode+0x8>)
 8010c6e:	7818      	ldrb	r0, [r3, #0]
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	20000e0a 	.word	0x20000e0a

08010c78 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8010c78:	4b01      	ldr	r3, [pc, #4]	; (8010c80 <SUBGRF_GetPacketType+0x8>)
 8010c7a:	7818      	ldrb	r0, [r3, #0]
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	20000e0b 	.word	0x20000e0b

08010c84 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8010c84:	b500      	push	{lr}
 8010c86:	b083      	sub	sp, #12
 8010c88:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	f10d 0207 	add.w	r2, sp, #7
 8010c92:	4601      	mov	r1, r0
 8010c94:	4802      	ldr	r0, [pc, #8]	; (8010ca0 <SUBGRF_WriteRegister+0x1c>)
 8010c96:	f7f4 fccb 	bl	8005630 <HAL_SUBGHZ_WriteRegisters>
}
 8010c9a:	b003      	add	sp, #12
 8010c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ca0:	200001d4 	.word	0x200001d4

08010ca4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8010ca4:	b500      	push	{lr}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8010caa:	2301      	movs	r3, #1
 8010cac:	f10d 0207 	add.w	r2, sp, #7
 8010cb0:	4803      	ldr	r0, [pc, #12]	; (8010cc0 <SUBGRF_ReadRegister+0x1c>)
 8010cb2:	f7f4 fd0d 	bl	80056d0 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8010cb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010cba:	b003      	add	sp, #12
 8010cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cc0:	200001d4 	.word	0x200001d4

08010cc4 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8010cc4:	b510      	push	{r4, lr}
 8010cc6:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8010cc8:	f7f1 fea0 	bl	8002a0c <RBI_IsDCDC>
 8010ccc:	2801      	cmp	r0, #1
 8010cce:	d000      	beq.n	8010cd2 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8010cd0:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8010cd2:	f640 1023 	movw	r0, #2339	; 0x923
 8010cd6:	f7ff ffe5 	bl	8010ca4 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8010cda:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010cde:	4321      	orrs	r1, r4
 8010ce0:	f640 1023 	movw	r0, #2339	; 0x923
 8010ce4:	f7ff ffce 	bl	8010c84 <SUBGRF_WriteRegister>
}
 8010ce8:	e7f2      	b.n	8010cd0 <Radio_SMPS_Set+0xc>

08010cea <SUBGRF_SetWhiteningSeed>:
{
 8010cea:	b510      	push	{r4, lr}
 8010cec:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010cee:	f7ff ffc3 	bl	8010c78 <SUBGRF_GetPacketType>
 8010cf2:	b100      	cbz	r0, 8010cf6 <SUBGRF_SetWhiteningSeed+0xc>
}
 8010cf4:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8010cf6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010cfa:	f7ff ffd3 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010cfe:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8010d02:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8010d06:	4301      	orrs	r1, r0
 8010d08:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010d0c:	f7ff ffba 	bl	8010c84 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010d10:	b2e1      	uxtb	r1, r4
 8010d12:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8010d16:	f7ff ffb5 	bl	8010c84 <SUBGRF_WriteRegister>
}
 8010d1a:	e7eb      	b.n	8010cf4 <SUBGRF_SetWhiteningSeed+0xa>

08010d1c <SUBGRF_WriteRegisters>:
{
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d20:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010d24:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8010d26:	460a      	mov	r2, r1
 8010d28:	4601      	mov	r1, r0
 8010d2a:	4803      	ldr	r0, [pc, #12]	; (8010d38 <SUBGRF_WriteRegisters+0x1c>)
 8010d2c:	f7f4 fc80 	bl	8005630 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d30:	f384 8810 	msr	PRIMASK, r4
}
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	bf00      	nop
 8010d38:	200001d4 	.word	0x200001d4

08010d3c <SUBGRF_SetSyncWord>:
{
 8010d3c:	b508      	push	{r3, lr}
 8010d3e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010d40:	2208      	movs	r2, #8
 8010d42:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8010d46:	f7ff ffe9 	bl	8010d1c <SUBGRF_WriteRegisters>
}
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	bd08      	pop	{r3, pc}

08010d4e <SUBGRF_SetCrcSeed>:
{
 8010d4e:	b500      	push	{lr}
 8010d50:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8010d52:	0a03      	lsrs	r3, r0, #8
 8010d54:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010d58:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010d5c:	f7ff ff8c 	bl	8010c78 <SUBGRF_GetPacketType>
 8010d60:	b110      	cbz	r0, 8010d68 <SUBGRF_SetCrcSeed+0x1a>
}
 8010d62:	b003      	add	sp, #12
 8010d64:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8010d68:	2202      	movs	r2, #2
 8010d6a:	a901      	add	r1, sp, #4
 8010d6c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010d70:	f7ff ffd4 	bl	8010d1c <SUBGRF_WriteRegisters>
}
 8010d74:	e7f5      	b.n	8010d62 <SUBGRF_SetCrcSeed+0x14>

08010d76 <SUBGRF_SetCrcPolynomial>:
{
 8010d76:	b500      	push	{lr}
 8010d78:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8010d7a:	0a03      	lsrs	r3, r0, #8
 8010d7c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010d80:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010d84:	f7ff ff78 	bl	8010c78 <SUBGRF_GetPacketType>
 8010d88:	b110      	cbz	r0, 8010d90 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8010d8a:	b003      	add	sp, #12
 8010d8c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010d90:	2202      	movs	r2, #2
 8010d92:	a901      	add	r1, sp, #4
 8010d94:	f240 60be 	movw	r0, #1726	; 0x6be
 8010d98:	f7ff ffc0 	bl	8010d1c <SUBGRF_WriteRegisters>
}
 8010d9c:	e7f5      	b.n	8010d8a <SUBGRF_SetCrcPolynomial+0x14>
	...

08010da0 <SUBGRF_ReadRegisters>:
{
 8010da0:	b510      	push	{r4, lr}
 8010da2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010da4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010da8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010daa:	460a      	mov	r2, r1
 8010dac:	4601      	mov	r1, r0
 8010dae:	4803      	ldr	r0, [pc, #12]	; (8010dbc <SUBGRF_ReadRegisters+0x1c>)
 8010db0:	f7f4 fc8e 	bl	80056d0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010db4:	f384 8810 	msr	PRIMASK, r4
}
 8010db8:	bd10      	pop	{r4, pc}
 8010dba:	bf00      	nop
 8010dbc:	200001d4 	.word	0x200001d4

08010dc0 <SUBGRF_WriteBuffer>:
{
 8010dc0:	b510      	push	{r4, lr}
 8010dc2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010dc8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010dca:	460a      	mov	r2, r1
 8010dcc:	4601      	mov	r1, r0
 8010dce:	4803      	ldr	r0, [pc, #12]	; (8010ddc <SUBGRF_WriteBuffer+0x1c>)
 8010dd0:	f7f4 fddc 	bl	800598c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dd4:	f384 8810 	msr	PRIMASK, r4
}
 8010dd8:	bd10      	pop	{r4, pc}
 8010dda:	bf00      	nop
 8010ddc:	200001d4 	.word	0x200001d4

08010de0 <SUBGRF_SetPayload>:
{
 8010de0:	b508      	push	{r3, lr}
 8010de2:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010de4:	4601      	mov	r1, r0
 8010de6:	2000      	movs	r0, #0
 8010de8:	f7ff ffea 	bl	8010dc0 <SUBGRF_WriteBuffer>
}
 8010dec:	bd08      	pop	{r3, pc}
	...

08010df0 <SUBGRF_ReadBuffer>:
{
 8010df0:	b510      	push	{r4, lr}
 8010df2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010df4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010df8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8010dfa:	460a      	mov	r2, r1
 8010dfc:	4601      	mov	r1, r0
 8010dfe:	4803      	ldr	r0, [pc, #12]	; (8010e0c <SUBGRF_ReadBuffer+0x1c>)
 8010e00:	f7f4 fe0e 	bl	8005a20 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e04:	f384 8810 	msr	PRIMASK, r4
}
 8010e08:	bd10      	pop	{r4, pc}
 8010e0a:	bf00      	nop
 8010e0c:	200001d4 	.word	0x200001d4

08010e10 <SUBGRF_WriteCommand>:
{
 8010e10:	b510      	push	{r4, lr}
 8010e12:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e14:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e18:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8010e1a:	460a      	mov	r2, r1
 8010e1c:	4601      	mov	r1, r0
 8010e1e:	4803      	ldr	r0, [pc, #12]	; (8010e2c <SUBGRF_WriteCommand+0x1c>)
 8010e20:	f7f4 fcaa 	bl	8005778 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e24:	f384 8810 	msr	PRIMASK, r4
}
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	bf00      	nop
 8010e2c:	200001d4 	.word	0x200001d4

08010e30 <SUBGRF_SetSleep>:
{
 8010e30:	b510      	push	{r4, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8010e36:	2000      	movs	r0, #0
 8010e38:	f7f1 fda4 	bl	8002984 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010e3c:	2002      	movs	r0, #2
 8010e3e:	f7ff ff41 	bl	8010cc4 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010e42:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010e46:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010e4a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010e4c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010e50:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010e52:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8010e56:	2201      	movs	r2, #1
 8010e58:	f10d 0107 	add.w	r1, sp, #7
 8010e5c:	2084      	movs	r0, #132	; 0x84
 8010e5e:	f7ff ffd7 	bl	8010e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010e62:	4b02      	ldr	r3, [pc, #8]	; (8010e6c <SUBGRF_SetSleep+0x3c>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
}
 8010e68:	b002      	add	sp, #8
 8010e6a:	bd10      	pop	{r4, pc}
 8010e6c:	20000e0a 	.word	0x20000e0a

08010e70 <SUBGRF_SetStandby>:
{
 8010e70:	b500      	push	{lr}
 8010e72:	b083      	sub	sp, #12
 8010e74:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010e78:	2201      	movs	r2, #1
 8010e7a:	f10d 0107 	add.w	r1, sp, #7
 8010e7e:	2080      	movs	r0, #128	; 0x80
 8010e80:	f7ff ffc6 	bl	8010e10 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e88:	b92b      	cbnz	r3, 8010e96 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8010e8a:	4b05      	ldr	r3, [pc, #20]	; (8010ea0 <SUBGRF_SetStandby+0x30>)
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	701a      	strb	r2, [r3, #0]
}
 8010e90:	b003      	add	sp, #12
 8010e92:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8010e96:	4b02      	ldr	r3, [pc, #8]	; (8010ea0 <SUBGRF_SetStandby+0x30>)
 8010e98:	2202      	movs	r2, #2
 8010e9a:	701a      	strb	r2, [r3, #0]
}
 8010e9c:	e7f8      	b.n	8010e90 <SUBGRF_SetStandby+0x20>
 8010e9e:	bf00      	nop
 8010ea0:	20000e0a 	.word	0x20000e0a

08010ea4 <SUBGRF_SetTx>:
{
 8010ea4:	b500      	push	{lr}
 8010ea6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010ea8:	4b0a      	ldr	r3, [pc, #40]	; (8010ed4 <SUBGRF_SetTx+0x30>)
 8010eaa:	2204      	movs	r2, #4
 8010eac:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010eae:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010eb2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010eb6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010eba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010ebe:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010ec2:	2203      	movs	r2, #3
 8010ec4:	a901      	add	r1, sp, #4
 8010ec6:	2083      	movs	r0, #131	; 0x83
 8010ec8:	f7ff ffa2 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8010ecc:	b003      	add	sp, #12
 8010ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ed2:	bf00      	nop
 8010ed4:	20000e0a 	.word	0x20000e0a

08010ed8 <SUBGRF_SendPayload>:
{
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010edc:	f7ff ff80 	bl	8010de0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f7ff ffdf 	bl	8010ea4 <SUBGRF_SetTx>
}
 8010ee6:	bd10      	pop	{r4, pc}

08010ee8 <SUBGRF_SetRx>:
{
 8010ee8:	b500      	push	{lr}
 8010eea:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8010eec:	4b0a      	ldr	r3, [pc, #40]	; (8010f18 <SUBGRF_SetRx+0x30>)
 8010eee:	2205      	movs	r2, #5
 8010ef0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010ef2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010ef6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010efa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010efe:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010f02:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010f06:	2203      	movs	r2, #3
 8010f08:	a901      	add	r1, sp, #4
 8010f0a:	2082      	movs	r0, #130	; 0x82
 8010f0c:	f7ff ff80 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8010f10:	b003      	add	sp, #12
 8010f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f16:	bf00      	nop
 8010f18:	20000e0a 	.word	0x20000e0a

08010f1c <SUBGRF_GetRandom>:
{
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8010f20:	2600      	movs	r6, #0
 8010f22:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010f24:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010f28:	f7ff febc 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010f2c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010f2e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8010f32:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010f36:	f7ff fea5 	bl	8010c84 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010f3a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010f3e:	f7ff feb1 	bl	8010ca4 <SUBGRF_ReadRegister>
 8010f42:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010f44:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8010f48:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010f4c:	f7ff fe9a 	bl	8010c84 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010f50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010f54:	f7ff ffc8 	bl	8010ee8 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010f58:	2204      	movs	r2, #4
 8010f5a:	eb0d 0102 	add.w	r1, sp, r2
 8010f5e:	f640 0019 	movw	r0, #2073	; 0x819
 8010f62:	f7ff ff1d 	bl	8010da0 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8010f66:	4630      	mov	r0, r6
 8010f68:	f7ff ff82 	bl	8010e70 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8010f72:	f7ff fe87 	bl	8010c84 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8010f76:	4621      	mov	r1, r4
 8010f78:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010f7c:	f7ff fe82 	bl	8010c84 <SUBGRF_WriteRegister>
}
 8010f80:	9801      	ldr	r0, [sp, #4]
 8010f82:	b002      	add	sp, #8
 8010f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f88 <SUBGRF_SetRxBoosted>:
{
 8010f88:	b510      	push	{r4, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8010f8e:	4b0c      	ldr	r3, [pc, #48]	; (8010fc0 <SUBGRF_SetRxBoosted+0x38>)
 8010f90:	2205      	movs	r2, #5
 8010f92:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010f94:	2197      	movs	r1, #151	; 0x97
 8010f96:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8010f9a:	f7ff fe73 	bl	8010c84 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010f9e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010fa2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010fa6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010faa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010fae:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010fb2:	2203      	movs	r2, #3
 8010fb4:	a901      	add	r1, sp, #4
 8010fb6:	2082      	movs	r0, #130	; 0x82
 8010fb8:	f7ff ff2a 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8010fbc:	b002      	add	sp, #8
 8010fbe:	bd10      	pop	{r4, pc}
 8010fc0:	20000e0a 	.word	0x20000e0a

08010fc4 <SUBGRF_SetRxDutyCycle>:
{
 8010fc4:	b500      	push	{lr}
 8010fc6:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010fc8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010fcc:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010fd0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010fd4:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010fd8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010fdc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010fe0:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010fe4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010fe8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010fec:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010ff0:	2206      	movs	r2, #6
 8010ff2:	4669      	mov	r1, sp
 8010ff4:	2094      	movs	r0, #148	; 0x94
 8010ff6:	f7ff ff0b 	bl	8010e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010ffa:	4b03      	ldr	r3, [pc, #12]	; (8011008 <SUBGRF_SetRxDutyCycle+0x44>)
 8010ffc:	2206      	movs	r2, #6
 8010ffe:	701a      	strb	r2, [r3, #0]
}
 8011000:	b003      	add	sp, #12
 8011002:	f85d fb04 	ldr.w	pc, [sp], #4
 8011006:	bf00      	nop
 8011008:	20000e0a 	.word	0x20000e0a

0801100c <SUBGRF_SetCad>:
{
 801100c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801100e:	2200      	movs	r2, #0
 8011010:	4611      	mov	r1, r2
 8011012:	20c5      	movs	r0, #197	; 0xc5
 8011014:	f7ff fefc 	bl	8010e10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011018:	4b01      	ldr	r3, [pc, #4]	; (8011020 <SUBGRF_SetCad+0x14>)
 801101a:	2207      	movs	r2, #7
 801101c:	701a      	strb	r2, [r3, #0]
}
 801101e:	bd08      	pop	{r3, pc}
 8011020:	20000e0a 	.word	0x20000e0a

08011024 <SUBGRF_SetTxContinuousWave>:
{
 8011024:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011026:	2200      	movs	r2, #0
 8011028:	4611      	mov	r1, r2
 801102a:	20d1      	movs	r0, #209	; 0xd1
 801102c:	f7ff fef0 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011030:	bd08      	pop	{r3, pc}

08011032 <SUBGRF_SetTxInfinitePreamble>:
{
 8011032:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011034:	2200      	movs	r2, #0
 8011036:	4611      	mov	r1, r2
 8011038:	20d2      	movs	r0, #210	; 0xd2
 801103a:	f7ff fee9 	bl	8010e10 <SUBGRF_WriteCommand>
}
 801103e:	bd08      	pop	{r3, pc}

08011040 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011040:	b500      	push	{lr}
 8011042:	b083      	sub	sp, #12
 8011044:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011048:	2201      	movs	r2, #1
 801104a:	f10d 0107 	add.w	r1, sp, #7
 801104e:	209f      	movs	r0, #159	; 0x9f
 8011050:	f7ff fede 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011054:	b003      	add	sp, #12
 8011056:	f85d fb04 	ldr.w	pc, [sp], #4

0801105a <SUBGRF_SetLoRaSymbNumTimeout>:
{
 801105a:	b500      	push	{lr}
 801105c:	b083      	sub	sp, #12
 801105e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8011062:	2201      	movs	r2, #1
 8011064:	f10d 0107 	add.w	r1, sp, #7
 8011068:	20a0      	movs	r0, #160	; 0xa0
 801106a:	f7ff fed1 	bl	8010e10 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801106e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011072:	2b3f      	cmp	r3, #63	; 0x3f
 8011074:	d90f      	bls.n	8011096 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8011076:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8011078:	2200      	movs	r2, #0
        while( mant > 31 )
 801107a:	e002      	b.n	8011082 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801107c:	089b      	lsrs	r3, r3, #2
            exp++;
 801107e:	1c51      	adds	r1, r2, #1
 8011080:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8011082:	2b1f      	cmp	r3, #31
 8011084:	d8fa      	bhi.n	801107c <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8011086:	00d9      	lsls	r1, r3, #3
 8011088:	b2c9      	uxtb	r1, r1
 801108a:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801108c:	b2c9      	uxtb	r1, r1
 801108e:	f240 7006 	movw	r0, #1798	; 0x706
 8011092:	f7ff fdf7 	bl	8010c84 <SUBGRF_WriteRegister>
}
 8011096:	b003      	add	sp, #12
 8011098:	f85d fb04 	ldr.w	pc, [sp], #4

0801109c <SUBGRF_SetRegulatorMode>:
{
 801109c:	b500      	push	{lr}
 801109e:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80110a0:	f7f1 fcb4 	bl	8002a0c <RBI_IsDCDC>
 80110a4:	2801      	cmp	r0, #1
 80110a6:	d00b      	beq.n	80110c0 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80110a8:	2300      	movs	r3, #0
 80110aa:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80110ae:	2201      	movs	r2, #1
 80110b0:	f10d 0107 	add.w	r1, sp, #7
 80110b4:	2096      	movs	r0, #150	; 0x96
 80110b6:	f7ff feab 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80110ba:	b003      	add	sp, #12
 80110bc:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80110c0:	2301      	movs	r3, #1
 80110c2:	f88d 3007 	strb.w	r3, [sp, #7]
 80110c6:	e7f2      	b.n	80110ae <SUBGRF_SetRegulatorMode+0x12>

080110c8 <SUBGRF_Calibrate>:
{
 80110c8:	b500      	push	{lr}
 80110ca:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80110cc:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80110d0:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80110d4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80110d6:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80110da:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80110dc:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80110e0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80110e2:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80110e6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80110e8:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80110ec:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80110ee:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80110f2:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80110f4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80110f8:	2201      	movs	r2, #1
 80110fa:	f10d 0107 	add.w	r1, sp, #7
 80110fe:	2089      	movs	r0, #137	; 0x89
 8011100:	f7ff fe86 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011104:	b003      	add	sp, #12
 8011106:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801110c <SUBGRF_CalibrateImage>:
{
 801110c:	b500      	push	{lr}
 801110e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011110:	4b1f      	ldr	r3, [pc, #124]	; (8011190 <SUBGRF_CalibrateImage+0x84>)
 8011112:	4298      	cmp	r0, r3
 8011114:	d90d      	bls.n	8011132 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8011116:	23e1      	movs	r3, #225	; 0xe1
 8011118:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 801111c:	23e9      	movs	r3, #233	; 0xe9
 801111e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8011122:	2202      	movs	r2, #2
 8011124:	a901      	add	r1, sp, #4
 8011126:	2098      	movs	r0, #152	; 0x98
 8011128:	f7ff fe72 	bl	8010e10 <SUBGRF_WriteCommand>
}
 801112c:	b003      	add	sp, #12
 801112e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8011132:	4b18      	ldr	r3, [pc, #96]	; (8011194 <SUBGRF_CalibrateImage+0x88>)
 8011134:	4298      	cmp	r0, r3
 8011136:	d906      	bls.n	8011146 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8011138:	23d7      	movs	r3, #215	; 0xd7
 801113a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 801113e:	23db      	movs	r3, #219	; 0xdb
 8011140:	f88d 3005 	strb.w	r3, [sp, #5]
 8011144:	e7ed      	b.n	8011122 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8011146:	4b14      	ldr	r3, [pc, #80]	; (8011198 <SUBGRF_CalibrateImage+0x8c>)
 8011148:	4298      	cmp	r0, r3
 801114a:	d906      	bls.n	801115a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 801114c:	23c1      	movs	r3, #193	; 0xc1
 801114e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8011152:	23c5      	movs	r3, #197	; 0xc5
 8011154:	f88d 3005 	strb.w	r3, [sp, #5]
 8011158:	e7e3      	b.n	8011122 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 801115a:	4b10      	ldr	r3, [pc, #64]	; (801119c <SUBGRF_CalibrateImage+0x90>)
 801115c:	4298      	cmp	r0, r3
 801115e:	d906      	bls.n	801116e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8011160:	2375      	movs	r3, #117	; 0x75
 8011162:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8011166:	2381      	movs	r3, #129	; 0x81
 8011168:	f88d 3005 	strb.w	r3, [sp, #5]
 801116c:	e7d9      	b.n	8011122 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 801116e:	4b0c      	ldr	r3, [pc, #48]	; (80111a0 <SUBGRF_CalibrateImage+0x94>)
 8011170:	4298      	cmp	r0, r3
 8011172:	d906      	bls.n	8011182 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8011174:	236b      	movs	r3, #107	; 0x6b
 8011176:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 801117a:	236f      	movs	r3, #111	; 0x6f
 801117c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011180:	e7cf      	b.n	8011122 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8011182:	2329      	movs	r3, #41	; 0x29
 8011184:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8011188:	232b      	movs	r3, #43	; 0x2b
 801118a:	f88d 3005 	strb.w	r3, [sp, #5]
 801118e:	e7c8      	b.n	8011122 <SUBGRF_CalibrateImage+0x16>
 8011190:	35a4e900 	.word	0x35a4e900
 8011194:	32a9f880 	.word	0x32a9f880
 8011198:	2de54480 	.word	0x2de54480
 801119c:	1b6b0b00 	.word	0x1b6b0b00
 80111a0:	1954fc40 	.word	0x1954fc40

080111a4 <SUBGRF_SetPaConfig>:
{
 80111a4:	b500      	push	{lr}
 80111a6:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80111a8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80111ac:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80111b0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80111b4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80111b8:	2204      	movs	r2, #4
 80111ba:	eb0d 0102 	add.w	r1, sp, r2
 80111be:	2095      	movs	r0, #149	; 0x95
 80111c0:	f7ff fe26 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80111c4:	b003      	add	sp, #12
 80111c6:	f85d fb04 	ldr.w	pc, [sp], #4

080111ca <SUBGRF_SetDioIrqParams>:
{
 80111ca:	b500      	push	{lr}
 80111cc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80111ce:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80111d2:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80111d6:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80111da:	0a08      	lsrs	r0, r1, #8
 80111dc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80111e0:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80111e4:	0a11      	lsrs	r1, r2, #8
 80111e6:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80111ea:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80111ee:	0a1a      	lsrs	r2, r3, #8
 80111f0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80111f4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80111f8:	2208      	movs	r2, #8
 80111fa:	4669      	mov	r1, sp
 80111fc:	4610      	mov	r0, r2
 80111fe:	f7ff fe07 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011202:	b003      	add	sp, #12
 8011204:	f85d fb04 	ldr.w	pc, [sp], #4

08011208 <SUBGRF_SetTcxoMode>:
{
 8011208:	b500      	push	{lr}
 801120a:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 801120c:	f000 0007 	and.w	r0, r0, #7
 8011210:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011214:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011218:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801121c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011220:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8011224:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011228:	2204      	movs	r2, #4
 801122a:	eb0d 0102 	add.w	r1, sp, r2
 801122e:	2097      	movs	r0, #151	; 0x97
 8011230:	f7ff fdee 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011234:	b003      	add	sp, #12
 8011236:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801123c <SUBGRF_Init>:
{
 801123c:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801123e:	b108      	cbz	r0, 8011244 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8011240:	4a19      	ldr	r2, [pc, #100]	; (80112a8 <SUBGRF_Init+0x6c>)
 8011242:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8011244:	f7f0 fab4 	bl	80017b0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011248:	2002      	movs	r0, #2
 801124a:	f7ff fd3b 	bl	8010cc4 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801124e:	2000      	movs	r0, #0
 8011250:	4b16      	ldr	r3, [pc, #88]	; (80112ac <SUBGRF_Init+0x70>)
 8011252:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8011254:	f7ff fe0c 	bl	8010e70 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8011258:	f7f1 fbd6 	bl	8002a08 <RBI_IsTCXO>
 801125c:	2801      	cmp	r0, #1
 801125e:	d014      	beq.n	801128a <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011260:	2110      	movs	r1, #16
 8011262:	f640 1011 	movw	r0, #2321	; 0x911
 8011266:	f7ff fd0d 	bl	8010c84 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801126a:	2110      	movs	r1, #16
 801126c:	f640 1012 	movw	r0, #2322	; 0x912
 8011270:	f7ff fd08 	bl	8010c84 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011274:	210e      	movs	r1, #14
 8011276:	f640 101f 	movw	r0, #2335	; 0x91f
 801127a:	f7ff fd03 	bl	8010c84 <SUBGRF_WriteRegister>
    RBI_Init();
 801127e:	f7f1 fb3d 	bl	80028fc <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8011282:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <SUBGRF_Init+0x74>)
 8011284:	2201      	movs	r2, #1
 8011286:	701a      	strb	r2, [r3, #0]
}
 8011288:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801128a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801128e:	f7ff ffbb 	bl	8011208 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8011292:	2100      	movs	r1, #0
 8011294:	f640 1011 	movw	r0, #2321	; 0x911
 8011298:	f7ff fcf4 	bl	8010c84 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801129c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80112a0:	f7ff ff12 	bl	80110c8 <SUBGRF_Calibrate>
 80112a4:	e7e6      	b.n	8011274 <SUBGRF_Init+0x38>
 80112a6:	bf00      	nop
 80112a8:	20000e0c 	.word	0x20000e0c
 80112ac:	20000e08 	.word	0x20000e08
 80112b0:	20000e0a 	.word	0x20000e0a

080112b4 <SUBGRF_SetRfFrequency>:
{
 80112b4:	b510      	push	{r4, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80112ba:	4b12      	ldr	r3, [pc, #72]	; (8011304 <SUBGRF_SetRfFrequency+0x50>)
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	b1d3      	cbz	r3, 80112f6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80112c0:	4a11      	ldr	r2, [pc, #68]	; (8011308 <SUBGRF_SetRfFrequency+0x54>)
 80112c2:	2300      	movs	r3, #0
 80112c4:	0660      	lsls	r0, r4, #25
 80112c6:	09e1      	lsrs	r1, r4, #7
 80112c8:	f7ef fc6e 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80112cc:	0e03      	lsrs	r3, r0, #24
 80112ce:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80112d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80112d6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80112da:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80112de:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80112e2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80112e6:	2204      	movs	r2, #4
 80112e8:	eb0d 0102 	add.w	r1, sp, r2
 80112ec:	2086      	movs	r0, #134	; 0x86
 80112ee:	f7ff fd8f 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80112f2:	b002      	add	sp, #8
 80112f4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80112f6:	f7ff ff09 	bl	801110c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80112fa:	4b02      	ldr	r3, [pc, #8]	; (8011304 <SUBGRF_SetRfFrequency+0x50>)
 80112fc:	2201      	movs	r2, #1
 80112fe:	701a      	strb	r2, [r3, #0]
 8011300:	e7de      	b.n	80112c0 <SUBGRF_SetRfFrequency+0xc>
 8011302:	bf00      	nop
 8011304:	20000e08 	.word	0x20000e08
 8011308:	01e84800 	.word	0x01e84800

0801130c <SUBGRF_SetPacketType>:
{
 801130c:	b500      	push	{lr}
 801130e:	b083      	sub	sp, #12
 8011310:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8011314:	b2c3      	uxtb	r3, r0
 8011316:	4a09      	ldr	r2, [pc, #36]	; (801133c <SUBGRF_SetPacketType+0x30>)
 8011318:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801131a:	b143      	cbz	r3, 801132e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801131c:	2201      	movs	r2, #1
 801131e:	f10d 0107 	add.w	r1, sp, #7
 8011322:	208a      	movs	r0, #138	; 0x8a
 8011324:	f7ff fd74 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011328:	b003      	add	sp, #12
 801132a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801132e:	2100      	movs	r1, #0
 8011330:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011334:	f7ff fca6 	bl	8010c84 <SUBGRF_WriteRegister>
 8011338:	e7f0      	b.n	801131c <SUBGRF_SetPacketType+0x10>
 801133a:	bf00      	nop
 801133c:	20000e0b 	.word	0x20000e0b

08011340 <SUBGRF_SetTxParams>:
{
 8011340:	b570      	push	{r4, r5, r6, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	460c      	mov	r4, r1
 8011346:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8011348:	2801      	cmp	r0, #1
 801134a:	d035      	beq.n	80113b8 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801134c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8011350:	f7ff fca8 	bl	8010ca4 <SUBGRF_ReadRegister>
 8011354:	f040 011e 	orr.w	r1, r0, #30
 8011358:	b2c9      	uxtb	r1, r1
 801135a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801135e:	f7ff fc91 	bl	8010c84 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8011362:	2001      	movs	r0, #1
 8011364:	f7f1 fb54 	bl	8002a10 <RBI_GetRFOMaxPowerConfig>
 8011368:	4605      	mov	r5, r0
        if (power > max_power)
 801136a:	4284      	cmp	r4, r0
 801136c:	dd00      	ble.n	8011370 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 801136e:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8011370:	2d14      	cmp	r5, #20
 8011372:	d054      	beq.n	801141e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8011374:	2d11      	cmp	r5, #17
 8011376:	d05c      	beq.n	8011432 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8011378:	2d0e      	cmp	r5, #14
 801137a:	d064      	beq.n	8011446 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801137c:	2301      	movs	r3, #1
 801137e:	2200      	movs	r2, #0
 8011380:	2107      	movs	r1, #7
 8011382:	2004      	movs	r0, #4
 8011384:	f7ff ff0e 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011388:	1b64      	subs	r4, r4, r5
 801138a:	3416      	adds	r4, #22
 801138c:	b264      	sxtb	r4, r4
        if (power < -9)
 801138e:	f114 0f09 	cmn.w	r4, #9
 8011392:	da01      	bge.n	8011398 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8011394:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8011398:	2138      	movs	r1, #56	; 0x38
 801139a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801139e:	f7ff fc71 	bl	8010c84 <SUBGRF_WriteRegister>
    buf[0] = power;
 80113a2:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80113a6:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80113aa:	2202      	movs	r2, #2
 80113ac:	a901      	add	r1, sp, #4
 80113ae:	208e      	movs	r0, #142	; 0x8e
 80113b0:	f7ff fd2e 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80113b4:	b002      	add	sp, #8
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80113b8:	2000      	movs	r0, #0
 80113ba:	f7f1 fb29 	bl	8002a10 <RBI_GetRFOMaxPowerConfig>
 80113be:	4605      	mov	r5, r0
        if (power >  max_power)
 80113c0:	4284      	cmp	r4, r0
 80113c2:	dd00      	ble.n	80113c6 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80113c4:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80113c6:	2d0e      	cmp	r5, #14
 80113c8:	d015      	beq.n	80113f6 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80113ca:	2d0a      	cmp	r5, #10
 80113cc:	d01d      	beq.n	801140a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80113ce:	2301      	movs	r3, #1
 80113d0:	461a      	mov	r2, r3
 80113d2:	2100      	movs	r1, #0
 80113d4:	2007      	movs	r0, #7
 80113d6:	f7ff fee5 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80113da:	1b64      	subs	r4, r4, r5
 80113dc:	340e      	adds	r4, #14
 80113de:	b264      	sxtb	r4, r4
        if (power < -17)
 80113e0:	f114 0f11 	cmn.w	r4, #17
 80113e4:	da01      	bge.n	80113ea <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80113e6:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80113ea:	2118      	movs	r1, #24
 80113ec:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80113f0:	f7ff fc48 	bl	8010c84 <SUBGRF_WriteRegister>
 80113f4:	e7d5      	b.n	80113a2 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80113f6:	2301      	movs	r3, #1
 80113f8:	461a      	mov	r2, r3
 80113fa:	2100      	movs	r1, #0
 80113fc:	2004      	movs	r0, #4
 80113fe:	f7ff fed1 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011402:	1b64      	subs	r4, r4, r5
 8011404:	340e      	adds	r4, #14
 8011406:	b264      	sxtb	r4, r4
 8011408:	e7ea      	b.n	80113e0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801140a:	2301      	movs	r3, #1
 801140c:	461a      	mov	r2, r3
 801140e:	2100      	movs	r1, #0
 8011410:	4618      	mov	r0, r3
 8011412:	f7ff fec7 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8011416:	1b64      	subs	r4, r4, r5
 8011418:	340d      	adds	r4, #13
 801141a:	b264      	sxtb	r4, r4
 801141c:	e7e0      	b.n	80113e0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801141e:	2301      	movs	r3, #1
 8011420:	2200      	movs	r2, #0
 8011422:	2105      	movs	r1, #5
 8011424:	2003      	movs	r0, #3
 8011426:	f7ff febd 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801142a:	1b64      	subs	r4, r4, r5
 801142c:	3416      	adds	r4, #22
 801142e:	b264      	sxtb	r4, r4
 8011430:	e7ad      	b.n	801138e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8011432:	2301      	movs	r3, #1
 8011434:	2200      	movs	r2, #0
 8011436:	2103      	movs	r1, #3
 8011438:	2002      	movs	r0, #2
 801143a:	f7ff feb3 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801143e:	1b64      	subs	r4, r4, r5
 8011440:	3416      	adds	r4, #22
 8011442:	b264      	sxtb	r4, r4
 8011444:	e7a3      	b.n	801138e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8011446:	2301      	movs	r3, #1
 8011448:	2200      	movs	r2, #0
 801144a:	2102      	movs	r1, #2
 801144c:	4608      	mov	r0, r1
 801144e:	f7ff fea9 	bl	80111a4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011452:	1b64      	subs	r4, r4, r5
 8011454:	340e      	adds	r4, #14
 8011456:	b264      	sxtb	r4, r4
 8011458:	e799      	b.n	801138e <SUBGRF_SetTxParams+0x4e>
	...

0801145c <SUBGRF_SetModulationParams>:
{
 801145c:	b510      	push	{r4, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011462:	4b3e      	ldr	r3, [pc, #248]	; (801155c <SUBGRF_SetModulationParams+0x100>)
 8011464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011468:	ab02      	add	r3, sp, #8
 801146a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 801146e:	7820      	ldrb	r0, [r4, #0]
 8011470:	4b3b      	ldr	r3, [pc, #236]	; (8011560 <SUBGRF_SetModulationParams+0x104>)
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	4298      	cmp	r0, r3
 8011476:	d106      	bne.n	8011486 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8011478:	7823      	ldrb	r3, [r4, #0]
 801147a:	2b03      	cmp	r3, #3
 801147c:	d82c      	bhi.n	80114d8 <SUBGRF_SetModulationParams+0x7c>
 801147e:	e8df f003 	tbb	[pc, r3]
 8011482:	4205      	.short	0x4205
 8011484:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8011486:	f7ff ff41 	bl	801130c <SUBGRF_SetPacketType>
 801148a:	e7f5      	b.n	8011478 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801148c:	6862      	ldr	r2, [r4, #4]
 801148e:	4b35      	ldr	r3, [pc, #212]	; (8011564 <SUBGRF_SetModulationParams+0x108>)
 8011490:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011494:	0c1a      	lsrs	r2, r3, #16
 8011496:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801149a:	0a1a      	lsrs	r2, r3, #8
 801149c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80114a0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80114a4:	7b23      	ldrb	r3, [r4, #12]
 80114a6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80114aa:	7b63      	ldrb	r3, [r4, #13]
 80114ac:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80114b0:	68a1      	ldr	r1, [r4, #8]
 80114b2:	4a2d      	ldr	r2, [pc, #180]	; (8011568 <SUBGRF_SetModulationParams+0x10c>)
 80114b4:	2300      	movs	r3, #0
 80114b6:	0648      	lsls	r0, r1, #25
 80114b8:	09c9      	lsrs	r1, r1, #7
 80114ba:	f7ef fb75 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80114be:	0c03      	lsrs	r3, r0, #16
 80114c0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80114c4:	0a03      	lsrs	r3, r0, #8
 80114c6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80114ca:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80114ce:	2208      	movs	r2, #8
 80114d0:	4669      	mov	r1, sp
 80114d2:	208b      	movs	r0, #139	; 0x8b
 80114d4:	f7ff fc9c 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80114d8:	b002      	add	sp, #8
 80114da:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80114dc:	6922      	ldr	r2, [r4, #16]
 80114de:	4b21      	ldr	r3, [pc, #132]	; (8011564 <SUBGRF_SetModulationParams+0x108>)
 80114e0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80114e4:	0c1a      	lsrs	r2, r3, #16
 80114e6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80114ea:	0a1a      	lsrs	r2, r3, #8
 80114ec:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80114f0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80114f4:	7d23      	ldrb	r3, [r4, #20]
 80114f6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80114fa:	2204      	movs	r2, #4
 80114fc:	4669      	mov	r1, sp
 80114fe:	208b      	movs	r0, #139	; 0x8b
 8011500:	f7ff fc86 	bl	8010e10 <SUBGRF_WriteCommand>
        break;
 8011504:	e7e8      	b.n	80114d8 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011506:	7e23      	ldrb	r3, [r4, #24]
 8011508:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801150c:	7e63      	ldrb	r3, [r4, #25]
 801150e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011512:	7ea3      	ldrb	r3, [r4, #26]
 8011514:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011518:	7ee3      	ldrb	r3, [r4, #27]
 801151a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801151e:	2204      	movs	r2, #4
 8011520:	4669      	mov	r1, sp
 8011522:	208b      	movs	r0, #139	; 0x8b
 8011524:	f7ff fc74 	bl	8010e10 <SUBGRF_WriteCommand>
        break;
 8011528:	e7d6      	b.n	80114d8 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801152a:	6862      	ldr	r2, [r4, #4]
 801152c:	4b0d      	ldr	r3, [pc, #52]	; (8011564 <SUBGRF_SetModulationParams+0x108>)
 801152e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011532:	0c1a      	lsrs	r2, r3, #16
 8011534:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011538:	0a1a      	lsrs	r2, r3, #8
 801153a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801153e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011542:	7b23      	ldrb	r3, [r4, #12]
 8011544:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011548:	7b63      	ldrb	r3, [r4, #13]
 801154a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801154e:	2205      	movs	r2, #5
 8011550:	4669      	mov	r1, sp
 8011552:	208b      	movs	r0, #139	; 0x8b
 8011554:	f7ff fc5c 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011558:	e7be      	b.n	80114d8 <SUBGRF_SetModulationParams+0x7c>
 801155a:	bf00      	nop
 801155c:	08012870 	.word	0x08012870
 8011560:	20000e0b 	.word	0x20000e0b
 8011564:	3d090000 	.word	0x3d090000
 8011568:	01e84800 	.word	0x01e84800

0801156c <SUBGRF_SetPacketParams>:
{
 801156c:	b510      	push	{r4, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011572:	ab01      	add	r3, sp, #4
 8011574:	4a33      	ldr	r2, [pc, #204]	; (8011644 <SUBGRF_SetPacketParams+0xd8>)
 8011576:	ca07      	ldmia	r2, {r0, r1, r2}
 8011578:	c303      	stmia	r3!, {r0, r1}
 801157a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 801157c:	7820      	ldrb	r0, [r4, #0]
 801157e:	4b32      	ldr	r3, [pc, #200]	; (8011648 <SUBGRF_SetPacketParams+0xdc>)
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	4298      	cmp	r0, r3
 8011584:	d106      	bne.n	8011594 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011586:	7823      	ldrb	r3, [r4, #0]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d82a      	bhi.n	80115e2 <SUBGRF_SetPacketParams+0x76>
 801158c:	e8df f003 	tbb	[pc, r3]
 8011590:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011594:	f7ff feba 	bl	801130c <SUBGRF_SetPacketType>
 8011598:	e7f5      	b.n	8011586 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801159a:	7a63      	ldrb	r3, [r4, #9]
 801159c:	2bf1      	cmp	r3, #241	; 0xf1
 801159e:	d022      	beq.n	80115e6 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80115a0:	2bf2      	cmp	r3, #242	; 0xf2
 80115a2:	d02a      	beq.n	80115fa <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80115a4:	8862      	ldrh	r2, [r4, #2]
 80115a6:	0a11      	lsrs	r1, r2, #8
 80115a8:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80115ac:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80115b0:	7922      	ldrb	r2, [r4, #4]
 80115b2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80115b6:	7962      	ldrb	r2, [r4, #5]
 80115b8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80115bc:	79a2      	ldrb	r2, [r4, #6]
 80115be:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80115c2:	79e2      	ldrb	r2, [r4, #7]
 80115c4:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80115c8:	7a22      	ldrb	r2, [r4, #8]
 80115ca:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80115ce:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80115d2:	7aa3      	ldrb	r3, [r4, #10]
 80115d4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80115d8:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80115da:	a901      	add	r1, sp, #4
 80115dc:	208c      	movs	r0, #140	; 0x8c
 80115de:	f7ff fc17 	bl	8010e10 <SUBGRF_WriteCommand>
}
 80115e2:	b004      	add	sp, #16
 80115e4:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80115e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80115ea:	f7ff fbb0 	bl	8010d4e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80115ee:	f248 0005 	movw	r0, #32773	; 0x8005
 80115f2:	f7ff fbc0 	bl	8010d76 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80115f6:	2302      	movs	r3, #2
 80115f8:	e7d4      	b.n	80115a4 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80115fa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80115fe:	f7ff fba6 	bl	8010d4e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011602:	f241 0021 	movw	r0, #4129	; 0x1021
 8011606:	f7ff fbb6 	bl	8010d76 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801160a:	2306      	movs	r3, #6
 801160c:	e7ca      	b.n	80115a4 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801160e:	7b23      	ldrb	r3, [r4, #12]
 8011610:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011614:	2201      	movs	r2, #1
        break;
 8011616:	e7e0      	b.n	80115da <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011618:	89e3      	ldrh	r3, [r4, #14]
 801161a:	0a1a      	lsrs	r2, r3, #8
 801161c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011620:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011624:	7c23      	ldrb	r3, [r4, #16]
 8011626:	4a09      	ldr	r2, [pc, #36]	; (801164c <SUBGRF_SetPacketParams+0xe0>)
 8011628:	7013      	strb	r3, [r2, #0]
 801162a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801162e:	7c63      	ldrb	r3, [r4, #17]
 8011630:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011634:	7ca3      	ldrb	r3, [r4, #18]
 8011636:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801163a:	7ce3      	ldrb	r3, [r4, #19]
 801163c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011640:	2206      	movs	r2, #6
        break;
 8011642:	e7ca      	b.n	80115da <SUBGRF_SetPacketParams+0x6e>
 8011644:	08012878 	.word	0x08012878
 8011648:	20000e0b 	.word	0x20000e0b
 801164c:	20000e09 	.word	0x20000e09

08011650 <SUBGRF_SetBufferBaseAddress>:
{
 8011650:	b500      	push	{lr}
 8011652:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011654:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011658:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801165c:	2202      	movs	r2, #2
 801165e:	a901      	add	r1, sp, #4
 8011660:	208f      	movs	r0, #143	; 0x8f
 8011662:	f7ff fbd5 	bl	8010e10 <SUBGRF_WriteCommand>
}
 8011666:	b003      	add	sp, #12
 8011668:	f85d fb04 	ldr.w	pc, [sp], #4

0801166c <SUBGRF_ReadCommand>:
{
 801166c:	b510      	push	{r4, lr}
 801166e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011670:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011674:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011676:	460a      	mov	r2, r1
 8011678:	4601      	mov	r1, r0
 801167a:	4803      	ldr	r0, [pc, #12]	; (8011688 <SUBGRF_ReadCommand+0x1c>)
 801167c:	f7f4 f8d2 	bl	8005824 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011680:	f384 8810 	msr	PRIMASK, r4
}
 8011684:	bd10      	pop	{r4, pc}
 8011686:	bf00      	nop
 8011688:	200001d4 	.word	0x200001d4

0801168c <SUBGRF_GetRssiInst>:
{
 801168c:	b500      	push	{lr}
 801168e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011690:	2201      	movs	r2, #1
 8011692:	a901      	add	r1, sp, #4
 8011694:	2015      	movs	r0, #21
 8011696:	f7ff ffe9 	bl	801166c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801169a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801169e:	4240      	negs	r0, r0
}
 80116a0:	1040      	asrs	r0, r0, #1
 80116a2:	b003      	add	sp, #12
 80116a4:	f85d fb04 	ldr.w	pc, [sp], #4

080116a8 <SUBGRF_GetRxBufferStatus>:
{
 80116a8:	b530      	push	{r4, r5, lr}
 80116aa:	b083      	sub	sp, #12
 80116ac:	4605      	mov	r5, r0
 80116ae:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80116b0:	2202      	movs	r2, #2
 80116b2:	a901      	add	r1, sp, #4
 80116b4:	2013      	movs	r0, #19
 80116b6:	f7ff ffd9 	bl	801166c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80116ba:	f7ff fadd 	bl	8010c78 <SUBGRF_GetPacketType>
 80116be:	2801      	cmp	r0, #1
 80116c0:	d007      	beq.n	80116d2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80116c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116c6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80116c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116cc:	7023      	strb	r3, [r4, #0]
}
 80116ce:	b003      	add	sp, #12
 80116d0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80116d2:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <SUBGRF_GetRxBufferStatus+0x40>)
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d1f2      	bne.n	80116c2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80116dc:	f240 7002 	movw	r0, #1794	; 0x702
 80116e0:	f7ff fae0 	bl	8010ca4 <SUBGRF_ReadRegister>
 80116e4:	7028      	strb	r0, [r5, #0]
 80116e6:	e7ef      	b.n	80116c8 <SUBGRF_GetRxBufferStatus+0x20>
 80116e8:	20000e09 	.word	0x20000e09

080116ec <SUBGRF_GetPayload>:
{
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	4606      	mov	r6, r0
 80116f2:	460c      	mov	r4, r1
 80116f4:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80116fc:	f10d 0107 	add.w	r1, sp, #7
 8011700:	4620      	mov	r0, r4
 8011702:	f7ff ffd1 	bl	80116a8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011706:	7822      	ldrb	r2, [r4, #0]
 8011708:	42aa      	cmp	r2, r5
 801170a:	d902      	bls.n	8011712 <SUBGRF_GetPayload+0x26>
        return 1;
 801170c:	2001      	movs	r0, #1
}
 801170e:	b002      	add	sp, #8
 8011710:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011712:	4631      	mov	r1, r6
 8011714:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011718:	f7ff fb6a 	bl	8010df0 <SUBGRF_ReadBuffer>
    return 0;
 801171c:	2000      	movs	r0, #0
 801171e:	e7f6      	b.n	801170e <SUBGRF_GetPayload+0x22>

08011720 <SUBGRF_GetPacketStatus>:
{
 8011720:	b510      	push	{r4, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011726:	2203      	movs	r2, #3
 8011728:	a901      	add	r1, sp, #4
 801172a:	2014      	movs	r0, #20
 801172c:	f7ff ff9e 	bl	801166c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011730:	f7ff faa2 	bl	8010c78 <SUBGRF_GetPacketType>
 8011734:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011736:	b148      	cbz	r0, 801174c <SUBGRF_GetPacketStatus+0x2c>
 8011738:	2801      	cmp	r0, #1
 801173a:	d018      	beq.n	801176e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801173c:	2214      	movs	r2, #20
 801173e:	2100      	movs	r1, #0
 8011740:	4620      	mov	r0, r4
 8011742:	f000 fb22 	bl	8011d8a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011746:	230f      	movs	r3, #15
 8011748:	7023      	strb	r3, [r4, #0]
}
 801174a:	e00e      	b.n	801176a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801174c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011750:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011752:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011756:	425b      	negs	r3, r3
 8011758:	105b      	asrs	r3, r3, #1
 801175a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801175c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011760:	425b      	negs	r3, r3
 8011762:	105b      	asrs	r3, r3, #1
 8011764:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	60a3      	str	r3, [r4, #8]
}
 801176a:	b002      	add	sp, #8
 801176c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801176e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011772:	425b      	negs	r3, r3
 8011774:	105b      	asrs	r3, r3, #1
 8011776:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011778:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 801177c:	3302      	adds	r3, #2
 801177e:	109b      	asrs	r3, r3, #2
 8011780:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011782:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011786:	425b      	negs	r3, r3
 8011788:	105b      	asrs	r3, r3, #1
 801178a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801178c:	4b01      	ldr	r3, [pc, #4]	; (8011794 <SUBGRF_GetPacketStatus+0x74>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	6123      	str	r3, [r4, #16]
            break;
 8011792:	e7ea      	b.n	801176a <SUBGRF_GetPacketStatus+0x4a>
 8011794:	20000e04 	.word	0x20000e04

08011798 <SUBGRF_SetSwitch>:
{
 8011798:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801179a:	2901      	cmp	r1, #1
 801179c:	d003      	beq.n	80117a6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801179e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80117a0:	f7f1 f8f0 	bl	8002984 <RBI_ConfigRFSwitch>
}
 80117a4:	bd10      	pop	{r4, pc}
 80117a6:	4604      	mov	r4, r0
 80117a8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80117aa:	2c01      	cmp	r4, #1
 80117ac:	d003      	beq.n	80117b6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80117ae:	2c02      	cmp	r4, #2
 80117b0:	d1f6      	bne.n	80117a0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80117b2:	2003      	movs	r0, #3
 80117b4:	e7f4      	b.n	80117a0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80117b6:	2004      	movs	r0, #4
 80117b8:	f7ff fa84 	bl	8010cc4 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80117bc:	2002      	movs	r0, #2
 80117be:	e7f6      	b.n	80117ae <SUBGRF_SetSwitch+0x16>

080117c0 <SUBGRF_SetRfTxPower>:
{
 80117c0:	b538      	push	{r3, r4, r5, lr}
 80117c2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80117c4:	f7f1 f91e 	bl	8002a04 <RBI_GetTxConfig>
    switch (TxConfig)
 80117c8:	b148      	cbz	r0, 80117de <SUBGRF_SetRfTxPower+0x1e>
 80117ca:	2802      	cmp	r0, #2
 80117cc:	d10d      	bne.n	80117ea <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80117ce:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80117d0:	2202      	movs	r2, #2
 80117d2:	4621      	mov	r1, r4
 80117d4:	4628      	mov	r0, r5
 80117d6:	f7ff fdb3 	bl	8011340 <SUBGRF_SetTxParams>
}
 80117da:	4628      	mov	r0, r5
 80117dc:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80117de:	2c0f      	cmp	r4, #15
 80117e0:	dc01      	bgt.n	80117e6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80117e2:	2501      	movs	r5, #1
 80117e4:	e7f4      	b.n	80117d0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80117e6:	2502      	movs	r5, #2
 80117e8:	e7f2      	b.n	80117d0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80117ea:	2501      	movs	r5, #1
 80117ec:	e7f0      	b.n	80117d0 <SUBGRF_SetRfTxPower+0x10>

080117ee <SUBGRF_GetRadioWakeUpTime>:
}
 80117ee:	200a      	movs	r0, #10
 80117f0:	4770      	bx	lr
	...

080117f4 <HAL_SUBGHZ_TxCpltCallback>:
{
 80117f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80117f6:	4b02      	ldr	r3, [pc, #8]	; (8011800 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2001      	movs	r0, #1
 80117fc:	4798      	blx	r3
}
 80117fe:	bd08      	pop	{r3, pc}
 8011800:	20000e0c 	.word	0x20000e0c

08011804 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011804:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011806:	4b02      	ldr	r3, [pc, #8]	; (8011810 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2002      	movs	r0, #2
 801180c:	4798      	blx	r3
}
 801180e:	bd08      	pop	{r3, pc}
 8011810:	20000e0c 	.word	0x20000e0c

08011814 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011814:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011816:	4b02      	ldr	r3, [pc, #8]	; (8011820 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2040      	movs	r0, #64	; 0x40
 801181c:	4798      	blx	r3
}
 801181e:	bd08      	pop	{r3, pc}
 8011820:	20000e0c 	.word	0x20000e0c

08011824 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011824:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011826:	b111      	cbz	r1, 801182e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011828:	2901      	cmp	r1, #1
 801182a:	d005      	beq.n	8011838 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801182c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801182e:	4b05      	ldr	r3, [pc, #20]	; (8011844 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2080      	movs	r0, #128	; 0x80
 8011834:	4798      	blx	r3
            break;
 8011836:	e7f9      	b.n	801182c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011838:	4b02      	ldr	r3, [pc, #8]	; (8011844 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011840:	4798      	blx	r3
}
 8011842:	e7f3      	b.n	801182c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8011844:	20000e0c 	.word	0x20000e0c

08011848 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011848:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801184a:	4b03      	ldr	r3, [pc, #12]	; (8011858 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011852:	4798      	blx	r3
}
 8011854:	bd08      	pop	{r3, pc}
 8011856:	bf00      	nop
 8011858:	20000e0c 	.word	0x20000e0c

0801185c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801185c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801185e:	4b02      	ldr	r3, [pc, #8]	; (8011868 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2020      	movs	r0, #32
 8011864:	4798      	blx	r3
}
 8011866:	bd08      	pop	{r3, pc}
 8011868:	20000e0c 	.word	0x20000e0c

0801186c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 801186c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801186e:	4b02      	ldr	r3, [pc, #8]	; (8011878 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2004      	movs	r0, #4
 8011874:	4798      	blx	r3
}
 8011876:	bd08      	pop	{r3, pc}
 8011878:	20000e0c 	.word	0x20000e0c

0801187c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 801187c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801187e:	4b02      	ldr	r3, [pc, #8]	; (8011888 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2008      	movs	r0, #8
 8011884:	4798      	blx	r3
}
 8011886:	bd08      	pop	{r3, pc}
 8011888:	20000e0c 	.word	0x20000e0c

0801188c <HAL_SUBGHZ_HeaderValidCallback>:
{
 801188c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801188e:	4b02      	ldr	r3, [pc, #8]	; (8011898 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2010      	movs	r0, #16
 8011894:	4798      	blx	r3
}
 8011896:	bd08      	pop	{r3, pc}
 8011898:	20000e0c 	.word	0x20000e0c

0801189c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 801189c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801189e:	4b03      	ldr	r3, [pc, #12]	; (80118ac <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80118a6:	4798      	blx	r3
}
 80118a8:	bd08      	pop	{r3, pc}
 80118aa:	bf00      	nop
 80118ac:	20000e0c 	.word	0x20000e0c

080118b0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80118b0:	4601      	mov	r1, r0
 80118b2:	b188      	cbz	r0, 80118d8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80118b4:	2300      	movs	r3, #0
 80118b6:	2b15      	cmp	r3, #21
 80118b8:	d80d      	bhi.n	80118d6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80118ba:	4618      	mov	r0, r3
 80118bc:	4a07      	ldr	r2, [pc, #28]	; (80118dc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80118be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80118c2:	428a      	cmp	r2, r1
 80118c4:	d802      	bhi.n	80118cc <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80118c6:	3301      	adds	r3, #1
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	e7f4      	b.n	80118b6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80118cc:	4b03      	ldr	r3, [pc, #12]	; (80118dc <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80118ce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80118d2:	7900      	ldrb	r0, [r0, #4]
 80118d4:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 80118d6:	e7fe      	b.n	80118d6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80118d8:	201f      	movs	r0, #31
}
 80118da:	4770      	bx	lr
 80118dc:	08013604 	.word	0x08013604

080118e0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80118e0:	b570      	push	{r4, r5, r6, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	4606      	mov	r6, r0
 80118e6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80118e8:	4b1d      	ldr	r3, [pc, #116]	; (8011960 <SUBGRF_GetCFO+0x80>)
 80118ea:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80118ec:	f640 0007 	movw	r0, #2055	; 0x807
 80118f0:	f7ff f9d8 	bl	8010ca4 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80118f4:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80118f8:	3308      	adds	r3, #8
 80118fa:	446b      	add	r3, sp
 80118fc:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011900:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011904:	3301      	adds	r3, #1
 8011906:	fa05 f303 	lsl.w	r3, r5, r3
 801190a:	4d16      	ldr	r5, [pc, #88]	; (8011964 <SUBGRF_GetCFO+0x84>)
 801190c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011910:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011914:	2a07      	cmp	r2, #7
 8011916:	d921      	bls.n	801195c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8011918:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801191a:	fb00 f202 	mul.w	r2, r0, r2
 801191e:	2a03      	cmp	r2, #3
 8011920:	d800      	bhi.n	8011924 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8011922:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011924:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011928:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801192c:	f7ff f9ba 	bl	8010ca4 <SUBGRF_ReadRegister>
 8011930:	0200      	lsls	r0, r0, #8
 8011932:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011936:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801193a:	f7ff f9b3 	bl	8010ca4 <SUBGRF_ReadRegister>
 801193e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011940:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011944:	d003      	beq.n	801194e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8011946:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801194a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801194e:	096d      	lsrs	r5, r5, #5
 8011950:	fb05 f000 	mul.w	r0, r5, r0
 8011954:	11c0      	asrs	r0, r0, #7
 8011956:	6020      	str	r0, [r4, #0]
}
 8011958:	b002      	add	sp, #8
 801195a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 801195c:	2002      	movs	r0, #2
 801195e:	e7dc      	b.n	801191a <SUBGRF_GetCFO+0x3a>
 8011960:	0c0a0804 	.word	0x0c0a0804
 8011964:	01e84800 	.word	0x01e84800

08011968 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011968:	f04f 30ff 	mov.w	r0, #4294967295
 801196c:	4770      	bx	lr

0801196e <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801196e:	f04f 30ff 	mov.w	r0, #4294967295
 8011972:	4770      	bx	lr

08011974 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8011974:	f04f 30ff 	mov.w	r0, #4294967295
 8011978:	4770      	bx	lr

0801197a <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801197a:	4770      	bx	lr

0801197c <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801197c:	2000      	movs	r0, #0
 801197e:	4770      	bx	lr

08011980 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011980:	2000      	movs	r0, #0
 8011982:	4770      	bx	lr

08011984 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8011984:	4770      	bx	lr

08011986 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8011986:	f04f 30ff 	mov.w	r0, #4294967295
 801198a:	4770      	bx	lr

0801198c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 801198c:	f04f 30ff 	mov.w	r0, #4294967295
 8011990:	4770      	bx	lr

08011992 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8011992:	4770      	bx	lr

08011994 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8011994:	4770      	bx	lr

08011996 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8011996:	4770      	bx	lr

08011998 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011998:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801199a:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801199e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80119a0:	4b1e      	ldr	r3, [pc, #120]	; (8011a1c <TRACE_AllocateBufer+0x84>)
 80119a2:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80119a6:	8a1a      	ldrh	r2, [r3, #16]
 80119a8:	4594      	cmp	ip, r2
 80119aa:	d011      	beq.n	80119d0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80119ac:	4594      	cmp	ip, r2
 80119ae:	d921      	bls.n	80119f4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80119b0:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80119b4:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80119b6:	4283      	cmp	r3, r0
 80119b8:	d81f      	bhi.n	80119fa <TRACE_AllocateBufer+0x62>
 80119ba:	4282      	cmp	r2, r0
 80119bc:	d91d      	bls.n	80119fa <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80119be:	4b17      	ldr	r3, [pc, #92]	; (8011a1c <TRACE_AllocateBufer+0x84>)
 80119c0:	2401      	movs	r4, #1
 80119c2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80119c4:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80119c8:	2400      	movs	r4, #0
 80119ca:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80119cc:	4613      	mov	r3, r2
 80119ce:	e014      	b.n	80119fa <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80119d0:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80119d4:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80119d6:	4298      	cmp	r0, r3
 80119d8:	d30f      	bcc.n	80119fa <TRACE_AllocateBufer+0x62>
 80119da:	4282      	cmp	r2, r0
 80119dc:	d90d      	bls.n	80119fa <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80119de:	4b0f      	ldr	r3, [pc, #60]	; (8011a1c <TRACE_AllocateBufer+0x84>)
 80119e0:	2401      	movs	r4, #1
 80119e2:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80119e4:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80119e8:	f04f 0c00 	mov.w	ip, #0
 80119ec:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80119f0:	4613      	mov	r3, r2
 80119f2:	e002      	b.n	80119fa <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80119f4:	eba2 030c 	sub.w	r3, r2, ip
 80119f8:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80119fa:	4283      	cmp	r3, r0
 80119fc:	d90a      	bls.n	8011a14 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80119fe:	4a07      	ldr	r2, [pc, #28]	; (8011a1c <TRACE_AllocateBufer+0x84>)
 8011a00:	8a53      	ldrh	r3, [r2, #18]
 8011a02:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011a04:	4403      	add	r3, r0
 8011a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a0a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011a0c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a0e:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011a12:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011a14:	f04f 30ff 	mov.w	r0, #4294967295
 8011a18:	e7f9      	b.n	8011a0e <TRACE_AllocateBufer+0x76>
 8011a1a:	bf00      	nop
 8011a1c:	20001210 	.word	0x20001210

08011a20 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a24:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011a26:	4a03      	ldr	r2, [pc, #12]	; (8011a34 <TRACE_Lock+0x14>)
 8011a28:	8ad3      	ldrh	r3, [r2, #22]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a2e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011a32:	4770      	bx	lr
 8011a34:	20001210 	.word	0x20001210

08011a38 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a38:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011a3c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011a3e:	4a03      	ldr	r2, [pc, #12]	; (8011a4c <TRACE_UnLock+0x14>)
 8011a40:	8ad3      	ldrh	r3, [r2, #22]
 8011a42:	3b01      	subs	r3, #1
 8011a44:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a46:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011a4a:	4770      	bx	lr
 8011a4c:	20001210 	.word	0x20001210

08011a50 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <TRACE_IsLocked+0xc>)
 8011a52:	8ad8      	ldrh	r0, [r3, #22]
}
 8011a54:	3800      	subs	r0, #0
 8011a56:	bf18      	it	ne
 8011a58:	2001      	movne	r0, #1
 8011a5a:	4770      	bx	lr
 8011a5c:	20001210 	.word	0x20001210

08011a60 <UTIL_ADV_TRACE_Init>:
{
 8011a60:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011a62:	2218      	movs	r2, #24
 8011a64:	2100      	movs	r1, #0
 8011a66:	4807      	ldr	r0, [pc, #28]	; (8011a84 <UTIL_ADV_TRACE_Init+0x24>)
 8011a68:	f000 f98f 	bl	8011d8a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011a70:	2100      	movs	r1, #0
 8011a72:	4805      	ldr	r0, [pc, #20]	; (8011a88 <UTIL_ADV_TRACE_Init+0x28>)
 8011a74:	f000 f989 	bl	8011d8a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011a78:	4b04      	ldr	r3, [pc, #16]	; (8011a8c <UTIL_ADV_TRACE_Init+0x2c>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4804      	ldr	r0, [pc, #16]	; (8011a90 <UTIL_ADV_TRACE_Init+0x30>)
 8011a7e:	4798      	blx	r3
}
 8011a80:	bd08      	pop	{r3, pc}
 8011a82:	bf00      	nop
 8011a84:	20001210 	.word	0x20001210
 8011a88:	20000e10 	.word	0x20000e10
 8011a8c:	080128e8 	.word	0x080128e8
 8011a90:	08011c15 	.word	0x08011c15

08011a94 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8011a94:	4b01      	ldr	r3, [pc, #4]	; (8011a9c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8011a96:	6058      	str	r0, [r3, #4]
}
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	20001210 	.word	0x20001210

08011aa0 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011aa0:	4b01      	ldr	r3, [pc, #4]	; (8011aa8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8011aa2:	7218      	strb	r0, [r3, #8]
}
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	20001210 	.word	0x20001210

08011aac <TRACE_Send>:
{
 8011aac:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ab2:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8011ab4:	f7ff ffcc 	bl	8011a50 <TRACE_IsLocked>
 8011ab8:	b118      	cbz	r0, 8011ac2 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011aba:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011abe:	2000      	movs	r0, #0
}
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011ac2:	f7ff ffad 	bl	8011a20 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8011ac6:	4b1d      	ldr	r3, [pc, #116]	; (8011b3c <TRACE_Send+0x90>)
 8011ac8:	8a1a      	ldrh	r2, [r3, #16]
 8011aca:	8a5b      	ldrh	r3, [r3, #18]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d02e      	beq.n	8011b2e <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011ad0:	491a      	ldr	r1, [pc, #104]	; (8011b3c <TRACE_Send+0x90>)
 8011ad2:	7889      	ldrb	r1, [r1, #2]
 8011ad4:	2901      	cmp	r1, #1
 8011ad6:	d017      	beq.n	8011b08 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011ad8:	4a18      	ldr	r2, [pc, #96]	; (8011b3c <TRACE_Send+0x90>)
 8011ada:	7892      	ldrb	r2, [r2, #2]
 8011adc:	b932      	cbnz	r2, 8011aec <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011ade:	4a17      	ldr	r2, [pc, #92]	; (8011b3c <TRACE_Send+0x90>)
 8011ae0:	8a12      	ldrh	r2, [r2, #16]
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d91e      	bls.n	8011b24 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011ae6:	1a9b      	subs	r3, r3, r2
 8011ae8:	4a14      	ldr	r2, [pc, #80]	; (8011b3c <TRACE_Send+0x90>)
 8011aea:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011aec:	4e13      	ldr	r6, [pc, #76]	; (8011b3c <TRACE_Send+0x90>)
 8011aee:	8a33      	ldrh	r3, [r6, #16]
 8011af0:	4d13      	ldr	r5, [pc, #76]	; (8011b40 <TRACE_Send+0x94>)
 8011af2:	441d      	add	r5, r3
 8011af4:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011af8:	f7ef ff4c 	bl	8001994 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011afc:	4b11      	ldr	r3, [pc, #68]	; (8011b44 <TRACE_Send+0x98>)
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	8ab1      	ldrh	r1, [r6, #20]
 8011b02:	4628      	mov	r0, r5
 8011b04:	4798      	blx	r3
 8011b06:	e7db      	b.n	8011ac0 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011b08:	480c      	ldr	r0, [pc, #48]	; (8011b3c <TRACE_Send+0x90>)
 8011b0a:	8801      	ldrh	r1, [r0, #0]
 8011b0c:	1a8a      	subs	r2, r1, r2
 8011b0e:	b292      	uxth	r2, r2
 8011b10:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011b12:	2102      	movs	r1, #2
 8011b14:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011b16:	2100      	movs	r1, #0
 8011b18:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	d1dc      	bne.n	8011ad8 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011b1e:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011b20:	8201      	strh	r1, [r0, #16]
 8011b22:	e7d9      	b.n	8011ad8 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011b24:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011b28:	4a04      	ldr	r2, [pc, #16]	; (8011b3c <TRACE_Send+0x90>)
 8011b2a:	8293      	strh	r3, [r2, #20]
 8011b2c:	e7de      	b.n	8011aec <TRACE_Send+0x40>
      TRACE_UnLock();
 8011b2e:	f7ff ff83 	bl	8011a38 <TRACE_UnLock>
 8011b32:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011b36:	2000      	movs	r0, #0
}
 8011b38:	e7c2      	b.n	8011ac0 <TRACE_Send+0x14>
 8011b3a:	bf00      	nop
 8011b3c:	20001210 	.word	0x20001210
 8011b40:	20000e10 	.word	0x20000e10
 8011b44:	080128e8 	.word	0x080128e8

08011b48 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011b48:	b408      	push	{r3}
 8011b4a:	b530      	push	{r4, r5, lr}
 8011b4c:	b086      	sub	sp, #24
 8011b4e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8011b50:	2300      	movs	r3, #0
 8011b52:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8011b56:	4b2c      	ldr	r3, [pc, #176]	; (8011c08 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011b58:	7a1b      	ldrb	r3, [r3, #8]
 8011b5a:	4283      	cmp	r3, r0
 8011b5c:	d34d      	bcc.n	8011bfa <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011b5e:	4b2a      	ldr	r3, [pc, #168]	; (8011c08 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	ea31 0303 	bics.w	r3, r1, r3
 8011b66:	d14b      	bne.n	8011c00 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011b68:	4b27      	ldr	r3, [pc, #156]	; (8011c08 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	b123      	cbz	r3, 8011b78 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8011b6e:	b11a      	cbz	r2, 8011b78 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011b70:	f10d 0102 	add.w	r1, sp, #2
 8011b74:	a801      	add	r0, sp, #4
 8011b76:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8011b78:	ab0a      	add	r3, sp, #40	; 0x28
 8011b7a:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011b7c:	4622      	mov	r2, r4
 8011b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b82:	4822      	ldr	r0, [pc, #136]	; (8011c0c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011b84:	f000 fcd0 	bl	8012528 <tiny_vsnprintf_like>
 8011b88:	b285      	uxth	r5, r0
  TRACE_Lock();
 8011b8a:	f7ff ff49 	bl	8011a20 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8011b8e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8011b92:	4428      	add	r0, r5
 8011b94:	4669      	mov	r1, sp
 8011b96:	b280      	uxth	r0, r0
 8011b98:	f7ff fefe 	bl	8011998 <TRACE_AllocateBufer>
 8011b9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011ba0:	d026      	beq.n	8011bf0 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	e00d      	b.n	8011bc2 <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8011ba6:	f8bd 2000 	ldrh.w	r2, [sp]
 8011baa:	f103 0118 	add.w	r1, r3, #24
 8011bae:	4469      	add	r1, sp
 8011bb0:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8011bb4:	4916      	ldr	r1, [pc, #88]	; (8011c10 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011bb6:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8011bb8:	3201      	adds	r2, #1
 8011bba:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d8ed      	bhi.n	8011ba6 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011bca:	f8bd 0000 	ldrh.w	r0, [sp]
 8011bce:	9b05      	ldr	r3, [sp, #20]
 8011bd0:	4622      	mov	r2, r4
 8011bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011bd6:	4c0e      	ldr	r4, [pc, #56]	; (8011c10 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011bd8:	4420      	add	r0, r4
 8011bda:	f000 fca5 	bl	8012528 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8011bde:	f7ff ff2b 	bl	8011a38 <TRACE_UnLock>
    return TRACE_Send();
 8011be2:	f7ff ff63 	bl	8011aac <TRACE_Send>
}
 8011be6:	b006      	add	sp, #24
 8011be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bec:	b001      	add	sp, #4
 8011bee:	4770      	bx	lr
  TRACE_UnLock();
 8011bf0:	f7ff ff22 	bl	8011a38 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8011bf4:	f06f 0002 	mvn.w	r0, #2
 8011bf8:	e7f5      	b.n	8011be6 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8011bfa:	f06f 0004 	mvn.w	r0, #4
 8011bfe:	e7f2      	b.n	8011be6 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8011c00:	f06f 0005 	mvn.w	r0, #5
 8011c04:	e7ef      	b.n	8011be6 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8011c06:	bf00      	nop
 8011c08:	20001210 	.word	0x20001210
 8011c0c:	20001228 	.word	0x20001228
 8011c10:	20000e10 	.word	0x20000e10

08011c14 <TRACE_TxCpltCallback>:
{
 8011c14:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c16:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c1a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8011c1c:	4b25      	ldr	r3, [pc, #148]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c1e:	789b      	ldrb	r3, [r3, #2]
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d016      	beq.n	8011c52 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011c24:	4a23      	ldr	r2, [pc, #140]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c26:	8a13      	ldrh	r3, [r2, #16]
 8011c28:	8a90      	ldrh	r0, [r2, #20]
 8011c2a:	4403      	add	r3, r0
 8011c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c30:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8011c32:	4b20      	ldr	r3, [pc, #128]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c34:	8a1a      	ldrh	r2, [r3, #16]
 8011c36:	8a5b      	ldrh	r3, [r3, #18]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d003      	beq.n	8011c44 <TRACE_TxCpltCallback+0x30>
 8011c3c:	481d      	ldr	r0, [pc, #116]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c3e:	8ac0      	ldrh	r0, [r0, #22]
 8011c40:	2801      	cmp	r0, #1
 8011c42:	d00b      	beq.n	8011c5c <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c44:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8011c48:	f7ef feaa 	bl	80019a0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8011c4c:	f7ff fef4 	bl	8011a38 <TRACE_UnLock>
}
 8011c50:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011c52:	4b18      	ldr	r3, [pc, #96]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011c58:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8011c5a:	e7ea      	b.n	8011c32 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011c5c:	4815      	ldr	r0, [pc, #84]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c5e:	7880      	ldrb	r0, [r0, #2]
 8011c60:	2801      	cmp	r0, #1
 8011c62:	d014      	beq.n	8011c8e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011c64:	4a13      	ldr	r2, [pc, #76]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c66:	7892      	ldrb	r2, [r2, #2]
 8011c68:	b932      	cbnz	r2, 8011c78 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011c6a:	4a12      	ldr	r2, [pc, #72]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c6c:	8a12      	ldrh	r2, [r2, #16]
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d91b      	bls.n	8011caa <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011c72:	1a9b      	subs	r3, r3, r2
 8011c74:	4a0f      	ldr	r2, [pc, #60]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c76:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011c78:	4b0e      	ldr	r3, [pc, #56]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c7a:	8a1a      	ldrh	r2, [r3, #16]
 8011c7c:	480e      	ldr	r0, [pc, #56]	; (8011cb8 <TRACE_TxCpltCallback+0xa4>)
 8011c7e:	4410      	add	r0, r2
 8011c80:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011c84:	4a0d      	ldr	r2, [pc, #52]	; (8011cbc <TRACE_TxCpltCallback+0xa8>)
 8011c86:	68d2      	ldr	r2, [r2, #12]
 8011c88:	8a99      	ldrh	r1, [r3, #20]
 8011c8a:	4790      	blx	r2
 8011c8c:	e7e0      	b.n	8011c50 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8011c8e:	4c09      	ldr	r4, [pc, #36]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011c90:	8820      	ldrh	r0, [r4, #0]
 8011c92:	1a82      	subs	r2, r0, r2
 8011c94:	b292      	uxth	r2, r2
 8011c96:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011c98:	2002      	movs	r0, #2
 8011c9a:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011ca0:	2a00      	cmp	r2, #0
 8011ca2:	d1df      	bne.n	8011c64 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011ca4:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011ca6:	8220      	strh	r0, [r4, #16]
 8011ca8:	e7dc      	b.n	8011c64 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011caa:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011cae:	4a01      	ldr	r2, [pc, #4]	; (8011cb4 <TRACE_TxCpltCallback+0xa0>)
 8011cb0:	8293      	strh	r3, [r2, #20]
 8011cb2:	e7e1      	b.n	8011c78 <TRACE_TxCpltCallback+0x64>
 8011cb4:	20001210 	.word	0x20001210
 8011cb8:	20000e10 	.word	0x20000e10
 8011cbc:	080128e8 	.word	0x080128e8

08011cc0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4a02      	ldr	r2, [pc, #8]	; (8011ccc <UTIL_LPM_Init+0xc>)
 8011cc4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011cc6:	4a02      	ldr	r2, [pc, #8]	; (8011cd0 <UTIL_LPM_Init+0x10>)
 8011cc8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011cca:	4770      	bx	lr
 8011ccc:	2000142c 	.word	0x2000142c
 8011cd0:	20001428 	.word	0x20001428

08011cd4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cd4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011cd8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8011cda:	b141      	cbz	r1, 8011cee <UTIL_LPM_SetStopMode+0x1a>
 8011cdc:	2901      	cmp	r1, #1
 8011cde:	d103      	bne.n	8011ce8 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8011ce0:	4906      	ldr	r1, [pc, #24]	; (8011cfc <UTIL_LPM_SetStopMode+0x28>)
 8011ce2:	680a      	ldr	r2, [r1, #0]
 8011ce4:	4310      	orrs	r0, r2
 8011ce6:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ce8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011cec:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8011cee:	4903      	ldr	r1, [pc, #12]	; (8011cfc <UTIL_LPM_SetStopMode+0x28>)
 8011cf0:	680a      	ldr	r2, [r1, #0]
 8011cf2:	ea22 0000 	bic.w	r0, r2, r0
 8011cf6:	6008      	str	r0, [r1, #0]
      break;
 8011cf8:	e7f6      	b.n	8011ce8 <UTIL_LPM_SetStopMode+0x14>
 8011cfa:	bf00      	nop
 8011cfc:	2000142c 	.word	0x2000142c

08011d00 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d00:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d04:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8011d06:	b141      	cbz	r1, 8011d1a <UTIL_LPM_SetOffMode+0x1a>
 8011d08:	2901      	cmp	r1, #1
 8011d0a:	d103      	bne.n	8011d14 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011d0c:	4906      	ldr	r1, [pc, #24]	; (8011d28 <UTIL_LPM_SetOffMode+0x28>)
 8011d0e:	680a      	ldr	r2, [r1, #0]
 8011d10:	4310      	orrs	r0, r2
 8011d12:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d14:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011d18:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8011d1a:	4903      	ldr	r1, [pc, #12]	; (8011d28 <UTIL_LPM_SetOffMode+0x28>)
 8011d1c:	680a      	ldr	r2, [r1, #0]
 8011d1e:	ea22 0000 	bic.w	r0, r2, r0
 8011d22:	6008      	str	r0, [r1, #0]
      break;
 8011d24:	e7f6      	b.n	8011d14 <UTIL_LPM_SetOffMode+0x14>
 8011d26:	bf00      	nop
 8011d28:	20001428 	.word	0x20001428

08011d2c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011d2c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d2e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d32:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8011d34:	4b0c      	ldr	r3, [pc, #48]	; (8011d68 <UTIL_LPM_EnterLowPower+0x3c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	b13b      	cbz	r3, 8011d4a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8011d3a:	4d0c      	ldr	r5, [pc, #48]	; (8011d6c <UTIL_LPM_EnterLowPower+0x40>)
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8011d40:	686b      	ldr	r3, [r5, #4]
 8011d42:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d44:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011d48:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011d4a:	4b09      	ldr	r3, [pc, #36]	; (8011d70 <UTIL_LPM_EnterLowPower+0x44>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	b12b      	cbz	r3, 8011d5c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8011d50:	4d06      	ldr	r5, [pc, #24]	; (8011d6c <UTIL_LPM_EnterLowPower+0x40>)
 8011d52:	68ab      	ldr	r3, [r5, #8]
 8011d54:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011d56:	68eb      	ldr	r3, [r5, #12]
 8011d58:	4798      	blx	r3
 8011d5a:	e7f3      	b.n	8011d44 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8011d5c:	4d03      	ldr	r5, [pc, #12]	; (8011d6c <UTIL_LPM_EnterLowPower+0x40>)
 8011d5e:	692b      	ldr	r3, [r5, #16]
 8011d60:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8011d62:	696b      	ldr	r3, [r5, #20]
 8011d64:	4798      	blx	r3
 8011d66:	e7ed      	b.n	8011d44 <UTIL_LPM_EnterLowPower+0x18>
 8011d68:	2000142c 	.word	0x2000142c
 8011d6c:	08012884 	.word	0x08012884
 8011d70:	20001428 	.word	0x20001428

08011d74 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8011d74:	e004      	b.n	8011d80 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8011d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d7a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8011d7e:	461a      	mov	r2, r3
 8011d80:	1e53      	subs	r3, r2, #1
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	2a00      	cmp	r2, #0
 8011d86:	d1f6      	bne.n	8011d76 <UTIL_MEM_cpy_8+0x2>
    }
}
 8011d88:	4770      	bx	lr

08011d8a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8011d8a:	e002      	b.n	8011d92 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8011d8c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8011d90:	461a      	mov	r2, r3
 8011d92:	1e53      	subs	r3, r2, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	2a00      	cmp	r2, #0
 8011d98:	d1f8      	bne.n	8011d8c <UTIL_MEM_set_8+0x2>
  }
}
 8011d9a:	4770      	bx	lr

08011d9c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d9c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011da0:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8011da2:	4a06      	ldr	r2, [pc, #24]	; (8011dbc <UTIL_SEQ_SetTask+0x20>)
 8011da4:	6813      	ldr	r3, [r2, #0]
 8011da6:	4303      	orrs	r3, r0
 8011da8:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011daa:	4a05      	ldr	r2, [pc, #20]	; (8011dc0 <UTIL_SEQ_SetTask+0x24>)
 8011dac:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8011db0:	4318      	orrs	r0, r3
 8011db2:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db6:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8011dba:	4770      	bx	lr
 8011dbc:	20001454 	.word	0x20001454
 8011dc0:	2000144c 	.word	0x2000144c

08011dc4 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011dc4:	4770      	bx	lr

08011dc6 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8011dc6:	4770      	bx	lr

08011dc8 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8011dc8:	0c03      	lsrs	r3, r0, #16
 8011dca:	041b      	lsls	r3, r3, #16
 8011dcc:	b9b3      	cbnz	r3, 8011dfc <SEQ_BitPosition+0x34>
 8011dce:	0400      	lsls	r0, r0, #16
 8011dd0:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8011dd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011dd6:	d102      	bne.n	8011dde <SEQ_BitPosition+0x16>
 8011dd8:	3308      	adds	r3, #8
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8011dde:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011de2:	d102      	bne.n	8011dea <SEQ_BitPosition+0x22>
 8011de4:	3304      	adds	r3, #4
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011dea:	0f00      	lsrs	r0, r0, #28
 8011dec:	4a04      	ldr	r2, [pc, #16]	; (8011e00 <SEQ_BitPosition+0x38>)
 8011dee:	5c10      	ldrb	r0, [r2, r0]
 8011df0:	4418      	add	r0, r3
 8011df2:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8011df4:	f1c0 001f 	rsb	r0, r0, #31
}
 8011df8:	b2c0      	uxtb	r0, r0
 8011dfa:	4770      	bx	lr
uint8_t n = 0U;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	e7e8      	b.n	8011dd2 <SEQ_BitPosition+0xa>
 8011e00:	080136b4 	.word	0x080136b4

08011e04 <UTIL_SEQ_Run>:
{
 8011e04:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8011e06:	4b43      	ldr	r3, [pc, #268]	; (8011f14 <UTIL_SEQ_Run+0x110>)
 8011e08:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011e0a:	4020      	ands	r0, r4
 8011e0c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8011e0e:	4b42      	ldr	r3, [pc, #264]	; (8011f18 <UTIL_SEQ_Run+0x114>)
 8011e10:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8011e12:	4b42      	ldr	r3, [pc, #264]	; (8011f1c <UTIL_SEQ_Run+0x118>)
 8011e14:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8011e16:	4a42      	ldr	r2, [pc, #264]	; (8011f20 <UTIL_SEQ_Run+0x11c>)
 8011e18:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8011e1a:	4a42      	ldr	r2, [pc, #264]	; (8011f24 <UTIL_SEQ_Run+0x120>)
 8011e1c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011e1e:	e030      	b.n	8011e82 <UTIL_SEQ_Run+0x7e>
      counter++;
 8011e20:	3301      	adds	r3, #1
 8011e22:	e035      	b.n	8011e90 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011e24:	4d40      	ldr	r5, [pc, #256]	; (8011f28 <UTIL_SEQ_Run+0x124>)
 8011e26:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011e2a:	6868      	ldr	r0, [r5, #4]
 8011e2c:	4010      	ands	r0, r2
 8011e2e:	f7ff ffcb 	bl	8011dc8 <SEQ_BitPosition>
 8011e32:	493e      	ldr	r1, [pc, #248]	; (8011f2c <UTIL_SEQ_Run+0x128>)
 8011e34:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011e36:	686a      	ldr	r2, [r5, #4]
 8011e38:	2301      	movs	r3, #1
 8011e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8011e3e:	ea22 0000 	bic.w	r0, r2, r0
 8011e42:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e44:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e48:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011e4a:	680a      	ldr	r2, [r1, #0]
 8011e4c:	fa03 f202 	lsl.w	r2, r3, r2
 8011e50:	ea6f 0c02 	mvn.w	ip, r2
 8011e54:	4830      	ldr	r0, [pc, #192]	; (8011f18 <UTIL_SEQ_Run+0x114>)
 8011e56:	6801      	ldr	r1, [r0, #0]
 8011e58:	ea21 0202 	bic.w	r2, r1, r2
 8011e5c:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d12d      	bne.n	8011ebe <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e62:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8011e66:	4b31      	ldr	r3, [pc, #196]	; (8011f2c <UTIL_SEQ_Run+0x128>)
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	4b31      	ldr	r3, [pc, #196]	; (8011f30 <UTIL_SEQ_Run+0x12c>)
 8011e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e70:	4798      	blx	r3
    local_taskset = TaskSet;
 8011e72:	4b29      	ldr	r3, [pc, #164]	; (8011f18 <UTIL_SEQ_Run+0x114>)
 8011e74:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8011e76:	4b29      	ldr	r3, [pc, #164]	; (8011f1c <UTIL_SEQ_Run+0x118>)
 8011e78:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011e7a:	4a29      	ldr	r2, [pc, #164]	; (8011f20 <UTIL_SEQ_Run+0x11c>)
 8011e7c:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8011e7e:	4a29      	ldr	r2, [pc, #164]	; (8011f24 <UTIL_SEQ_Run+0x120>)
 8011e80:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011e82:	4001      	ands	r1, r0
 8011e84:	4d23      	ldr	r5, [pc, #140]	; (8011f14 <UTIL_SEQ_Run+0x110>)
 8011e86:	682d      	ldr	r5, [r5, #0]
 8011e88:	4229      	tst	r1, r5
 8011e8a:	d021      	beq.n	8011ed0 <UTIL_SEQ_Run+0xcc>
 8011e8c:	4013      	ands	r3, r2
 8011e8e:	d11f      	bne.n	8011ed0 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011e90:	4a25      	ldr	r2, [pc, #148]	; (8011f28 <UTIL_SEQ_Run+0x124>)
 8011e92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e96:	4002      	ands	r2, r0
 8011e98:	422a      	tst	r2, r5
 8011e9a:	d0c1      	beq.n	8011e20 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011e9c:	4922      	ldr	r1, [pc, #136]	; (8011f28 <UTIL_SEQ_Run+0x124>)
 8011e9e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011ea2:	4002      	ands	r2, r0
 8011ea4:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011ea6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011eaa:	6849      	ldr	r1, [r1, #4]
 8011eac:	4211      	tst	r1, r2
 8011eae:	d1b9      	bne.n	8011e24 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011eb0:	491d      	ldr	r1, [pc, #116]	; (8011f28 <UTIL_SEQ_Run+0x124>)
 8011eb2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eba:	6048      	str	r0, [r1, #4]
 8011ebc:	e7b2      	b.n	8011e24 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	4919      	ldr	r1, [pc, #100]	; (8011f28 <UTIL_SEQ_Run+0x124>)
 8011ec2:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011ec6:	ea0c 0202 	and.w	r2, ip, r2
 8011eca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011ece:	e7c6      	b.n	8011e5e <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011ed0:	4b16      	ldr	r3, [pc, #88]	; (8011f2c <UTIL_SEQ_Run+0x128>)
 8011ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011ed8:	f7ff ff74 	bl	8011dc4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011edc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ee0:	b672      	cpsid	i
  local_taskset = TaskSet;
 8011ee2:	4b0d      	ldr	r3, [pc, #52]	; (8011f18 <UTIL_SEQ_Run+0x114>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011ee6:	4a0d      	ldr	r2, [pc, #52]	; (8011f1c <UTIL_SEQ_Run+0x118>)
 8011ee8:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011eea:	4a0d      	ldr	r2, [pc, #52]	; (8011f20 <UTIL_SEQ_Run+0x11c>)
 8011eec:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011eee:	4013      	ands	r3, r2
 8011ef0:	4a08      	ldr	r2, [pc, #32]	; (8011f14 <UTIL_SEQ_Run+0x110>)
 8011ef2:	6812      	ldr	r2, [r2, #0]
 8011ef4:	4213      	tst	r3, r2
 8011ef6:	d103      	bne.n	8011f00 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8011ef8:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <UTIL_SEQ_Run+0x120>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	420b      	tst	r3, r1
 8011efe:	d006      	beq.n	8011f0e <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f00:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8011f04:	f7ff ff5f 	bl	8011dc6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011f08:	4b02      	ldr	r3, [pc, #8]	; (8011f14 <UTIL_SEQ_Run+0x110>)
 8011f0a:	601c      	str	r4, [r3, #0]
}
 8011f0c:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8011f0e:	f7ef fcc7 	bl	80018a0 <UTIL_SEQ_Idle>
 8011f12:	e7f5      	b.n	8011f00 <UTIL_SEQ_Run+0xfc>
 8011f14:	20000110 	.word	0x20000110
 8011f18:	20001454 	.word	0x20001454
 8011f1c:	20001434 	.word	0x20001434
 8011f20:	20000114 	.word	0x20000114
 8011f24:	20001438 	.word	0x20001438
 8011f28:	2000144c 	.word	0x2000144c
 8011f2c:	20001430 	.word	0x20001430
 8011f30:	2000143c 	.word	0x2000143c

08011f34 <UTIL_SEQ_RegTask>:
{
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f38:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f3c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011f3e:	f7ff ff43 	bl	8011dc8 <SEQ_BitPosition>
 8011f42:	4b03      	ldr	r3, [pc, #12]	; (8011f50 <UTIL_SEQ_RegTask+0x1c>)
 8011f44:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f48:	f385 8810 	msr	PRIMASK, r5
}
 8011f4c:	bd38      	pop	{r3, r4, r5, pc}
 8011f4e:	bf00      	nop
 8011f50:	2000143c 	.word	0x2000143c

08011f54 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011f54:	b082      	sub	sp, #8
 8011f56:	b082      	sub	sp, #8
 8011f58:	f10d 0c08 	add.w	ip, sp, #8
 8011f5c:	e90c 0006 	stmdb	ip, {r1, r2}
 8011f60:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8011f62:	2200      	movs	r2, #0
 8011f64:	6002      	str	r2, [r0, #0]
 8011f66:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011f68:	440b      	add	r3, r1
 8011f6a:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011f6c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011f70:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011f74:	440a      	add	r2, r1
 8011f76:	b291      	uxth	r1, r2
 8011f78:	b212      	sxth	r2, r2
 8011f7a:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011f7c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8011f80:	db04      	blt.n	8011f8c <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8011f82:	3301      	adds	r3, #1
 8011f84:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8011f86:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8011f8a:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8011f8c:	b002      	add	sp, #8
 8011f8e:	b002      	add	sp, #8
 8011f90:	4770      	bx	lr

08011f92 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8011f92:	b082      	sub	sp, #8
 8011f94:	b082      	sub	sp, #8
 8011f96:	f10d 0c08 	add.w	ip, sp, #8
 8011f9a:	e90c 0006 	stmdb	ip, {r1, r2}
 8011f9e:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	6002      	str	r2, [r0, #0]
 8011fa4:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8011fa6:	1acb      	subs	r3, r1, r3
 8011fa8:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011faa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011fae:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011fb2:	1a52      	subs	r2, r2, r1
 8011fb4:	b291      	uxth	r1, r2
 8011fb6:	b212      	sxth	r2, r2
 8011fb8:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8011fba:	2a00      	cmp	r2, #0
 8011fbc:	db02      	blt.n	8011fc4 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8011fbe:	b002      	add	sp, #8
 8011fc0:	b002      	add	sp, #8
 8011fc2:	4770      	bx	lr
    c.Seconds--;
 8011fc4:	3b01      	subs	r3, #1
 8011fc6:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8011fc8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8011fcc:	8081      	strh	r1, [r0, #4]
  return c;
 8011fce:	e7f6      	b.n	8011fbe <SysTimeSub+0x2c>

08011fd0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8011fd0:	b530      	push	{r4, r5, lr}
 8011fd2:	b089      	sub	sp, #36	; 0x24
 8011fd4:	ac02      	add	r4, sp, #8
 8011fd6:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9304      	str	r3, [sp, #16]
 8011fde:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011fe2:	4d0b      	ldr	r5, [pc, #44]	; (8012010 <SysTimeSet+0x40>)
 8011fe4:	692b      	ldr	r3, [r5, #16]
 8011fe6:	a805      	add	r0, sp, #20
 8011fe8:	4798      	blx	r3
 8011fea:	4603      	mov	r3, r0
 8011fec:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011fee:	9a05      	ldr	r2, [sp, #20]
 8011ff0:	9200      	str	r2, [sp, #0]
 8011ff2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011ff6:	a806      	add	r0, sp, #24
 8011ff8:	f7ff ffcb 	bl	8011f92 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	9806      	ldr	r0, [sp, #24]
 8012000:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012002:	68ab      	ldr	r3, [r5, #8]
 8012004:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012008:	4798      	blx	r3
}
 801200a:	b009      	add	sp, #36	; 0x24
 801200c:	bd30      	pop	{r4, r5, pc}
 801200e:	bf00      	nop
 8012010:	080128a8 	.word	0x080128a8

08012014 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012014:	b530      	push	{r4, r5, lr}
 8012016:	b087      	sub	sp, #28
 8012018:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801201a:	2300      	movs	r3, #0
 801201c:	9304      	str	r3, [sp, #16]
 801201e:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8012022:	6003      	str	r3, [r0, #0]
 8012024:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012026:	4d0b      	ldr	r5, [pc, #44]	; (8012054 <SysTimeGet+0x40>)
 8012028:	692b      	ldr	r3, [r5, #16]
 801202a:	a805      	add	r0, sp, #20
 801202c:	4798      	blx	r3
 801202e:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012030:	68eb      	ldr	r3, [r5, #12]
 8012032:	4798      	blx	r3
 8012034:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012038:	686b      	ldr	r3, [r5, #4]
 801203a:	4798      	blx	r3
 801203c:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801203e:	9b05      	ldr	r3, [sp, #20]
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	9b04      	ldr	r3, [sp, #16]
 8012044:	aa02      	add	r2, sp, #8
 8012046:	ca06      	ldmia	r2, {r1, r2}
 8012048:	4620      	mov	r0, r4
 801204a:	f7ff ff83 	bl	8011f54 <SysTimeAdd>

  return sysTime;
}
 801204e:	4620      	mov	r0, r4
 8012050:	b007      	add	sp, #28
 8012052:	bd30      	pop	{r4, r5, pc}
 8012054:	080128a8 	.word	0x080128a8

08012058 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012058:	b530      	push	{r4, r5, lr}
 801205a:	b083      	sub	sp, #12
 801205c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801205e:	2300      	movs	r3, #0
 8012060:	9300      	str	r3, [sp, #0]
 8012062:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012066:	4b06      	ldr	r3, [pc, #24]	; (8012080 <SysTimeGetMcuTime+0x28>)
 8012068:	691b      	ldr	r3, [r3, #16]
 801206a:	466d      	mov	r5, sp
 801206c:	a801      	add	r0, sp, #4
 801206e:	4798      	blx	r3
 8012070:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8012072:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012076:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801207a:	4620      	mov	r0, r4
 801207c:	b003      	add	sp, #12
 801207e:	bd30      	pop	{r4, r5, pc}
 8012080:	080128a8 	.word	0x080128a8

08012084 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012084:	b530      	push	{r4, r5, lr}
 8012086:	b089      	sub	sp, #36	; 0x24
 8012088:	ac02      	add	r4, sp, #8
 801208a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801208e:	4d0c      	ldr	r5, [pc, #48]	; (80120c0 <SysTimeToMs+0x3c>)
 8012090:	68eb      	ldr	r3, [r5, #12]
 8012092:	4798      	blx	r3
 8012094:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012098:	686b      	ldr	r3, [r5, #4]
 801209a:	4798      	blx	r3
 801209c:	4603      	mov	r3, r0
 801209e:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80120a0:	9a07      	ldr	r2, [sp, #28]
 80120a2:	9200      	str	r2, [sp, #0]
 80120a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80120a8:	a804      	add	r0, sp, #16
 80120aa:	f7ff ff72 	bl	8011f92 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80120ae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80120b2:	9a04      	ldr	r2, [sp, #16]
 80120b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80120b8:	fb00 3002 	mla	r0, r0, r2, r3
 80120bc:	b009      	add	sp, #36	; 0x24
 80120be:	bd30      	pop	{r4, r5, pc}
 80120c0:	080128a8 	.word	0x080128a8

080120c4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80120c4:	b530      	push	{r4, r5, lr}
 80120c6:	b087      	sub	sp, #28
 80120c8:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80120ca:	4b12      	ldr	r3, [pc, #72]	; (8012114 <SysTimeFromMs+0x50>)
 80120cc:	fba3 2301 	umull	r2, r3, r3, r1
 80120d0:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80120d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80120dc:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80120e0:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80120e4:	2300      	movs	r3, #0
 80120e6:	9302      	str	r3, [sp, #8]
 80120e8:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80120ea:	4d0b      	ldr	r5, [pc, #44]	; (8012118 <SysTimeFromMs+0x54>)
 80120ec:	68eb      	ldr	r3, [r5, #12]
 80120ee:	4798      	blx	r3
 80120f0:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80120f4:	686b      	ldr	r3, [r5, #4]
 80120f6:	4798      	blx	r3
 80120f8:	4603      	mov	r3, r0
 80120fa:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80120fc:	9a03      	ldr	r2, [sp, #12]
 80120fe:	9200      	str	r2, [sp, #0]
 8012100:	aa06      	add	r2, sp, #24
 8012102:	e912 0006 	ldmdb	r2, {r1, r2}
 8012106:	4620      	mov	r0, r4
 8012108:	f7ff ff24 	bl	8011f54 <SysTimeAdd>
}
 801210c:	4620      	mov	r0, r4
 801210e:	b007      	add	sp, #28
 8012110:	bd30      	pop	{r4, r5, pc}
 8012112:	bf00      	nop
 8012114:	10624dd3 	.word	0x10624dd3
 8012118:	080128a8 	.word	0x080128a8

0801211c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801211c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801211e:	4b03      	ldr	r3, [pc, #12]	; (801212c <UTIL_TIMER_Init+0x10>)
 8012120:	2200      	movs	r2, #0
 8012122:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8012124:	4b02      	ldr	r3, [pc, #8]	; (8012130 <UTIL_TIMER_Init+0x14>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4798      	blx	r3
}
 801212a:	bd08      	pop	{r3, pc}
 801212c:	20001458 	.word	0x20001458
 8012130:	080128bc 	.word	0x080128bc

08012134 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8012134:	b1a8      	cbz	r0, 8012162 <UTIL_TIMER_Create+0x2e>
{
 8012136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012138:	4617      	mov	r7, r2
 801213a:	461e      	mov	r6, r3
 801213c:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801213e:	b193      	cbz	r3, 8012166 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8012140:	2500      	movs	r5, #0
 8012142:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8012144:	4b09      	ldr	r3, [pc, #36]	; (801216c <UTIL_TIMER_Create+0x38>)
 8012146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012148:	4608      	mov	r0, r1
 801214a:	4798      	blx	r3
 801214c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801214e:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8012150:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012152:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8012154:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8012156:	9b06      	ldr	r3, [sp, #24]
 8012158:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801215a:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 801215c:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801215e:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8012160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8012162:	2001      	movs	r0, #1
}
 8012164:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8012166:	2001      	movs	r0, #1
 8012168:	e7fa      	b.n	8012160 <UTIL_TIMER_Create+0x2c>
 801216a:	bf00      	nop
 801216c:	080128bc 	.word	0x080128bc

08012170 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012170:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8012172:	4c03      	ldr	r4, [pc, #12]	; (8012180 <UTIL_TIMER_GetCurrentTime+0x10>)
 8012174:	69e3      	ldr	r3, [r4, #28]
 8012176:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8012178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801217a:	4798      	blx	r3
}
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop
 8012180:	080128bc 	.word	0x080128bc

08012184 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012184:	b570      	push	{r4, r5, r6, lr}
 8012186:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012188:	4d05      	ldr	r5, [pc, #20]	; (80121a0 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801218a:	69eb      	ldr	r3, [r5, #28]
 801218c:	4798      	blx	r3
 801218e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012190:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012192:	4630      	mov	r0, r6
 8012194:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8012196:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012198:	1a20      	subs	r0, r4, r0
 801219a:	4798      	blx	r3
}
 801219c:	bd70      	pop	{r4, r5, r6, pc}
 801219e:	bf00      	nop
 80121a0:	080128bc 	.word	0x080128bc

080121a4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80121a4:	4b05      	ldr	r3, [pc, #20]	; (80121bc <TimerExists+0x18>)
 80121a6:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80121a8:	e000      	b.n	80121ac <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80121aa:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80121ac:	b11b      	cbz	r3, 80121b6 <TimerExists+0x12>
    if( cur == TimerObject )
 80121ae:	4283      	cmp	r3, r0
 80121b0:	d1fb      	bne.n	80121aa <TimerExists+0x6>
      return true;
 80121b2:	2001      	movs	r0, #1
  }
  return false;
}
 80121b4:	4770      	bx	lr
  return false;
 80121b6:	2000      	movs	r0, #0
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop
 80121bc:	20001458 	.word	0x20001458

080121c0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80121c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c2:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80121c4:	4e09      	ldr	r6, [pc, #36]	; (80121ec <TimerSetTimeout+0x2c>)
 80121c6:	6a33      	ldr	r3, [r6, #32]
 80121c8:	4798      	blx	r3
 80121ca:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80121cc:	2301      	movs	r3, #1
 80121ce:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80121d0:	6827      	ldr	r7, [r4, #0]
 80121d2:	69b6      	ldr	r6, [r6, #24]
 80121d4:	47b0      	blx	r6
 80121d6:	4428      	add	r0, r5
 80121d8:	4287      	cmp	r7, r0
 80121da:	d202      	bcs.n	80121e2 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80121dc:	47b0      	blx	r6
 80121de:	4405      	add	r5, r0
 80121e0:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80121e2:	4b02      	ldr	r3, [pc, #8]	; (80121ec <TimerSetTimeout+0x2c>)
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	6820      	ldr	r0, [r4, #0]
 80121e8:	4798      	blx	r3
}
 80121ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ec:	080128bc 	.word	0x080128bc

080121f0 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80121f0:	b368      	cbz	r0, 801224e <UTIL_TIMER_Stop+0x5e>
{
 80121f2:	b510      	push	{r4, lr}
 80121f4:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80121fa:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80121fc:	4b15      	ldr	r3, [pc, #84]	; (8012254 <UTIL_TIMER_Stop+0x64>)
 80121fe:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8012200:	2301      	movs	r3, #1
 8012202:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8012204:	b1e1      	cbz	r1, 8012240 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8012206:	2300      	movs	r3, #0
 8012208:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801220a:	4288      	cmp	r0, r1
 801220c:	d006      	beq.n	801221c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801220e:	460b      	mov	r3, r1
        while( cur != NULL )
 8012210:	b1b3      	cbz	r3, 8012240 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8012212:	4293      	cmp	r3, r2
 8012214:	d011      	beq.n	801223a <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8012216:	4619      	mov	r1, r3
            cur = cur->Next;
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	e7f9      	b.n	8012210 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 801221c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801221e:	6948      	ldr	r0, [r1, #20]
 8012220:	b120      	cbz	r0, 801222c <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8012222:	4b0c      	ldr	r3, [pc, #48]	; (8012254 <UTIL_TIMER_Stop+0x64>)
 8012224:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8012226:	f7ff ffcb 	bl	80121c0 <TimerSetTimeout>
 801222a:	e009      	b.n	8012240 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 801222c:	4b0a      	ldr	r3, [pc, #40]	; (8012258 <UTIL_TIMER_Stop+0x68>)
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	4798      	blx	r3
            TimerListHead = NULL;
 8012232:	4b08      	ldr	r3, [pc, #32]	; (8012254 <UTIL_TIMER_Stop+0x64>)
 8012234:	2200      	movs	r2, #0
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	e002      	b.n	8012240 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 801223a:	695b      	ldr	r3, [r3, #20]
 801223c:	b123      	cbz	r3, 8012248 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801223e:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012240:	f384 8810 	msr	PRIMASK, r4
}
 8012244:	2000      	movs	r0, #0
}
 8012246:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8012248:	2300      	movs	r3, #0
 801224a:	614b      	str	r3, [r1, #20]
 801224c:	e7f8      	b.n	8012240 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801224e:	2001      	movs	r0, #1
}
 8012250:	4770      	bx	lr
 8012252:	bf00      	nop
 8012254:	20001458 	.word	0x20001458
 8012258:	080128bc 	.word	0x080128bc

0801225c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801225c:	4b09      	ldr	r3, [pc, #36]	; (8012284 <TimerInsertTimer+0x28>)
 801225e:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8012260:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8012262:	e001      	b.n	8012268 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8012264:	461a      	mov	r2, r3
        next = next->Next;
 8012266:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8012268:	6951      	ldr	r1, [r2, #20]
 801226a:	b139      	cbz	r1, 801227c <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 801226c:	6819      	ldr	r1, [r3, #0]
 801226e:	f8d0 c000 	ldr.w	ip, [r0]
 8012272:	458c      	cmp	ip, r1
 8012274:	d8f6      	bhi.n	8012264 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8012276:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8012278:	6143      	str	r3, [r0, #20]
        return;
 801227a:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 801227c:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801227e:	2300      	movs	r3, #0
 8012280:	6143      	str	r3, [r0, #20]
}
 8012282:	4770      	bx	lr
 8012284:	20001458 	.word	0x20001458

08012288 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012288:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801228a:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <TimerInsertNewHeadTimer+0x18>)
 801228c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801228e:	b10b      	cbz	r3, 8012294 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012290:	2200      	movs	r2, #0
 8012292:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012294:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8012296:	4b02      	ldr	r3, [pc, #8]	; (80122a0 <TimerInsertNewHeadTimer+0x18>)
 8012298:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801229a:	f7ff ff91 	bl	80121c0 <TimerSetTimeout>
}
 801229e:	bd08      	pop	{r3, pc}
 80122a0:	20001458 	.word	0x20001458

080122a4 <UTIL_TIMER_Start>:
{
 80122a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d036      	beq.n	8012318 <UTIL_TIMER_Start+0x74>
 80122aa:	4604      	mov	r4, r0
 80122ac:	f7ff ff7a 	bl	80121a4 <TimerExists>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d134      	bne.n	801231e <UTIL_TIMER_Start+0x7a>
 80122b4:	7a65      	ldrb	r5, [r4, #9]
 80122b6:	2d00      	cmp	r5, #0
 80122b8:	d133      	bne.n	8012322 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122ba:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80122be:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80122c0:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80122c2:	4b19      	ldr	r3, [pc, #100]	; (8012328 <UTIL_TIMER_Start+0x84>)
 80122c4:	6a1b      	ldr	r3, [r3, #32]
 80122c6:	4798      	blx	r3
    if( ticks < minValue )
 80122c8:	4287      	cmp	r7, r0
 80122ca:	d300      	bcc.n	80122ce <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80122cc:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80122ce:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80122d0:	2300      	movs	r3, #0
 80122d2:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80122d4:	2201      	movs	r2, #1
 80122d6:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80122d8:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80122da:	4b14      	ldr	r3, [pc, #80]	; (801232c <UTIL_TIMER_Start+0x88>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	b183      	cbz	r3, 8012302 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80122e0:	4b11      	ldr	r3, [pc, #68]	; (8012328 <UTIL_TIMER_Start+0x84>)
 80122e2:	699b      	ldr	r3, [r3, #24]
 80122e4:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	4418      	add	r0, r3
 80122ea:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80122ec:	4b0f      	ldr	r3, [pc, #60]	; (801232c <UTIL_TIMER_Start+0x88>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4298      	cmp	r0, r3
 80122f4:	d20c      	bcs.n	8012310 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80122f6:	4620      	mov	r0, r4
 80122f8:	f7ff ffc6 	bl	8012288 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122fc:	f386 8810 	msr	PRIMASK, r6
}
 8012300:	e00b      	b.n	801231a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8012302:	4b09      	ldr	r3, [pc, #36]	; (8012328 <UTIL_TIMER_Start+0x84>)
 8012304:	691b      	ldr	r3, [r3, #16]
 8012306:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8012308:	4620      	mov	r0, r4
 801230a:	f7ff ffbd 	bl	8012288 <TimerInsertNewHeadTimer>
 801230e:	e7f5      	b.n	80122fc <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8012310:	4620      	mov	r0, r4
 8012312:	f7ff ffa3 	bl	801225c <TimerInsertTimer>
 8012316:	e7f1      	b.n	80122fc <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8012318:	2501      	movs	r5, #1
}
 801231a:	4628      	mov	r0, r5
 801231c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801231e:	2501      	movs	r5, #1
 8012320:	e7fb      	b.n	801231a <UTIL_TIMER_Start+0x76>
 8012322:	2501      	movs	r5, #1
 8012324:	e7f9      	b.n	801231a <UTIL_TIMER_Start+0x76>
 8012326:	bf00      	nop
 8012328:	080128bc 	.word	0x080128bc
 801232c:	20001458 	.word	0x20001458

08012330 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8012330:	b198      	cbz	r0, 801235a <UTIL_TIMER_SetPeriod+0x2a>
{
 8012332:	b510      	push	{r4, lr}
 8012334:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8012336:	4b0a      	ldr	r3, [pc, #40]	; (8012360 <UTIL_TIMER_SetPeriod+0x30>)
 8012338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801233a:	4608      	mov	r0, r1
 801233c:	4798      	blx	r3
 801233e:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8012340:	4620      	mov	r0, r4
 8012342:	f7ff ff2f 	bl	80121a4 <TimerExists>
 8012346:	b908      	cbnz	r0, 801234c <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8012348:	2000      	movs	r0, #0
}
 801234a:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 801234c:	4620      	mov	r0, r4
 801234e:	f7ff ff4f 	bl	80121f0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8012352:	4620      	mov	r0, r4
 8012354:	f7ff ffa6 	bl	80122a4 <UTIL_TIMER_Start>
 8012358:	e7f7      	b.n	801234a <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 801235a:	2001      	movs	r0, #1
}
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop
 8012360:	080128bc 	.word	0x080128bc

08012364 <UTIL_TIMER_IRQ_Handler>:
{
 8012364:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012366:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801236a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 801236c:	4c1e      	ldr	r4, [pc, #120]	; (80123e8 <UTIL_TIMER_IRQ_Handler+0x84>)
 801236e:	6963      	ldr	r3, [r4, #20]
 8012370:	4798      	blx	r3
 8012372:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8012374:	6923      	ldr	r3, [r4, #16]
 8012376:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8012378:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801237a:	4b1c      	ldr	r3, [pc, #112]	; (80123ec <UTIL_TIMER_IRQ_Handler+0x88>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	b923      	cbnz	r3, 801238a <UTIL_TIMER_IRQ_Handler+0x26>
 8012380:	e018      	b.n	80123b4 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8012382:	2200      	movs	r2, #0
 8012384:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8012386:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8012388:	b1a3      	cbz	r3, 80123b4 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	42a2      	cmp	r2, r4
 801238e:	d9f8      	bls.n	8012382 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8012390:	1a31      	subs	r1, r6, r0
 8012392:	440a      	add	r2, r1
 8012394:	601a      	str	r2, [r3, #0]
 8012396:	e7f6      	b.n	8012386 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8012398:	4b14      	ldr	r3, [pc, #80]	; (80123ec <UTIL_TIMER_IRQ_Handler+0x88>)
 801239a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 801239c:	6962      	ldr	r2, [r4, #20]
 801239e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80123a0:	2300      	movs	r3, #0
 80123a2:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80123a4:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80123a6:	68e3      	ldr	r3, [r4, #12]
 80123a8:	6920      	ldr	r0, [r4, #16]
 80123aa:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80123ac:	8963      	ldrh	r3, [r4, #10]
 80123ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123b2:	d012      	beq.n	80123da <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80123b4:	4b0d      	ldr	r3, [pc, #52]	; (80123ec <UTIL_TIMER_IRQ_Handler+0x88>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	b13b      	cbz	r3, 80123ca <UTIL_TIMER_IRQ_Handler+0x66>
 80123ba:	681c      	ldr	r4, [r3, #0]
 80123bc:	2c00      	cmp	r4, #0
 80123be:	d0eb      	beq.n	8012398 <UTIL_TIMER_IRQ_Handler+0x34>
 80123c0:	4b09      	ldr	r3, [pc, #36]	; (80123e8 <UTIL_TIMER_IRQ_Handler+0x84>)
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	4798      	blx	r3
 80123c6:	4284      	cmp	r4, r0
 80123c8:	d3e6      	bcc.n	8012398 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80123ca:	4b08      	ldr	r3, [pc, #32]	; (80123ec <UTIL_TIMER_IRQ_Handler+0x88>)
 80123cc:	6818      	ldr	r0, [r3, #0]
 80123ce:	b108      	cbz	r0, 80123d4 <UTIL_TIMER_IRQ_Handler+0x70>
 80123d0:	7a03      	ldrb	r3, [r0, #8]
 80123d2:	b133      	cbz	r3, 80123e2 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123d4:	f385 8810 	msr	PRIMASK, r5
}
 80123d8:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80123da:	4620      	mov	r0, r4
 80123dc:	f7ff ff62 	bl	80122a4 <UTIL_TIMER_Start>
 80123e0:	e7e8      	b.n	80123b4 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80123e2:	f7ff feed 	bl	80121c0 <TimerSetTimeout>
 80123e6:	e7f5      	b.n	80123d4 <UTIL_TIMER_IRQ_Handler+0x70>
 80123e8:	080128bc 	.word	0x080128bc
 80123ec:	20001458 	.word	0x20001458

080123f0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80123f0:	4601      	mov	r1, r0
  int i = 0;
 80123f2:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80123f4:	e007      	b.n	8012406 <ee_skip_atoi+0x16>
 80123f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123fa:	1c53      	adds	r3, r2, #1
 80123fc:	600b      	str	r3, [r1, #0]
 80123fe:	7813      	ldrb	r3, [r2, #0]
 8012400:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012404:	3830      	subs	r0, #48	; 0x30
 8012406:	680a      	ldr	r2, [r1, #0]
 8012408:	7813      	ldrb	r3, [r2, #0]
 801240a:	3b30      	subs	r3, #48	; 0x30
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b09      	cmp	r3, #9
 8012410:	d9f1      	bls.n	80123f6 <ee_skip_atoi+0x6>
  return i;
}
 8012412:	4770      	bx	lr

08012414 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8012414:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8012418:	b093      	sub	sp, #76	; 0x4c
 801241a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801241c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801241e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8012422:	d110      	bne.n	8012446 <ee_number+0x32>
  char *dig = lower_digits;
 8012424:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8012520 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8012428:	1e9f      	subs	r7, r3, #2
 801242a:	2f22      	cmp	r7, #34	; 0x22
 801242c:	d875      	bhi.n	801251a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801242e:	f016 0401 	ands.w	r4, r6, #1
 8012432:	d00b      	beq.n	801244c <ee_number+0x38>
 8012434:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8012438:	f016 0f02 	tst.w	r6, #2
 801243c:	d00f      	beq.n	801245e <ee_number+0x4a>
  {
    if (num < 0)
 801243e:	2a00      	cmp	r2, #0
 8012440:	db07      	blt.n	8012452 <ee_number+0x3e>
  sign = 0;
 8012442:	2700      	movs	r7, #0
 8012444:	e00c      	b.n	8012460 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8012446:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8012524 <ee_number+0x110>
 801244a:	e7ed      	b.n	8012428 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 801244c:	f04f 0e20 	mov.w	lr, #32
 8012450:	e7f2      	b.n	8012438 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8012452:	4252      	negs	r2, r2
      size--;
 8012454:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012456:	3e01      	subs	r6, #1
 8012458:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 801245a:	272d      	movs	r7, #45	; 0x2d
 801245c:	e000      	b.n	8012460 <ee_number+0x4c>
  sign = 0;
 801245e:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8012460:	bb5a      	cbnz	r2, 80124ba <ee_number+0xa6>
    tmp[i++] = '0';
 8012462:	2330      	movs	r3, #48	; 0x30
 8012464:	f88d 3004 	strb.w	r3, [sp, #4]
 8012468:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 801246c:	45ac      	cmp	ip, r5
 801246e:	dd00      	ble.n	8012472 <ee_number+0x5e>
 8012470:	4665      	mov	r5, ip
  size -= precision;
 8012472:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012474:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012476:	b31c      	cbz	r4, 80124c0 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8012478:	b11f      	cbz	r7, 8012482 <ee_number+0x6e>
 801247a:	f800 7b01 	strb.w	r7, [r0], #1
 801247e:	3901      	subs	r1, #1
 8012480:	d007      	beq.n	8012492 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8012482:	2b00      	cmp	r3, #0
 8012484:	f103 33ff 	add.w	r3, r3, #4294967295
 8012488:	dd24      	ble.n	80124d4 <ee_number+0xc0>
 801248a:	f800 eb01 	strb.w	lr, [r0], #1
 801248e:	3901      	subs	r1, #1
 8012490:	d1f7      	bne.n	8012482 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8012492:	b013      	add	sp, #76	; 0x4c
 8012494:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012498:	fbb2 f6f3 	udiv	r6, r2, r3
 801249c:	fb03 2216 	mls	r2, r3, r6, r2
 80124a0:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80124a4:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80124a8:	446a      	add	r2, sp
 80124aa:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80124ae:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80124b0:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80124b4:	2a00      	cmp	r2, #0
 80124b6:	d1ef      	bne.n	8012498 <ee_number+0x84>
 80124b8:	e7d8      	b.n	801246c <ee_number+0x58>
  i = 0;
 80124ba:	f04f 0c00 	mov.w	ip, #0
 80124be:	e7f9      	b.n	80124b4 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80124c6:	ddd7      	ble.n	8012478 <ee_number+0x64>
 80124c8:	2220      	movs	r2, #32
 80124ca:	f800 2b01 	strb.w	r2, [r0], #1
 80124ce:	3901      	subs	r1, #1
 80124d0:	d1f6      	bne.n	80124c0 <ee_number+0xac>
 80124d2:	e7de      	b.n	8012492 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80124d4:	4565      	cmp	r5, ip
 80124d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80124da:	dd05      	ble.n	80124e8 <ee_number+0xd4>
 80124dc:	2230      	movs	r2, #48	; 0x30
 80124de:	f800 2b01 	strb.w	r2, [r0], #1
 80124e2:	3901      	subs	r1, #1
 80124e4:	d1f6      	bne.n	80124d4 <ee_number+0xc0>
 80124e6:	e7d4      	b.n	8012492 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80124e8:	4662      	mov	r2, ip
 80124ea:	2a00      	cmp	r2, #0
 80124ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124f0:	dd09      	ble.n	8012506 <ee_number+0xf2>
 80124f2:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80124f6:	446a      	add	r2, sp
 80124f8:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80124fc:	f800 2b01 	strb.w	r2, [r0], #1
 8012500:	3901      	subs	r1, #1
 8012502:	d1f1      	bne.n	80124e8 <ee_number+0xd4>
 8012504:	e7c5      	b.n	8012492 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8012506:	2b00      	cmp	r3, #0
 8012508:	f103 33ff 	add.w	r3, r3, #4294967295
 801250c:	ddc1      	ble.n	8012492 <ee_number+0x7e>
 801250e:	2220      	movs	r2, #32
 8012510:	f800 2b01 	strb.w	r2, [r0], #1
 8012514:	3901      	subs	r1, #1
 8012516:	d1f6      	bne.n	8012506 <ee_number+0xf2>
 8012518:	e7bb      	b.n	8012492 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801251a:	2000      	movs	r0, #0
 801251c:	e7b9      	b.n	8012492 <ee_number+0x7e>
 801251e:	bf00      	nop
 8012520:	080136ec 	.word	0x080136ec
 8012524:	080136c4 	.word	0x080136c4

08012528 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8012528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801252c:	b087      	sub	sp, #28
 801252e:	9205      	str	r2, [sp, #20]
 8012530:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8012532:	1e0f      	subs	r7, r1, #0
 8012534:	f340 80b8 	ble.w	80126a8 <tiny_vsnprintf_like+0x180>
 8012538:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801253a:	4604      	mov	r4, r0
 801253c:	e004      	b.n	8012548 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801253e:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012542:	9b05      	ldr	r3, [sp, #20]
 8012544:	3301      	adds	r3, #1
 8012546:	9305      	str	r3, [sp, #20]
 8012548:	9905      	ldr	r1, [sp, #20]
 801254a:	780a      	ldrb	r2, [r1, #0]
 801254c:	b922      	cbnz	r2, 8012558 <tiny_vsnprintf_like+0x30>
 801254e:	1ba3      	subs	r3, r4, r6
 8012550:	1e78      	subs	r0, r7, #1
 8012552:	4283      	cmp	r3, r0
 8012554:	f2c0 80a2 	blt.w	801269c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8012558:	1ba3      	subs	r3, r4, r6
 801255a:	f107 38ff 	add.w	r8, r7, #4294967295
 801255e:	4543      	cmp	r3, r8
 8012560:	f280 809c 	bge.w	801269c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8012564:	2a25      	cmp	r2, #37	; 0x25
 8012566:	d1ea      	bne.n	801253e <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8012568:	1c4b      	adds	r3, r1, #1
 801256a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 801256c:	784b      	ldrb	r3, [r1, #1]
 801256e:	2b30      	cmp	r3, #48	; 0x30
 8012570:	d020      	beq.n	80125b4 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8012572:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8012576:	3b30      	subs	r3, #48	; 0x30
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b09      	cmp	r3, #9
 801257c:	d91d      	bls.n	80125ba <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801257e:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8012582:	9b05      	ldr	r3, [sp, #20]
 8012584:	781a      	ldrb	r2, [r3, #0]
 8012586:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801258a:	2b20      	cmp	r3, #32
 801258c:	d867      	bhi.n	801265e <tiny_vsnprintf_like+0x136>
 801258e:	e8df f003 	tbb	[pc, r3]
 8012592:	664a      	.short	0x664a
 8012594:	66666666 	.word	0x66666666
 8012598:	66666666 	.word	0x66666666
 801259c:	66621e66 	.word	0x66621e66
 80125a0:	62666666 	.word	0x62666666
 80125a4:	66666666 	.word	0x66666666
 80125a8:	66666666 	.word	0x66666666
 80125ac:	19662866 	.word	0x19662866
 80125b0:	6666      	.short	0x6666
 80125b2:	7c          	.byte	0x7c
 80125b3:	00          	.byte	0x00
      flags |= ZEROPAD;
 80125b4:	f04f 0901 	mov.w	r9, #1
 80125b8:	e7dd      	b.n	8012576 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80125ba:	a805      	add	r0, sp, #20
 80125bc:	f7ff ff18 	bl	80123f0 <ee_skip_atoi>
 80125c0:	4605      	mov	r5, r0
 80125c2:	e7de      	b.n	8012582 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80125c4:	230a      	movs	r3, #10
 80125c6:	e031      	b.n	801262c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80125c8:	2320      	movs	r3, #32
 80125ca:	f804 3b01 	strb.w	r3, [r4], #1
 80125ce:	3d01      	subs	r5, #1
 80125d0:	2d00      	cmp	r5, #0
 80125d2:	dcf9      	bgt.n	80125c8 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80125d4:	9b04      	ldr	r3, [sp, #16]
 80125d6:	1d1a      	adds	r2, r3, #4
 80125d8:	9204      	str	r2, [sp, #16]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80125e0:	e7af      	b.n	8012542 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80125e2:	9b04      	ldr	r3, [sp, #16]
 80125e4:	1d1a      	adds	r2, r3, #4
 80125e6:	9204      	str	r2, [sp, #16]
 80125e8:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80125ec:	f1b8 0f00 	cmp.w	r8, #0
 80125f0:	d003      	beq.n	80125fa <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80125f2:	4640      	mov	r0, r8
 80125f4:	f7ed fdc0 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80125f8:	e006      	b.n	8012608 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80125fa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80126ac <tiny_vsnprintf_like+0x184>
 80125fe:	e7f8      	b.n	80125f2 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012600:	2220      	movs	r2, #32
 8012602:	f804 2b01 	strb.w	r2, [r4], #1
 8012606:	461d      	mov	r5, r3
 8012608:	1e6b      	subs	r3, r5, #1
 801260a:	4285      	cmp	r5, r0
 801260c:	dcf8      	bgt.n	8012600 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801260e:	2200      	movs	r2, #0
 8012610:	e006      	b.n	8012620 <tiny_vsnprintf_like+0xf8>
 8012612:	4643      	mov	r3, r8
 8012614:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012618:	f804 1b01 	strb.w	r1, [r4], #1
 801261c:	3201      	adds	r2, #1
 801261e:	4698      	mov	r8, r3
 8012620:	4282      	cmp	r2, r0
 8012622:	dbf6      	blt.n	8012612 <tiny_vsnprintf_like+0xea>
 8012624:	e78d      	b.n	8012542 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012626:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 801262a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 801262c:	f019 0f02 	tst.w	r9, #2
 8012630:	d02f      	beq.n	8012692 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8012632:	9a04      	ldr	r2, [sp, #16]
 8012634:	1d11      	adds	r1, r2, #4
 8012636:	9104      	str	r1, [sp, #16]
 8012638:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801263a:	1ba1      	subs	r1, r4, r6
 801263c:	f8cd 9008 	str.w	r9, [sp, #8]
 8012640:	f04f 30ff 	mov.w	r0, #4294967295
 8012644:	9001      	str	r0, [sp, #4]
 8012646:	9500      	str	r5, [sp, #0]
 8012648:	eba8 0101 	sub.w	r1, r8, r1
 801264c:	4620      	mov	r0, r4
 801264e:	f7ff fee1 	bl	8012414 <ee_number>
 8012652:	4604      	mov	r4, r0
 8012654:	e775      	b.n	8012542 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8012656:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 801265a:	230a      	movs	r3, #10
 801265c:	e7e6      	b.n	801262c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801265e:	2a25      	cmp	r2, #37	; 0x25
 8012660:	d002      	beq.n	8012668 <tiny_vsnprintf_like+0x140>
 8012662:	2325      	movs	r3, #37	; 0x25
 8012664:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012668:	1ba3      	subs	r3, r4, r6
 801266a:	4598      	cmp	r8, r3
 801266c:	dd0f      	ble.n	801268e <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801266e:	9b05      	ldr	r3, [sp, #20]
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	b13a      	cbz	r2, 8012684 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8012674:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012678:	1ba3      	subs	r3, r4, r6
 801267a:	4598      	cmp	r8, r3
 801267c:	f73f af61 	bgt.w	8012542 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012680:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8012682:	e7d3      	b.n	801262c <tiny_vsnprintf_like+0x104>
          --fmt;
 8012684:	3b01      	subs	r3, #1
 8012686:	9305      	str	r3, [sp, #20]
 8012688:	e7f6      	b.n	8012678 <tiny_vsnprintf_like+0x150>
        base = 16;
 801268a:	2310      	movs	r3, #16
 801268c:	e7ce      	b.n	801262c <tiny_vsnprintf_like+0x104>
    base = 10;
 801268e:	230a      	movs	r3, #10
 8012690:	e7cc      	b.n	801262c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8012692:	9a04      	ldr	r2, [sp, #16]
 8012694:	1d11      	adds	r1, r2, #4
 8012696:	9104      	str	r1, [sp, #16]
 8012698:	6812      	ldr	r2, [r2, #0]
 801269a:	e7ce      	b.n	801263a <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 801269c:	2300      	movs	r3, #0
 801269e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80126a0:	1ba0      	subs	r0, r4, r6
}
 80126a2:	b007      	add	sp, #28
 80126a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80126a8:	2000      	movs	r0, #0
 80126aa:	e7fa      	b.n	80126a2 <tiny_vsnprintf_like+0x17a>
 80126ac:	08013714 	.word	0x08013714

080126b0 <__libc_init_array>:
 80126b0:	b570      	push	{r4, r5, r6, lr}
 80126b2:	4d0d      	ldr	r5, [pc, #52]	; (80126e8 <__libc_init_array+0x38>)
 80126b4:	4c0d      	ldr	r4, [pc, #52]	; (80126ec <__libc_init_array+0x3c>)
 80126b6:	1b64      	subs	r4, r4, r5
 80126b8:	10a4      	asrs	r4, r4, #2
 80126ba:	2600      	movs	r6, #0
 80126bc:	42a6      	cmp	r6, r4
 80126be:	d109      	bne.n	80126d4 <__libc_init_array+0x24>
 80126c0:	4d0b      	ldr	r5, [pc, #44]	; (80126f0 <__libc_init_array+0x40>)
 80126c2:	4c0c      	ldr	r4, [pc, #48]	; (80126f4 <__libc_init_array+0x44>)
 80126c4:	f000 f8a0 	bl	8012808 <_init>
 80126c8:	1b64      	subs	r4, r4, r5
 80126ca:	10a4      	asrs	r4, r4, #2
 80126cc:	2600      	movs	r6, #0
 80126ce:	42a6      	cmp	r6, r4
 80126d0:	d105      	bne.n	80126de <__libc_init_array+0x2e>
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d8:	4798      	blx	r3
 80126da:	3601      	adds	r6, #1
 80126dc:	e7ee      	b.n	80126bc <__libc_init_array+0xc>
 80126de:	f855 3b04 	ldr.w	r3, [r5], #4
 80126e2:	4798      	blx	r3
 80126e4:	3601      	adds	r6, #1
 80126e6:	e7f2      	b.n	80126ce <__libc_init_array+0x1e>
 80126e8:	08013728 	.word	0x08013728
 80126ec:	08013728 	.word	0x08013728
 80126f0:	08013728 	.word	0x08013728
 80126f4:	0801372c 	.word	0x0801372c

080126f8 <memset>:
 80126f8:	4402      	add	r2, r0
 80126fa:	4603      	mov	r3, r0
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d100      	bne.n	8012702 <memset+0xa>
 8012700:	4770      	bx	lr
 8012702:	f803 1b01 	strb.w	r1, [r3], #1
 8012706:	e7f9      	b.n	80126fc <memset+0x4>

08012708 <floor>:
 8012708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801270c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8012710:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8012714:	2e13      	cmp	r6, #19
 8012716:	4602      	mov	r2, r0
 8012718:	460b      	mov	r3, r1
 801271a:	4607      	mov	r7, r0
 801271c:	460c      	mov	r4, r1
 801271e:	4605      	mov	r5, r0
 8012720:	dc33      	bgt.n	801278a <floor+0x82>
 8012722:	2e00      	cmp	r6, #0
 8012724:	da14      	bge.n	8012750 <floor+0x48>
 8012726:	a334      	add	r3, pc, #208	; (adr r3, 80127f8 <floor+0xf0>)
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	f7ed fd32 	bl	8000194 <__adddf3>
 8012730:	2200      	movs	r2, #0
 8012732:	2300      	movs	r3, #0
 8012734:	f7ed ff62 	bl	80005fc <__aeabi_dcmpgt>
 8012738:	b138      	cbz	r0, 801274a <floor+0x42>
 801273a:	2c00      	cmp	r4, #0
 801273c:	da58      	bge.n	80127f0 <floor+0xe8>
 801273e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012742:	431d      	orrs	r5, r3
 8012744:	d001      	beq.n	801274a <floor+0x42>
 8012746:	4c2e      	ldr	r4, [pc, #184]	; (8012800 <floor+0xf8>)
 8012748:	2500      	movs	r5, #0
 801274a:	4623      	mov	r3, r4
 801274c:	462f      	mov	r7, r5
 801274e:	e025      	b.n	801279c <floor+0x94>
 8012750:	4a2c      	ldr	r2, [pc, #176]	; (8012804 <floor+0xfc>)
 8012752:	fa42 f806 	asr.w	r8, r2, r6
 8012756:	ea01 0208 	and.w	r2, r1, r8
 801275a:	4302      	orrs	r2, r0
 801275c:	d01e      	beq.n	801279c <floor+0x94>
 801275e:	a326      	add	r3, pc, #152	; (adr r3, 80127f8 <floor+0xf0>)
 8012760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012764:	f7ed fd16 	bl	8000194 <__adddf3>
 8012768:	2200      	movs	r2, #0
 801276a:	2300      	movs	r3, #0
 801276c:	f7ed ff46 	bl	80005fc <__aeabi_dcmpgt>
 8012770:	2800      	cmp	r0, #0
 8012772:	d0ea      	beq.n	801274a <floor+0x42>
 8012774:	2c00      	cmp	r4, #0
 8012776:	bfbe      	ittt	lt
 8012778:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801277c:	fa43 f606 	asrlt.w	r6, r3, r6
 8012780:	19a4      	addlt	r4, r4, r6
 8012782:	ea24 0408 	bic.w	r4, r4, r8
 8012786:	2500      	movs	r5, #0
 8012788:	e7df      	b.n	801274a <floor+0x42>
 801278a:	2e33      	cmp	r6, #51	; 0x33
 801278c:	dd0a      	ble.n	80127a4 <floor+0x9c>
 801278e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012792:	d103      	bne.n	801279c <floor+0x94>
 8012794:	f7ed fcfe 	bl	8000194 <__adddf3>
 8012798:	4607      	mov	r7, r0
 801279a:	460b      	mov	r3, r1
 801279c:	4638      	mov	r0, r7
 801279e:	4619      	mov	r1, r3
 80127a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80127a8:	f04f 32ff 	mov.w	r2, #4294967295
 80127ac:	fa22 f808 	lsr.w	r8, r2, r8
 80127b0:	ea18 0f00 	tst.w	r8, r0
 80127b4:	d0f2      	beq.n	801279c <floor+0x94>
 80127b6:	a310      	add	r3, pc, #64	; (adr r3, 80127f8 <floor+0xf0>)
 80127b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127bc:	f7ed fcea 	bl	8000194 <__adddf3>
 80127c0:	2200      	movs	r2, #0
 80127c2:	2300      	movs	r3, #0
 80127c4:	f7ed ff1a 	bl	80005fc <__aeabi_dcmpgt>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d0be      	beq.n	801274a <floor+0x42>
 80127cc:	2c00      	cmp	r4, #0
 80127ce:	da02      	bge.n	80127d6 <floor+0xce>
 80127d0:	2e14      	cmp	r6, #20
 80127d2:	d103      	bne.n	80127dc <floor+0xd4>
 80127d4:	3401      	adds	r4, #1
 80127d6:	ea25 0508 	bic.w	r5, r5, r8
 80127da:	e7b6      	b.n	801274a <floor+0x42>
 80127dc:	2301      	movs	r3, #1
 80127de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80127e2:	fa03 f606 	lsl.w	r6, r3, r6
 80127e6:	4435      	add	r5, r6
 80127e8:	42bd      	cmp	r5, r7
 80127ea:	bf38      	it	cc
 80127ec:	18e4      	addcc	r4, r4, r3
 80127ee:	e7f2      	b.n	80127d6 <floor+0xce>
 80127f0:	2500      	movs	r5, #0
 80127f2:	462c      	mov	r4, r5
 80127f4:	e7a9      	b.n	801274a <floor+0x42>
 80127f6:	bf00      	nop
 80127f8:	8800759c 	.word	0x8800759c
 80127fc:	7e37e43c 	.word	0x7e37e43c
 8012800:	bff00000 	.word	0xbff00000
 8012804:	000fffff 	.word	0x000fffff

08012808 <_init>:
 8012808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280a:	bf00      	nop
 801280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801280e:	bc08      	pop	{r3}
 8012810:	469e      	mov	lr, r3
 8012812:	4770      	bx	lr

08012814 <_fini>:
 8012814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012816:	bf00      	nop
 8012818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801281a:	bc08      	pop	{r3}
 801281c:	469e      	mov	lr, r3
 801281e:	4770      	bx	lr
