
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012050  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  08012188  08012188  00022188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013060  08013060  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013060  08013060  00023060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013068  08013068  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013068  08013068  00023068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013070  08013070  00023070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000128  20000000  08013078  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000e70  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001308  20000128  20000128  00040128  2**2
                  ALLOC
 12 RAM1_region   00000000  20001430  20001430  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001430  20001430  00040128  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00059d94  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b637  00000000  00000000  0009837e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002742d  00000000  00000000  000a39b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002d38  00000000  00000000  000cade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002e78  00000000  00000000  000cdb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000fc92  00000000  00000000  000d0998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004fa21  00000000  00000000  000e062a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e05c5  00000000  00000000  0013004b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00210610  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007fec  00000000  00000000  00210660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000128 	.word	0x20000128
 8000154:	00000000 	.word	0x00000000
 8000158:	08012170 	.word	0x08012170

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000012c 	.word	0x2000012c
 8000174:	08012170 	.word	0x08012170

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_dmul>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800018e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000196:	bf1d      	ittte	ne
 8000198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800019c:	ea94 0f0c 	teqne	r4, ip
 80001a0:	ea95 0f0c 	teqne	r5, ip
 80001a4:	f000 f8de 	bleq	8000364 <__aeabi_dmul+0x1dc>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea81 0603 	eor.w	r6, r1, r3
 80001ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001ba:	bf18      	it	ne
 80001bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c8:	d038      	beq.n	800023c <__aeabi_dmul+0xb4>
 80001ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ce:	f04f 0500 	mov.w	r5, #0
 80001d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001de:	f04f 0600 	mov.w	r6, #0
 80001e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001e6:	f09c 0f00 	teq	ip, #0
 80001ea:	bf18      	it	ne
 80001ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001fc:	d204      	bcs.n	8000208 <__aeabi_dmul+0x80>
 80001fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000202:	416d      	adcs	r5, r5
 8000204:	eb46 0606 	adc.w	r6, r6, r6
 8000208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800020c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800021c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000220:	bf88      	it	hi
 8000222:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000226:	d81e      	bhi.n	8000266 <__aeabi_dmul+0xde>
 8000228:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000240:	ea46 0101 	orr.w	r1, r6, r1
 8000244:	ea40 0002 	orr.w	r0, r0, r2
 8000248:	ea81 0103 	eor.w	r1, r1, r3
 800024c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000250:	bfc2      	ittt	gt
 8000252:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025a:	bd70      	popgt	{r4, r5, r6, pc}
 800025c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000260:	f04f 0e00 	mov.w	lr, #0
 8000264:	3c01      	subs	r4, #1
 8000266:	f300 80ab 	bgt.w	80003c0 <__aeabi_dmul+0x238>
 800026a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800026e:	bfde      	ittt	le
 8000270:	2000      	movle	r0, #0
 8000272:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000276:	bd70      	pople	{r4, r5, r6, pc}
 8000278:	f1c4 0400 	rsb	r4, r4, #0
 800027c:	3c20      	subs	r4, #32
 800027e:	da35      	bge.n	80002ec <__aeabi_dmul+0x164>
 8000280:	340c      	adds	r4, #12
 8000282:	dc1b      	bgt.n	80002bc <__aeabi_dmul+0x134>
 8000284:	f104 0414 	add.w	r4, r4, #20
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f305 	lsl.w	r3, r0, r5
 8000290:	fa20 f004 	lsr.w	r0, r0, r4
 8000294:	fa01 f205 	lsl.w	r2, r1, r5
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ac:	eb42 0106 	adc.w	r1, r2, r6
 80002b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b4:	bf08      	it	eq
 80002b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f1c4 040c 	rsb	r4, r4, #12
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f304 	lsl.w	r3, r0, r4
 80002c8:	fa20 f005 	lsr.w	r0, r0, r5
 80002cc:	fa01 f204 	lsl.w	r2, r1, r4
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f205 	lsl.w	r2, r0, r5
 80002f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f8:	fa20 f304 	lsr.w	r3, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea43 0302 	orr.w	r3, r3, r2
 8000304:	fa21 f004 	lsr.w	r0, r1, r4
 8000308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800030c:	fa21 f204 	lsr.w	r2, r1, r4
 8000310:	ea20 0002 	bic.w	r0, r0, r2
 8000314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f094 0f00 	teq	r4, #0
 8000328:	d10f      	bne.n	800034a <__aeabi_dmul+0x1c2>
 800032a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800032e:	0040      	lsls	r0, r0, #1
 8000330:	eb41 0101 	adc.w	r1, r1, r1
 8000334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000338:	bf08      	it	eq
 800033a:	3c01      	subeq	r4, #1
 800033c:	d0f7      	beq.n	800032e <__aeabi_dmul+0x1a6>
 800033e:	ea41 0106 	orr.w	r1, r1, r6
 8000342:	f095 0f00 	teq	r5, #0
 8000346:	bf18      	it	ne
 8000348:	4770      	bxne	lr
 800034a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	eb43 0303 	adc.w	r3, r3, r3
 8000354:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000358:	bf08      	it	eq
 800035a:	3d01      	subeq	r5, #1
 800035c:	d0f7      	beq.n	800034e <__aeabi_dmul+0x1c6>
 800035e:	ea43 0306 	orr.w	r3, r3, r6
 8000362:	4770      	bx	lr
 8000364:	ea94 0f0c 	teq	r4, ip
 8000368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800036c:	bf18      	it	ne
 800036e:	ea95 0f0c 	teqne	r5, ip
 8000372:	d00c      	beq.n	800038e <__aeabi_dmul+0x206>
 8000374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000378:	bf18      	it	ne
 800037a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800037e:	d1d1      	bne.n	8000324 <__aeabi_dmul+0x19c>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f04f 0000 	mov.w	r0, #0
 800038c:	bd70      	pop	{r4, r5, r6, pc}
 800038e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000392:	bf06      	itte	eq
 8000394:	4610      	moveq	r0, r2
 8000396:	4619      	moveq	r1, r3
 8000398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800039c:	d019      	beq.n	80003d2 <__aeabi_dmul+0x24a>
 800039e:	ea94 0f0c 	teq	r4, ip
 80003a2:	d102      	bne.n	80003aa <__aeabi_dmul+0x222>
 80003a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a8:	d113      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003aa:	ea95 0f0c 	teq	r5, ip
 80003ae:	d105      	bne.n	80003bc <__aeabi_dmul+0x234>
 80003b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b4:	bf1c      	itt	ne
 80003b6:	4610      	movne	r0, r2
 80003b8:	4619      	movne	r1, r3
 80003ba:	d10a      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003bc:	ea81 0103 	eor.w	r1, r1, r3
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003da:	bd70      	pop	{r4, r5, r6, pc}

080003dc <__aeabi_fmul>:
 80003dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e4:	bf1e      	ittt	ne
 80003e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ea:	ea92 0f0c 	teqne	r2, ip
 80003ee:	ea93 0f0c 	teqne	r3, ip
 80003f2:	d06f      	beq.n	80004d4 <__aeabi_fmul+0xf8>
 80003f4:	441a      	add	r2, r3
 80003f6:	ea80 0c01 	eor.w	ip, r0, r1
 80003fa:	0240      	lsls	r0, r0, #9
 80003fc:	bf18      	it	ne
 80003fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000402:	d01e      	beq.n	8000442 <__aeabi_fmul+0x66>
 8000404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000408:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800040c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000410:	fba0 3101 	umull	r3, r1, r0, r1
 8000414:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000418:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800041c:	bf3e      	ittt	cc
 800041e:	0049      	lslcc	r1, r1, #1
 8000420:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000424:	005b      	lslcc	r3, r3, #1
 8000426:	ea40 0001 	orr.w	r0, r0, r1
 800042a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800042e:	2afd      	cmp	r2, #253	; 0xfd
 8000430:	d81d      	bhi.n	800046e <__aeabi_fmul+0x92>
 8000432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000436:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043a:	bf08      	it	eq
 800043c:	f020 0001 	biceq.w	r0, r0, #1
 8000440:	4770      	bx	lr
 8000442:	f090 0f00 	teq	r0, #0
 8000446:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800044a:	bf08      	it	eq
 800044c:	0249      	lsleq	r1, r1, #9
 800044e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000452:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000456:	3a7f      	subs	r2, #127	; 0x7f
 8000458:	bfc2      	ittt	gt
 800045a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800045e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000462:	4770      	bxgt	lr
 8000464:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000468:	f04f 0300 	mov.w	r3, #0
 800046c:	3a01      	subs	r2, #1
 800046e:	dc5d      	bgt.n	800052c <__aeabi_fmul+0x150>
 8000470:	f112 0f19 	cmn.w	r2, #25
 8000474:	bfdc      	itt	le
 8000476:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800047a:	4770      	bxle	lr
 800047c:	f1c2 0200 	rsb	r2, r2, #0
 8000480:	0041      	lsls	r1, r0, #1
 8000482:	fa21 f102 	lsr.w	r1, r1, r2
 8000486:	f1c2 0220 	rsb	r2, r2, #32
 800048a:	fa00 fc02 	lsl.w	ip, r0, r2
 800048e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000492:	f140 0000 	adc.w	r0, r0, #0
 8000496:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049a:	bf08      	it	eq
 800049c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a0:	4770      	bx	lr
 80004a2:	f092 0f00 	teq	r2, #0
 80004a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004aa:	bf02      	ittt	eq
 80004ac:	0040      	lsleq	r0, r0, #1
 80004ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004b2:	3a01      	subeq	r2, #1
 80004b4:	d0f9      	beq.n	80004aa <__aeabi_fmul+0xce>
 80004b6:	ea40 000c 	orr.w	r0, r0, ip
 80004ba:	f093 0f00 	teq	r3, #0
 80004be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004c2:	bf02      	ittt	eq
 80004c4:	0049      	lsleq	r1, r1, #1
 80004c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ca:	3b01      	subeq	r3, #1
 80004cc:	d0f9      	beq.n	80004c2 <__aeabi_fmul+0xe6>
 80004ce:	ea41 010c 	orr.w	r1, r1, ip
 80004d2:	e78f      	b.n	80003f4 <__aeabi_fmul+0x18>
 80004d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	bf18      	it	ne
 80004de:	ea93 0f0c 	teqne	r3, ip
 80004e2:	d00a      	beq.n	80004fa <__aeabi_fmul+0x11e>
 80004e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004e8:	bf18      	it	ne
 80004ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ee:	d1d8      	bne.n	80004a2 <__aeabi_fmul+0xc6>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	4770      	bx	lr
 80004fa:	f090 0f00 	teq	r0, #0
 80004fe:	bf17      	itett	ne
 8000500:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000504:	4608      	moveq	r0, r1
 8000506:	f091 0f00 	teqne	r1, #0
 800050a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800050e:	d014      	beq.n	800053a <__aeabi_fmul+0x15e>
 8000510:	ea92 0f0c 	teq	r2, ip
 8000514:	d101      	bne.n	800051a <__aeabi_fmul+0x13e>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d10f      	bne.n	800053a <__aeabi_fmul+0x15e>
 800051a:	ea93 0f0c 	teq	r3, ip
 800051e:	d103      	bne.n	8000528 <__aeabi_fmul+0x14c>
 8000520:	024b      	lsls	r3, r1, #9
 8000522:	bf18      	it	ne
 8000524:	4608      	movne	r0, r1
 8000526:	d108      	bne.n	800053a <__aeabi_fmul+0x15e>
 8000528:	ea80 0001 	eor.w	r0, r0, r1
 800052c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000530:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000538:	4770      	bx	lr
 800053a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800053e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000542:	4770      	bx	lr

08000544 <__aeabi_drsub>:
 8000544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e002      	b.n	8000550 <__adddf3>
 800054a:	bf00      	nop

0800054c <__aeabi_dsub>:
 800054c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000550 <__adddf3>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	bf1f      	itttt	ne
 8000566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800056e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000576:	f000 80e2 	beq.w	800073e <__adddf3+0x1ee>
 800057a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800057e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000582:	bfb8      	it	lt
 8000584:	426d      	neglt	r5, r5
 8000586:	dd0c      	ble.n	80005a2 <__adddf3+0x52>
 8000588:	442c      	add	r4, r5
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	ea82 0000 	eor.w	r0, r2, r0
 8000596:	ea83 0101 	eor.w	r1, r3, r1
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	2d36      	cmp	r5, #54	; 0x36
 80005a4:	bf88      	it	hi
 80005a6:	bd30      	pophi	{r4, r5, pc}
 80005a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x70>
 80005ba:	4240      	negs	r0, r0
 80005bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005cc:	d002      	beq.n	80005d4 <__adddf3+0x84>
 80005ce:	4252      	negs	r2, r2
 80005d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d4:	ea94 0f05 	teq	r4, r5
 80005d8:	f000 80a7 	beq.w	800072a <__adddf3+0x1da>
 80005dc:	f1a4 0401 	sub.w	r4, r4, #1
 80005e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e4:	db0d      	blt.n	8000602 <__adddf3+0xb2>
 80005e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ea:	fa22 f205 	lsr.w	r2, r2, r5
 80005ee:	1880      	adds	r0, r0, r2
 80005f0:	f141 0100 	adc.w	r1, r1, #0
 80005f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005f8:	1880      	adds	r0, r0, r2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	4159      	adcs	r1, r3
 8000600:	e00e      	b.n	8000620 <__adddf3+0xd0>
 8000602:	f1a5 0520 	sub.w	r5, r5, #32
 8000606:	f10e 0e20 	add.w	lr, lr, #32
 800060a:	2a01      	cmp	r2, #1
 800060c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000610:	bf28      	it	cs
 8000612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000616:	fa43 f305 	asr.w	r3, r3, r5
 800061a:	18c0      	adds	r0, r0, r3
 800061c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	d507      	bpl.n	8000636 <__adddf3+0xe6>
 8000626:	f04f 0e00 	mov.w	lr, #0
 800062a:	f1dc 0c00 	rsbs	ip, ip, #0
 800062e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000632:	eb6e 0101 	sbc.w	r1, lr, r1
 8000636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800063a:	d31b      	bcc.n	8000674 <__adddf3+0x124>
 800063c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000640:	d30c      	bcc.n	800065c <__adddf3+0x10c>
 8000642:	0849      	lsrs	r1, r1, #1
 8000644:	ea5f 0030 	movs.w	r0, r0, rrx
 8000648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800064c:	f104 0401 	add.w	r4, r4, #1
 8000650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000658:	f080 809a 	bcs.w	8000790 <__adddf3+0x240>
 800065c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	ea41 0105 	orr.w	r1, r1, r5
 8000672:	bd30      	pop	{r4, r5, pc}
 8000674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000678:	4140      	adcs	r0, r0
 800067a:	eb41 0101 	adc.w	r1, r1, r1
 800067e:	3c01      	subs	r4, #1
 8000680:	bf28      	it	cs
 8000682:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000686:	d2e9      	bcs.n	800065c <__adddf3+0x10c>
 8000688:	f091 0f00 	teq	r1, #0
 800068c:	bf04      	itt	eq
 800068e:	4601      	moveq	r1, r0
 8000690:	2000      	moveq	r0, #0
 8000692:	fab1 f381 	clz	r3, r1
 8000696:	bf08      	it	eq
 8000698:	3320      	addeq	r3, #32
 800069a:	f1a3 030b 	sub.w	r3, r3, #11
 800069e:	f1b3 0220 	subs.w	r2, r3, #32
 80006a2:	da0c      	bge.n	80006be <__adddf3+0x16e>
 80006a4:	320c      	adds	r2, #12
 80006a6:	dd08      	ble.n	80006ba <__adddf3+0x16a>
 80006a8:	f102 0c14 	add.w	ip, r2, #20
 80006ac:	f1c2 020c 	rsb	r2, r2, #12
 80006b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b4:	fa21 f102 	lsr.w	r1, r1, r2
 80006b8:	e00c      	b.n	80006d4 <__adddf3+0x184>
 80006ba:	f102 0214 	add.w	r2, r2, #20
 80006be:	bfd8      	it	le
 80006c0:	f1c2 0c20 	rsble	ip, r2, #32
 80006c4:	fa01 f102 	lsl.w	r1, r1, r2
 80006c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006cc:	bfdc      	itt	le
 80006ce:	ea41 010c 	orrle.w	r1, r1, ip
 80006d2:	4090      	lslle	r0, r2
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	bfa2      	ittt	ge
 80006d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006dc:	4329      	orrge	r1, r5
 80006de:	bd30      	popge	{r4, r5, pc}
 80006e0:	ea6f 0404 	mvn.w	r4, r4
 80006e4:	3c1f      	subs	r4, #31
 80006e6:	da1c      	bge.n	8000722 <__adddf3+0x1d2>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc0e      	bgt.n	800070a <__adddf3+0x1ba>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0220 	rsb	r2, r4, #32
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f302 	lsl.w	r3, r1, r2
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	fa21 f304 	lsr.w	r3, r1, r4
 8000704:	ea45 0103 	orr.w	r1, r5, r3
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f1c4 040c 	rsb	r4, r4, #12
 800070e:	f1c4 0220 	rsb	r2, r4, #32
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 f304 	lsl.w	r3, r1, r4
 800071a:	ea40 0003 	orr.w	r0, r0, r3
 800071e:	4629      	mov	r1, r5
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	fa21 f004 	lsr.w	r0, r1, r4
 8000726:	4629      	mov	r1, r5
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	f094 0f00 	teq	r4, #0
 800072e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000732:	bf06      	itte	eq
 8000734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000738:	3401      	addeq	r4, #1
 800073a:	3d01      	subne	r5, #1
 800073c:	e74e      	b.n	80005dc <__adddf3+0x8c>
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf18      	it	ne
 8000744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000748:	d029      	beq.n	800079e <__adddf3+0x24e>
 800074a:	ea94 0f05 	teq	r4, r5
 800074e:	bf08      	it	eq
 8000750:	ea90 0f02 	teqeq	r0, r2
 8000754:	d005      	beq.n	8000762 <__adddf3+0x212>
 8000756:	ea54 0c00 	orrs.w	ip, r4, r0
 800075a:	bf04      	itt	eq
 800075c:	4619      	moveq	r1, r3
 800075e:	4610      	moveq	r0, r2
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf1e      	ittt	ne
 8000768:	2100      	movne	r1, #0
 800076a:	2000      	movne	r0, #0
 800076c:	bd30      	popne	{r4, r5, pc}
 800076e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000772:	d105      	bne.n	8000780 <__adddf3+0x230>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	4149      	adcs	r1, r1
 8000778:	bf28      	it	cs
 800077a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000784:	bf3c      	itt	cc
 8000786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800078a:	bd30      	popcc	{r4, r5, pc}
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a2:	bf1a      	itte	ne
 80007a4:	4619      	movne	r1, r3
 80007a6:	4610      	movne	r0, r2
 80007a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ac:	bf1c      	itt	ne
 80007ae:	460b      	movne	r3, r1
 80007b0:	4602      	movne	r2, r0
 80007b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007b6:	bf06      	itte	eq
 80007b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007bc:	ea91 0f03 	teqeq	r1, r3
 80007c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	bf00      	nop

080007c8 <__aeabi_ui2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	f04f 0100 	mov.w	r1, #0
 80007e4:	e750      	b.n	8000688 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2d>:
 80007e8:	f090 0f00 	teq	r0, #0
 80007ec:	bf04      	itt	eq
 80007ee:	2100      	moveq	r1, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	f04f 0100 	mov.w	r1, #0
 8000808:	e73e      	b.n	8000688 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_f2d>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000812:	ea4f 0131 	mov.w	r1, r1, rrx
 8000816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081a:	bf1f      	itttt	ne
 800081c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000828:	4770      	bxne	lr
 800082a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800082e:	bf08      	it	eq
 8000830:	4770      	bxeq	lr
 8000832:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000836:	bf04      	itt	eq
 8000838:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800084c:	e71c      	b.n	8000688 <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_ul2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f04f 0500 	mov.w	r5, #0
 800085e:	e00a      	b.n	8000876 <__aeabi_l2d+0x16>

08000860 <__aeabi_l2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800086e:	d502      	bpl.n	8000876 <__aeabi_l2d+0x16>
 8000870:	4240      	negs	r0, r0
 8000872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000876:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800087a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800087e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000882:	f43f aed8 	beq.w	8000636 <__adddf3+0xe6>
 8000886:	f04f 0203 	mov.w	r2, #3
 800088a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800088e:	bf18      	it	ne
 8000890:	3203      	addne	r2, #3
 8000892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000896:	bf18      	it	ne
 8000898:	3203      	addne	r2, #3
 800089a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800089e:	f1c2 0320 	rsb	r3, r2, #32
 80008a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008a6:	fa20 f002 	lsr.w	r0, r0, r2
 80008aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ae:	ea40 000e 	orr.w	r0, r0, lr
 80008b2:	fa21 f102 	lsr.w	r1, r1, r2
 80008b6:	4414      	add	r4, r2
 80008b8:	e6bd      	b.n	8000636 <__adddf3+0xe6>
 80008ba:	bf00      	nop

080008bc <__gedf2>:
 80008bc:	f04f 3cff 	mov.w	ip, #4294967295
 80008c0:	e006      	b.n	80008d0 <__cmpdf2+0x4>
 80008c2:	bf00      	nop

080008c4 <__ledf2>:
 80008c4:	f04f 0c01 	mov.w	ip, #1
 80008c8:	e002      	b.n	80008d0 <__cmpdf2+0x4>
 80008ca:	bf00      	nop

080008cc <__cmpdf2>:
 80008cc:	f04f 0c01 	mov.w	ip, #1
 80008d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008e6:	d01b      	beq.n	8000920 <__cmpdf2+0x54>
 80008e8:	b001      	add	sp, #4
 80008ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ee:	bf0c      	ite	eq
 80008f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008f4:	ea91 0f03 	teqne	r1, r3
 80008f8:	bf02      	ittt	eq
 80008fa:	ea90 0f02 	teqeq	r0, r2
 80008fe:	2000      	moveq	r0, #0
 8000900:	4770      	bxeq	lr
 8000902:	f110 0f00 	cmn.w	r0, #0
 8000906:	ea91 0f03 	teq	r1, r3
 800090a:	bf58      	it	pl
 800090c:	4299      	cmppl	r1, r3
 800090e:	bf08      	it	eq
 8000910:	4290      	cmpeq	r0, r2
 8000912:	bf2c      	ite	cs
 8000914:	17d8      	asrcs	r0, r3, #31
 8000916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800091a:	f040 0001 	orr.w	r0, r0, #1
 800091e:	4770      	bx	lr
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d102      	bne.n	8000930 <__cmpdf2+0x64>
 800092a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800092e:	d107      	bne.n	8000940 <__cmpdf2+0x74>
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	d1d6      	bne.n	80008e8 <__cmpdf2+0x1c>
 800093a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800093e:	d0d3      	beq.n	80008e8 <__cmpdf2+0x1c>
 8000940:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_cdrcmple>:
 8000948:	4684      	mov	ip, r0
 800094a:	4610      	mov	r0, r2
 800094c:	4662      	mov	r2, ip
 800094e:	468c      	mov	ip, r1
 8000950:	4619      	mov	r1, r3
 8000952:	4663      	mov	r3, ip
 8000954:	e000      	b.n	8000958 <__aeabi_cdcmpeq>
 8000956:	bf00      	nop

08000958 <__aeabi_cdcmpeq>:
 8000958:	b501      	push	{r0, lr}
 800095a:	f7ff ffb7 	bl	80008cc <__cmpdf2>
 800095e:	2800      	cmp	r0, #0
 8000960:	bf48      	it	mi
 8000962:	f110 0f00 	cmnmi.w	r0, #0
 8000966:	bd01      	pop	{r0, pc}

08000968 <__aeabi_dcmpeq>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff fff4 	bl	8000958 <__aeabi_cdcmpeq>
 8000970:	bf0c      	ite	eq
 8000972:	2001      	moveq	r0, #1
 8000974:	2000      	movne	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_dcmplt>:
 800097c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000980:	f7ff ffea 	bl	8000958 <__aeabi_cdcmpeq>
 8000984:	bf34      	ite	cc
 8000986:	2001      	movcc	r0, #1
 8000988:	2000      	movcs	r0, #0
 800098a:	f85d fb08 	ldr.w	pc, [sp], #8
 800098e:	bf00      	nop

08000990 <__aeabi_dcmple>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff ffe0 	bl	8000958 <__aeabi_cdcmpeq>
 8000998:	bf94      	ite	ls
 800099a:	2001      	movls	r0, #1
 800099c:	2000      	movhi	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmpge>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffce 	bl	8000948 <__aeabi_cdrcmple>
 80009ac:	bf94      	ite	ls
 80009ae:	2001      	movls	r0, #1
 80009b0:	2000      	movhi	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmpgt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffc4 	bl	8000948 <__aeabi_cdrcmple>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_f2iz>:
 8000d18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d20:	d30f      	bcc.n	8000d42 <__aeabi_f2iz+0x2a>
 8000d22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2a:	d90d      	bls.n	8000d48 <__aeabi_f2iz+0x30>
 8000d2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d38:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3c:	bf18      	it	ne
 8000d3e:	4240      	negne	r0, r0
 8000d40:	4770      	bx	lr
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	4770      	bx	lr
 8000d48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_f2iz+0x3a>
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	d105      	bne.n	8000d5e <__aeabi_f2iz+0x46>
 8000d52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	bf08      	it	eq
 8000d58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_uldivmod>:
 8000d64:	b953      	cbnz	r3, 8000d7c <__aeabi_uldivmod+0x18>
 8000d66:	b94a      	cbnz	r2, 8000d7c <__aeabi_uldivmod+0x18>
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	2800      	cmpeq	r0, #0
 8000d6e:	bf1c      	itt	ne
 8000d70:	f04f 31ff 	movne.w	r1, #4294967295
 8000d74:	f04f 30ff 	movne.w	r0, #4294967295
 8000d78:	f000 b974 	b.w	8001064 <__aeabi_idiv0>
 8000d7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d84:	f000 f806 	bl	8000d94 <__udivmoddi4>
 8000d88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d90:	b004      	add	sp, #16
 8000d92:	4770      	bx	lr

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9e08      	ldr	r6, [sp, #32]
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4688      	mov	r8, r1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d14d      	bne.n	8000e40 <__udivmoddi4+0xac>
 8000da4:	428a      	cmp	r2, r1
 8000da6:	4694      	mov	ip, r2
 8000da8:	d968      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000daa:	fab2 f282 	clz	r2, r2
 8000dae:	b152      	cbz	r2, 8000dc6 <__udivmoddi4+0x32>
 8000db0:	fa01 f302 	lsl.w	r3, r1, r2
 8000db4:	f1c2 0120 	rsb	r1, r2, #32
 8000db8:	fa20 f101 	lsr.w	r1, r0, r1
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	ea41 0803 	orr.w	r8, r1, r3
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fbb8 fef5 	udiv	lr, r8, r5
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	fb05 831e 	mls	r3, r5, lr, r8
 8000dd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ddc:	fb0e f107 	mul.w	r1, lr, r7
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x68>
 8000de4:	eb1c 0303 	adds.w	r3, ip, r3
 8000de8:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000dec:	f080 811e 	bcs.w	800102c <__udivmoddi4+0x298>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	f240 811b 	bls.w	800102c <__udivmoddi4+0x298>
 8000df6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e04:	fb05 3310 	mls	r3, r5, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 f707 	mul.w	r7, r0, r7
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x96>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	f080 8108 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e20:	42a7      	cmp	r7, r4
 8000e22:	f240 8105 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e30:	2100      	movs	r1, #0
 8000e32:	b11e      	cbz	r6, 8000e3c <__udivmoddi4+0xa8>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	f000 80ee 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e50:	4608      	mov	r0, r1
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f183 	clz	r1, r3
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb65 0303 	sbc.w	r3, r5, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4698      	mov	r8, r3
 8000e72:	2e00      	cmp	r6, #0
 8000e74:	d0e2      	beq.n	8000e3c <__udivmoddi4+0xa8>
 8000e76:	e9c6 4800 	strd	r4, r8, [r6]
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0xa8>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8091 	bne.w	8000fac <__udivmoddi4+0x218>
 8000e8a:	eba1 050c 	sub.w	r5, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2101      	movs	r1, #1
 8000e98:	fbb5 f3f7 	udiv	r3, r5, r7
 8000e9c:	fb07 5013 	mls	r0, r7, r3, r5
 8000ea0:	0c25      	lsrs	r5, r4, #16
 8000ea2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	42a8      	cmp	r0, r5
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0505 	adds.w	r5, ip, r5
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a2d      	subs	r5, r5, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ec8:	fb07 5510 	mls	r5, r7, r0, r5
 8000ecc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4628      	mov	r0, r5
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79e      	b.n	8000e32 <__udivmoddi4+0x9e>
 8000ef4:	f1c1 0720 	rsb	r7, r1, #32
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa05 f301 	lsl.w	r3, r5, r1
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f301 	lsl.w	r3, r0, r1
 8000f16:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 5518 	mls	r5, r9, r8, r5
 8000f24:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	42a8      	cmp	r0, r5
 8000f2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0505 	adds.w	r5, ip, r5
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4465      	add	r5, ip
 8000f4c:	1a2d      	subs	r5, r5, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f54:	fb09 5510 	mls	r5, r9, r0, r5
 8000f58:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	45ae      	cmp	lr, r5
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0505 	adds.w	r5, ip, r5
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	45ae      	cmp	lr, r5
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4465      	add	r5, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba5 050e 	sub.w	r5, r5, lr
 8000f82:	42a5      	cmp	r5, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15e      	cbz	r6, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb65 050e 	sbc.w	r5, r5, lr
 8000f96:	fa05 f707 	lsl.w	r7, r5, r7
 8000f9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f9e:	40cd      	lsrs	r5, r1
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c6 7500 	strd	r7, r5, [r6]
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fac:	f1c2 0320 	rsb	r3, r2, #32
 8000fb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa25 f303 	lsr.w	r3, r5, r3
 8000fbc:	4095      	lsls	r5, r2
 8000fbe:	430d      	orrs	r5, r1
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fcc:	fb07 3011 	mls	r0, r7, r1, r3
 8000fd0:	0c2b      	lsrs	r3, r5, #16
 8000fd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000fd6:	fb01 f00e 	mul.w	r0, r1, lr
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1a1b      	subs	r3, r3, r0
 8000ff6:	b2ad      	uxth	r5, r5
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3310 	mls	r3, r7, r0, r3
 8001000:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001004:	fb00 f30e 	mul.w	r3, r0, lr
 8001008:	42ab      	cmp	r3, r5
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0505 	adds.w	r5, ip, r5
 8001010:	f100 38ff 	add.w	r8, r0, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	42ab      	cmp	r3, r5
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3802      	subs	r0, #2
 800101c:	4465      	add	r5, ip
 800101e:	1aed      	subs	r5, r5, r3
 8001020:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	4631      	mov	r1, r6
 8001028:	4630      	mov	r0, r6
 800102a:	e707      	b.n	8000e3c <__udivmoddi4+0xa8>
 800102c:	4686      	mov	lr, r0
 800102e:	e6e5      	b.n	8000dfc <__udivmoddi4+0x68>
 8001030:	4618      	mov	r0, r3
 8001032:	e6fa      	b.n	8000e2a <__udivmoddi4+0x96>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4640      	mov	r0, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4641      	mov	r1, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4465      	add	r5, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4608      	mov	r0, r1
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001068:	b500      	push	{lr}
 800106a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001072:	f042 0204 	orr.w	r2, r2, #4
 8001076:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800107a:	f002 0204 	and.w	r2, r2, #4
 800107e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001080:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800108a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001092:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2102      	movs	r1, #2
 8001098:	200f      	movs	r0, #15
 800109a:	f001 fd37 	bl	8002b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800109e:	200f      	movs	r0, #15
 80010a0:	f001 fd6c 	bl	8002b7c <HAL_NVIC_EnableIRQ>

}
 80010a4:	b003      	add	sp, #12
 80010a6:	f85d fb04 	ldr.w	pc, [sp], #4

080010aa <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80010aa:	2300      	movs	r3, #0
 80010ac:	e001      	b.n	80010b2 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80010ae:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 80010b0:	3308      	adds	r3, #8
 80010b2:	428b      	cmp	r3, r1
 80010b4:	d20a      	bcs.n	80010cc <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 80010b6:	6842      	ldr	r2, [r0, #4]
 80010b8:	f8d0 c000 	ldr.w	ip, [r0]
 80010bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80010c0:	bf08      	it	eq
 80010c2:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 80010c6:	d0f2      	beq.n	80010ae <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80010c8:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80010ca:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80010cc:	2000      	movs	r0, #0
 80010ce:	4770      	bx	lr

080010d0 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80010d0:	b130      	cbz	r0, 80010e0 <FLASH_IF_INT_Read+0x10>
{
 80010d2:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80010d4:	b139      	cbz	r1, 80010e6 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80010d6:	b292      	uxth	r2, r2
 80010d8:	f010 fb00 	bl	80116dc <UTIL_MEM_cpy_8>
  return ret_status;
 80010dc:	2000      	movs	r0, #0
}
 80010de:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 80010e0:	f06f 0005 	mvn.w	r0, #5
}
 80010e4:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 80010e6:	f06f 0005 	mvn.w	r0, #5
 80010ea:	e7f8      	b.n	80010de <FLASH_IF_INT_Read+0xe>

080010ec <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80010ec:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80010ee:	f002 f815 	bl	800311c <HAL_FLASH_Unlock>
 80010f2:	b978      	cbnz	r0, 8001114 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <FLASH_IF_INT_Clear_Error+0x30>)
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80010fc:	619a      	str	r2, [r3, #24]
 80010fe:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001102:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001104:	f002 f822 	bl	800314c <HAL_FLASH_Lock>
 8001108:	b908      	cbnz	r0, 800110e <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800110a:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 800110c:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800110e:	f06f 0004 	mvn.w	r0, #4
 8001112:	e7fb      	b.n	800110c <FLASH_IF_INT_Clear_Error+0x20>
 8001114:	f06f 0004 	mvn.w	r0, #4
 8001118:	e7f8      	b.n	800110c <FLASH_IF_INT_Clear_Error+0x20>
 800111a:	bf00      	nop
 800111c:	58004000 	.word	0x58004000

08001120 <FLASH_IF_INT_Erase>:
{
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8001128:	2800      	cmp	r0, #0
 800112a:	d039      	beq.n	80011a0 <FLASH_IF_INT_Erase+0x80>
 800112c:	460e      	mov	r6, r1
 800112e:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001130:	f7ff ffdc 	bl	80010ec <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001134:	4605      	mov	r5, r0
 8001136:	b110      	cbz	r0, 800113e <FLASH_IF_INT_Erase+0x1e>
}
 8001138:	4628      	mov	r0, r5
 800113a:	b004      	add	sp, #16
 800113c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 800113e:	f001 ffed 	bl	800311c <HAL_FLASH_Unlock>
 8001142:	bb80      	cbnz	r0, 80011a6 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001144:	2302      	movs	r3, #2
 8001146:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001148:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 800114c:	4817      	ldr	r0, [pc, #92]	; (80011ac <FLASH_IF_INT_Erase+0x8c>)
 800114e:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <FLASH_IF_INT_Erase+0x90>)
 8001154:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001158:	fbb3 fcf1 	udiv	ip, r3, r1
 800115c:	fb01 331c 	mls	r3, r1, ip, r3
 8001160:	0adb      	lsrs	r3, r3, #11
 8001162:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001164:	4434      	add	r4, r6
 8001166:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 800116a:	3c01      	subs	r4, #1
 800116c:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001170:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 8001174:	fbb4 f1f2 	udiv	r1, r4, r2
 8001178:	fb02 4411 	mls	r4, r2, r1, r4
 800117c:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 8001180:	3401      	adds	r4, #1
 8001182:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001184:	a903      	add	r1, sp, #12
 8001186:	4668      	mov	r0, sp
 8001188:	f002 f8ac 	bl	80032e4 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 800118c:	b118      	cbz	r0, 8001196 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800118e:	2802      	cmp	r0, #2
 8001190:	d004      	beq.n	800119c <FLASH_IF_INT_Erase+0x7c>
 8001192:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8001196:	f001 ffd9 	bl	800314c <HAL_FLASH_Lock>
 800119a:	e7cd      	b.n	8001138 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800119c:	2501      	movs	r5, #1
 800119e:	e7fa      	b.n	8001196 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80011a0:	f06f 0505 	mvn.w	r5, #5
 80011a4:	e7c8      	b.n	8001138 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80011a6:	f06f 0504 	mvn.w	r5, #4
 80011aa:	e7c5      	b.n	8001138 <FLASH_IF_INT_Erase+0x18>
 80011ac:	1fff7000 	.word	0x1fff7000
 80011b0:	03fffc00 	.word	0x03fffc00

080011b4 <FLASH_IF_INT_Write>:
{
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b8:	b089      	sub	sp, #36	; 0x24
 80011ba:	9003      	str	r0, [sp, #12]
 80011bc:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 80011be:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80011c0:	2800      	cmp	r0, #0
 80011c2:	f000 80a9 	beq.w	8001318 <FLASH_IF_INT_Write+0x164>
 80011c6:	4683      	mov	fp, r0
 80011c8:	2900      	cmp	r1, #0
 80011ca:	f000 80a9 	beq.w	8001320 <FLASH_IF_INT_Write+0x16c>
 80011ce:	f012 0f07 	tst.w	r2, #7
 80011d2:	f040 80a9 	bne.w	8001328 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80011d6:	f010 0307 	ands.w	r3, r0, #7
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	f040 80a8 	bne.w	8001330 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 80011e0:	f7ff ff84 	bl	80010ec <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	b118      	cbz	r0, 80011f0 <FLASH_IF_INT_Write+0x3c>
}
 80011e8:	9802      	ldr	r0, [sp, #8]
 80011ea:	b009      	add	sp, #36	; 0x24
 80011ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80011f0:	f001 ff94 	bl	800311c <HAL_FLASH_Unlock>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	f040 809f 	bne.w	8001338 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 80011fa:	9c03      	ldr	r4, [sp, #12]
 80011fc:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <FLASH_IF_INT_Write+0x18c>)
 8001202:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 8001206:	494f      	ldr	r1, [pc, #316]	; (8001344 <FLASH_IF_INT_Write+0x190>)
 8001208:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 800120c:	fbb3 f2f1 	udiv	r2, r3, r1
 8001210:	fb01 3212 	mls	r2, r1, r2, r3
 8001214:	0ad3      	lsrs	r3, r2, #11
 8001216:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001218:	9b04      	ldr	r3, [sp, #16]
 800121a:	18e3      	adds	r3, r4, r3
 800121c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001220:	3b01      	subs	r3, #1
 8001222:	fbb3 f0f1 	udiv	r0, r3, r1
 8001226:	fb01 3310 	mls	r3, r1, r0, r3
 800122a:	0adb      	lsrs	r3, r3, #11
 800122c:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001230:	3301      	adds	r3, #1
 8001232:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001234:	2b01      	cmp	r3, #1
 8001236:	d906      	bls.n	8001246 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001238:	f3c4 090a 	ubfx	r9, r4, #0, #11
 800123c:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 8001240:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001244:	e02f      	b.n	80012a6 <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 8001246:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800124a:	e7f9      	b.n	8001240 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 800124c:	46c8      	mov	r8, r9
          current_source = uSource;
 800124e:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001250:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001252:	9d05      	ldr	r5, [sp, #20]
 8001254:	4545      	cmp	r5, r8
 8001256:	d215      	bcs.n	8001284 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001258:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800125a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800125e:	4621      	mov	r1, r4
 8001260:	2001      	movs	r0, #1
 8001262:	f001 ffb7 	bl	80031d4 <HAL_FLASH_Program>
 8001266:	b950      	cbnz	r0, 800127e <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	6862      	ldr	r2, [r4, #4]
 800126c:	59e9      	ldr	r1, [r5, r7]
 800126e:	6873      	ldr	r3, [r6, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	bf08      	it	eq
 8001274:	4288      	cmpeq	r0, r1
 8001276:	d141      	bne.n	80012fc <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8001278:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800127a:	3508      	adds	r5, #8
 800127c:	e7ea      	b.n	8001254 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 800127e:	f06f 0303 	mvn.w	r3, #3
 8001282:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001284:	9b02      	ldr	r3, [sp, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d13f      	bne.n	800130a <FLASH_IF_INT_Write+0x156>
        uDest += length;
 800128a:	44cb      	add	fp, r9
        uSource += length;
 800128c:	9b01      	ldr	r3, [sp, #4]
 800128e:	444b      	add	r3, r9
 8001290:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001292:	9b04      	ldr	r3, [sp, #16]
 8001294:	eba3 0909 	sub.w	r9, r3, r9
 8001298:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 800129c:	bf28      	it	cs
 800129e:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80012a2:	f10a 0a01 	add.w	sl, sl, #1
 80012a6:	9b06      	ldr	r3, [sp, #24]
 80012a8:	9a07      	ldr	r2, [sp, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	4553      	cmp	r3, sl
 80012ae:	d92c      	bls.n	800130a <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80012b0:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 80012b4:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80012b6:	4649      	mov	r1, r9
 80012b8:	9803      	ldr	r0, [sp, #12]
 80012ba:	f7ff fef6 	bl	80010aa <FLASH_IF_INT_IsEmpty>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d0c4      	beq.n	800124c <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <FLASH_IF_INT_Write+0x194>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	b1e8      	cbz	r0, 8001304 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80012c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012cc:	4621      	mov	r1, r4
 80012ce:	f7ff feff 	bl	80010d0 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <FLASH_IF_INT_Write+0x194>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f3cb 030a 	ubfx	r3, fp, #0, #11
 80012da:	fa1f f289 	uxth.w	r2, r9
 80012de:	9901      	ldr	r1, [sp, #4]
 80012e0:	4418      	add	r0, r3
 80012e2:	f010 f9fb 	bl	80116dc <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff ff18 	bl	8001120 <FLASH_IF_INT_Erase>
 80012f0:	b970      	cbnz	r0, 8001310 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <FLASH_IF_INT_Write+0x194>)
 80012f4:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80012f6:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80012fa:	e7aa      	b.n	8001252 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 80012fc:	f06f 0303 	mvn.w	r3, #3
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	e7bf      	b.n	8001284 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001304:	f06f 0305 	mvn.w	r3, #5
 8001308:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800130a:	f001 ff1f 	bl	800314c <HAL_FLASH_Lock>
 800130e:	e76b      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001310:	f06f 0301 	mvn.w	r3, #1
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	e7f8      	b.n	800130a <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 8001318:	f06f 0305 	mvn.w	r3, #5
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	e763      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
 8001320:	f06f 0305 	mvn.w	r3, #5
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	e75f      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
 8001328:	f06f 0305 	mvn.w	r3, #5
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	e75b      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
 8001330:	f06f 0305 	mvn.w	r3, #5
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	e757      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001338:	f06f 0304 	mvn.w	r3, #4
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	e753      	b.n	80011e8 <FLASH_IF_INT_Write+0x34>
 8001340:	1fff7000 	.word	0x1fff7000
 8001344:	03fffc00 	.word	0x03fffc00
 8001348:	20000144 	.word	0x20000144

0800134c <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800134c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001350:	d30e      	bcc.n	8001370 <FLASH_IF_Write+0x24>
{
 8001352:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <FLASH_IF_Write+0x30>)
 8001356:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <FLASH_IF_Write+0x34>)
 800135c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001360:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001364:	3b01      	subs	r3, #1
 8001366:	4298      	cmp	r0, r3
 8001368:	d805      	bhi.n	8001376 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800136a:	f7ff ff23 	bl	80011b4 <FLASH_IF_INT_Write>
}
 800136e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001374:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
 800137a:	e7f8      	b.n	800136e <FLASH_IF_Write+0x22>
 800137c:	1fff7000 	.word	0x1fff7000
 8001380:	03fffc00 	.word	0x03fffc00

08001384 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001384:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001388:	d30e      	bcc.n	80013a8 <FLASH_IF_Read+0x24>
{
 800138a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <FLASH_IF_Read+0x30>)
 800138e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <FLASH_IF_Read+0x34>)
 8001394:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001398:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800139c:	3b01      	subs	r3, #1
 800139e:	4299      	cmp	r1, r3
 80013a0:	d805      	bhi.n	80013ae <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80013a2:	f7ff fe95 	bl	80010d0 <FLASH_IF_INT_Read>
}
 80013a6:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013ac:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295
 80013b2:	e7f8      	b.n	80013a6 <FLASH_IF_Read+0x22>
 80013b4:	1fff7000 	.word	0x1fff7000
 80013b8:	03fffc00 	.word	0x03fffc00

080013bc <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80013bc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80013c0:	d30e      	bcc.n	80013e0 <FLASH_IF_Erase+0x24>
{
 80013c2:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <FLASH_IF_Erase+0x30>)
 80013c6:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <FLASH_IF_Erase+0x34>)
 80013cc:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80013d0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4298      	cmp	r0, r3
 80013d8:	d805      	bhi.n	80013e6 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80013da:	f7ff fea1 	bl	8001120 <FLASH_IF_INT_Erase>
}
 80013de:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013e4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	e7f8      	b.n	80013de <FLASH_IF_Erase+0x22>
 80013ec:	1fff7000 	.word	0x1fff7000
 80013f0:	03fffc00 	.word	0x03fffc00

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	2400      	movs	r4, #0
 80013fa:	9403      	str	r4, [sp, #12]
 80013fc:	9404      	str	r4, [sp, #16]
 80013fe:	9405      	str	r4, [sp, #20]
 8001400:	9406      	str	r4, [sp, #24]
 8001402:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001412:	f002 0201 	and.w	r2, r2, #1
 8001416:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001418:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800141a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141c:	f042 0204 	orr.w	r2, r2, #4
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001424:	f002 0204 	and.w	r2, r2, #4
 8001428:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800142a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142e:	f042 0202 	orr.w	r2, r2, #2
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800143c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_MES_Pin|PROB2_Pin|PROB1_Pin, GPIO_PIN_RESET);
 800143e:	4d1c      	ldr	r5, [pc, #112]	; (80014b0 <MX_GPIO_Init+0xbc>)
 8001440:	4622      	mov	r2, r4
 8001442:	f243 0110 	movw	r1, #12304	; 0x3010
 8001446:	4628      	mov	r0, r5
 8001448:	f002 f8dc 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENS_HDC_PWM_Pin|KEEP_ALIVE_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800144c:	4622      	mov	r2, r4
 800144e:	f240 7101 	movw	r1, #1793	; 0x701
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f002 f8d5 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_MES_Pin;
 800145a:	2310      	movs	r3, #16
 800145c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2601      	movs	r6, #1
 8001460:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(EN_MES_GPIO_Port, &GPIO_InitStruct);
 8001466:	a903      	add	r1, sp, #12
 8001468:	4628      	mov	r0, r5
 800146a:	f001 ff7b 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENS_HDC_PWM_Pin|KEEP_ALIVE_Pin|LED2_Pin|LED1_Pin;
 800146e:	f240 7301 	movw	r3, #1793	; 0x701
 8001472:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	a903      	add	r1, sp, #12
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f001 ff70 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUT1_Pin|LEAK_SENSOR_Pin;
 8001484:	2324      	movs	r3, #36	; 0x24
 8001486:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	a903      	add	r1, sp, #12
 800148e:	4628      	mov	r0, r5
 8001490:	f001 ff68 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001494:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001498:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	a903      	add	r1, sp, #12
 80014a4:	4628      	mov	r0, r5
 80014a6:	f001 ff5d 	bl	8003364 <HAL_GPIO_Init>

}
 80014aa:	b008      	add	sp, #32
 80014ac:	bd70      	pop	{r4, r5, r6, pc}
 80014ae:	bf00      	nop
 80014b0:	48000400 	.word	0x48000400

080014b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014b4:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_I2C2_Init+0x4c>)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C2_Init+0x50>)
 80014ba:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_I2C2_Init+0x54>)
 80014be:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	2201      	movs	r2, #1
 80014c6:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014cc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d2:	f002 fa40 	bl	8003956 <HAL_I2C_Init>
 80014d6:	b950      	cbnz	r0, 80014ee <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <MX_I2C2_Init+0x4c>)
 80014dc:	f002 fc16 	bl	8003d0c <HAL_I2CEx_ConfigAnalogFilter>
 80014e0:	b940      	cbnz	r0, 80014f4 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <MX_I2C2_Init+0x4c>)
 80014e6:	f002 fc3f 	bl	8003d68 <HAL_I2CEx_ConfigDigitalFilter>
 80014ea:	b930      	cbnz	r0, 80014fa <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80014ee:	f000 f853 	bl	8001598 <Error_Handler>
 80014f2:	e7f1      	b.n	80014d8 <MX_I2C2_Init+0x24>
    Error_Handler();
 80014f4:	f000 f850 	bl	8001598 <Error_Handler>
 80014f8:	e7f3      	b.n	80014e2 <MX_I2C2_Init+0x2e>
    Error_Handler();
 80014fa:	f000 f84d 	bl	8001598 <Error_Handler>
}
 80014fe:	e7f5      	b.n	80014ec <MX_I2C2_Init+0x38>
 8001500:	20000148 	.word	0x20000148
 8001504:	40005800 	.word	0x40005800
 8001508:	20303e5d 	.word	0x20303e5d

0800150c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800150c:	b510      	push	{r4, lr}
 800150e:	b096      	sub	sp, #88	; 0x58
 8001510:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	2100      	movs	r1, #0
 8001514:	9111      	str	r1, [sp, #68]	; 0x44
 8001516:	9112      	str	r1, [sp, #72]	; 0x48
 8001518:	9113      	str	r1, [sp, #76]	; 0x4c
 800151a:	9114      	str	r1, [sp, #80]	; 0x50
 800151c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151e:	2238      	movs	r2, #56	; 0x38
 8001520:	a803      	add	r0, sp, #12
 8001522:	f010 fd9d 	bl	8012060 <memset>
  if(i2cHandle->Instance==I2C2)
 8001526:	6822      	ldr	r2, [r4, #0]
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_I2C_MspInit+0x88>)
 800152a:	429a      	cmp	r2, r3
 800152c:	d001      	beq.n	8001532 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800152e:	b016      	add	sp, #88	; 0x58
 8001530:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001536:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800153a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153c:	a803      	add	r0, sp, #12
 800153e:	f003 fa69 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	bb18      	cbnz	r0, 800158c <HAL_I2C_MspInit+0x80>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001544:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001548:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001550:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001558:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800155a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800155e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800156a:	2304      	movs	r3, #4
 800156c:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	a911      	add	r1, sp, #68	; 0x44
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f001 fef6 	bl	8003364 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800157a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157e:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001580:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001588:	9b01      	ldr	r3, [sp, #4]
}
 800158a:	e7d0      	b.n	800152e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800158c:	f000 f804 	bl	8001598 <Error_Handler>
 8001590:	e7d8      	b.n	8001544 <HAL_I2C_MspInit+0x38>
 8001592:	bf00      	nop
 8001594:	40005800 	.word	0x40005800

08001598 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159a:	e7fe      	b.n	800159a <Error_Handler+0x2>

0800159c <SystemClock_Config>:
{
 800159c:	b510      	push	{r4, lr}
 800159e:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a0:	2248      	movs	r2, #72	; 0x48
 80015a2:	2100      	movs	r1, #0
 80015a4:	a808      	add	r0, sp, #32
 80015a6:	f010 fd5b 	bl	8012060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015aa:	2400      	movs	r4, #0
 80015ac:	9401      	str	r4, [sp, #4]
 80015ae:	9402      	str	r4, [sp, #8]
 80015b0:	9403      	str	r4, [sp, #12]
 80015b2:	9404      	str	r4, [sp, #16]
 80015b4:	9405      	str	r4, [sp, #20]
 80015b6:	9406      	str	r4, [sp, #24]
 80015b8:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80015ba:	f002 fc01 	bl	8003dc0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015c6:	f023 0318 	bic.w	r3, r3, #24
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015e8:	2324      	movs	r3, #36	; 0x24
 80015ea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ec:	2381      	movs	r3, #129	; 0x81
 80015ee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015f4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015f6:	23b0      	movs	r3, #176	; 0xb0
 80015f8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015fa:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	a808      	add	r0, sp, #32
 80015fe:	f002 fd79 	bl	80040f4 <HAL_RCC_OscConfig>
 8001602:	b970      	cbnz	r0, 8001622 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001604:	234f      	movs	r3, #79	; 0x4f
 8001606:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001608:	2300      	movs	r3, #0
 800160a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001612:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	2102      	movs	r1, #2
 8001616:	a801      	add	r0, sp, #4
 8001618:	f003 f8a8 	bl	800476c <HAL_RCC_ClockConfig>
 800161c:	b918      	cbnz	r0, 8001626 <SystemClock_Config+0x8a>
}
 800161e:	b01a      	add	sp, #104	; 0x68
 8001620:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001622:	f7ff ffb9 	bl	8001598 <Error_Handler>
    Error_Handler();
 8001626:	f7ff ffb7 	bl	8001598 <Error_Handler>

0800162a <main>:
{
 800162a:	b508      	push	{r3, lr}
  HAL_Init();
 800162c:	f001 fa0e 	bl	8002a4c <HAL_Init>
  SystemClock_Config();
 8001630:	f7ff ffb4 	bl	800159c <SystemClock_Config>
  MX_GPIO_Init();
 8001634:	f7ff fede 	bl	80013f4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001638:	f000 fccc 	bl	8001fd4 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800163c:	f7ff ff3a 	bl	80014b4 <MX_I2C2_Init>
    MX_LoRaWAN_Process();
 8001640:	f000 fcce 	bl	8001fe0 <MX_LoRaWAN_Process>
  while (1)
 8001644:	e7fc      	b.n	8001640 <main+0x16>
	...

08001648 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001648:	b500      	push	{lr}
 800164a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800164c:	222c      	movs	r2, #44	; 0x2c
 800164e:	2100      	movs	r1, #0
 8001650:	a801      	add	r0, sp, #4
 8001652:	f010 fd05 	bl	8012060 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001656:	4819      	ldr	r0, [pc, #100]	; (80016bc <MX_RTC_Init+0x74>)
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_RTC_Init+0x78>)
 800165a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800165c:	231f      	movs	r3, #31
 800165e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001664:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001666:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800166e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001674:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001676:	f003 fbdf 	bl	8004e38 <HAL_RTC_Init>
 800167a:	b9a8      	cbnz	r0, 80016a8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <MX_RTC_Init+0x74>)
 800167e:	f003 fd15 	bl	80050ac <HAL_RTCEx_SetSSRU_IT>
 8001682:	b9a0      	cbnz	r0, 80016ae <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001684:	2200      	movs	r2, #0
 8001686:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001688:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800168a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800168c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001690:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001698:	a901      	add	r1, sp, #4
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_RTC_Init+0x74>)
 800169c:	f003 fc2a 	bl	8004ef4 <HAL_RTC_SetAlarm_IT>
 80016a0:	b940      	cbnz	r0, 80016b4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016a2:	b00d      	add	sp, #52	; 0x34
 80016a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016a8:	f7ff ff76 	bl	8001598 <Error_Handler>
 80016ac:	e7e6      	b.n	800167c <MX_RTC_Init+0x34>
    Error_Handler();
 80016ae:	f7ff ff73 	bl	8001598 <Error_Handler>
 80016b2:	e7e7      	b.n	8001684 <MX_RTC_Init+0x3c>
    Error_Handler();
 80016b4:	f7ff ff70 	bl	8001598 <Error_Handler>
}
 80016b8:	e7f3      	b.n	80016a2 <MX_RTC_Init+0x5a>
 80016ba:	bf00      	nop
 80016bc:	20000194 	.word	0x20000194
 80016c0:	40002800 	.word	0x40002800

080016c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ca:	2238      	movs	r2, #56	; 0x38
 80016cc:	2100      	movs	r1, #0
 80016ce:	a802      	add	r0, sp, #8
 80016d0:	f010 fcc6 	bl	8012060 <memset>
  if(rtcHandle->Instance==RTC)
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RTC_MspInit+0x7c>)
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016dc:	b010      	add	sp, #64	; 0x40
 80016de:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ec:	a802      	add	r0, sp, #8
 80016ee:	f003 f991 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	bb08      	cbnz	r0, 8001738 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80016fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001706:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800170a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001712:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001714:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	4611      	mov	r1, r2
 800171a:	2002      	movs	r0, #2
 800171c:	f001 f9f6 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001720:	2002      	movs	r0, #2
 8001722:	f001 fa2b 	bl	8002b7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	4611      	mov	r1, r2
 800172a:	202a      	movs	r0, #42	; 0x2a
 800172c:	f001 f9ee 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001730:	202a      	movs	r0, #42	; 0x2a
 8001732:	f001 fa23 	bl	8002b7c <HAL_NVIC_EnableIRQ>
}
 8001736:	e7d1      	b.n	80016dc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001738:	f7ff ff2e 	bl	8001598 <Error_Handler>
 800173c:	e7da      	b.n	80016f4 <HAL_RTC_MspInit+0x30>
 800173e:	bf00      	nop
 8001740:	40002800 	.word	0x40002800

08001744 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001744:	4770      	bx	lr

08001746 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001746:	4770      	bx	lr

08001748 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800174a:	f001 f995 	bl	8002a78 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800174e:	2001      	movs	r0, #1
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <PWR_EnterStopMode+0x14>)
 8001752:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001756:	f002 fb97 	bl	8003e88 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800175a:	bd08      	pop	{r3, pc}
 800175c:	58000400 	.word	0x58000400

08001760 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001760:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001762:	f001 f990 	bl	8002a86 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001766:	bd08      	pop	{r3, pc}

08001768 <PWR_ExitStopMode>:
{
 8001768:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800176a:	f001 f98c 	bl	8002a86 <HAL_ResumeTick>
  vcom_Resume();
 800176e:	f000 fbf1 	bl	8001f54 <vcom_Resume>
}
 8001772:	bd08      	pop	{r3, pc}

08001774 <PWR_EnterSleepMode>:
{
 8001774:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001776:	f001 f97f 	bl	8002a78 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800177a:	2101      	movs	r1, #1
 800177c:	2000      	movs	r0, #0
 800177e:	f002 fb27 	bl	8003dd0 <HAL_PWR_EnterSLEEPMode>
}
 8001782:	bd08      	pop	{r3, pc}

08001784 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	4770      	bx	lr

08001786 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <NMI_Handler>

08001788 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <HardFault_Handler>

0800178a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <MemManage_Handler>

0800178c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <BusFault_Handler>

0800178e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <UsageFault_Handler>

08001790 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	4770      	bx	lr

08001794 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	4770      	bx	lr

08001798 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001798:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 800179c:	f003 fcb2 	bl	8005104 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017a0:	bd08      	pop	{r3, pc}
 80017a2:	bf00      	nop
 80017a4:	20000194 	.word	0x20000194

080017a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017aa:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel5_IRQHandler+0xc>)
 80017ac:	f001 fc04 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017b0:	bd08      	pop	{r3, pc}
 80017b2:	bf00      	nop
 80017b4:	200001e0 	.word	0x200001e0

080017b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ba:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART2_IRQHandler+0xc>)
 80017bc:	f004 f95e 	bl	8005a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop
 80017c4:	20000240 	.word	0x20000240

080017c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017ca:	4802      	ldr	r0, [pc, #8]	; (80017d4 <RTC_Alarm_IRQHandler+0xc>)
 80017cc:	f003 faac 	bl	8004d28 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017d0:	bd08      	pop	{r3, pc}
 80017d2:	bf00      	nop
 80017d4:	20000194 	.word	0x20000194

080017d8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80017da:	4802      	ldr	r0, [pc, #8]	; (80017e4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80017dc:	f003 ff3c 	bl	8005658 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	200001cc 	.word	0x200001cc

080017e8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80017e8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SUBGHZ_Init+0x18>)
 80017ec:	2308      	movs	r3, #8
 80017ee:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017f0:	f003 fcbe 	bl	8005170 <HAL_SUBGHZ_Init>
 80017f4:	b900      	cbnz	r0, 80017f8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017f8:	f7ff fece 	bl	8001598 <Error_Handler>
}
 80017fc:	e7fb      	b.n	80017f6 <MX_SUBGHZ_Init+0xe>
 80017fe:	bf00      	nop
 8001800:	200001cc 	.word	0x200001cc

08001804 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001804:	b500      	push	{lr}
 8001806:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800181c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	4611      	mov	r1, r2
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f001 f972 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f001 f9a7 	bl	8002b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800182e:	b003      	add	sp, #12
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4

08001834 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001834:	b40c      	push	{r2, r3}
 8001836:	b500      	push	{lr}
 8001838:	b083      	sub	sp, #12
 800183a:	ab04      	add	r3, sp, #16
 800183c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001840:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001842:	f010 fb25 	bl	8011e90 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001846:	b003      	add	sp, #12
 8001848:	f85d eb04 	ldr.w	lr, [sp], #4
 800184c:	b002      	add	sp, #8
 800184e:	4770      	bx	lr

08001850 <TimestampNow>:
{
 8001850:	b530      	push	{r4, r5, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001858:	a802      	add	r0, sp, #8
 800185a:	f010 f88f 	bl	801197c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800185e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	9b02      	ldr	r3, [sp, #8]
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <TimestampNow+0x2c>)
 8001868:	2110      	movs	r1, #16
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff ffe2 	bl	8001834 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001870:	4620      	mov	r0, r4
 8001872:	f7fe fc81 	bl	8000178 <strlen>
 8001876:	8028      	strh	r0, [r5, #0]
}
 8001878:	b005      	add	sp, #20
 800187a:	bd30      	pop	{r4, r5, pc}
 800187c:	08012204 	.word	0x08012204

08001880 <SystemApp_Init>:
{
 8001880:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	6893      	ldr	r3, [r2, #8]
 8001888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800188c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800188e:	f010 f8f9 	bl	8011a84 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001892:	2401      	movs	r4, #1
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <SystemApp_Init+0x48>)
 8001896:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001898:	f000 f8a0 	bl	80019dc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800189c:	f00f fd94 	bl	80113c8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <SystemApp_Init+0x4c>)
 80018a2:	f00f fdab 	bl	80113fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <SystemApp_Init+0x50>)
 80018a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ac:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80018ae:	2002      	movs	r0, #2
 80018b0:	f00f fdaa 	bl	8011408 <UTIL_ADV_TRACE_SetVerboseLevel>
  EnvSensors_Init();
 80018b4:	f000 f8ec 	bl	8001a90 <EnvSensors_Init>
  UTIL_LPM_Init();
 80018b8:	f00f feb6 	bl	8011628 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80018bc:	4621      	mov	r1, r4
 80018be:	4620      	mov	r0, r4
 80018c0:	f00f fed2 	bl	8011668 <UTIL_LPM_SetOffMode>
}
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	200001d8 	.word	0x200001d8
 80018cc:	08001851 	.word	0x08001851
 80018d0:	58004000 	.word	0x58004000

080018d4 <UTIL_SEQ_Idle>:
{
 80018d4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80018d6:	f00f fedd 	bl	8011694 <UTIL_LPM_EnterLowPower>
}
 80018da:	bd08      	pop	{r3, pc}

080018dc <GetBatteryLevel>:
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <GetTemperatureLevel>:
{
 80018e0:	b500      	push	{lr}
 80018e2:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80018e4:	4668      	mov	r0, sp
 80018e6:	f000 f8bd 	bl	8001a64 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80018ea:	9801      	ldr	r0, [sp, #4]
 80018ec:	f7ff fa14 	bl	8000d18 <__aeabi_f2iz>
}
 80018f0:	b200      	sxth	r0, r0
 80018f2:	b007      	add	sp, #28
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <GetUniqueId>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
 80018fa:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <GetUniqueId+0x68>)
 80018fe:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001906:	d013      	beq.n	8001930 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001908:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 800190a:	0a1a      	lsrs	r2, r3, #8
 800190c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 800190e:	0c1a      	lsrs	r2, r3, #16
 8001910:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001912:	0e1b      	lsrs	r3, r3, #24
 8001914:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <GetUniqueId+0x68>)
 8001918:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 800191c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800191e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001922:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001924:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001926:	0c1a      	lsrs	r2, r3, #16
 8001928:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 800192a:	0e1b      	lsrs	r3, r3, #24
 800192c:	7003      	strb	r3, [r0, #0]
}
 800192e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001930:	f001 f8b0 	bl	8002a94 <HAL_GetUIDw0>
 8001934:	4605      	mov	r5, r0
 8001936:	f001 f8b9 	bl	8002aac <HAL_GetUIDw2>
 800193a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800193c:	f001 f8b0 	bl	8002aa0 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001940:	0e2b      	lsrs	r3, r5, #24
 8001942:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001944:	0c2b      	lsrs	r3, r5, #16
 8001946:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001948:	0a2b      	lsrs	r3, r5, #8
 800194a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800194c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800194e:	0e03      	lsrs	r3, r0, #24
 8001950:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001952:	0c03      	lsrs	r3, r0, #16
 8001954:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001956:	0a03      	lsrs	r3, r0, #8
 8001958:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800195a:	7020      	strb	r0, [r4, #0]
 800195c:	e7e7      	b.n	800192e <GetUniqueId+0x36>
 800195e:	bf00      	nop
 8001960:	1fff7000 	.word	0x1fff7000

08001964 <GetDevAddr>:
{
 8001964:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <GetDevAddr+0x2c>)
 8001968:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 800196c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001972:	d000      	beq.n	8001976 <GetDevAddr+0x12>
}
 8001974:	bd38      	pop	{r3, r4, r5, pc}
 8001976:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001978:	f001 f88c 	bl	8002a94 <HAL_GetUIDw0>
 800197c:	4605      	mov	r5, r0
 800197e:	f001 f88f 	bl	8002aa0 <HAL_GetUIDw1>
 8001982:	4045      	eors	r5, r0
 8001984:	f001 f892 	bl	8002aac <HAL_GetUIDw2>
 8001988:	4045      	eors	r5, r0
 800198a:	6025      	str	r5, [r4, #0]
}
 800198c:	e7f2      	b.n	8001974 <GetDevAddr+0x10>
 800198e:	bf00      	nop
 8001990:	1fff7000 	.word	0x1fff7000

08001994 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001994:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f00f fe4f 	bl	801163c <UTIL_LPM_SetStopMode>
}
 800199e:	bd08      	pop	{r3, pc}

080019a0 <UTIL_ADV_TRACE_PostSendHook>:
{
 80019a0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2002      	movs	r0, #2
 80019a6:	f00f fe49 	bl	801163c <UTIL_LPM_SetStopMode>
}
 80019aa:	bd08      	pop	{r3, pc}

080019ac <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80019ac:	2000      	movs	r0, #0
 80019ae:	4770      	bx	lr

080019b0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019b0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_GetTick+0x14>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b90b      	cbnz	r3, 80019bc <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80019b8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80019ba:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80019bc:	f000 f894 	bl	8001ae8 <TIMER_IF_GetTimerValue>
 80019c0:	e7fb      	b.n	80019ba <HAL_GetTick+0xa>
 80019c2:	bf00      	nop
 80019c4:	200001d8 	.word	0x200001d8

080019c8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019c8:	b500      	push	{lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019ce:	9801      	ldr	r0, [sp, #4]
 80019d0:	f000 f970 	bl	8001cb4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80019d4:	b003      	add	sp, #12
 80019d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019dc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80019e0:	f001 f86a 	bl	8002ab8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80019e4:	f001 f870 	bl	8002ac8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80019e8:	f001 f876 	bl	8002ad8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80019ec:	2400      	movs	r4, #0
 80019ee:	9403      	str	r4, [sp, #12]
 80019f0:	9404      	str	r4, [sp, #16]
 80019f2:	9405      	str	r4, [sp, #20]
 80019f4:	9406      	str	r4, [sp, #24]
 80019f6:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a06:	f042 0202 	orr.w	r2, r2, #2
 8001a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0e:	f002 0202 	and.w	r2, r2, #2
 8001a12:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a14:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a18:	f042 0202 	orr.w	r2, r2, #2
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a26:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a28:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001a2c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a2e:	4d0c      	ldr	r5, [pc, #48]	; (8001a60 <DBG_Init+0x84>)
 8001a30:	a903      	add	r1, sp, #12
 8001a32:	4628      	mov	r0, r5
 8001a34:	f001 fc96 	bl	8003364 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a38:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001a3c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a3e:	a903      	add	r1, sp, #12
 8001a40:	4628      	mov	r0, r5
 8001a42:	f001 fc8f 	bl	8003364 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a46:	4622      	mov	r2, r4
 8001a48:	4639      	mov	r1, r7
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	f001 fdda 	bl	8003604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a50:	4622      	mov	r2, r4
 8001a52:	4631      	mov	r1, r6
 8001a54:	4628      	mov	r0, r5
 8001a56:	f001 fdd5 	bl	8003604 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001a5a:	b009      	add	sp, #36	; 0x24
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400

08001a64 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
//  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <EnvSensors_Read+0x18>)
 8001a66:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <EnvSensors_Read+0x1c>)
 8001a6a:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <EnvSensors_Read+0x20>)
 8001a6e:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <EnvSensors_Read+0x24>)
 8001a72:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <EnvSensors_Read+0x28>)
 8001a76:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4770      	bx	lr
 8001a7c:	42480000 	.word	0x42480000
 8001a80:	41900000 	.word	0x41900000
 8001a84:	447a0000 	.word	0x447a0000
 8001a88:	003e090d 	.word	0x003e090d
 8001a8c:	000503ab 	.word	0x000503ab

08001a90 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001a90:	2000      	movs	r0, #0
 8001a92:	4770      	bx	lr

08001a94 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <TIMER_IF_SetTimerContext+0x1c>)
 8001a96:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a98:	e001      	b.n	8001a9e <TIMER_IF_SetTimerContext+0xa>
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <TIMER_IF_SetTimerContext+0x1c>)
 8001a9c:	6898      	ldr	r0, [r3, #8]
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <TIMER_IF_SetTimerContext+0x1c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	d1f9      	bne.n	8001a9a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001aa6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <TIMER_IF_SetTimerContext+0x20>)
 8001aaa:	6018      	str	r0, [r3, #0]
}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40002800 	.word	0x40002800
 8001ab4:	200001dc 	.word	0x200001dc

08001ab8 <TIMER_IF_GetTimerContext>:
}
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <TIMER_IF_GetTimerContext+0x8>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200001dc 	.word	0x200001dc

08001ac4 <TIMER_IF_GetTimerElapsedTime>:
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ac6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ac8:	e001      	b.n	8001ace <TIMER_IF_GetTimerElapsedTime+0xa>
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001acc:	6898      	ldr	r0, [r3, #8]
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4283      	cmp	r3, r0
 8001ad4:	d1f9      	bne.n	8001aca <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001ad6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	1ac0      	subs	r0, r0, r3
 8001ade:	4770      	bx	lr
 8001ae0:	40002800 	.word	0x40002800
 8001ae4:	200001dc 	.word	0x200001dc

08001ae8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <TIMER_IF_GetTimerValue+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b153      	cbz	r3, 8001b04 <TIMER_IF_GetTimerValue+0x1c>
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <TIMER_IF_GetTimerValue+0x24>)
 8001af0:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001af2:	e001      	b.n	8001af8 <TIMER_IF_GetTimerValue+0x10>
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <TIMER_IF_GetTimerValue+0x24>)
 8001af6:	6898      	ldr	r0, [r3, #8]
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <TIMER_IF_GetTimerValue+0x24>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4283      	cmp	r3, r0
 8001afe:	d1f9      	bne.n	8001af4 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001b00:	43c0      	mvns	r0, r0
 8001b02:	4770      	bx	lr
  uint32_t ret = 0;
 8001b04:	2000      	movs	r0, #0
}
 8001b06:	4770      	bx	lr
 8001b08:	200001d9 	.word	0x200001d9
 8001b0c:	40002800 	.word	0x40002800

08001b10 <TIMER_IF_GetMinimumTimeout>:
}
 8001b10:	2003      	movs	r0, #3
 8001b12:	4770      	bx	lr

08001b14 <TIMER_IF_Convert_ms2Tick>:
{
 8001b14:	b508      	push	{r3, lr}
 8001b16:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	0280      	lsls	r0, r0, #10
 8001b20:	0d89      	lsrs	r1, r1, #22
 8001b22:	f7ff f91f 	bl	8000d64 <__aeabi_uldivmod>
}
 8001b26:	bd08      	pop	{r3, pc}

08001b28 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b28:	0ec2      	lsrs	r2, r0, #27
 8001b2a:	0143      	lsls	r3, r0, #5
 8001b2c:	1a1b      	subs	r3, r3, r0
 8001b2e:	f162 0200 	sbc.w	r2, r2, #0
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	181b      	adds	r3, r3, r0
 8001b3c:	f142 0000 	adc.w	r0, r2, #0
 8001b40:	00c0      	lsls	r0, r0, #3
 8001b42:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001b46:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001b4a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001b4e:	4770      	bx	lr

08001b50 <TIMER_IF_StopTimer>:
{
 8001b50:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <TIMER_IF_StopTimer+0x20>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001b58:	4c06      	ldr	r4, [pc, #24]	; (8001b74 <TIMER_IF_StopTimer+0x24>)
 8001b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f003 f8a2 	bl	8004ca8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	40002800 	.word	0x40002800
 8001b74:	20000194 	.word	0x20000194

08001b78 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001b78:	b508      	push	{r3, lr}
 8001b7a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001b80:	f003 fad5 	bl	800512e <HAL_RTCEx_BKUPWrite>
}
 8001b84:	bd08      	pop	{r3, pc}
 8001b86:	bf00      	nop
 8001b88:	20000194 	.word	0x20000194

08001b8c <TIMER_IF_Init>:
{
 8001b8c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <TIMER_IF_Init+0x40>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b10b      	cbz	r3, 8001b98 <TIMER_IF_Init+0xc>
}
 8001b94:	2000      	movs	r0, #0
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001b98:	4c0d      	ldr	r4, [pc, #52]	; (8001bd0 <TIMER_IF_Init+0x44>)
 8001b9a:	f04f 35ff 	mov.w	r5, #4294967295
 8001b9e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001ba0:	f7ff fd52 	bl	8001648 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001ba4:	f7ff ffd4 	bl	8001b50 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bac:	4620      	mov	r0, r4
 8001bae:	f003 f87b 	bl	8004ca8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bb2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f003 fa59 	bl	800506c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff ffdc 	bl	8001b78 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001bc0:	f7ff ff68 	bl	8001a94 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001bc4:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <TIMER_IF_Init+0x40>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e7e3      	b.n	8001b94 <TIMER_IF_Init+0x8>
 8001bcc:	200001d9 	.word	0x200001d9
 8001bd0:	20000194 	.word	0x20000194

08001bd4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001bd4:	b508      	push	{r3, lr}
 8001bd6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001bdc:	f003 faa7 	bl	800512e <HAL_RTCEx_BKUPWrite>
}
 8001be0:	bd08      	pop	{r3, pc}
 8001be2:	bf00      	nop
 8001be4:	20000194 	.word	0x20000194

08001be8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001be8:	b508      	push	{r3, lr}
 8001bea:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001bec:	2101      	movs	r1, #1
 8001bee:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001bf0:	f003 fa9d 	bl	800512e <HAL_RTCEx_BKUPWrite>
}
 8001bf4:	bd08      	pop	{r3, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000194 	.word	0x20000194

08001bfc <TIMER_IF_StartTimer>:
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001c02:	222c      	movs	r2, #44	; 0x2c
 8001c04:	2100      	movs	r1, #0
 8001c06:	a801      	add	r0, sp, #4
 8001c08:	f010 fa2a 	bl	8012060 <memset>
  TIMER_IF_StopTimer();
 8001c0c:	f7ff ffa0 	bl	8001b50 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <TIMER_IF_StartTimer+0x48>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c16:	2300      	movs	r3, #0
 8001c18:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c1a:	43e4      	mvns	r4, r4
 8001c1c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c1e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c24:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	a901      	add	r1, sp, #4
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <TIMER_IF_StartTimer+0x4c>)
 8001c32:	f003 f95f 	bl	8004ef4 <HAL_RTC_SetAlarm_IT>
 8001c36:	b910      	cbnz	r0, 8001c3e <TIMER_IF_StartTimer+0x42>
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	b00c      	add	sp, #48	; 0x30
 8001c3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c3e:	f7ff fcab 	bl	8001598 <Error_Handler>
 8001c42:	e7f9      	b.n	8001c38 <TIMER_IF_StartTimer+0x3c>
 8001c44:	200001dc 	.word	0x200001dc
 8001c48:	20000194 	.word	0x20000194

08001c4c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001c4c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001c52:	f003 fa73 	bl	800513c <HAL_RTCEx_BKUPRead>
}
 8001c56:	bd08      	pop	{r3, pc}
 8001c58:	20000194 	.word	0x20000194

08001c5c <TIMER_IF_GetTime>:
{
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4605      	mov	r5, r0
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <TIMER_IF_GetTime+0x34>)
 8001c62:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c64:	e001      	b.n	8001c6a <TIMER_IF_GetTime+0xe>
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <TIMER_IF_GetTime+0x34>)
 8001c68:	689c      	ldr	r4, [r3, #8]
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <TIMER_IF_GetTime+0x34>)
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	42a2      	cmp	r2, r4
 8001c70:	d1f9      	bne.n	8001c66 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001c72:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c74:	f7ff ffea 	bl	8001c4c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c78:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c7a:	0aa4      	lsrs	r4, r4, #10
 8001c7c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c80:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001c84:	f7ff ff50 	bl	8001b28 <TIMER_IF_Convert_Tick2ms>
 8001c88:	8028      	strh	r0, [r5, #0]
}
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	bd38      	pop	{r3, r4, r5, pc}
 8001c8e:	bf00      	nop
 8001c90:	40002800 	.word	0x40002800

08001c94 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001c94:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001c96:	2100      	movs	r1, #0
 8001c98:	4801      	ldr	r0, [pc, #4]	; (8001ca0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001c9a:	f003 fa4f 	bl	800513c <HAL_RTCEx_BKUPRead>
}
 8001c9e:	bd08      	pop	{r3, pc}
 8001ca0:	20000194 	.word	0x20000194

08001ca4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001ca4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4801      	ldr	r0, [pc, #4]	; (8001cb0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001caa:	f003 fa47 	bl	800513c <HAL_RTCEx_BKUPRead>
}
 8001cae:	bd08      	pop	{r3, pc}
 8001cb0:	20000194 	.word	0x20000194

08001cb4 <TIMER_IF_DelayMs>:
{
 8001cb4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001cb6:	f7ff ff2d 	bl	8001b14 <TIMER_IF_Convert_ms2Tick>
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001cbc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cbe:	e001      	b.n	8001cc4 <TIMER_IF_DelayMs+0x10>
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001cc6:	6892      	ldr	r2, [r2, #8]
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d1f9      	bne.n	8001cc0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001ccc:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cce:	e00a      	b.n	8001ce6 <TIMER_IF_DelayMs+0x32>
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001cd6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1f9      	bne.n	8001cd0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001cdc:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001cde:	1a5b      	subs	r3, r3, r1
 8001ce0:	4283      	cmp	r3, r0
 8001ce2:	d203      	bcs.n	8001cec <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001ce4:	bf00      	nop
 8001ce6:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <TIMER_IF_DelayMs+0x3c>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cea:	e7f3      	b.n	8001cd4 <TIMER_IF_DelayMs+0x20>
}
 8001cec:	bd08      	pop	{r3, pc}
 8001cee:	bf00      	nop
 8001cf0:	40002800 	.word	0x40002800

08001cf4 <HAL_RTC_AlarmAEventCallback>:
{
 8001cf4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001cf6:	f00f ffe9 	bl	8011ccc <UTIL_TIMER_IRQ_Handler>
}
 8001cfa:	bd08      	pop	{r3, pc}

08001cfc <HAL_RTCEx_SSRUEventCallback>:
{
 8001cfc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001cfe:	f7ff ffa5 	bl	8001c4c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001d02:	3001      	adds	r0, #1
 8001d04:	f7ff ff38 	bl	8001b78 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001d08:	bd08      	pop	{r3, pc}
	...

08001d0c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d0c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d0e:	4817      	ldr	r0, [pc, #92]	; (8001d6c <MX_USART2_UART_Init+0x60>)
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_USART2_UART_Init+0x64>)
 8001d12:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001d14:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d18:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d20:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d22:	220c      	movs	r2, #12
 8001d24:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d2c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d30:	f004 fd03 	bl	800673a <HAL_UART_Init>
 8001d34:	b970      	cbnz	r0, 8001d54 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <MX_USART2_UART_Init+0x60>)
 8001d3a:	f004 fec0 	bl	8006abe <HAL_UARTEx_SetTxFifoThreshold>
 8001d3e:	b960      	cbnz	r0, 8001d5a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d40:	2100      	movs	r1, #0
 8001d42:	480a      	ldr	r0, [pc, #40]	; (8001d6c <MX_USART2_UART_Init+0x60>)
 8001d44:	f004 fee0 	bl	8006b08 <HAL_UARTEx_SetRxFifoThreshold>
 8001d48:	b950      	cbnz	r0, 8001d60 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001d4a:	4808      	ldr	r0, [pc, #32]	; (8001d6c <MX_USART2_UART_Init+0x60>)
 8001d4c:	f004 fe93 	bl	8006a76 <HAL_UARTEx_EnableFifoMode>
 8001d50:	b948      	cbnz	r0, 8001d66 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d54:	f7ff fc20 	bl	8001598 <Error_Handler>
 8001d58:	e7ed      	b.n	8001d36 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001d5a:	f7ff fc1d 	bl	8001598 <Error_Handler>
 8001d5e:	e7ef      	b.n	8001d40 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001d60:	f7ff fc1a 	bl	8001598 <Error_Handler>
 8001d64:	e7f1      	b.n	8001d4a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001d66:	f7ff fc17 	bl	8001598 <Error_Handler>
}
 8001d6a:	e7f2      	b.n	8001d52 <MX_USART2_UART_Init+0x46>
 8001d6c:	20000240 	.word	0x20000240
 8001d70:	40004400 	.word	0x40004400

08001d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d74:	b530      	push	{r4, r5, lr}
 8001d76:	b097      	sub	sp, #92	; 0x5c
 8001d78:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	9111      	str	r1, [sp, #68]	; 0x44
 8001d7e:	9112      	str	r1, [sp, #72]	; 0x48
 8001d80:	9113      	str	r1, [sp, #76]	; 0x4c
 8001d82:	9114      	str	r1, [sp, #80]	; 0x50
 8001d84:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d86:	2238      	movs	r2, #56	; 0x38
 8001d88:	a803      	add	r0, sp, #12
 8001d8a:	f010 f969 	bl	8012060 <memset>
  if(uartHandle->Instance==USART2)
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_UART_MspInit+0xd4>)
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d96:	b017      	add	sp, #92	; 0x5c
 8001d98:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_UART_MspInit+0xd8>)
 8001da0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	a803      	add	r0, sp, #12
 8001da4:	f002 fe36 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d144      	bne.n	8001e36 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dbe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001dc0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001dd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2500      	movs	r5, #0
 8001dde:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de4:	2307      	movs	r3, #7
 8001de6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	a911      	add	r1, sp, #68	; 0x44
 8001dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dee:	f001 fab9 	bl	8003364 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0xdc>)
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_UART_MspInit+0xe0>)
 8001df6:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001df8:	2314      	movs	r3, #20
 8001dfa:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e06:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e08:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e0a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e0e:	f000 ff45 	bl	8002c9c <HAL_DMA_Init>
 8001e12:	b998      	cbnz	r0, 8001e3c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e14:	2110      	movs	r1, #16
 8001e16:	480e      	ldr	r0, [pc, #56]	; (8001e50 <HAL_UART_MspInit+0xdc>)
 8001e18:	f001 f942 	bl	80030a0 <HAL_DMA_ConfigChannelAttributes>
 8001e1c:	b988      	cbnz	r0, 8001e42 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_UART_MspInit+0xdc>)
 8001e20:	67a3      	str	r3, [r4, #120]	; 0x78
 8001e22:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2102      	movs	r1, #2
 8001e28:	2025      	movs	r0, #37	; 0x25
 8001e2a:	f000 fe6f 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e2e:	2025      	movs	r0, #37	; 0x25
 8001e30:	f000 fea4 	bl	8002b7c <HAL_NVIC_EnableIRQ>
}
 8001e34:	e7af      	b.n	8001d96 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001e36:	f7ff fbaf 	bl	8001598 <Error_Handler>
 8001e3a:	e7b7      	b.n	8001dac <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001e3c:	f7ff fbac 	bl	8001598 <Error_Handler>
 8001e40:	e7e8      	b.n	8001e14 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001e42:	f7ff fba9 	bl	8001598 <Error_Handler>
 8001e46:	e7ea      	b.n	8001e1e <HAL_UART_MspInit+0xaa>
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	000c0004 	.word	0x000c0004
 8001e50:	200001e0 	.word	0x200001e0
 8001e54:	40020058 	.word	0x40020058

08001e58 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_UART_MspDeInit+0x34>)
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d000      	beq.n	8001e62 <HAL_UART_MspDeInit+0xa>
 8001e60:	4770      	bx	lr
{
 8001e62:	b510      	push	{r4, lr}
 8001e64:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001e72:	210c      	movs	r1, #12
 8001e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e78:	f001 fb46 	bl	8003508 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001e7c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001e7e:	f000 ff7f 	bl	8002d80 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001e82:	2025      	movs	r0, #37	; 0x25
 8001e84:	f000 fe88 	bl	8002b98 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40004400 	.word	0x40004400

08001e90 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <vcom_Init+0x20>)
 8001e94:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001e96:	f7ff f8e7 	bl	8001068 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e9a:	f7ff ff37 	bl	8001d0c <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <vcom_Init+0x24>)
 8001ea0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001ea4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001eac:	2000      	movs	r0, #0
 8001eae:	bd08      	pop	{r3, pc}
 8001eb0:	200002d4 	.word	0x200002d4
 8001eb4:	58000800 	.word	0x58000800

08001eb8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001eb8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <vcom_DeInit+0x28>)
 8001ed0:	f7ff ffc2 	bl	8001e58 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	f000 fe5f 	bl	8002b98 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001eda:	2000      	movs	r0, #0
 8001edc:	bd08      	pop	{r3, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000240 	.word	0x20000240

08001ee4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001ee4:	b508      	push	{r3, lr}
 8001ee6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001ee8:	4601      	mov	r1, r0
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <vcom_Trace_DMA+0x10>)
 8001eec:	f003 fcf2 	bl	80058d4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	bd08      	pop	{r3, pc}
 8001ef4:	20000240 	.word	0x20000240

08001ef8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <vcom_ReceiveInit+0x50>)
 8001efe:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001f00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f04:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001f06:	ab02      	add	r3, sp, #8
 8001f08:	e913 0006 	ldmdb	r3, {r1, r2}
 8001f0c:	480f      	ldr	r0, [pc, #60]	; (8001f4c <vcom_ReceiveInit+0x54>)
 8001f0e:	f004 fd5a 	bl	80069c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <vcom_ReceiveInit+0x54>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001f1c:	d1f9      	bne.n	8001f12 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001f24:	d0fb      	beq.n	8001f1e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f2c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001f2e:	4c07      	ldr	r4, [pc, #28]	; (8001f4c <vcom_ReceiveInit+0x54>)
 8001f30:	4620      	mov	r0, r4
 8001f32:	f004 fd89 	bl	8006a48 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001f36:	2201      	movs	r2, #1
 8001f38:	4905      	ldr	r1, [pc, #20]	; (8001f50 <vcom_ReceiveInit+0x58>)
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f004 fcd4 	bl	80068e8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	b002      	add	sp, #8
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	bf00      	nop
 8001f48:	200002d0 	.word	0x200002d0
 8001f4c:	20000240 	.word	0x20000240
 8001f50:	200002d8 	.word	0x200002d8

08001f54 <vcom_Resume>:

void vcom_Resume(void)
{
 8001f54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <vcom_Resume+0x20>)
 8001f58:	f004 fbef 	bl	800673a <HAL_UART_Init>
 8001f5c:	b920      	cbnz	r0, 8001f68 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <vcom_Resume+0x24>)
 8001f60:	f000 fe9c 	bl	8002c9c <HAL_DMA_Init>
 8001f64:	b918      	cbnz	r0, 8001f6e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001f66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f68:	f7ff fb16 	bl	8001598 <Error_Handler>
 8001f6c:	e7f7      	b.n	8001f5e <vcom_Resume+0xa>
    Error_Handler();
 8001f6e:	f7ff fb13 	bl	8001598 <Error_Handler>
}
 8001f72:	e7f8      	b.n	8001f66 <vcom_Resume+0x12>
 8001f74:	20000240 	.word	0x20000240
 8001f78:	200001e0 	.word	0x200001e0

08001f7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_UART_TxCpltCallback+0x18>)
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d000      	beq.n	8001f88 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001f86:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_UART_TxCpltCallback+0x1c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	4798      	blx	r3
}
 8001f90:	e7f9      	b.n	8001f86 <HAL_UART_TxCpltCallback+0xa>
 8001f92:	bf00      	nop
 8001f94:	40004400 	.word	0x40004400
 8001f98:	200002d4 	.word	0x200002d4

08001f9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001f9c:	6802      	ldr	r2, [r0, #0]
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_UART_RxCpltCallback+0x2c>)
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d000      	beq.n	8001fa6 <HAL_UART_RxCpltCallback+0xa>
 8001fa4:	4770      	bx	lr
{
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_UART_RxCpltCallback+0x30>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b12b      	cbz	r3, 8001fbc <HAL_UART_RxCpltCallback+0x20>
 8001fb0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001fb4:	b912      	cbnz	r2, 8001fbc <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_UART_RxCpltCallback+0x34>)
 8001fba:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <HAL_UART_RxCpltCallback+0x34>)
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f004 fc91 	bl	80068e8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001fc6:	bd10      	pop	{r4, pc}
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	200002d0 	.word	0x200002d0
 8001fd0:	200002d8 	.word	0x200002d8

08001fd4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001fd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001fd6:	f7ff fc53 	bl	8001880 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001fda:	f000 fb97 	bl	800270c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	f00f fbc1 	bl	801176c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001fea:	bd08      	pop	{r3, pc}
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <hdc1080_event_read>:
 *
 * @param hdc1080_data
 * @return int32_t
 */
int32_t hdc1080_event_read(hdc1080_data_t *hdc1080_data)
{
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	4604      	mov	r4, r0
    int ret = -1;
    uint8_t receive_data[4];
    uint16_t temp_x, humi_x;
    uint8_t send_data = Temperature_register_add;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f88d 300b 	strb.w	r3, [sp, #11]

    HAL_I2C_Master_Transmit(&hi2c2, HDC_1080_ADD << 1, &send_data, 1, 1000);
 8001ffc:	4d26      	ldr	r5, [pc, #152]	; (8002098 <hdc1080_event_read+0xa8>)
 8001ffe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002002:	9600      	str	r6, [sp, #0]
 8002004:	2301      	movs	r3, #1
 8002006:	f10d 020b 	add.w	r2, sp, #11
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	4628      	mov	r0, r5
 800200e:	f001 fd01 	bl	8003a14 <HAL_I2C_Master_Transmit>

    /* Delay here 15ms for conversion compelete.
     * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
     */
    HAL_Delay(15);
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff fcd8 	bl	80019c8 <HAL_Delay>

    /* Read temperature and humidity */
    ret = HAL_I2C_Master_Receive(&hi2c2, HDC_1080_ADD << 1, receive_data, 4, 1000);
 8002018:	9600      	str	r6, [sp, #0]
 800201a:	2304      	movs	r3, #4
 800201c:	aa03      	add	r2, sp, #12
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	4628      	mov	r0, r5
 8002022:	f001 fdb5 	bl	8003b90 <HAL_I2C_Master_Receive>
 8002026:	4605      	mov	r5, r0

    temp_x = ((receive_data[0] << 8) | receive_data[1]);
 8002028:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800202c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    humi_x = ((receive_data[2] << 8) | receive_data[3]);
 8002030:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002034:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8002038:	ea46 2602 	orr.w	r6, r6, r2, lsl #8

    hdc1080_data->temperature = ((temp_x / 65536.0) * 165.0) - 40.0;
 800203c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002040:	f7fe fbd2 	bl	80007e8 <__aeabi_i2d>
 8002044:	2200      	movs	r2, #0
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <hdc1080_event_read+0xac>)
 8002048:	f7fe f89e 	bl	8000188 <__aeabi_dmul>
 800204c:	a310      	add	r3, pc, #64	; (adr r3, 8002090 <hdc1080_event_read+0xa0>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe f899 	bl	8000188 <__aeabi_dmul>
 8002056:	2200      	movs	r2, #0
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <hdc1080_event_read+0xb0>)
 800205a:	f7fe fa77 	bl	800054c <__aeabi_dsub>
 800205e:	f7fe fcfd 	bl	8000a5c <__aeabi_d2f>
 8002062:	6020      	str	r0, [r4, #0]
    hdc1080_data->humidity = (uint8_t)((humi_x / 65536.0) * 100.0);
 8002064:	4630      	mov	r0, r6
 8002066:	f7fe fbbf 	bl	80007e8 <__aeabi_i2d>
 800206a:	2200      	movs	r2, #0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <hdc1080_event_read+0xac>)
 800206e:	f7fe f88b 	bl	8000188 <__aeabi_dmul>
 8002072:	2200      	movs	r2, #0
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <hdc1080_event_read+0xb4>)
 8002076:	f7fe f887 	bl	8000188 <__aeabi_dmul>
 800207a:	f7fe fccf 	bl	8000a1c <__aeabi_d2uiz>
 800207e:	b2c0      	uxtb	r0, r0
 8002080:	f7fe fdf2 	bl	8000c68 <__aeabi_ui2f>
 8002084:	6060      	str	r0, [r4, #4]
    return ret;
}
 8002086:	4628      	mov	r0, r5
 8002088:	b004      	add	sp, #16
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	4064a000 	.word	0x4064a000
 8002098:	20000148 	.word	0x20000148
 800209c:	3ef00000 	.word	0x3ef00000
 80020a0:	40440000 	.word	0x40440000
 80020a4:	40590000 	.word	0x40590000

080020a8 <OnRxTimerLedEvent>:
}

static void OnRxTimerLedEvent(void *context)
{

}
 80020a8:	4770      	bx	lr

080020aa <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80020aa:	4770      	bx	lr

080020ac <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80020ac:	4b01      	ldr	r3, [pc, #4]	; (80020b4 <OnTxFrameCtrlChanged+0x8>)
 80020ae:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000058 	.word	0x20000058

080020b8 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <OnPingSlotPeriodicityChanged+0x8>)
 80020ba:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000058 	.word	0x20000058

080020c4 <OnBeaconStatusChange>:
  if (params != NULL)
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d03f      	beq.n	8002148 <OnBeaconStatusChange+0x84>
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	b08c      	sub	sp, #48	; 0x30
 80020ce:	4603      	mov	r3, r0
    switch (params->State)
 80020d0:	7842      	ldrb	r2, [r0, #1]
 80020d2:	2a02      	cmp	r2, #2
 80020d4:	d00a      	beq.n	80020ec <OnBeaconStatusChange+0x28>
 80020d6:	2a03      	cmp	r2, #3
 80020d8:	d02f      	beq.n	800213a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <OnBeaconStatusChange+0x88>)
 80020dc:	2200      	movs	r2, #0
 80020de:	4611      	mov	r1, r2
 80020e0:	2002      	movs	r0, #2
 80020e2:	f00f f9e5 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 80020e6:	b00c      	add	sp, #48	; 0x30
 80020e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 80020ec:	7c02      	ldrb	r2, [r0, #16]
 80020ee:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80020f2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80020f6:	7d5c      	ldrb	r4, [r3, #21]
 80020f8:	7d9d      	ldrb	r5, [r3, #22]
 80020fa:	7dde      	ldrb	r6, [r3, #23]
 80020fc:	7e1f      	ldrb	r7, [r3, #24]
 80020fe:	f893 c019 	ldrb.w	ip, [r3, #25]
 8002102:	f893 e01a 	ldrb.w	lr, [r3, #26]
 8002106:	f893 801b 	ldrb.w	r8, [r3, #27]
 800210a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800210e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002112:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002116:	9708      	str	r7, [sp, #32]
 8002118:	9607      	str	r6, [sp, #28]
 800211a:	9506      	str	r5, [sp, #24]
 800211c:	9405      	str	r4, [sp, #20]
 800211e:	685c      	ldr	r4, [r3, #4]
 8002120:	9404      	str	r4, [sp, #16]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	9303      	str	r3, [sp, #12]
 8002126:	9002      	str	r0, [sp, #8]
 8002128:	9101      	str	r1, [sp, #4]
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <OnBeaconStatusChange+0x8c>)
 800212e:	2200      	movs	r2, #0
 8002130:	4611      	mov	r1, r2
 8002132:	2002      	movs	r0, #2
 8002134:	f00f f9bc 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002138:	e7d5      	b.n	80020e6 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <OnBeaconStatusChange+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	4611      	mov	r1, r2
 8002140:	2002      	movs	r0, #2
 8002142:	f00f f9b5 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002146:	e7ce      	b.n	80020e6 <OnBeaconStatusChange+0x22>
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08012260 	.word	0x08012260
 8002150:	08012278 	.word	0x08012278
 8002154:	080122ec 	.word	0x080122ec

08002158 <OnClassChange>:
{
 8002158:	b500      	push	{lr}
 800215a:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <OnClassChange+0x1c>)
 800215e:	5c1b      	ldrb	r3, [r3, r0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <OnClassChange+0x20>)
 8002164:	2200      	movs	r2, #0
 8002166:	4611      	mov	r1, r2
 8002168:	2002      	movs	r0, #2
 800216a:	f00f f9a1 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800216e:	b003      	add	sp, #12
 8002170:	f85d fb04 	ldr.w	pc, [sp], #4
 8002174:	08012328 	.word	0x08012328
 8002178:	0801230c 	.word	0x0801230c

0800217c <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800217c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800217e:	2801      	cmp	r0, #1
 8002180:	d006      	beq.n	8002190 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <OnNvmDataChange+0x24>)
 8002184:	2200      	movs	r2, #0
 8002186:	4611      	mov	r1, r2
 8002188:	2002      	movs	r0, #2
 800218a:	f00f f991 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800218e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <OnNvmDataChange+0x28>)
 8002192:	2200      	movs	r2, #0
 8002194:	4611      	mov	r1, r2
 8002196:	2002      	movs	r0, #2
 8002198:	f00f f98a 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800219c:	e7f7      	b.n	800218e <OnNvmDataChange+0x12>
 800219e:	bf00      	nop
 80021a0:	08012340 	.word	0x08012340
 80021a4:	0801232c 	.word	0x0801232c

080021a8 <OnTxTimerEvent>:
{
 80021a8:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80021aa:	2100      	movs	r1, #0
 80021ac:	2002      	movs	r0, #2
 80021ae:	f00f faa9 	bl	8011704 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80021b2:	4802      	ldr	r0, [pc, #8]	; (80021bc <OnTxTimerEvent+0x14>)
 80021b4:	f00f fd2a 	bl	8011c0c <UTIL_TIMER_Start>
}
 80021b8:	bd08      	pop	{r3, pc}
 80021ba:	bf00      	nop
 80021bc:	20000430 	.word	0x20000430

080021c0 <OnMacProcessNotify>:
{
 80021c0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80021c2:	2100      	movs	r1, #0
 80021c4:	2001      	movs	r0, #1
 80021c6:	f00f fa9d 	bl	8011704 <UTIL_SEQ_SetTask>
}
 80021ca:	bd08      	pop	{r3, pc}

080021cc <OnSystemReset>:
{
 80021cc:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80021ce:	f005 f977 	bl	80074c0 <LmHandlerHalt>
 80021d2:	b100      	cbz	r0, 80021d6 <OnSystemReset+0xa>
}
 80021d4:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80021d6:	f004 fd71 	bl	8006cbc <LmHandlerJoinStatus>
 80021da:	2801      	cmp	r0, #1
 80021dc:	d1fa      	bne.n	80021d4 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021e2:	4905      	ldr	r1, [pc, #20]	; (80021f8 <OnSystemReset+0x2c>)
 80021e4:	68ca      	ldr	r2, [r1, #12]
 80021e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <OnSystemReset+0x30>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
 80021f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80021f6:	e7fd      	b.n	80021f4 <OnSystemReset+0x28>
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	05fa0004 	.word	0x05fa0004

08002200 <OnJoinRequest>:
  if (joinParams != NULL)
 8002200:	b328      	cbz	r0, 800224e <OnJoinRequest+0x4e>
{
 8002202:	b510      	push	{r4, lr}
 8002204:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002206:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800220a:	b9cb      	cbnz	r3, 8002240 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800220c:	4810      	ldr	r0, [pc, #64]	; (8002250 <OnJoinRequest+0x50>)
 800220e:	f00f fca3 	bl	8011b58 <UTIL_TIMER_Stop>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <OnJoinRequest+0x54>)
 8002214:	2200      	movs	r2, #0
 8002216:	4611      	mov	r1, r2
 8002218:	2002      	movs	r0, #2
 800221a:	f00f f949 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800221e:	79a3      	ldrb	r3, [r4, #6]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d006      	beq.n	8002232 <OnJoinRequest+0x32>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <OnJoinRequest+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	4611      	mov	r1, r2
 800222a:	2002      	movs	r0, #2
 800222c:	f00f f940 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 8002230:	e00c      	b.n	800224c <OnJoinRequest+0x4c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <OnJoinRequest+0x5c>)
 8002234:	2200      	movs	r2, #0
 8002236:	4611      	mov	r1, r2
 8002238:	2002      	movs	r0, #2
 800223a:	f00f f939 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800223e:	e005      	b.n	800224c <OnJoinRequest+0x4c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <OnJoinRequest+0x60>)
 8002242:	2200      	movs	r2, #0
 8002244:	4611      	mov	r1, r2
 8002246:	2002      	movs	r0, #2
 8002248:	f00f f932 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800224c:	bd10      	pop	{r4, pc}
 800224e:	4770      	bx	lr
 8002250:	200003d0 	.word	0x200003d0
 8002254:	08012354 	.word	0x08012354
 8002258:	0801238c 	.word	0x0801238c
 800225c:	0801236c 	.word	0x0801236c
 8002260:	080123ac 	.word	0x080123ac

08002264 <OnTxPeriodicityChanged>:
{
 8002264:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <OnTxPeriodicityChanged+0x28>)
 8002268:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800226a:	b910      	cbnz	r0, 8002272 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800226c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002270:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002272:	4c07      	ldr	r4, [pc, #28]	; (8002290 <OnTxPeriodicityChanged+0x2c>)
 8002274:	4620      	mov	r0, r4
 8002276:	f00f fc6f 	bl	8011b58 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <OnTxPeriodicityChanged+0x28>)
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	4620      	mov	r0, r4
 8002280:	f00f fd0a 	bl	8011c98 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002284:	4620      	mov	r0, r4
 8002286:	f00f fcc1 	bl	8011c0c <UTIL_TIMER_Start>
}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	2000006c 	.word	0x2000006c
 8002290:	20000430 	.word	0x20000430

08002294 <OnTxData>:
  if ((params != NULL))
 8002294:	2800      	cmp	r0, #0
 8002296:	d043      	beq.n	8002320 <OnTxData+0x8c>
{
 8002298:	b510      	push	{r4, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800229e:	7803      	ldrb	r3, [r0, #0]
 80022a0:	b90b      	cbnz	r3, 80022a6 <OnTxData+0x12>
}
 80022a2:	b004      	add	sp, #16
 80022a4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f001 f9a8 	bl	8003604 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80022b4:	481b      	ldr	r0, [pc, #108]	; (8002324 <OnTxData+0x90>)
 80022b6:	f00f fca9 	bl	8011c0c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <OnTxData+0x94>)
 80022bc:	2200      	movs	r2, #0
 80022be:	4611      	mov	r1, r2
 80022c0:	2002      	movs	r0, #2
 80022c2:	f00f f8f5 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80022c6:	7c23      	ldrb	r3, [r4, #16]
 80022c8:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80022cc:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80022d0:	9103      	str	r1, [sp, #12]
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	68e3      	ldr	r3, [r4, #12]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <OnTxData+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	4611      	mov	r1, r2
 80022e0:	2003      	movs	r0, #3
 80022e2:	f00f f8e5 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <OnTxData+0x9c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	4611      	mov	r1, r2
 80022ec:	2003      	movs	r0, #3
 80022ee:	f00f f8df 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80022f2:	7a23      	ldrb	r3, [r4, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10c      	bne.n	8002312 <OnTxData+0x7e>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80022f8:	7a63      	ldrb	r3, [r4, #9]
 80022fa:	b143      	cbz	r3, 800230e <OnTxData+0x7a>
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <OnTxData+0xa0>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <OnTxData+0xa4>)
 8002302:	2200      	movs	r2, #0
 8002304:	4611      	mov	r1, r2
 8002306:	2003      	movs	r0, #3
 8002308:	f00f f8d2 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800230c:	e7c9      	b.n	80022a2 <OnTxData+0xe>
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <OnTxData+0xa8>)
 8002310:	e7f5      	b.n	80022fe <OnTxData+0x6a>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <OnTxData+0xac>)
 8002314:	2200      	movs	r2, #0
 8002316:	4611      	mov	r1, r2
 8002318:	2003      	movs	r0, #3
 800231a:	f00f f8c9 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800231e:	e7c0      	b.n	80022a2 <OnTxData+0xe>
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000418 	.word	0x20000418
 8002328:	080123d4 	.word	0x080123d4
 800232c:	08012408 	.word	0x08012408
 8002330:	0801243c 	.word	0x0801243c
 8002334:	080123d0 	.word	0x080123d0
 8002338:	0801244c 	.word	0x0801244c
 800233c:	080123c8 	.word	0x080123c8
 8002340:	08012460 	.word	0x08012460

08002344 <OnStopJoinTimerEvent>:
{
 8002344:	b508      	push	{r3, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <OnStopJoinTimerEvent+0x34>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d00e      	beq.n	800236c <OnStopJoinTimerEvent+0x28>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002358:	f001 f954 	bl	8003604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f001 f94d 	bl	8003604 <HAL_GPIO_WritePin>
}
 800236a:	bd08      	pop	{r3, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800236c:	2100      	movs	r1, #0
 800236e:	2008      	movs	r0, #8
 8002370:	f00f f9c8 	bl	8011704 <UTIL_SEQ_SetTask>
 8002374:	e7eb      	b.n	800234e <OnStopJoinTimerEvent+0xa>
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000

0800237c <OnTxTimerLedEvent>:
{
 800237c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002388:	f001 f93c 	bl	8003604 <HAL_GPIO_WritePin>
}
 800238c:	bd08      	pop	{r3, pc}
	...

08002390 <OnRxData>:
  if (params != NULL)
 8002390:	2900      	cmp	r1, #0
 8002392:	d060      	beq.n	8002456 <OnRxData+0xc6>
{
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800239c:	2201      	movs	r2, #1
 800239e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a6:	f001 f92d 	bl	8003604 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 80023aa:	482b      	ldr	r0, [pc, #172]	; (8002458 <OnRxData+0xc8>)
 80023ac:	f00f fc2e 	bl	8011c0c <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 80023b0:	782e      	ldrb	r6, [r5, #0]
 80023b2:	b3a6      	cbz	r6, 800241e <OnRxData+0x8e>
      if (appData != NULL)
 80023b4:	b394      	cbz	r4, 800241c <OnRxData+0x8c>
        RxPort = appData->Port;
 80023b6:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 80023b8:	6863      	ldr	r3, [r4, #4]
 80023ba:	b383      	cbz	r3, 800241e <OnRxData+0x8e>
          switch (appData->Port)
 80023bc:	2e02      	cmp	r6, #2
 80023be:	d016      	beq.n	80023ee <OnRxData+0x5e>
 80023c0:	2e03      	cmp	r6, #3
 80023c2:	d12c      	bne.n	800241e <OnRxData+0x8e>
              if (appData->BufferSize == 1)
 80023c4:	7862      	ldrb	r2, [r4, #1]
 80023c6:	2a01      	cmp	r2, #1
 80023c8:	d129      	bne.n	800241e <OnRxData+0x8e>
                switch (appData->Buffer[0])
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d006      	beq.n	80023de <OnRxData+0x4e>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d008      	beq.n	80023e6 <OnRxData+0x56>
 80023d4:	bb1b      	cbnz	r3, 800241e <OnRxData+0x8e>
                    LmHandlerRequestClass(CLASS_A);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f004 fc82 	bl	8006ce0 <LmHandlerRequestClass>
                    break;
 80023dc:	e01f      	b.n	800241e <OnRxData+0x8e>
                    LmHandlerRequestClass(CLASS_B);
 80023de:	2001      	movs	r0, #1
 80023e0:	f004 fc7e 	bl	8006ce0 <LmHandlerRequestClass>
                    break;
 80023e4:	e01b      	b.n	800241e <OnRxData+0x8e>
                    LmHandlerRequestClass(CLASS_C);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f004 fc7a 	bl	8006ce0 <LmHandlerRequestClass>
                    break;
 80023ec:	e017      	b.n	800241e <OnRxData+0x8e>
              if (appData->BufferSize == 1)
 80023ee:	7862      	ldrb	r2, [r4, #1]
 80023f0:	2a01      	cmp	r2, #1
 80023f2:	d114      	bne.n	800241e <OnRxData+0x8e>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <OnRxData+0xcc>)
 80023fc:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80023fe:	b933      	cbnz	r3, 800240e <OnRxData+0x7e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <OnRxData+0xd0>)
 8002402:	2200      	movs	r2, #0
 8002404:	4611      	mov	r1, r2
 8002406:	2003      	movs	r0, #3
 8002408:	f00f f852 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800240c:	e007      	b.n	800241e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <OnRxData+0xd4>)
 8002410:	2200      	movs	r2, #0
 8002412:	4611      	mov	r1, r2
 8002414:	2003      	movs	r0, #3
 8002416:	f00f f84b 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800241a:	e000      	b.n	800241e <OnRxData+0x8e>
  uint8_t RxPort = 0;
 800241c:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800241e:	7c2b      	ldrb	r3, [r5, #16]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d901      	bls.n	8002428 <OnRxData+0x98>
}
 8002424:	b006      	add	sp, #24
 8002426:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002428:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800242c:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002430:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002434:	9005      	str	r0, [sp, #20]
 8002436:	9104      	str	r1, [sp, #16]
 8002438:	490b      	ldr	r1, [pc, #44]	; (8002468 <OnRxData+0xd8>)
 800243a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800243e:	9303      	str	r3, [sp, #12]
 8002440:	9202      	str	r2, [sp, #8]
 8002442:	9601      	str	r6, [sp, #4]
 8002444:	68eb      	ldr	r3, [r5, #12]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <OnRxData+0xdc>)
 800244a:	2200      	movs	r2, #0
 800244c:	4611      	mov	r1, r2
 800244e:	2003      	movs	r0, #3
 8002450:	f00f f82e 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002454:	e7e6      	b.n	8002424 <OnRxData+0x94>
 8002456:	4770      	bx	lr
 8002458:	200003e8 	.word	0x200003e8
 800245c:	200003ce 	.word	0x200003ce
 8002460:	08012470 	.word	0x08012470
 8002464:	0801247c 	.word	0x0801247c
 8002468:	0801267c 	.word	0x0801267c
 800246c:	08012488 	.word	0x08012488

08002470 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4604      	mov	r4, r0
 8002474:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <OnStoreContextRequest+0x20>)
 800247c:	f7fe ff9e 	bl	80013bc <FLASH_IF_Erase>
 8002480:	b100      	cbz	r0, 8002484 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002482:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002484:	462a      	mov	r2, r5
 8002486:	4621      	mov	r1, r4
 8002488:	4801      	ldr	r0, [pc, #4]	; (8002490 <OnStoreContextRequest+0x20>)
 800248a:	f7fe ff5f 	bl	800134c <FLASH_IF_Write>
}
 800248e:	e7f8      	b.n	8002482 <OnStoreContextRequest+0x12>
 8002490:	0803f000 	.word	0x0803f000

08002494 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002494:	b508      	push	{r3, lr}
 8002496:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002498:	4901      	ldr	r1, [pc, #4]	; (80024a0 <OnRestoreContextRequest+0xc>)
 800249a:	f7fe ff73 	bl	8001384 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800249e:	bd08      	pop	{r3, pc}
 80024a0:	0803f000 	.word	0x0803f000

080024a4 <StopJoin>:
{
 80024a4:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f001 f8a8 	bl	8003604 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024be:	f001 f8a1 	bl	8003604 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80024c2:	4815      	ldr	r0, [pc, #84]	; (8002518 <StopJoin+0x74>)
 80024c4:	f00f fb48 	bl	8011b58 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80024c8:	f004 fff2 	bl	80074b0 <LmHandlerStop>
 80024cc:	b148      	cbz	r0, 80024e2 <StopJoin+0x3e>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <StopJoin+0x78>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	4611      	mov	r1, r2
 80024d4:	2002      	movs	r0, #2
 80024d6:	f00e ffeb 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80024da:	4811      	ldr	r0, [pc, #68]	; (8002520 <StopJoin+0x7c>)
 80024dc:	f00f fb96 	bl	8011c0c <UTIL_TIMER_Start>
}
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <StopJoin+0x80>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	4611      	mov	r1, r2
 80024e8:	2002      	movs	r0, #2
 80024ea:	f00e ffe1 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80024ee:	4c0e      	ldr	r4, [pc, #56]	; (8002528 <StopJoin+0x84>)
 80024f0:	2501      	movs	r5, #1
 80024f2:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <StopJoin+0x88>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	4611      	mov	r1, r2
 80024fa:	2002      	movs	r0, #2
 80024fc:	f00e ffd8 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <StopJoin+0x8c>)
 8002502:	f004 fe5f 	bl	80071c4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002506:	4629      	mov	r1, r5
 8002508:	7820      	ldrb	r0, [r4, #0]
 800250a:	f004 fc45 	bl	8006d98 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800250e:	4802      	ldr	r0, [pc, #8]	; (8002518 <StopJoin+0x74>)
 8002510:	f00f fb7c 	bl	8011c0c <UTIL_TIMER_Start>
 8002514:	e7e1      	b.n	80024da <StopJoin+0x36>
 8002516:	bf00      	nop
 8002518:	20000430 	.word	0x20000430
 800251c:	080124d0 	.word	0x080124d0
 8002520:	20000400 	.word	0x20000400
 8002524:	080124f0 	.word	0x080124f0
 8002528:	20000000 	.word	0x20000000
 800252c:	08012504 	.word	0x08012504
 8002530:	20000058 	.word	0x20000058

08002534 <StoreContext>:
{
 8002534:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002536:	f004 ffcb 	bl	80074d0 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800253a:	f110 0f08 	cmn.w	r0, #8
 800253e:	d003      	beq.n	8002548 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002544:	d007      	beq.n	8002556 <StoreContext+0x22>
}
 8002546:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <StoreContext+0x30>)
 800254a:	2200      	movs	r2, #0
 800254c:	4611      	mov	r1, r2
 800254e:	2002      	movs	r0, #2
 8002550:	f00e ffae 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 8002554:	e7f7      	b.n	8002546 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <StoreContext+0x34>)
 8002558:	2200      	movs	r2, #0
 800255a:	4611      	mov	r1, r2
 800255c:	2002      	movs	r0, #2
 800255e:	f00e ffa7 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002562:	e7f0      	b.n	8002546 <StoreContext+0x12>
 8002564:	08012524 	.word	0x08012524
 8002568:	0801253c 	.word	0x0801253c

0800256c <SendTxData>:
{
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	b08b      	sub	sp, #44	; 0x2c
  uint8_t batteryLevel = GetBatteryLevel();
 8002570:	f7ff f9b4 	bl	80018dc <GetBatteryLevel>
  int ret = hdc1080_event_read(&hdc1080_data);
 8002574:	a802      	add	r0, sp, #8
 8002576:	f7ff fd3b 	bl	8001ff0 <hdc1080_event_read>
  APP_LOG(TS_ON, VLEVEL_M, "ret: %d\r\n", ret);
 800257a:	9000      	str	r0, [sp, #0]
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <SendTxData+0x160>)
 800257e:	2201      	movs	r2, #1
 8002580:	2100      	movs	r1, #0
 8002582:	2002      	movs	r0, #2
 8002584:	f00e ff94 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", (int16_t)(hdc1080_data.temperature*10));
 8002588:	4951      	ldr	r1, [pc, #324]	; (80026d0 <SendTxData+0x164>)
 800258a:	9802      	ldr	r0, [sp, #8]
 800258c:	f7fd ff26 	bl	80003dc <__aeabi_fmul>
 8002590:	f7fe fbc2 	bl	8000d18 <__aeabi_f2iz>
 8002594:	b200      	sxth	r0, r0
 8002596:	9000      	str	r0, [sp, #0]
 8002598:	4b4e      	ldr	r3, [pc, #312]	; (80026d4 <SendTxData+0x168>)
 800259a:	2201      	movs	r2, #1
 800259c:	2100      	movs	r1, #0
 800259e:	2002      	movs	r0, #2
 80025a0:	f00e ff86 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(hdc1080_data.humidity*10));
 80025a4:	494a      	ldr	r1, [pc, #296]	; (80026d0 <SendTxData+0x164>)
 80025a6:	9803      	ldr	r0, [sp, #12]
 80025a8:	f7fd ff18 	bl	80003dc <__aeabi_fmul>
 80025ac:	f7fe fbb4 	bl	8000d18 <__aeabi_f2iz>
 80025b0:	b200      	sxth	r0, r0
 80025b2:	9000      	str	r0, [sp, #0]
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <SendTxData+0x16c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	2100      	movs	r1, #0
 80025ba:	2002      	movs	r0, #2
 80025bc:	f00e ff78 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <SendTxData+0x170>)
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)('t');;
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	2174      	movs	r1, #116	; 0x74
 80025ca:	7011      	strb	r1, [r2, #0]
  AppData.Buffer[i++] = (uint8_t)('u');
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	2175      	movs	r1, #117	; 0x75
 80025d0:	7051      	strb	r1, [r2, #1]
  AppData.Buffer[i++] = (uint8_t)('a');
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	2161      	movs	r1, #97	; 0x61
 80025d6:	7091      	strb	r1, [r2, #2]
  AppData.Buffer[i++] = (uint8_t)('n');
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	216e      	movs	r1, #110	; 0x6e
 80025dc:	70d1      	strb	r1, [r2, #3]
  AppData.Buffer[i++] = (uint8_t)('h');
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2168      	movs	r1, #104	; 0x68
 80025e2:	7111      	strb	r1, [r2, #4]
  AppData.Buffer[i++] = (uint8_t)('o');
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	226f      	movs	r2, #111	; 0x6f
 80025e8:	715a      	strb	r2, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <SendTxData+0x174>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d002      	beq.n	80025f8 <SendTxData+0x8c>
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d000      	beq.n	80025f8 <SendTxData+0x8c>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80025f6:	bb63      	cbnz	r3, 8002652 <SendTxData+0xe6>
    AppData.Buffer[i++] = 0;
 80025f8:	4a38      	ldr	r2, [pc, #224]	; (80026dc <SendTxData+0x170>)
 80025fa:	6851      	ldr	r1, [r2, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002600:	6851      	ldr	r1, [r2, #4]
 8002602:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8002604:	6852      	ldr	r2, [r2, #4]
 8002606:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002608:	7253      	strb	r3, [r2, #9]
 800260a:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <SendTxData+0x170>)
 800260e:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002610:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <SendTxData+0x178>)
 8002612:	7a5b      	ldrb	r3, [r3, #9]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d138      	bne.n	800268a <SendTxData+0x11e>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002618:	2200      	movs	r2, #0
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <SendTxData+0x174>)
 800261c:	78d9      	ldrb	r1, [r3, #3]
 800261e:	482f      	ldr	r0, [pc, #188]	; (80026dc <SendTxData+0x170>)
 8002620:	f004 fc1a 	bl	8006e58 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002624:	2800      	cmp	r0, #0
 8002626:	d038      	beq.n	800269a <SendTxData+0x12e>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002628:	f110 0f06 	cmn.w	r0, #6
 800262c:	d03d      	beq.n	80026aa <SendTxData+0x13e>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800262e:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002630:	4c2d      	ldr	r4, [pc, #180]	; (80026e8 <SendTxData+0x17c>)
 8002632:	4620      	mov	r0, r4
 8002634:	f00f fa90 	bl	8011b58 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002638:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <SendTxData+0x180>)
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	42a9      	cmp	r1, r5
 800263e:	bf38      	it	cc
 8002640:	4629      	movcc	r1, r5
 8002642:	4620      	mov	r0, r4
 8002644:	f00f fb28 	bl	8011c98 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002648:	4620      	mov	r0, r4
 800264a:	f00f fadf 	bl	8011c0c <UTIL_TIMER_Start>
}
 800264e:	b00b      	add	sp, #44	; 0x2c
 8002650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002652:	9d07      	ldr	r5, [sp, #28]
    longitude = sensor_data.longitude;
 8002654:	9c08      	ldr	r4, [sp, #32]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002656:	4e21      	ldr	r6, [pc, #132]	; (80026dc <SendTxData+0x170>)
 8002658:	6877      	ldr	r7, [r6, #4]
 800265a:	f7ff f93f 	bl	80018dc <GetBatteryLevel>
 800265e:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002660:	6873      	ldr	r3, [r6, #4]
 8002662:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002666:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002668:	6873      	ldr	r3, [r6, #4]
 800266a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800266e:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002670:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002672:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002676:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002678:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800267c:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800267e:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002680:	2200      	movs	r2, #0
 8002682:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002684:	739a      	strb	r2, [r3, #14]
 8002686:	220f      	movs	r2, #15
 8002688:	e7c0      	b.n	800260c <SendTxData+0xa0>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800268a:	f004 fb17 	bl	8006cbc <LmHandlerJoinStatus>
 800268e:	2801      	cmp	r0, #1
 8002690:	d1c2      	bne.n	8002618 <SendTxData+0xac>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002692:	4814      	ldr	r0, [pc, #80]	; (80026e4 <SendTxData+0x178>)
 8002694:	f00f fa60 	bl	8011b58 <UTIL_TIMER_Stop>
 8002698:	e7be      	b.n	8002618 <SendTxData+0xac>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <SendTxData+0x184>)
 800269c:	2201      	movs	r2, #1
 800269e:	2100      	movs	r1, #0
 80026a0:	4610      	mov	r0, r2
 80026a2:	f00e ff05 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80026a6:	2500      	movs	r5, #0
 80026a8:	e7c2      	b.n	8002630 <SendTxData+0xc4>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80026aa:	f004 fb01 	bl	8006cb0 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 80026ae:	4605      	mov	r5, r0
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d0bd      	beq.n	8002630 <SendTxData+0xc4>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <SendTxData+0x188>)
 80026b6:	fba3 2300 	umull	r2, r3, r3, r0
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <SendTxData+0x18c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	2100      	movs	r1, #0
 80026c4:	4610      	mov	r0, r2
 80026c6:	f00e fef3 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 80026ca:	e7b1      	b.n	8002630 <SendTxData+0xc4>
 80026cc:	08012554 	.word	0x08012554
 80026d0:	41200000 	.word	0x41200000
 80026d4:	08012560 	.word	0x08012560
 80026d8:	0801256c 	.word	0x0801256c
 80026dc:	20000004 	.word	0x20000004
 80026e0:	20000058 	.word	0x20000058
 80026e4:	200003d0 	.word	0x200003d0
 80026e8:	20000430 	.word	0x20000430
 80026ec:	2000006c 	.word	0x2000006c
 80026f0:	08012578 	.word	0x08012578
 80026f4:	10624dd3 	.word	0x10624dd3
 80026f8:	08012588 	.word	0x08012588

080026fc <OnJoinTimerLedEvent>:
{
 80026fc:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); /* LED_RED */
 80026fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002706:	f000 ff82 	bl	800360e <HAL_GPIO_TogglePin>
}
 800270a:	bd08      	pop	{r3, pc}

0800270c <LoRaWAN_Init>:
{
 800270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002710:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002712:	2400      	movs	r4, #0
 8002714:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002716:	9402      	str	r4, [sp, #8]
 8002718:	2303      	movs	r3, #3
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2601      	movs	r6, #1
 800271e:	9600      	str	r6, [sp, #0]
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <LoRaWAN_Init+0x144>)
 8002722:	4622      	mov	r2, r4
 8002724:	4621      	mov	r1, r4
 8002726:	2002      	movs	r0, #2
 8002728:	f00e fec2 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800272c:	9402      	str	r4, [sp, #8]
 800272e:	2704      	movs	r7, #4
 8002730:	9701      	str	r7, [sp, #4]
 8002732:	2502      	movs	r5, #2
 8002734:	9500      	str	r5, [sp, #0]
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <LoRaWAN_Init+0x148>)
 8002738:	4622      	mov	r2, r4
 800273a:	4621      	mov	r1, r4
 800273c:	4628      	mov	r0, r5
 800273e:	f00e feb7 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002742:	9402      	str	r4, [sp, #8]
 8002744:	9501      	str	r5, [sp, #4]
 8002746:	9600      	str	r6, [sp, #0]
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <LoRaWAN_Init+0x14c>)
 800274a:	4622      	mov	r2, r4
 800274c:	4621      	mov	r1, r4
 800274e:	4628      	mov	r0, r5
 8002750:	f00e feae 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002754:	a905      	add	r1, sp, #20
 8002756:	4620      	mov	r0, r4
 8002758:	f004 fe94 	bl	8007484 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800275c:	9b05      	ldr	r3, [sp, #20]
 800275e:	0e1a      	lsrs	r2, r3, #24
 8002760:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002764:	9102      	str	r1, [sp, #8]
 8002766:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <LoRaWAN_Init+0x150>)
 8002770:	4622      	mov	r2, r4
 8002772:	4621      	mov	r1, r4
 8002774:	4628      	mov	r0, r5
 8002776:	f00e fe9b 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800277a:	a905      	add	r1, sp, #20
 800277c:	4630      	mov	r0, r6
 800277e:	f004 fe81 	bl	8007484 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002782:	9b05      	ldr	r3, [sp, #20]
 8002784:	0e1a      	lsrs	r2, r3, #24
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	9103      	str	r1, [sp, #12]
 800278a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800278e:	9102      	str	r1, [sp, #8]
 8002790:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	9200      	str	r2, [sp, #0]
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <LoRaWAN_Init+0x154>)
 800279a:	4622      	mov	r2, r4
 800279c:	4621      	mov	r1, r4
 800279e:	4628      	mov	r0, r5
 80027a0:	f00e fe86 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80027a4:	9400      	str	r4, [sp, #0]
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <LoRaWAN_Init+0x158>)
 80027a8:	4622      	mov	r2, r4
 80027aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <LoRaWAN_Init+0x15c>)
 80027b0:	f00f f974 	bl	8011a9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80027b4:	9400      	str	r4, [sp, #0]
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <LoRaWAN_Init+0x160>)
 80027b8:	4622      	mov	r2, r4
 80027ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027be:	482c      	ldr	r0, [pc, #176]	; (8002870 <LoRaWAN_Init+0x164>)
 80027c0:	f00f f96c 	bl	8011a9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027c4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002874 <LoRaWAN_Init+0x168>
 80027c8:	9400      	str	r4, [sp, #0]
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <LoRaWAN_Init+0x16c>)
 80027cc:	4632      	mov	r2, r6
 80027ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027d2:	4640      	mov	r0, r8
 80027d4:	f00f f962 	bl	8011a9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80027d8:	9400      	str	r4, [sp, #0]
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <LoRaWAN_Init+0x170>)
 80027dc:	4622      	mov	r2, r4
 80027de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027e2:	4827      	ldr	r0, [pc, #156]	; (8002880 <LoRaWAN_Init+0x174>)
 80027e4:	f00f f95a 	bl	8011a9c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <LoRaWAN_Init+0x178>)
 80027ea:	4621      	mov	r1, r4
 80027ec:	4630      	mov	r0, r6
 80027ee:	f00f f855 	bl	801189c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80027f2:	4a25      	ldr	r2, [pc, #148]	; (8002888 <LoRaWAN_Init+0x17c>)
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f00f f850 	bl	801189c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <LoRaWAN_Init+0x180>)
 80027fe:	4621      	mov	r1, r4
 8002800:	4638      	mov	r0, r7
 8002802:	f00f f84b 	bl	801189c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <LoRaWAN_Init+0x184>)
 8002808:	4621      	mov	r1, r4
 800280a:	2008      	movs	r0, #8
 800280c:	f00f f846 	bl	801189c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002810:	f000 f84e 	bl	80028b0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002814:	491f      	ldr	r1, [pc, #124]	; (8002894 <LoRaWAN_Init+0x188>)
 8002816:	4820      	ldr	r0, [pc, #128]	; (8002898 <LoRaWAN_Init+0x18c>)
 8002818:	f004 fe02 	bl	8007420 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 800281c:	481f      	ldr	r0, [pc, #124]	; (800289c <LoRaWAN_Init+0x190>)
 800281e:	f004 fcd1 	bl	80071c4 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002822:	4640      	mov	r0, r8
 8002824:	f00f f9f2 	bl	8011c0c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002828:	4621      	mov	r1, r4
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <LoRaWAN_Init+0x194>)
 800282c:	7818      	ldrb	r0, [r3, #0]
 800282e:	f004 fab3 	bl	8006d98 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002832:	4d1c      	ldr	r5, [pc, #112]	; (80028a4 <LoRaWAN_Init+0x198>)
 8002834:	9400      	str	r4, [sp, #0]
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <LoRaWAN_Init+0x19c>)
 8002838:	4622      	mov	r2, r4
 800283a:	491c      	ldr	r1, [pc, #112]	; (80028ac <LoRaWAN_Init+0x1a0>)
 800283c:	6809      	ldr	r1, [r1, #0]
 800283e:	4628      	mov	r0, r5
 8002840:	f00f f92c 	bl	8011a9c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002844:	4628      	mov	r0, r5
 8002846:	f00f f9e1 	bl	8011c0c <UTIL_TIMER_Start>
}
 800284a:	b006      	add	sp, #24
 800284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002850:	080125a8 	.word	0x080125a8
 8002854:	080125cc 	.word	0x080125cc
 8002858:	080125f0 	.word	0x080125f0
 800285c:	08012614 	.word	0x08012614
 8002860:	08012638 	.word	0x08012638
 8002864:	0800237d 	.word	0x0800237d
 8002868:	20000418 	.word	0x20000418
 800286c:	080020a9 	.word	0x080020a9
 8002870:	200003e8 	.word	0x200003e8
 8002874:	200003d0 	.word	0x200003d0
 8002878:	080026fd 	.word	0x080026fd
 800287c:	08002345 	.word	0x08002345
 8002880:	20000400 	.word	0x20000400
 8002884:	08006ca5 	.word	0x08006ca5
 8002888:	0800256d 	.word	0x0800256d
 800288c:	08002535 	.word	0x08002535
 8002890:	080024a5 	.word	0x080024a5
 8002894:	01030000 	.word	0x01030000
 8002898:	2000000c 	.word	0x2000000c
 800289c:	20000058 	.word	0x20000058
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000430 	.word	0x20000430
 80028a8:	080021a9 	.word	0x080021a9
 80028ac:	2000006c 	.word	0x2000006c

080028b0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <LoraInfo_Init+0x1c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80028b6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80028b8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80028ba:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80028bc:	2220      	movs	r2, #32
 80028be:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80028c0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80028c4:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80028ca:	4770      	bx	lr
 80028cc:	20000448 	.word	0x20000448

080028d0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80028d0:	4800      	ldr	r0, [pc, #0]	; (80028d4 <LoraInfo_GetPtr+0x4>)
 80028d2:	4770      	bx	lr
 80028d4:	20000448 	.word	0x20000448

080028d8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80028d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028dc:	b088      	sub	sp, #32
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_Init();
#elif defined(MX_NUCLEO_WL55JC1)
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 80028de:	2400      	movs	r4, #0
 80028e0:	9403      	str	r4, [sp, #12]
 80028e2:	9404      	str	r4, [sp, #16]
 80028e4:	9405      	str	r4, [sp, #20]
 80028e6:	9406      	str	r4, [sp, #24]
 80028e8:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f0:	f042 0202 	orr.w	r2, r2, #2
 80028f4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f8:	f002 0202 	and.w	r2, r2, #2
 80028fc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80028fe:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002900:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002902:	f042 0204 	orr.w	r2, r2, #4
 8002906:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002910:	9b01      	ldr	r3, [sp, #4]
#if defined(RAK3172_RF_CHANNEL_SWITCH)
    /* Enable the Radio Switch Clock */
    RF_SW_CTRL1_GPIO_CLK_ENABLE();
    RF_SW_CTRL2_GPIO_CLK_ENABLE();
    /* Configure the Radio Switch pin */
    gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002912:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002916:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002918:	2301      	movs	r3, #1
 800291a:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull  = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002920:	4d0d      	ldr	r5, [pc, #52]	; (8002958 <RBI_Init+0x80>)
 8002922:	a903      	add	r1, sp, #12
 8002924:	4628      	mov	r0, r5
 8002926:	f000 fd1d 	bl	8003364 <HAL_GPIO_Init>
    gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800292a:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800292e:	f8cd 800c 	str.w	r8, [sp, #12]
    HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002932:	4f0a      	ldr	r7, [pc, #40]	; (800295c <RBI_Init+0x84>)
 8002934:	a903      	add	r1, sp, #12
 8002936:	4638      	mov	r0, r7
 8002938:	f000 fd14 	bl	8003364 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800293c:	4622      	mov	r2, r4
 800293e:	4641      	mov	r1, r8
 8002940:	4638      	mov	r0, r7
 8002942:	f000 fe5f 	bl	8003604 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002946:	4622      	mov	r2, r4
 8002948:	4631      	mov	r1, r6
 800294a:	4628      	mov	r0, r5
 800294c:	f000 fe5a 	bl	8003604 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1  */
  /* USER CODE BEGIN RBI_Init_3 */

  /* USER CODE END RBI_Init_3 */
}
 8002950:	4620      	mov	r0, r4
 8002952:	b008      	add	sp, #32
 8002954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800

08002960 <RBI_ConfigRFSwitch>:

  /* USER CODE END RBI_DeInit_3 */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002960:	b508      	push	{r3, lr}
  /* code generated by MX does not support BSP */
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#elif defined(MX_NUCLEO_WL55JC1)
  switch (Config)
 8002962:	2803      	cmp	r0, #3
 8002964:	d80f      	bhi.n	8002986 <RBI_ConfigRFSwitch+0x26>
 8002966:	e8df f000 	tbb	[pc, r0]
 800296a:	1002      	.short	0x1002
 800296c:	2a1d      	.short	0x2a1d
  {
    case RBI_SWITCH_OFF:
    {
      #if defined(RAK3172_RF_CHANNEL_SWITCH)
        /* Turn off switch */
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002974:	4818      	ldr	r0, [pc, #96]	; (80029d8 <RBI_ConfigRFSwitch+0x78>)
 8002976:	f000 fe45 	bl	8003604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800297a:	2200      	movs	r2, #0
 800297c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002980:	4816      	ldr	r0, [pc, #88]	; (80029dc <RBI_ConfigRFSwitch+0x7c>)
 8002982:	f000 fe3f 	bl	8003604 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_ConfigRFSwitch_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_ConfigRFSwitch_3 */

  /* USER CODE END RBI_ConfigRFSwitch_3 */
}
 8002986:	2000      	movs	r0, #0
 8002988:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002990:	4811      	ldr	r0, [pc, #68]	; (80029d8 <RBI_ConfigRFSwitch+0x78>)
 8002992:	f000 fe37 	bl	8003604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299c:	480f      	ldr	r0, [pc, #60]	; (80029dc <RBI_ConfigRFSwitch+0x7c>)
 800299e:	f000 fe31 	bl	8003604 <HAL_GPIO_WritePin>
      break;
 80029a2:	e7f0      	b.n	8002986 <RBI_ConfigRFSwitch+0x26>
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029aa:	480b      	ldr	r0, [pc, #44]	; (80029d8 <RBI_ConfigRFSwitch+0x78>)
 80029ac:	f000 fe2a 	bl	8003604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <RBI_ConfigRFSwitch+0x7c>)
 80029b8:	f000 fe24 	bl	8003604 <HAL_GPIO_WritePin>
      break;
 80029bc:	e7e3      	b.n	8002986 <RBI_ConfigRFSwitch+0x26>
        HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c4:	4804      	ldr	r0, [pc, #16]	; (80029d8 <RBI_ConfigRFSwitch+0x78>)
 80029c6:	f000 fe1d 	bl	8003604 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <RBI_ConfigRFSwitch+0x7c>)
 80029d2:	f000 fe17 	bl	8003604 <HAL_GPIO_WritePin>
      break;
 80029d6:	e7d6      	b.n	8002986 <RBI_ConfigRFSwitch+0x26>
 80029d8:	48000400 	.word	0x48000400
 80029dc:	48000800 	.word	0x48000800

080029e0 <RBI_GetTxConfig>:
  /* USER CODE END RBI_GetTxConfig_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetTxConfig_3 */

  /* USER CODE END RBI_GetTxConfig_3 */
}
 80029e0:	2002      	movs	r0, #2
 80029e2:	4770      	bx	lr

080029e4 <RBI_IsTCXO>:
  /* USER CODE END RBI_IsTCXO_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsTCXO_3 */

  /* USER CODE END RBI_IsTCXO_3 */
}
 80029e4:	2000      	movs	r0, #0
 80029e6:	4770      	bx	lr

080029e8 <RBI_IsDCDC>:
  /* USER CODE END RBI_IsDCDC_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsDCDC_3 */

  /* USER CODE END RBI_IsDCDC_3 */
}
 80029e8:	2001      	movs	r0, #1
 80029ea:	4770      	bx	lr

080029ec <RBI_GetRFOMaxPowerConfig>:
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 80029ec:	b908      	cbnz	r0, 80029f2 <RBI_GetRFOMaxPowerConfig+0x6>
  {
    ret = 15; /*dBm*/
 80029ee:	200f      	movs	r0, #15
 80029f0:	4770      	bx	lr
  }
  else
  {
    ret = 22; /*dBm*/
 80029f2:	2016      	movs	r0, #22
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80029f4:	4770      	bx	lr
	...

080029f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029f8:	480d      	ldr	r0, [pc, #52]	; (8002a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029fc:	f000 f825 	bl	8002a4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a02:	490d      	ldr	r1, [pc, #52]	; (8002a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <LoopForever+0xe>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <LoopForever+0x16>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a26:	f00f faf7 	bl	8012018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7fe fdfe 	bl	800162a <main>

08002a2e <LoopForever>:

LoopForever:
    b LoopForever
 8002a2e:	e7fe      	b.n	8002a2e <LoopForever>
  ldr   r0, =_estack
 8002a30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a38:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8002a3c:	08013078 	.word	0x08013078
  ldr r2, =_sbss
 8002a40:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002a44:	20001430 	.word	0x20001430

08002a48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC_IRQHandler>

08002a4a <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4e:	2003      	movs	r0, #3
 8002a50:	f000 f84a 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a54:	f001 fb3e 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_Init+0x28>)
 8002a5a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a5c:	200f      	movs	r0, #15
 8002a5e:	f7fe ffa5 	bl	80019ac <HAL_InitTick>
 8002a62:	b110      	cbz	r0, 8002a6a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002a64:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002a66:	4620      	mov	r0, r4
 8002a68:	bd10      	pop	{r4, pc}
 8002a6a:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a6c:	f7fe fe8a 	bl	8001784 <HAL_MspInit>
 8002a70:	e7f9      	b.n	8002a66 <HAL_Init+0x1a>
 8002a72:	bf00      	nop
 8002a74:	20000070 	.word	0x20000070

08002a78 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002a7c:	6913      	ldr	r3, [r2, #16]
 8002a7e:	f023 0302 	bic.w	r3, r3, #2
 8002a82:	6113      	str	r3, [r2, #16]
}
 8002a84:	4770      	bx	lr

08002a86 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002a8a:	6913      	ldr	r3, [r2, #16]
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6113      	str	r3, [r2, #16]
}
 8002a92:	4770      	bx	lr

08002a94 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002a94:	4b01      	ldr	r3, [pc, #4]	; (8002a9c <HAL_GetUIDw0+0x8>)
 8002a96:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002a9a:	4770      	bx	lr
 8002a9c:	1fff7000 	.word	0x1fff7000

08002aa0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <HAL_GetUIDw1+0x8>)
 8002aa2:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002aa6:	4770      	bx	lr
 8002aa8:	1fff7000 	.word	0x1fff7000

08002aac <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <HAL_GetUIDw2+0x8>)
 8002aae:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002ab2:	4770      	bx	lr
 8002ab4:	1fff7000 	.word	0x1fff7000

08002ab8 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ab8:	4a02      	ldr	r2, [pc, #8]	; (8002ac4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002aba:	6853      	ldr	r3, [r2, #4]
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002ac2:	4770      	bx	lr
 8002ac4:	e0042000 	.word	0xe0042000

08002ac8 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ac8:	4a02      	ldr	r2, [pc, #8]	; (8002ad4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002aca:	6853      	ldr	r3, [r2, #4]
 8002acc:	f023 0302 	bic.w	r3, r3, #2
 8002ad0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002ad2:	4770      	bx	lr
 8002ad4:	e0042000 	.word	0xe0042000

08002ad8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002ad8:	4a02      	ldr	r2, [pc, #8]	; (8002ae4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002ada:	6853      	ldr	r3, [r2, #4]
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002ae2:	4770      	bx	lr
 8002ae4:	e0042000 	.word	0xe0042000

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002aea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	0200      	lsls	r0, r0, #8
 8002af6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afa:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b04:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_NVIC_SetPriority+0x68>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b16:	f1c3 0c07 	rsb	ip, r3, #7
 8002b1a:	f1bc 0f04 	cmp.w	ip, #4
 8002b1e:	bf28      	it	cs
 8002b20:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b24:	f103 0e04 	add.w	lr, r3, #4
 8002b28:	f1be 0f06 	cmp.w	lr, #6
 8002b2c:	d918      	bls.n	8002b60 <HAL_NVIC_SetPriority+0x54>
 8002b2e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 3eff 	mov.w	lr, #4294967295
 8002b34:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b38:	ea21 010c 	bic.w	r1, r1, ip
 8002b3c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3e:	fa0e f303 	lsl.w	r3, lr, r3
 8002b42:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b46:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	db0b      	blt.n	8002b64 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	0109      	lsls	r1, r1, #4
 8002b4e:	b2c9      	uxtb	r1, r1
 8002b50:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b54:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b58:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b5c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b60:	2300      	movs	r3, #0
 8002b62:	e7e5      	b.n	8002b30 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	f000 000f 	and.w	r0, r0, #15
 8002b68:	0109      	lsls	r1, r1, #4
 8002b6a:	b2c9      	uxtb	r1, r1
 8002b6c:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_NVIC_SetPriority+0x6c>)
 8002b6e:	5419      	strb	r1, [r3, r0]
 8002b70:	e7f4      	b.n	8002b5c <HAL_NVIC_SetPriority+0x50>
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	e000ed14 	.word	0xe000ed14

08002b7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	db07      	blt.n	8002b90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b80:	f000 021f 	and.w	r2, r0, #31
 8002b84:	0940      	lsrs	r0, r0, #5
 8002b86:	2301      	movs	r3, #1
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	4a02      	ldr	r2, [pc, #8]	; (8002b94 <HAL_NVIC_EnableIRQ+0x18>)
 8002b8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	db0c      	blt.n	8002bb6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9c:	f000 021f 	and.w	r2, r0, #31
 8002ba0:	0940      	lsrs	r0, r0, #5
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	3020      	adds	r0, #32
 8002ba8:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <HAL_NVIC_DisableIRQ+0x20>)
 8002baa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002bae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bb2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bbe:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002bc0:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8002bc4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bc8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002bca:	b124      	cbz	r4, 8002bd6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bcc:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002bce:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8002bd2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bd6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002bd8:	f004 0c1c 	and.w	ip, r4, #28
 8002bdc:	2401      	movs	r4, #1
 8002bde:	fa04 f40c 	lsl.w	r4, r4, ip
 8002be2:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8002be6:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bea:	6804      	ldr	r4, [r0, #0]
 8002bec:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bee:	6883      	ldr	r3, [r0, #8]
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d005      	beq.n	8002c00 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002bf4:	6803      	ldr	r3, [r0, #0]
 8002bf6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002bf8:	6803      	ldr	r3, [r0, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
  }
}
 8002bfc:	bc10      	pop	{r4}
 8002bfe:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002c00:	6803      	ldr	r3, [r0, #0]
 8002c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c04:	6803      	ldr	r3, [r0, #0]
 8002c06:	60d9      	str	r1, [r3, #12]
 8002c08:	e7f8      	b.n	8002bfc <DMA_SetConfig+0x40>
	...

08002c0c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c0c:	6803      	ldr	r3, [r0, #0]
 8002c0e:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d816      	bhi.n	8002c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c16:	f022 0203 	bic.w	r2, r2, #3
 8002c1a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002c1e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002c22:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b08      	subs	r3, #8
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8002c32:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2201      	movs	r2, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002c40:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c44:	f022 0103 	bic.w	r1, r2, #3
 8002c48:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002c4a:	440a      	add	r2, r1
 8002c4c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b08      	subs	r3, #8
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	e7e8      	b.n	8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002c5e:	bf00      	nop
 8002c60:	40020407 	.word	0x40020407
 8002c64:	cccccccd 	.word	0xcccccccd
 8002c68:	40020880 	.word	0x40020880
 8002c6c:	4002081c 	.word	0x4002081c

08002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c70:	6843      	ldr	r3, [r0, #4]
 8002c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c76:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002c78:	441a      	add	r2, r3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c7e:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002c80:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	1000823f 	.word	0x1000823f
 8002c98:	40020940 	.word	0x40020940

08002c9c <HAL_DMA_Init>:
  if (hdma == NULL)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d060      	beq.n	8002d62 <HAL_DMA_Init+0xc6>
{
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ca4:	6802      	ldr	r2, [r0, #0]
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_DMA_Init+0xcc>)
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d842      	bhi.n	8002d32 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_DMA_Init+0xd0>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	492f      	ldr	r1, [pc, #188]	; (8002d70 <HAL_DMA_Init+0xd4>)
 8002cb2:	fba1 1303 	umull	r1, r3, r1, r3
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_DMA_Init+0xd8>)
 8002cbe:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002cd2:	6821      	ldr	r1, [r4, #0]
 8002cd4:	680a      	ldr	r2, [r1, #0]
 8002cd6:	68a3      	ldr	r3, [r4, #8]
 8002cd8:	68e0      	ldr	r0, [r4, #12]
 8002cda:	4303      	orrs	r3, r0
 8002cdc:	6920      	ldr	r0, [r4, #16]
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	6960      	ldr	r0, [r4, #20]
 8002ce2:	4303      	orrs	r3, r0
 8002ce4:	69a0      	ldr	r0, [r4, #24]
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	69e0      	ldr	r0, [r4, #28]
 8002cea:	4303      	orrs	r3, r0
 8002cec:	6a20      	ldr	r0, [r4, #32]
 8002cee:	4303      	orrs	r3, r0
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff ff89 	bl	8002c0c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cfa:	68a3      	ldr	r3, [r4, #8]
 8002cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d00:	d022      	beq.n	8002d48 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d0a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d10:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d12:	6863      	ldr	r3, [r4, #4]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d919      	bls.n	8002d4e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d1e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d20:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	2000      	movs	r0, #0
 8002d24:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002d2c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002d30:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_DMA_Init+0xdc>)
 8002d34:	4413      	add	r3, r2
 8002d36:	490e      	ldr	r1, [pc, #56]	; (8002d70 <HAL_DMA_Init+0xd4>)
 8002d38:	fba1 1303 	umull	r1, r3, r1, r3
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_DMA_Init+0xe0>)
 8002d44:	6403      	str	r3, [r0, #64]	; 0x40
 8002d46:	e7bb      	b.n	8002cc0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6063      	str	r3, [r4, #4]
 8002d4c:	e7d9      	b.n	8002d02 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ff8e 	bl	8002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	e7df      	b.n	8002d22 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8002d62:	2001      	movs	r0, #1
}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40020407 	.word	0x40020407
 8002d6c:	bffdfff8 	.word	0xbffdfff8
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	40020000 	.word	0x40020000
 8002d78:	bffdfbf8 	.word	0xbffdfbf8
 8002d7c:	40020400 	.word	0x40020400

08002d80 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d04b      	beq.n	8002e1c <HAL_DMA_DeInit+0x9c>
{
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8002d88:	6802      	ldr	r2, [r0, #0]
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d92:	6802      	ldr	r2, [r0, #0]
 8002d94:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_DMA_DeInit+0xa0>)
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d82c      	bhi.n	8002df4 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <HAL_DMA_DeInit+0xa4>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4922      	ldr	r1, [pc, #136]	; (8002e28 <HAL_DMA_DeInit+0xa8>)
 8002da0:	fba1 1303 	umull	r1, r3, r1, r3
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_DMA_DeInit+0xac>)
 8002dac:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8002dae:	2500      	movs	r5, #0
 8002db0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002db4:	f003 021c 	and.w	r2, r3, #28
 8002db8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff ff23 	bl	8002c0c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002dc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dc8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002dce:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dd0:	6863      	ldr	r3, [r4, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d918      	bls.n	8002e0a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002ddc:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dde:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002de0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002de2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002de4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002de6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002dea:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002dee:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_DMA_DeInit+0xb0>)
 8002df6:	4413      	add	r3, r2
 8002df8:	490b      	ldr	r1, [pc, #44]	; (8002e28 <HAL_DMA_DeInit+0xa8>)
 8002dfa:	fba1 1303 	umull	r1, r3, r1, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_DMA_DeInit+0xb4>)
 8002e06:	6403      	str	r3, [r0, #64]	; 0x40
 8002e08:	e7d1      	b.n	8002dae <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ff30 	bl	8002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e12:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e16:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e7dd      	b.n	8002dd8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002e1c:	2001      	movs	r0, #1
}
 8002e1e:	4770      	bx	lr
 8002e20:	40020407 	.word	0x40020407
 8002e24:	bffdfff8 	.word	0xbffdfff8
 8002e28:	cccccccd 	.word	0xcccccccd
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	bffdfbf8 	.word	0xbffdfbf8
 8002e34:	40020400 	.word	0x40020400

08002e38 <HAL_DMA_Start_IT>:
{
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002e3c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002e40:	2801      	cmp	r0, #1
 8002e42:	d043      	beq.n	8002ecc <HAL_DMA_Start_IT+0x94>
 8002e44:	2001      	movs	r0, #1
 8002e46:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002e4a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002e4e:	b2c0      	uxtb	r0, r0
 8002e50:	2801      	cmp	r0, #1
 8002e52:	d006      	beq.n	8002e62 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002e5e:	2001      	movs	r0, #1
}
 8002e60:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e62:	2002      	movs	r0, #2
 8002e64:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002e6c:	6825      	ldr	r5, [r4, #0]
 8002e6e:	6828      	ldr	r0, [r5, #0]
 8002e70:	f020 0001 	bic.w	r0, r0, #1
 8002e74:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e76:	4620      	mov	r0, r4
 8002e78:	f7ff fea0 	bl	8002bbc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e7e:	b1d3      	cbz	r3, 8002eb6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e80:	6822      	ldr	r2, [r4, #0]
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	f043 030e 	orr.w	r3, r3, #14
 8002e88:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e9e:	b11b      	cbz	r3, 8002ea8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	e7d4      	b.n	8002e60 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	f043 030a 	orr.w	r3, r3, #10
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e7de      	b.n	8002e8a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002ecc:	2002      	movs	r0, #2
 8002ece:	e7c7      	b.n	8002e60 <HAL_DMA_Start_IT+0x28>

08002ed0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ed6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	2a02      	cmp	r2, #2
 8002ede:	d006      	beq.n	8002eee <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002eea:	2001      	movs	r0, #1
 8002eec:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eee:	6801      	ldr	r1, [r0, #0]
 8002ef0:	680a      	ldr	r2, [r1, #0]
 8002ef2:	f022 020e 	bic.w	r2, r2, #14
 8002ef6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ef8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002efa:	680a      	ldr	r2, [r1, #0]
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f02:	6801      	ldr	r1, [r0, #0]
 8002f04:	680a      	ldr	r2, [r1, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002f0e:	f002 011c 	and.w	r1, r2, #28
 8002f12:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002f14:	2201      	movs	r2, #1
 8002f16:	408a      	lsls	r2, r1
 8002f18:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f1e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f22:	b132      	cbz	r2, 8002f32 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002f2a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f2e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f30:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002f3e:	4770      	bx	lr
    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
}
 8002f42:	4770      	bx	lr

08002f44 <HAL_DMA_Abort_IT>:
{
 8002f44:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f46:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f50:	2304      	movs	r3, #4
 8002f52:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
}
 8002f56:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f58:	6802      	ldr	r2, [r0, #0]
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f023 030e 	bic.w	r3, r3, #14
 8002f60:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f62:	6802      	ldr	r2, [r0, #0]
 8002f64:	6813      	ldr	r3, [r2, #0]
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f6c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002f6e:	6813      	ldr	r3, [r2, #0]
 8002f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f78:	f003 021c 	and.w	r2, r3, #28
 8002f7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f84:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f86:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002f88:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f8a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f8c:	b133      	cbz	r3, 8002f9c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f96:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f98:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f9a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002faa:	b113      	cbz	r3, 8002fb2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002fac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7d1      	b.n	8002f56 <HAL_DMA_Abort_IT+0x12>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e7cf      	b.n	8002f56 <HAL_DMA_Abort_IT+0x12>
	...

08002fb8 <HAL_DMA_IRQHandler>:
{
 8002fb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fbc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002fbe:	6804      	ldr	r4, [r0, #0]
 8002fc0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fc4:	f003 031c 	and.w	r3, r3, #28
 8002fc8:	2204      	movs	r2, #4
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	420a      	tst	r2, r1
 8002fce:	d015      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x44>
 8002fd0:	f015 0f04 	tst.w	r5, #4
 8002fd4:	d012      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	f013 0f20 	tst.w	r3, #32
 8002fdc:	d103      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fe6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fe8:	f003 021c 	and.w	r2, r3, #28
 8002fec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fee:	2304      	movs	r3, #4
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002ff4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002ff6:	b103      	cbz	r3, 8002ffa <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8002ff8:	4798      	blx	r3
}
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	409a      	lsls	r2, r3
 8003000:	420a      	tst	r2, r1
 8003002:	d028      	beq.n	8003056 <HAL_DMA_IRQHandler+0x9e>
 8003004:	f015 0f02 	tst.w	r5, #2
 8003008:	d025      	beq.n	8003056 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	f013 0f20 	tst.w	r3, #32
 8003010:	d106      	bne.n	8003020 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	f023 030a 	bic.w	r3, r3, #10
 8003018:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	2301      	movs	r3, #1
 800301c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003020:	6802      	ldr	r2, [r0, #0]
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_DMA_IRQHandler+0xdc>)
 8003024:	429a      	cmp	r2, r3
 8003026:	d90e      	bls.n	8003046 <HAL_DMA_IRQHandler+0x8e>
 8003028:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800302a:	f003 021c 	and.w	r2, r3, #28
 800302e:	2302      	movs	r3, #2
 8003030:	4093      	lsls	r3, r2
 8003032:	4a19      	ldr	r2, [pc, #100]	; (8003098 <HAL_DMA_IRQHandler+0xe0>)
 8003034:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003036:	2300      	movs	r3, #0
 8003038:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800303c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0db      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003042:	4798      	blx	r3
 8003044:	e7d9      	b.n	8002ffa <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003046:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003048:	f003 021c 	and.w	r2, r3, #28
 800304c:	2302      	movs	r3, #2
 800304e:	4093      	lsls	r3, r2
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_DMA_IRQHandler+0xe4>)
 8003052:	6053      	str	r3, [r2, #4]
 8003054:	e7ef      	b.n	8003036 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003056:	2208      	movs	r2, #8
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	420b      	tst	r3, r1
 800305e:	d0cc      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x42>
 8003060:	f015 0f08 	tst.w	r5, #8
 8003064:	d0c9      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	f023 030e 	bic.w	r3, r3, #14
 800306c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800306e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003070:	f003 031c 	and.w	r3, r3, #28
 8003074:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003080:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003084:	2300      	movs	r3, #0
 8003086:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800308a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0b4      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003090:	4798      	blx	r3
  return;
 8003092:	e7b2      	b.n	8002ffa <HAL_DMA_IRQHandler+0x42>
 8003094:	40020080 	.word	0x40020080
 8003098:	40020400 	.word	0x40020400
 800309c:	40020000 	.word	0x40020000

080030a0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80030a0:	b178      	cbz	r0, 80030c2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80030a2:	6803      	ldr	r3, [r0, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80030a6:	f011 0f10 	tst.w	r1, #16
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80030ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80030b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80030b6:	601a      	str	r2, [r3, #0]
  return status;
 80030b8:	2000      	movs	r0, #0
 80030ba:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80030bc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80030c0:	e7f9      	b.n	80030b6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	4770      	bx	lr
	...

080030c8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80030c8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030ca:	4c05      	ldr	r4, [pc, #20]	; (80030e0 <FLASH_Program_DoubleWord+0x18>)
 80030cc:	6961      	ldr	r1, [r4, #20]
 80030ce:	f041 0101 	orr.w	r1, r1, #1
 80030d2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80030d4:	6002      	str	r2, [r0, #0]
 80030d6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80030da:	6043      	str	r3, [r0, #4]
}
 80030dc:	bc10      	pop	{r4}
 80030de:	4770      	bx	lr
 80030e0:	58004000 	.word	0x58004000

080030e4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <FLASH_Program_Fast+0x34>)
 80030e6:	6953      	ldr	r3, [r2, #20]
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ee:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80030f2:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80030f4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80030f6:	f851 2b04 	ldr.w	r2, [r1], #4
 80030fa:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80030fe:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003100:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003104:	d1f7      	bne.n	80030f6 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <FLASH_Program_Fast+0x34>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800310e:	d1fa      	bne.n	8003106 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003110:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	58004000 	.word	0x58004000

0800311c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_FLASH_Unlock+0x28>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db01      	blt.n	8003128 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2000      	movs	r0, #0
 8003126:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_FLASH_Unlock+0x28>)
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_FLASH_Unlock+0x2c>)
 800312c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800312e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003132:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db01      	blt.n	800313e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2000      	movs	r0, #0
 800313c:	4770      	bx	lr
      status = HAL_ERROR;
 800313e:	2001      	movs	r0, #1
}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	58004000 	.word	0x58004000
 8003148:	45670123 	.word	0x45670123

0800314c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_FLASH_Lock+0x18>)
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003154:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db01      	blt.n	8003160 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 800315c:	2001      	movs	r0, #1
}
 800315e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2000      	movs	r0, #0
 8003162:	4770      	bx	lr
 8003164:	58004000 	.word	0x58004000

08003168 <FLASH_WaitForLastOperation>:
{
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7fe fc20 	bl	80019b0 <HAL_GetTick>
 8003170:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <FLASH_WaitForLastOperation+0x64>)
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800317a:	d006      	beq.n	800318a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800317c:	f7fe fc18 	bl	80019b0 <HAL_GetTick>
 8003180:	1b00      	subs	r0, r0, r4
 8003182:	42a8      	cmp	r0, r5
 8003184:	d3f5      	bcc.n	8003172 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003186:	2003      	movs	r0, #3
}
 8003188:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <FLASH_WaitForLastOperation+0x64>)
 800318c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800318e:	f013 0f01 	tst.w	r3, #1
 8003192:	d002      	beq.n	800319a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <FLASH_WaitForLastOperation+0x64>)
 8003196:	2101      	movs	r1, #1
 8003198:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800319a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800319e:	4013      	ands	r3, r2
 80031a0:	d001      	beq.n	80031a6 <FLASH_WaitForLastOperation+0x3e>
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <FLASH_WaitForLastOperation+0x64>)
 80031a4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80031a6:	b95b      	cbnz	r3, 80031c0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <FLASH_WaitForLastOperation+0x64>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80031b0:	d00a      	beq.n	80031c8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80031b2:	f7fe fbfd 	bl	80019b0 <HAL_GetTick>
 80031b6:	1b00      	subs	r0, r0, r4
 80031b8:	42a8      	cmp	r0, r5
 80031ba:	d3f5      	bcc.n	80031a8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80031bc:	2003      	movs	r0, #3
 80031be:	e7e3      	b.n	8003188 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80031c0:	4a03      	ldr	r2, [pc, #12]	; (80031d0 <FLASH_WaitForLastOperation+0x68>)
 80031c2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80031c4:	2001      	movs	r0, #1
 80031c6:	e7df      	b.n	8003188 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80031c8:	2000      	movs	r0, #0
 80031ca:	e7dd      	b.n	8003188 <FLASH_WaitForLastOperation+0x20>
 80031cc:	58004000 	.word	0x58004000
 80031d0:	20000458 	.word	0x20000458

080031d4 <HAL_FLASH_Program>:
{
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_FLASH_Program+0x5c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d025      	beq.n	800322c <HAL_FLASH_Program+0x58>
 80031e0:	4604      	mov	r4, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4616      	mov	r6, r2
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_FLASH_Program+0x5c>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f4:	f7ff ffb8 	bl	8003168 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80031f8:	b970      	cbnz	r0, 8003218 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80031fa:	2c01      	cmp	r4, #1
 80031fc:	d010      	beq.n	8003220 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	f7ff ff6f 	bl	80030e4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800320a:	f7ff ffad 	bl	8003168 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_FLASH_Program+0x60>)
 8003210:	6953      	ldr	r3, [r2, #20]
 8003212:	ea23 0404 	bic.w	r4, r3, r4
 8003216:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_FLASH_Program+0x5c>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
}
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003220:	4632      	mov	r2, r6
 8003222:	463b      	mov	r3, r7
 8003224:	4628      	mov	r0, r5
 8003226:	f7ff ff4f 	bl	80030c8 <FLASH_Program_DoubleWord>
 800322a:	e7ec      	b.n	8003206 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 800322c:	2002      	movs	r0, #2
 800322e:	e7f6      	b.n	800321e <HAL_FLASH_Program+0x4a>
 8003230:	20000458 	.word	0x20000458
 8003234:	58004000 	.word	0x58004000

08003238 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <FLASH_MassErase+0x10>)
 800323a:	6953      	ldr	r3, [r2, #20]
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	6153      	str	r3, [r2, #20]
#endif
}
 8003246:	4770      	bx	lr
 8003248:	58004000 	.word	0x58004000

0800324c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <FLASH_FlushCaches+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	2b01      	cmp	r3, #1
 8003256:	d006      	beq.n	8003266 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <FLASH_FlushCaches+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b01      	cmp	r3, #1
 8003262:	d012      	beq.n	800328a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003264:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <FLASH_FlushCaches+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e7e6      	b.n	8003258 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <FLASH_FlushCaches+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003292:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032a2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	e7da      	b.n	8003264 <FLASH_FlushCaches+0x18>
 80032ae:	bf00      	nop
 80032b0:	58004000 	.word	0x58004000

080032b4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80032b4:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <FLASH_AcknowledgePageErase+0x10>)
 80032b6:	6953      	ldr	r3, [r2, #20]
 80032b8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80032bc:	f023 0302 	bic.w	r3, r3, #2
 80032c0:	6153      	str	r3, [r2, #20]
#endif
}
 80032c2:	4770      	bx	lr
 80032c4:	58004000 	.word	0x58004000

080032c8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <FLASH_PageErase+0x18>)
 80032ca:	6953      	ldr	r3, [r2, #20]
 80032cc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80032d0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80032d4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80032d8:	f040 0002 	orr.w	r0, r0, #2
 80032dc:	6150      	str	r0, [r2, #20]
}
 80032de:	4770      	bx	lr
 80032e0:	58004000 	.word	0x58004000

080032e4 <HAL_FLASHEx_Erase>:
{
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <HAL_FLASHEx_Erase+0x7c>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d035      	beq.n	800335a <HAL_FLASHEx_Erase+0x76>
 80032ee:	4605      	mov	r5, r0
 80032f0:	460f      	mov	r7, r1
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_FLASHEx_Erase+0x7c>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032f8:	2200      	movs	r2, #0
 80032fa:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003300:	f7ff ff32 	bl	8003168 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003304:	4606      	mov	r6, r0
 8003306:	bb18      	cbnz	r0, 8003350 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d013      	beq.n	8003336 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003314:	686c      	ldr	r4, [r5, #4]
 8003316:	686b      	ldr	r3, [r5, #4]
 8003318:	68aa      	ldr	r2, [r5, #8]
 800331a:	4413      	add	r3, r2
 800331c:	42a3      	cmp	r3, r4
 800331e:	d913      	bls.n	8003348 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff ffd1 	bl	80032c8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800332a:	f7ff ff1d 	bl	8003168 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800332e:	4606      	mov	r6, r0
 8003330:	b948      	cbnz	r0, 8003346 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003332:	3401      	adds	r4, #1
 8003334:	e7ef      	b.n	8003316 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003336:	f7ff ff7f 	bl	8003238 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800333a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800333e:	f7ff ff13 	bl	8003168 <FLASH_WaitForLastOperation>
 8003342:	4606      	mov	r6, r0
 8003344:	e002      	b.n	800334c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003346:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003348:	f7ff ffb4 	bl	80032b4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 800334c:	f7ff ff7e 	bl	800324c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_FLASHEx_Erase+0x7c>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
}
 8003356:	4630      	mov	r0, r6
 8003358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800335a:	2602      	movs	r6, #2
 800335c:	e7fb      	b.n	8003356 <HAL_FLASHEx_Erase+0x72>
 800335e:	bf00      	nop
 8003360:	20000458 	.word	0x20000458

08003364 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003366:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	e069      	b.n	800343e <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800336a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800336c:	005e      	lsls	r6, r3, #1
 800336e:	2403      	movs	r4, #3
 8003370:	40b4      	lsls	r4, r6
 8003372:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003376:	68cc      	ldr	r4, [r1, #12]
 8003378:	40b4      	lsls	r4, r6
 800337a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800337c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003380:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003384:	684c      	ldr	r4, [r1, #4]
 8003386:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800338a:	409c      	lsls	r4, r3
 800338c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003390:	6044      	str	r4, [r0, #4]
 8003392:	e065      	b.n	8003460 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003394:	08dd      	lsrs	r5, r3, #3
 8003396:	3508      	adds	r5, #8
 8003398:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800339c:	f003 0407 	and.w	r4, r3, #7
 80033a0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80033a4:	240f      	movs	r4, #15
 80033a6:	fa04 f40c 	lsl.w	r4, r4, ip
 80033aa:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ae:	690c      	ldr	r4, [r1, #16]
 80033b0:	fa04 f40c 	lsl.w	r4, r4, ip
 80033b4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80033b8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80033bc:	e067      	b.n	800348e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033be:	2402      	movs	r4, #2
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x60>
 80033c2:	2400      	movs	r4, #0
 80033c4:	fa04 f40e 	lsl.w	r4, r4, lr
 80033c8:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ca:	f10c 0c02 	add.w	ip, ip, #2
 80033ce:	4d4b      	ldr	r5, [pc, #300]	; (80034fc <HAL_GPIO_Init+0x198>)
 80033d0:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d4:	4c4a      	ldr	r4, [pc, #296]	; (8003500 <HAL_GPIO_Init+0x19c>)
 80033d6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80033d8:	43d4      	mvns	r4, r2
 80033da:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033de:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80033e2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80033e6:	d001      	beq.n	80033ec <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80033e8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80033ec:	4d44      	ldr	r5, [pc, #272]	; (8003500 <HAL_GPIO_Init+0x19c>)
 80033ee:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80033f0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80033f2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80033fa:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80033fe:	d001      	beq.n	8003404 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003400:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003404:	4d3e      	ldr	r5, [pc, #248]	; (8003500 <HAL_GPIO_Init+0x19c>)
 8003406:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003408:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800340c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003410:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003414:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003418:	d001      	beq.n	800341e <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800341a:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800341e:	4d38      	ldr	r5, [pc, #224]	; (8003500 <HAL_GPIO_Init+0x19c>)
 8003420:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003424:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003428:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800342a:	684e      	ldr	r6, [r1, #4]
 800342c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003430:	d001      	beq.n	8003436 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003432:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_GPIO_Init+0x19c>)
 8003438:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800343c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343e:	680a      	ldr	r2, [r1, #0]
 8003440:	fa32 f403 	lsrs.w	r4, r2, r3
 8003444:	d058      	beq.n	80034f8 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003446:	f04f 0c01 	mov.w	ip, #1
 800344a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800344e:	ea1c 0202 	ands.w	r2, ip, r2
 8003452:	d0f3      	beq.n	800343c <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003454:	684c      	ldr	r4, [r1, #4]
 8003456:	f004 0403 	and.w	r4, r4, #3
 800345a:	3c01      	subs	r4, #1
 800345c:	2c01      	cmp	r4, #1
 800345e:	d984      	bls.n	800336a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003460:	684c      	ldr	r4, [r1, #4]
 8003462:	f004 0403 	and.w	r4, r4, #3
 8003466:	2c03      	cmp	r4, #3
 8003468:	d00c      	beq.n	8003484 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800346a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800346c:	005d      	lsls	r5, r3, #1
 800346e:	f04f 0c03 	mov.w	ip, #3
 8003472:	fa0c fc05 	lsl.w	ip, ip, r5
 8003476:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347a:	688c      	ldr	r4, [r1, #8]
 800347c:	40ac      	lsls	r4, r5
 800347e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003482:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	684c      	ldr	r4, [r1, #4]
 8003486:	f004 0403 	and.w	r4, r4, #3
 800348a:	2c02      	cmp	r4, #2
 800348c:	d082      	beq.n	8003394 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800348e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003490:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003494:	f04f 0c03 	mov.w	ip, #3
 8003498:	fa0c fc0e 	lsl.w	ip, ip, lr
 800349c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a0:	684c      	ldr	r4, [r1, #4]
 80034a2:	f004 0403 	and.w	r4, r4, #3
 80034a6:	fa04 f40e 	lsl.w	r4, r4, lr
 80034aa:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80034ae:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b0:	684c      	ldr	r4, [r1, #4]
 80034b2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80034b6:	d0c1      	beq.n	800343c <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80034b8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80034bc:	f10c 0502 	add.w	r5, ip, #2
 80034c0:	4c0e      	ldr	r4, [pc, #56]	; (80034fc <HAL_GPIO_Init+0x198>)
 80034c2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80034c6:	f003 0403 	and.w	r4, r3, #3
 80034ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80034ce:	2407      	movs	r4, #7
 80034d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80034d4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034d8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80034dc:	f43f af71 	beq.w	80033c2 <HAL_GPIO_Init+0x5e>
 80034e0:	4c08      	ldr	r4, [pc, #32]	; (8003504 <HAL_GPIO_Init+0x1a0>)
 80034e2:	42a0      	cmp	r0, r4
 80034e4:	d006      	beq.n	80034f4 <HAL_GPIO_Init+0x190>
 80034e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034ea:	42a0      	cmp	r0, r4
 80034ec:	f43f af67 	beq.w	80033be <HAL_GPIO_Init+0x5a>
 80034f0:	2407      	movs	r4, #7
 80034f2:	e767      	b.n	80033c4 <HAL_GPIO_Init+0x60>
 80034f4:	2401      	movs	r4, #1
 80034f6:	e765      	b.n	80033c4 <HAL_GPIO_Init+0x60>
  }
}
 80034f8:	bd70      	pop	{r4, r5, r6, pc}
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	58000800 	.word	0x58000800
 8003504:	48000400 	.word	0x48000400

08003508 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003508:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800350a:	fa31 f203 	lsrs.w	r2, r1, r3
 800350e:	d071      	beq.n	80035f4 <HAL_GPIO_DeInit+0xec>
{
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	e02e      	b.n	8003572 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003514:	2502      	movs	r5, #2
 8003516:	e000      	b.n	800351a <HAL_GPIO_DeInit+0x12>
 8003518:	2500      	movs	r5, #0
 800351a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800351e:	45a4      	cmp	ip, r4
 8003520:	d049      	beq.n	80035b6 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003522:	6804      	ldr	r4, [r0, #0]
 8003524:	005d      	lsls	r5, r3, #1
 8003526:	f04f 0c03 	mov.w	ip, #3
 800352a:	fa0c fc05 	lsl.w	ip, ip, r5
 800352e:	ea44 040c 	orr.w	r4, r4, ip
 8003532:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003534:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003538:	f10e 0e08 	add.w	lr, lr, #8
 800353c:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003540:	f003 0507 	and.w	r5, r3, #7
 8003544:	00ae      	lsls	r6, r5, #2
 8003546:	250f      	movs	r5, #15
 8003548:	40b5      	lsls	r5, r6
 800354a:	ea24 0405 	bic.w	r4, r4, r5
 800354e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003552:	6884      	ldr	r4, [r0, #8]
 8003554:	ea24 040c 	bic.w	r4, r4, ip
 8003558:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800355a:	6844      	ldr	r4, [r0, #4]
 800355c:	ea24 0202 	bic.w	r2, r4, r2
 8003560:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003562:	68c2      	ldr	r2, [r0, #12]
 8003564:	ea22 020c 	bic.w	r2, r2, ip
 8003568:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800356a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800356c:	fa31 f203 	lsrs.w	r2, r1, r3
 8003570:	d03f      	beq.n	80035f2 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003576:	ea12 0701 	ands.w	r7, r2, r1
 800357a:	d0f6      	beq.n	800356a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800357c:	089e      	lsrs	r6, r3, #2
 800357e:	1cb5      	adds	r5, r6, #2
 8003580:	4c1d      	ldr	r4, [pc, #116]	; (80035f8 <HAL_GPIO_DeInit+0xf0>)
 8003582:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003586:	f003 0c03 	and.w	ip, r3, #3
 800358a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800358e:	f04f 0e07 	mov.w	lr, #7
 8003592:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003596:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800359a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800359e:	d0bb      	beq.n	8003518 <HAL_GPIO_DeInit+0x10>
 80035a0:	4d16      	ldr	r5, [pc, #88]	; (80035fc <HAL_GPIO_DeInit+0xf4>)
 80035a2:	42a8      	cmp	r0, r5
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_DeInit+0xaa>
 80035a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035aa:	42a8      	cmp	r0, r5
 80035ac:	d0b2      	beq.n	8003514 <HAL_GPIO_DeInit+0xc>
 80035ae:	2507      	movs	r5, #7
 80035b0:	e7b3      	b.n	800351a <HAL_GPIO_DeInit+0x12>
 80035b2:	2501      	movs	r5, #1
 80035b4:	e7b1      	b.n	800351a <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80035b6:	4c12      	ldr	r4, [pc, #72]	; (8003600 <HAL_GPIO_DeInit+0xf8>)
 80035b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80035bc:	ea25 0507 	bic.w	r5, r5, r7
 80035c0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80035c4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80035c8:	ea25 0507 	bic.w	r5, r5, r7
 80035cc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80035d0:	6825      	ldr	r5, [r4, #0]
 80035d2:	ea25 0507 	bic.w	r5, r5, r7
 80035d6:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80035d8:	6865      	ldr	r5, [r4, #4]
 80035da:	ea25 0707 	bic.w	r7, r5, r7
 80035de:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80035e0:	4d05      	ldr	r5, [pc, #20]	; (80035f8 <HAL_GPIO_DeInit+0xf0>)
 80035e2:	3602      	adds	r6, #2
 80035e4:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80035e8:	ea24 040e 	bic.w	r4, r4, lr
 80035ec:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80035f0:	e797      	b.n	8003522 <HAL_GPIO_DeInit+0x1a>
  }
}
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	48000400 	.word	0x48000400
 8003600:	58000800 	.word	0x58000800

08003604 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003604:	b10a      	cbz	r2, 800360a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003606:	6181      	str	r1, [r0, #24]
 8003608:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800360c:	4770      	bx	lr

0800360e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800360e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003610:	ea01 0203 	and.w	r2, r1, r3
 8003614:	ea21 0103 	bic.w	r1, r1, r3
 8003618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800361c:	6181      	str	r1, [r0, #24]
}
 800361e:	4770      	bx	lr

08003620 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	f012 0f02 	tst.w	r2, #2
 8003628:	d001      	beq.n	800362e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800362e:	6803      	ldr	r3, [r0, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	f012 0f01 	tst.w	r2, #1
 8003636:	d103      	bne.n	8003640 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	619a      	str	r2, [r3, #24]
  }
}
 8003640:	4770      	bx	lr

08003642 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003642:	b410      	push	{r4}
 8003644:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003646:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800364a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003650:	4321      	orrs	r1, r4
 8003652:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003656:	6802      	ldr	r2, [r0, #0]
 8003658:	6853      	ldr	r3, [r2, #4]
 800365a:	0d64      	lsrs	r4, r4, #21
 800365c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8003660:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8003664:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8003668:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800366c:	f044 0403 	orr.w	r4, r4, #3
 8003670:	ea23 0404 	bic.w	r4, r3, r4
 8003674:	4321      	orrs	r1, r4
 8003676:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003678:	bc10      	pop	{r4}
 800367a:	4770      	bx	lr

0800367c <I2C_IsErrorOccurred>:
{
 800367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003680:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003686:	f017 0710 	ands.w	r7, r7, #16
 800368a:	d04c      	beq.n	8003726 <I2C_IsErrorOccurred+0xaa>
 800368c:	460e      	mov	r6, r1
 800368e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	2210      	movs	r2, #16
 8003692:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	6998      	ldr	r0, [r3, #24]
 800369a:	f010 0f20 	tst.w	r0, #32
 800369e:	d13b      	bne.n	8003718 <I2C_IsErrorOccurred+0x9c>
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	d139      	bne.n	8003718 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
 80036a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80036a8:	d0f5      	beq.n	8003696 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe f981 	bl	80019b0 <HAL_GetTick>
 80036ae:	eba0 0008 	sub.w	r0, r0, r8
 80036b2:	42b0      	cmp	r0, r6
 80036b4:	d801      	bhi.n	80036ba <I2C_IsErrorOccurred+0x3e>
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d1ed      	bne.n	8003696 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036ba:	6821      	ldr	r1, [r4, #0]
 80036bc:	684b      	ldr	r3, [r1, #4]
 80036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80036c2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80036c6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036c8:	6988      	ldr	r0, [r1, #24]
 80036ca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80036ce:	d002      	beq.n	80036d6 <I2C_IsErrorOccurred+0x5a>
 80036d0:	b90b      	cbnz	r3, 80036d6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80036d2:	2a20      	cmp	r2, #32
 80036d4:	d118      	bne.n	8003708 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f013 0f20 	tst.w	r3, #32
 80036de:	d1da      	bne.n	8003696 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036e0:	f7fe f966 	bl	80019b0 <HAL_GetTick>
 80036e4:	eba0 0008 	sub.w	r0, r0, r8
 80036e8:	2819      	cmp	r0, #25
 80036ea:	d9f4      	bls.n	80036d6 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036ee:	f043 0320 	orr.w	r3, r3, #32
 80036f2:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	2320      	movs	r3, #32
 80036f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8003700:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8003704:	2501      	movs	r5, #1
 8003706:	e7e6      	b.n	80036d6 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003708:	684b      	ldr	r3, [r1, #4]
 800370a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8003710:	f7fe f94e 	bl	80019b0 <HAL_GetTick>
 8003714:	4680      	mov	r8, r0
 8003716:	e7de      	b.n	80036d6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8003718:	2d00      	cmp	r5, #0
 800371a:	d140      	bne.n	800379e <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800371c:	2220      	movs	r2, #32
 800371e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003720:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003722:	2501      	movs	r5, #1
 8003724:	e000      	b.n	8003728 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8003728:	6822      	ldr	r2, [r4, #0]
 800372a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003730:	d005      	beq.n	800373e <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8003732:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800373a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800373c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800373e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003742:	d006      	beq.n	8003752 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
 8003744:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800374e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003750:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003752:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003756:	d024      	beq.n	80037a2 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003758:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003762:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8003764:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ff5a 	bl	8003620 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	6853      	ldr	r3, [r2, #4]
 8003770:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003774:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003778:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003784:	431f      	orrs	r7, r3
 8003786:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	2320      	movs	r3, #32
 800378a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	2300      	movs	r3, #0
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003794:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003798:	4628      	mov	r0, r5
 800379a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800379e:	2704      	movs	r7, #4
 80037a0:	e7c2      	b.n	8003728 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	d0f8      	beq.n	8003798 <I2C_IsErrorOccurred+0x11c>
 80037a6:	e7de      	b.n	8003766 <I2C_IsErrorOccurred+0xea>

080037a8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	4604      	mov	r4, r0
 80037ac:	460d      	mov	r5, r1
 80037ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f013 0f02 	tst.w	r3, #2
 80037b8:	d11d      	bne.n	80037f6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ba:	4632      	mov	r2, r6
 80037bc:	4629      	mov	r1, r5
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff ff5c 	bl	800367c <I2C_IsErrorOccurred>
 80037c4:	b9c8      	cbnz	r0, 80037fa <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80037c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037ca:	d0f1      	beq.n	80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fe f8f0 	bl	80019b0 <HAL_GetTick>
 80037d0:	1b80      	subs	r0, r0, r6
 80037d2:	42a8      	cmp	r0, r5
 80037d4:	d801      	bhi.n	80037da <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	d1ea      	bne.n	80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	2320      	movs	r3, #32
 80037e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80037ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
 80037f4:	e000      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80037f6:	2000      	movs	r0, #0
}
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
 80037fc:	e7fc      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080037fe <I2C_WaitOnFlagUntilTimeout>:
{
 80037fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	4606      	mov	r6, r0
 8003804:	4688      	mov	r8, r1
 8003806:	4617      	mov	r7, r2
 8003808:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380a:	6834      	ldr	r4, [r6, #0]
 800380c:	69a4      	ldr	r4, [r4, #24]
 800380e:	ea38 0304 	bics.w	r3, r8, r4
 8003812:	bf0c      	ite	eq
 8003814:	f04f 0c01 	moveq.w	ip, #1
 8003818:	f04f 0c00 	movne.w	ip, #0
 800381c:	45bc      	cmp	ip, r7
 800381e:	d118      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8003820:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003824:	d0f1      	beq.n	800380a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe f8c3 	bl	80019b0 <HAL_GetTick>
 800382a:	9b06      	ldr	r3, [sp, #24]
 800382c:	1ac0      	subs	r0, r0, r3
 800382e:	42a8      	cmp	r0, r5
 8003830:	d801      	bhi.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003832:	2d00      	cmp	r5, #0
 8003834:	d1e9      	bne.n	800380a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003838:	f043 0320 	orr.w	r3, r3, #32
 800383c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800383e:	2320      	movs	r3, #32
 8003840:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	2300      	movs	r3, #0
 8003846:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800384a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800384e:	2001      	movs	r0, #1
 8003850:	e000      	b.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8003852:	2000      	movs	r0, #0
}
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003858 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4605      	mov	r5, r0
 800385c:	460c      	mov	r4, r1
 800385e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f013 0f20 	tst.w	r3, #32
 8003868:	d11a      	bne.n	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	4632      	mov	r2, r6
 800386c:	4621      	mov	r1, r4
 800386e:	4628      	mov	r0, r5
 8003870:	f7ff ff04 	bl	800367c <I2C_IsErrorOccurred>
 8003874:	b9b0      	cbnz	r0, 80038a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fe f89b 	bl	80019b0 <HAL_GetTick>
 800387a:	1b80      	subs	r0, r0, r6
 800387c:	42a0      	cmp	r0, r4
 800387e:	d801      	bhi.n	8003884 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8003880:	2c00      	cmp	r4, #0
 8003882:	d1ed      	bne.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003886:	f043 0320 	orr.w	r3, r3, #32
 800388a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800388c:	2320      	movs	r3, #32
 800388e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	2300      	movs	r3, #0
 8003894:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003898:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
}
 800389e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80038a0:	2000      	movs	r0, #0
 80038a2:	e7fc      	b.n	800389e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80038a4:	2001      	movs	r0, #1
 80038a6:	e7fa      	b.n	800389e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080038a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
 80038ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f013 0f04 	tst.w	r3, #4
 80038b8:	d149      	bne.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	4632      	mov	r2, r6
 80038bc:	4629      	mov	r1, r5
 80038be:	4620      	mov	r0, r4
 80038c0:	f7ff fedc 	bl	800367c <I2C_IsErrorOccurred>
 80038c4:	4601      	mov	r1, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d143      	bne.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	f012 0f20 	tst.w	r2, #32
 80038d2:	d113      	bne.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fe f86c 	bl	80019b0 <HAL_GetTick>
 80038d8:	1b80      	subs	r0, r0, r6
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d801      	bhi.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80038de:	2d00      	cmp	r5, #0
 80038e0:	d1e6      	bne.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	2320      	movs	r3, #32
 80038ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80038f0:	2300      	movs	r3, #0
 80038f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80038f6:	2101      	movs	r1, #1
}
 80038f8:	4608      	mov	r0, r1
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	f012 0f04 	tst.w	r2, #4
 8003902:	d002      	beq.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003904:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003906:	2a00      	cmp	r2, #0
 8003908:	d1f6      	bne.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	f012 0f10 	tst.w	r2, #16
 8003910:	d01a      	beq.n	8003948 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003912:	2210      	movs	r2, #16
 8003914:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003916:	2304      	movs	r3, #4
 8003918:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003920:	6821      	ldr	r1, [r4, #0]
 8003922:	684b      	ldr	r3, [r1, #4]
 8003924:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003928:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800392c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	2300      	movs	r3, #0
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003944:	2101      	movs	r1, #1
 8003946:	e7d7      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	6463      	str	r3, [r4, #68]	; 0x44
 800394c:	e7e5      	b.n	800391a <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 800394e:	2100      	movs	r1, #0
 8003950:	e7d2      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8003952:	2101      	movs	r1, #1
 8003954:	e7d0      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08003956 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003956:	2800      	cmp	r0, #0
 8003958:	d059      	beq.n	8003a0e <HAL_I2C_Init+0xb8>
{
 800395a:	b510      	push	{r4, lr}
 800395c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003962:	2b00      	cmp	r3, #0
 8003964:	d043      	beq.n	80039ee <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003966:	2324      	movs	r3, #36	; 0x24
 8003968:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800397e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	6893      	ldr	r3, [r2, #8]
 8003984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003988:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800398a:	68e3      	ldr	r3, [r4, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d033      	beq.n	80039f8 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003990:	68a3      	ldr	r3, [r4, #8]
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8003998:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d031      	beq.n	8003a04 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	6853      	ldr	r3, [r2, #4]
 80039a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ac:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	68d3      	ldr	r3, [r2, #12]
 80039b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039b6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	6962      	ldr	r2, [r4, #20]
 80039bc:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039be:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80039c6:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c8:	69e3      	ldr	r3, [r4, #28]
 80039ca:	6a21      	ldr	r1, [r4, #32]
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	430b      	orrs	r3, r1
 80039d0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	2000      	movs	r0, #0
 80039de:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	2320      	movs	r3, #32
 80039e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80039ec:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80039ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80039f2:	f7fd fd8b 	bl	800150c <HAL_I2C_MspInit>
 80039f6:	e7b6      	b.n	8003966 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039f8:	68a3      	ldr	r3, [r4, #8]
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	e7ca      	b.n	800399a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	e7c8      	b.n	80039a0 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003a0e:	2001      	movs	r0, #1
}
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_I2C_Master_Transmit>:
{
 8003a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	460f      	mov	r7, r1
 8003a1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003a22:	b2c9      	uxtb	r1, r1
 8003a24:	2920      	cmp	r1, #32
 8003a26:	f040 80a3 	bne.w	8003b70 <HAL_I2C_Master_Transmit+0x15c>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4690      	mov	r8, r2
 8003a2e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003a30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f000 809f 	beq.w	8003b78 <HAL_I2C_Master_Transmit+0x164>
 8003a3a:	f04f 0a01 	mov.w	sl, #1
 8003a3e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003a42:	f7fd ffb5 	bl	80019b0 <HAL_GetTick>
 8003a46:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a48:	9000      	str	r0, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff fed3 	bl	80037fe <I2C_WaitOnFlagUntilTimeout>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f040 808f 	bne.w	8003b7c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a5e:	2321      	movs	r3, #33	; 0x21
 8003a60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a64:	2310      	movs	r3, #16
 8003a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a6e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a72:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a76:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2bff      	cmp	r3, #255	; 0xff
 8003a7e:	d90a      	bls.n	8003a96 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_I2C_Master_Transmit+0x178>)
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7ff fdd7 	bl	8003642 <I2C_TransferConfig>
 8003a94:	e018      	b.n	8003ac8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8003a96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a98:	b292      	uxth	r2, r2
 8003a9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_I2C_Master_Transmit+0x178>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fdca 	bl	8003642 <I2C_TransferConfig>
 8003aae:	e00b      	b.n	8003ac8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003ab0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	4639      	mov	r1, r7
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7ff fdbd 	bl	8003642 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d033      	beq.n	8003b38 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fe67 	bl	80037a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d150      	bne.n	8003b80 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae8:	3301      	adds	r3, #1
 8003aea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003af6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003afe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b00:	b292      	uxth	r2, r2
 8003b02:	2a00      	cmp	r2, #0
 8003b04:	d0e0      	beq.n	8003ac8 <HAL_I2C_Master_Transmit+0xb4>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1de      	bne.n	8003ac8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	9500      	str	r5, [sp, #0]
 8003b0c:	4633      	mov	r3, r6
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff fe73 	bl	80037fe <I2C_WaitOnFlagUntilTimeout>
 8003b18:	bba0      	cbnz	r0, 8003b84 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	d9c6      	bls.n	8003ab0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b26:	2300      	movs	r3, #0
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b2e:	4639      	mov	r1, r7
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7ff fd86 	bl	8003642 <I2C_TransferConfig>
 8003b36:	e7c7      	b.n	8003ac8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	462a      	mov	r2, r5
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff fe8b 	bl	8003858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b42:	bb08      	cbnz	r0, 8003b88 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b4a:	6821      	ldr	r1, [r4, #0]
 8003b4c:	684b      	ldr	r3, [r1, #4]
 8003b4e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003b52:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003b56:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003b6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003b6e:	e000      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8003b70:	2002      	movs	r0, #2
}
 8003b72:	b002      	add	sp, #8
 8003b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003b78:	2002      	movs	r0, #2
 8003b7a:	e7fa      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e7f8      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	e7f6      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
 8003b86:	e7f4      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e7f2      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x15e>
 8003b8c:	80002000 	.word	0x80002000

08003b90 <HAL_I2C_Master_Receive>:
{
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	460f      	mov	r7, r1
 8003b98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8003b9e:	b2c9      	uxtb	r1, r1
 8003ba0:	2920      	cmp	r1, #32
 8003ba2:	f040 80a2 	bne.w	8003cea <HAL_I2C_Master_Receive+0x15a>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4690      	mov	r8, r2
 8003baa:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8003bac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	f000 809e 	beq.w	8003cf2 <HAL_I2C_Master_Receive+0x162>
 8003bb6:	f04f 0a01 	mov.w	sl, #1
 8003bba:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fef7 	bl	80019b0 <HAL_GetTick>
 8003bc2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bc4:	9000      	str	r0, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	4652      	mov	r2, sl
 8003bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7ff fe15 	bl	80037fe <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	f040 808e 	bne.w	8003cf6 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bda:	2322      	movs	r3, #34	; 0x22
 8003bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003be0:	2310      	movs	r3, #16
 8003be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003bea:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bee:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bf2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2bff      	cmp	r3, #255	; 0xff
 8003bfa:	d90a      	bls.n	8003c12 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfc:	22ff      	movs	r2, #255	; 0xff
 8003bfe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c00:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_I2C_Master_Receive+0x178>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c08:	4639      	mov	r1, r7
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff fd19 	bl	8003642 <I2C_TransferConfig>
 8003c10:	e018      	b.n	8003c44 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8003c12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c14:	b292      	uxth	r2, r2
 8003c16:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c18:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_I2C_Master_Receive+0x178>)
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	4639      	mov	r1, r7
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7ff fd0c 	bl	8003642 <I2C_TransferConfig>
 8003c2a:	e00b      	b.n	8003c44 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fcff 	bl	8003642 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d032      	beq.n	8003cb2 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff fe29 	bl	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d14f      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c60:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003c68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003c6a:	3a01      	subs	r2, #1
 8003c6c:	b292      	uxth	r2, r2
 8003c6e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0e0      	beq.n	8003c44 <HAL_I2C_Master_Receive+0xb4>
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d1de      	bne.n	8003c44 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c86:	9500      	str	r5, [sp, #0]
 8003c88:	4633      	mov	r3, r6
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fdb6 	bl	80037fe <I2C_WaitOnFlagUntilTimeout>
 8003c92:	bba0      	cbnz	r0, 8003cfe <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2bff      	cmp	r3, #255	; 0xff
 8003c9a:	d9c7      	bls.n	8003c2c <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca8:	4639      	mov	r1, r7
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7ff fcc9 	bl	8003642 <I2C_TransferConfig>
 8003cb0:	e7c8      	b.n	8003c44 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff fdce 	bl	8003858 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cbc:	bb08      	cbnz	r0, 8003d02 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003cc4:	6821      	ldr	r1, [r4, #0]
 8003cc6:	684b      	ldr	r3, [r1, #4]
 8003cc8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003ccc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003cd0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003ce4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8003ce8:	e000      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8003cea:	2002      	movs	r0, #2
}
 8003cec:	b002      	add	sp, #8
 8003cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8003cf2:	2002      	movs	r0, #2
 8003cf4:	e7fa      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	e7f8      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	e7f6      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
 8003d00:	e7f4      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
 8003d04:	e7f2      	b.n	8003cec <HAL_I2C_Master_Receive+0x15c>
 8003d06:	bf00      	nop
 8003d08:	80002400 	.word	0x80002400

08003d0c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d124      	bne.n	8003d60 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d022      	beq.n	8003d64 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	2324      	movs	r3, #36	; 0x24
 8003d26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2a:	6802      	ldr	r2, [r0, #0]
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d34:	6802      	ldr	r2, [r0, #0]
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d3c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d3e:	6802      	ldr	r2, [r0, #0]
 8003d40:	6813      	ldr	r3, [r2, #0]
 8003d42:	4319      	orrs	r1, r3
 8003d44:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d46:	6802      	ldr	r2, [r0, #0]
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	2320      	movs	r3, #32
 8003d52:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2002      	movs	r0, #2
 8003d62:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003d64:	2002      	movs	r0, #2
  }
}
 8003d66:	4770      	bx	lr

08003d68 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d122      	bne.n	8003db8 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d020      	beq.n	8003dbc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	2324      	movs	r3, #36	; 0x24
 8003d82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d86:	6802      	ldr	r2, [r0, #0]
 8003d88:	6813      	ldr	r3, [r2, #0]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d90:	6802      	ldr	r2, [r0, #0]
 8003d92:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d98:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d9c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d9e:	6802      	ldr	r2, [r0, #0]
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	2320      	movs	r3, #32
 8003daa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003db4:	4618      	mov	r0, r3
 8003db6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2002      	movs	r0, #2
 8003dba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003dbc:	2002      	movs	r0, #2
  }
}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <HAL_PWR_EnableBkUpAccess+0xc>)
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	4770      	bx	lr
 8003dcc:	58000400 	.word	0x58000400

08003dd0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003dd4:	b9a0      	cbnz	r0, 8003e00 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003dde:	d10a      	bne.n	8003df6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003de2:	6913      	ldr	r3, [r2, #16]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003dea:	2c01      	cmp	r4, #1
 8003dec:	d010      	beq.n	8003e10 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dee:	bf40      	sev
    __WFE();
 8003df0:	bf20      	wfe
    __WFE();
 8003df2:	bf20      	wfe
  }
}
 8003df4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003df6:	f000 f821 	bl	8003e3c <HAL_PWREx_DisableLowPowerRunMode>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_PWR_EnterSLEEPMode+0x10>
 8003dfe:	e7f9      	b.n	8003df4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e08:	d1ea      	bne.n	8003de0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8003e0a:	f000 f80f 	bl	8003e2c <HAL_PWREx_EnableLowPowerRunMode>
 8003e0e:	e7e7      	b.n	8003de0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8003e10:	bf30      	wfi
 8003e12:	e7ef      	b.n	8003df4 <HAL_PWR_EnterSLEEPMode+0x24>
 8003e14:	58000400 	.word	0x58000400
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <HAL_PWREx_GetVoltageRange+0xc>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
}
 8003e20:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	58000400 	.word	0x58000400

08003e2c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e34:	6013      	str	r3, [r2, #0]
}
 8003e36:	4770      	bx	lr
 8003e38:	58000400 	.word	0x58000400

08003e3c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003e3c:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e44:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2232      	movs	r2, #50	; 0x32
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003e58:	e000      	b.n	8003e5c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8003e5a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e5e:	6952      	ldr	r2, [r2, #20]
 8003e60:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003e64:	d001      	beq.n	8003e6a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f7      	bne.n	8003e5a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e72:	d101      	bne.n	8003e78 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8003e74:	2000      	movs	r0, #0
 8003e76:	4770      	bx	lr
    return HAL_TIMEOUT;
 8003e78:	2003      	movs	r0, #3
}
 8003e7a:	4770      	bx	lr
 8003e7c:	58000400 	.word	0x58000400
 8003e80:	20000070 	.word	0x20000070
 8003e84:	431bde83 	.word	0x431bde83

08003e88 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003e98:	6913      	ldr	r3, [r2, #16]
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003ea0:	2801      	cmp	r0, #1
 8003ea2:	d008      	beq.n	8003eb6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003ea4:	bf40      	sev
    __WFE();
 8003ea6:	bf20      	wfe
    __WFE();
 8003ea8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003eac:	6913      	ldr	r3, [r2, #16]
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6113      	str	r3, [r2, #16]
}
 8003eb4:	4770      	bx	lr
    __WFI();
 8003eb6:	bf30      	wfi
 8003eb8:	e7f7      	b.n	8003eaa <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003eba:	bf00      	nop
 8003ebc:	58000400 	.word	0x58000400
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ec4:	b530      	push	{r4, r5, lr}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	4604      	mov	r4, r0
 8003eca:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <RCC_SetFlashLatency+0xb4>)
 8003ece:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ed2:	9006      	str	r0, [sp, #24]
 8003ed4:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003ed8:	f103 0208 	add.w	r2, r3, #8
 8003edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ee0:	9004      	str	r0, [sp, #16]
 8003ee2:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003ee6:	ad01      	add	r5, sp, #4
 8003ee8:	3310      	adds	r3, #16
 8003eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003eee:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef2:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003ef6:	d007      	beq.n	8003f08 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e014      	b.n	8003f26 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8003efc:	aa08      	add	r2, sp, #32
 8003efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f02:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003f06:	e01e      	b.n	8003f46 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d808      	bhi.n	8003f20 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f0e:	aa08      	add	r2, sp, #32
 8003f10:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003f14:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003f18:	42a2      	cmp	r2, r4
 8003f1a:	d2ef      	bcs.n	8003efc <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	e7f4      	b.n	8003f0a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f20:	2500      	movs	r5, #0
 8003f22:	e010      	b.n	8003f46 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f24:	3301      	adds	r3, #1
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d80c      	bhi.n	8003f44 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003f2a:	aa08      	add	r2, sp, #32
 8003f2c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003f30:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003f34:	42a2      	cmp	r2, r4
 8003f36:	d3f5      	bcc.n	8003f24 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f38:	aa08      	add	r2, sp, #32
 8003f3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f3e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003f42:	e000      	b.n	8003f46 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f44:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f46:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <RCC_SetFlashLatency+0xb8>)
 8003f48:	6813      	ldr	r3, [r2, #0]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	432b      	orrs	r3, r5
 8003f50:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f52:	f7fd fd2d 	bl	80019b0 <HAL_GetTick>
 8003f56:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <RCC_SetFlashLatency+0xb8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	42ab      	cmp	r3, r5
 8003f62:	d006      	beq.n	8003f72 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f64:	f7fd fd24 	bl	80019b0 <HAL_GetTick>
 8003f68:	1b00      	subs	r0, r0, r4
 8003f6a:	2802      	cmp	r0, #2
 8003f6c:	d9f4      	bls.n	8003f58 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8003f6e:	2003      	movs	r0, #3
 8003f70:	e000      	b.n	8003f74 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8003f72:	2000      	movs	r0, #0
}
 8003f74:	b009      	add	sp, #36	; 0x24
 8003f76:	bd30      	pop	{r4, r5, pc}
 8003f78:	08012188 	.word	0x08012188
 8003f7c:	58004000 	.word	0x58004000

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003f80:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003f82:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8003f88:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8003f9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003f9e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003fa2:	f7ff ff3b 	bl	8003e1c <HAL_PWREx_GetVoltageRange>
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003faa:	fba0 3004 	umull	r3, r0, r0, r4
 8003fae:	0c80      	lsrs	r0, r0, #18
 8003fb0:	f7ff ff88 	bl	8003ec4 <RCC_SetFlashLatency>
}
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	080126f4 	.word	0x080126f4
 8003fbc:	08012694 	.word	0x08012694
 8003fc0:	431bde83 	.word	0x431bde83

08003fc4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fd0:	f011 010c 	ands.w	r1, r1, #12
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x28>
 8003fd6:	290c      	cmp	r1, #12
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fda:	2904      	cmp	r1, #4
 8003fdc:	d047      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fde:	2908      	cmp	r1, #8
 8003fe0:	d03b      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8003fe2:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	e026      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d1f6      	bne.n	8003fda <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f013 0308 	ands.w	r3, r3, #8
 8003ff6:	d00d      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x50>
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f013 0308 	ands.w	r3, r3, #8
 8004002:	d124      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004008:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800400c:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800400e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004012:	e00e      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	f012 0f08 	tst.w	r2, #8
 800401e:	d112      	bne.n	8004046 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800402c:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800402e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004032:	b1d1      	cbz	r1, 800406a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004034:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d01a      	beq.n	800407a <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004044:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	e7ee      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x68>
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004052:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004054:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004058:	e7d8      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004064:	d106      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004066:	4819      	ldr	r0, [pc, #100]	; (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	e7e5      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800406a:	4610      	mov	r0, r2
 800406c:	e7e3      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800406e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004070:	4817      	ldr	r0, [pc, #92]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004072:	e7e0      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004074:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004076:	4816      	ldr	r0, [pc, #88]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004078:	e7dd      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004084:	2b02      	cmp	r3, #2
 8004086:	d009      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0xd8>
 8004088:	2b03      	cmp	r3, #3
 800408a:	d108      	bne.n	800409e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004096:	d115      	bne.n	80040c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_RCC_GetSysClockFreq+0x108>)
 800409a:	e000      	b.n	800409e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 800409c:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	68d8      	ldr	r0, [r3, #12]
 80040a4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80040a8:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80040ac:	68d8      	ldr	r0, [r3, #12]
 80040ae:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80040b2:	3001      	adds	r0, #1
 80040b4:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040b8:	68d8      	ldr	r0, [r3, #12]
 80040ba:	0f40      	lsrs	r0, r0, #29
 80040bc:	3001      	adds	r0, #1
 80040be:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80040c2:	e7bf      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80040c4:	4a02      	ldr	r2, [pc, #8]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040c6:	e7ea      	b.n	800409e <HAL_RCC_GetSysClockFreq+0xda>
 80040c8:	080126f4 	.word	0x080126f4
 80040cc:	01e84800 	.word	0x01e84800
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <HAL_RCC_GetHCLKFreq>:
{
 80040d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80040d6:	f7ff ff75 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040e4:	4a02      	ldr	r2, [pc, #8]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80040e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80040ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80040ee:	bd08      	pop	{r3, pc}
 80040f0:	08012694 	.word	0x08012694

080040f4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f000 8319 	beq.w	800472c <HAL_RCC_OscConfig+0x638>
{
 80040fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fc:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	689d      	ldr	r5, [r3, #8]
 8004104:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004108:	68de      	ldr	r6, [r3, #12]
 800410a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800410e:	6803      	ldr	r3, [r0, #0]
 8004110:	f013 0f20 	tst.w	r3, #32
 8004114:	f000 808f 	beq.w	8004236 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004118:	b1ed      	cbz	r5, 8004156 <HAL_RCC_OscConfig+0x62>
 800411a:	2d0c      	cmp	r5, #12
 800411c:	d019      	beq.n	8004152 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800411e:	6a23      	ldr	r3, [r4, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80bc 	beq.w	800429e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004132:	f7fd fc3d 	bl	80019b0 <HAL_GetTick>
 8004136:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f013 0f02 	tst.w	r3, #2
 8004142:	d165      	bne.n	8004210 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004144:	f7fd fc34 	bl	80019b0 <HAL_GetTick>
 8004148:	1bc0      	subs	r0, r0, r7
 800414a:	2802      	cmp	r0, #2
 800414c:	d9f4      	bls.n	8004138 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800414e:	2003      	movs	r0, #3
 8004150:	e2f9      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004152:	2e01      	cmp	r6, #1
 8004154:	d1e3      	bne.n	800411e <HAL_RCC_OscConfig+0x2a>
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f013 0f02 	tst.w	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004162:	6a23      	ldr	r3, [r4, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 82e3 	beq.w	8004730 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f013 0f08 	tst.w	r3, #8
 8004176:	d029      	beq.n	80041cc <HAL_RCC_OscConfig+0xd8>
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004182:	4298      	cmp	r0, r3
 8004184:	d92a      	bls.n	80041dc <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004186:	f7ff fefb 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 800418a:	2800      	cmp	r0, #0
 800418c:	f040 82d2 	bne.w	8004734 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f042 0208 	orr.w	r2, r2, #8
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041a2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80041b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041b4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041b6:	f7ff ff8d 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80041ba:	4bb0      	ldr	r3, [pc, #704]	; (800447c <HAL_RCC_OscConfig+0x388>)
 80041bc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80041be:	4bb0      	ldr	r3, [pc, #704]	; (8004480 <HAL_RCC_OscConfig+0x38c>)
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f7fd fbf3 	bl	80019ac <HAL_InitTick>
        if (status != HAL_OK)
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d035      	beq.n	8004236 <HAL_RCC_OscConfig+0x142>
 80041ca:	e2bc      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041da:	e7d2      	b.n	8004182 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80041fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004200:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004202:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004204:	f7ff febc 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8004208:	2800      	cmp	r0, #0
 800420a:	d0d4      	beq.n	80041b6 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 800420c:	2001      	movs	r0, #1
 800420e:	e29a      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004222:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004228:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004230:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004234:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	f013 0f01 	tst.w	r3, #1
 800423c:	d051      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800423e:	2d08      	cmp	r5, #8
 8004240:	d045      	beq.n	80042ce <HAL_RCC_OscConfig+0x1da>
 8004242:	2d0c      	cmp	r5, #12
 8004244:	d041      	beq.n	80042ca <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004250:	68a1      	ldr	r1, [r4, #8]
 8004252:	430b      	orrs	r3, r1
 8004254:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d063      	beq.n	8004326 <HAL_RCC_OscConfig+0x232>
 800425e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004262:	d065      	beq.n	8004330 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800426e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004276:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 800427e:	f7fd fb97 	bl	80019b0 <HAL_GetTick>
 8004282:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800428e:	d128      	bne.n	80042e2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fb8e 	bl	80019b0 <HAL_GetTick>
 8004294:	1bc0      	subs	r0, r0, r7
 8004296:	2864      	cmp	r0, #100	; 0x64
 8004298:	d9f4      	bls.n	8004284 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 800429a:	2003      	movs	r0, #3
 800429c:	e253      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800429e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042aa:	f7fd fb81 	bl	80019b0 <HAL_GetTick>
 80042ae:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f013 0f02 	tst.w	r3, #2
 80042ba:	d0bc      	beq.n	8004236 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042bc:	f7fd fb78 	bl	80019b0 <HAL_GetTick>
 80042c0:	1bc0      	subs	r0, r0, r7
 80042c2:	2802      	cmp	r0, #2
 80042c4:	d9f4      	bls.n	80042b0 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80042c6:	2003      	movs	r0, #3
 80042c8:	e23d      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042ca:	2e03      	cmp	r6, #3
 80042cc:	d1bb      	bne.n	8004246 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 822b 	beq.w	8004738 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f013 0f02 	tst.w	r3, #2
 80042e8:	d052      	beq.n	8004390 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042ea:	2d04      	cmp	r5, #4
 80042ec:	d03d      	beq.n	800436a <HAL_RCC_OscConfig+0x276>
 80042ee:	2d0c      	cmp	r5, #12
 80042f0:	d039      	beq.n	8004366 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8091 	beq.w	800441c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004304:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004306:	f7fd fb53 	bl	80019b0 <HAL_GetTick>
 800430a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004316:	d177      	bne.n	8004408 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004318:	f7fd fb4a 	bl	80019b0 <HAL_GetTick>
 800431c:	1b80      	subs	r0, r0, r6
 800431e:	2802      	cmp	r0, #2
 8004320:	d9f4      	bls.n	800430c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004322:	2003      	movs	r0, #3
 8004324:	e20f      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	e7a3      	b.n	8004278 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800433a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	e798      	b.n	8004278 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004346:	f7fd fb33 	bl	80019b0 <HAL_GetTick>
 800434a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004356:	d0c4      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fb2a 	bl	80019b0 <HAL_GetTick>
 800435c:	1bc0      	subs	r0, r0, r7
 800435e:	2864      	cmp	r0, #100	; 0x64
 8004360:	d9f4      	bls.n	800434c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004362:	2003      	movs	r0, #3
 8004364:	e1ef      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004366:	2e02      	cmp	r6, #2
 8004368:	d1c3      	bne.n	80042f2 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004374:	d003      	beq.n	800437e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 81df 	beq.w	800473c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004384:	6853      	ldr	r3, [r2, #4]
 8004386:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800438a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800438e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f013 0f08 	tst.w	r3, #8
 8004396:	f000 808e 	beq.w	80044b6 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439a:	69a3      	ldr	r3, [r4, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d071      	beq.n	8004484 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80043a8:	69e1      	ldr	r1, [r4, #28]
 80043aa:	f003 0210 	and.w	r2, r3, #16
 80043ae:	4291      	cmp	r1, r2
 80043b0:	d011      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80043b2:	f003 0203 	and.w	r2, r3, #3
 80043b6:	2a02      	cmp	r2, #2
 80043b8:	f000 81c2 	beq.w	8004740 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80043bc:	f013 0f01 	tst.w	r3, #1
 80043c0:	d142      	bne.n	8004448 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80043c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	69e1      	ldr	r1, [r4, #28]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80043d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80043e6:	f7fd fae3 	bl	80019b0 <HAL_GetTick>
 80043ea:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	f013 0f02 	tst.w	r3, #2
 80043f8:	d15d      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fad9 	bl	80019b0 <HAL_GetTick>
 80043fe:	1b80      	subs	r0, r0, r6
 8004400:	2811      	cmp	r0, #17
 8004402:	d9f3      	bls.n	80043ec <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004404:	2003      	movs	r0, #3
 8004406:	e19e      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800440a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440e:	6853      	ldr	r3, [r2, #4]
 8004410:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004414:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004418:	6053      	str	r3, [r2, #4]
}
 800441a:	e7b9      	b.n	8004390 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800441c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004428:	f7fd fac2 	bl	80019b0 <HAL_GetTick>
 800442c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004438:	d0aa      	beq.n	8004390 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd fab9 	bl	80019b0 <HAL_GetTick>
 800443e:	1b80      	subs	r0, r0, r6
 8004440:	2802      	cmp	r0, #2
 8004442:	d9f4      	bls.n	800442e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004444:	2003      	movs	r0, #3
 8004446:	e17e      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004458:	f7fd faaa 	bl	80019b0 <HAL_GetTick>
 800445c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004466:	f013 0f02 	tst.w	r3, #2
 800446a:	d0aa      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7fd faa0 	bl	80019b0 <HAL_GetTick>
 8004470:	1b80      	subs	r0, r0, r6
 8004472:	2811      	cmp	r0, #17
 8004474:	d9f3      	bls.n	800445e <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8004476:	2003      	movs	r0, #3
 8004478:	e165      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 800447a:	bf00      	nop
 800447c:	20000070 	.word	0x20000070
 8004480:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004488:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004494:	f7fd fa8c 	bl	80019b0 <HAL_GetTick>
 8004498:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a2:	f013 0f02 	tst.w	r3, #2
 80044a6:	d006      	beq.n	80044b6 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fd fa82 	bl	80019b0 <HAL_GetTick>
 80044ac:	1b80      	subs	r0, r0, r6
 80044ae:	2811      	cmp	r0, #17
 80044b0:	d9f3      	bls.n	800449a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80044b2:	2003      	movs	r0, #3
 80044b4:	e147      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f013 0f04 	tst.w	r3, #4
 80044bc:	f000 80b1 	beq.w	8004622 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80044c0:	4ba8      	ldr	r3, [pc, #672]	; (8004764 <HAL_RCC_OscConfig+0x670>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044c8:	d110      	bne.n	80044ec <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80044ca:	f7ff fc79 	bl	8003dc0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80044ce:	f7fd fa6f 	bl	80019b0 <HAL_GetTick>
 80044d2:	4606      	mov	r6, r0
 80044d4:	4ba3      	ldr	r3, [pc, #652]	; (8004764 <HAL_RCC_OscConfig+0x670>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7fd fa67 	bl	80019b0 <HAL_GetTick>
 80044e2:	1b80      	subs	r0, r0, r6
 80044e4:	2802      	cmp	r0, #2
 80044e6:	d9f5      	bls.n	80044d4 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 80044e8:	2003      	movs	r0, #3
 80044ea:	e12c      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d061      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80044f2:	2b85      	cmp	r3, #133	; 0x85
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d107      	bne.n	800450a <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800450a:	f7fd fa51 	bl	80019b0 <HAL_GetTick>
 800450e:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004514:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f013 0f02 	tst.w	r3, #2
 800452c:	d108      	bne.n	8004540 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fa3f 	bl	80019b0 <HAL_GetTick>
 8004532:	1b80      	subs	r0, r0, r6
 8004534:	f241 3388 	movw	r3, #5000	; 0x1388
 8004538:	4298      	cmp	r0, r3
 800453a:	d9f1      	bls.n	8004520 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 800453c:	2003      	movs	r0, #3
 800453e:	e102      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004540:	68e3      	ldr	r3, [r4, #12]
 8004542:	2b81      	cmp	r3, #129	; 0x81
 8004544:	d001      	beq.n	800454a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004546:	2b85      	cmp	r3, #133	; 0x85
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800454a:	f7fd fa31 	bl	80019b0 <HAL_GetTick>
 800454e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004554:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800456c:	d159      	bne.n	8004622 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fd fa1f 	bl	80019b0 <HAL_GetTick>
 8004572:	1b80      	subs	r0, r0, r6
 8004574:	f241 3388 	movw	r3, #5000	; 0x1388
 8004578:	4298      	cmp	r0, r3
 800457a:	d9f1      	bls.n	8004560 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 800457c:	2003      	movs	r0, #3
 800457e:	e0e2      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004580:	f7fd fa16 	bl	80019b0 <HAL_GetTick>
 8004584:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800458a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800458e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80045a2:	d03e      	beq.n	8004622 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fd fa04 	bl	80019b0 <HAL_GetTick>
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80045ae:	4298      	cmp	r0, r3
 80045b0:	d9f1      	bls.n	8004596 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80045b2:	2003      	movs	r0, #3
 80045b4:	e0c7      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80045b6:	f7fd f9fb 	bl	80019b0 <HAL_GetTick>
 80045ba:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80045d8:	d008      	beq.n	80045ec <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fd f9e9 	bl	80019b0 <HAL_GetTick>
 80045de:	1b80      	subs	r0, r0, r6
 80045e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80045e4:	4298      	cmp	r0, r3
 80045e6:	d9f1      	bls.n	80045cc <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 80045e8:	2003      	movs	r0, #3
 80045ea:	e0ac      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80045ec:	f7fd f9e0 	bl	80019b0 <HAL_GetTick>
 80045f0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f013 0f02 	tst.w	r3, #2
 800460e:	d008      	beq.n	8004622 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fd f9ce 	bl	80019b0 <HAL_GetTick>
 8004614:	1b80      	subs	r0, r0, r6
 8004616:	f241 3388 	movw	r3, #5000	; 0x1388
 800461a:	4298      	cmp	r0, r3
 800461c:	d9f1      	bls.n	8004602 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 800461e:	2003      	movs	r0, #3
 8004620:	e091      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 808d 	beq.w	8004744 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462a:	2d0c      	cmp	r5, #12
 800462c:	d062      	beq.n	80046f4 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800462e:	2b02      	cmp	r3, #2
 8004630:	d01f      	beq.n	8004672 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800463c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	f022 0203 	bic.w	r2, r2, #3
 8004644:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800464c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004650:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004652:	f7fd f9ad 	bl	80019b0 <HAL_GetTick>
 8004656:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004662:	d073      	beq.n	800474c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fd f9a4 	bl	80019b0 <HAL_GetTick>
 8004668:	1b00      	subs	r0, r0, r4
 800466a:	280a      	cmp	r0, #10
 800466c:	d9f4      	bls.n	8004658 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 800466e:	2003      	movs	r0, #3
 8004670:	e069      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004676:	6813      	ldr	r3, [r2, #0]
 8004678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800467c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800467e:	f7fd f997 	bl	80019b0 <HAL_GetTick>
 8004682:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800468e:	d12a      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004694:	68d3      	ldr	r3, [r2, #12]
 8004696:	4934      	ldr	r1, [pc, #208]	; (8004768 <HAL_RCC_OscConfig+0x674>)
 8004698:	4019      	ands	r1, r3
 800469a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800469c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800469e:	4303      	orrs	r3, r0
 80046a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80046a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80046a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80046a8:	4303      	orrs	r3, r0
 80046aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80046ac:	4303      	orrs	r3, r0
 80046ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80046b0:	4303      	orrs	r3, r0
 80046b2:	430b      	orrs	r3, r1
 80046b4:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046bc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046be:	68d3      	ldr	r3, [r2, #12]
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80046c6:	f7fd f973 	bl	80019b0 <HAL_GetTick>
 80046ca:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046d6:	d137      	bne.n	8004748 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd f96a 	bl	80019b0 <HAL_GetTick>
 80046dc:	1b00      	subs	r0, r0, r4
 80046de:	280a      	cmp	r0, #10
 80046e0:	d9f4      	bls.n	80046cc <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e02f      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fd f963 	bl	80019b0 <HAL_GetTick>
 80046ea:	1b40      	subs	r0, r0, r5
 80046ec:	280a      	cmp	r0, #10
 80046ee:	d9c9      	bls.n	8004684 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 80046f0:	2003      	movs	r0, #3
 80046f2:	e028      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d02b      	beq.n	8004750 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fc:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80046fe:	f003 0103 	and.w	r1, r3, #3
 8004702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004704:	4291      	cmp	r1, r2
 8004706:	d125      	bne.n	8004754 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004708:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800470c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470e:	428a      	cmp	r2, r1
 8004710:	d122      	bne.n	8004758 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004718:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800471c:	d11e      	bne.n	800475c <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800471e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004722:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004724:	4293      	cmp	r3, r2
 8004726:	d11b      	bne.n	8004760 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8004728:	2000      	movs	r0, #0
 800472a:	e00c      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
}
 800472e:	4770      	bx	lr
        return HAL_ERROR;
 8004730:	2001      	movs	r0, #1
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004734:	2001      	movs	r0, #1
 8004736:	e006      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
 800473a:	e004      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800473c:	2001      	movs	r0, #1
 800473e:	e002      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004740:	2001      	movs	r0, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004744:	2000      	movs	r0, #0
}
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	e7fc      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 800474c:	2000      	movs	r0, #0
 800474e:	e7fa      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004750:	2001      	movs	r0, #1
 8004752:	e7f8      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004754:	2001      	movs	r0, #1
 8004756:	e7f6      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 8004758:	2001      	movs	r0, #1
 800475a:	e7f4      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 800475c:	2001      	movs	r0, #1
 800475e:	e7f2      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 8004760:	2001      	movs	r0, #1
 8004762:	e7f0      	b.n	8004746 <HAL_RCC_OscConfig+0x652>
 8004764:	58000400 	.word	0x58000400
 8004768:	11c1808c 	.word	0x11c1808c

0800476c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800476c:	2800      	cmp	r0, #0
 800476e:	f000 8127 	beq.w	80049c0 <HAL_RCC_ClockConfig+0x254>
{
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	460c      	mov	r4, r1
 8004776:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b93      	ldr	r3, [pc, #588]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	428b      	cmp	r3, r1
 8004782:	d32d      	bcc.n	80047e0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	f013 0f02 	tst.w	r3, #2
 800478a:	d13f      	bne.n	800480c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	f013 0f20 	tst.w	r3, #32
 8004792:	d153      	bne.n	800483c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	f013 0f40 	tst.w	r3, #64	; 0x40
 800479a:	d16a      	bne.n	8004872 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	f013 0f04 	tst.w	r3, #4
 80047a2:	f040 8083 	bne.w	80048ac <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	f013 0f08 	tst.w	r3, #8
 80047ac:	f040 8097 	bne.w	80048de <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	f013 0f01 	tst.w	r3, #1
 80047b6:	f000 80de 	beq.w	8004976 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	686b      	ldr	r3, [r5, #4]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f000 80a8 	beq.w	8004912 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	f000 80ad 	beq.w	8004922 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 80b2 	bne.w	8004932 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	f012 0f02 	tst.w	r2, #2
 80047d8:	f040 80b1 	bne.w	800493e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80047dc:	2001      	movs	r0, #1
 80047de:	e0ee      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e0:	4a79      	ldr	r2, [pc, #484]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80047ec:	f7fd f8e0 	bl	80019b0 <HAL_GetTick>
 80047f0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b75      	ldr	r3, [pc, #468]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	d0c2      	beq.n	8004784 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047fe:	f7fd f8d7 	bl	80019b0 <HAL_GetTick>
 8004802:	1b80      	subs	r0, r0, r6
 8004804:	2802      	cmp	r0, #2
 8004806:	d9f4      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
 800480a:	e0d8      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800480e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004812:	688a      	ldr	r2, [r1, #8]
 8004814:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800481c:	f7fd f8c8 	bl	80019b0 <HAL_GetTick>
 8004820:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800482c:	d1ae      	bne.n	800478c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800482e:	f7fd f8bf 	bl	80019b0 <HAL_GetTick>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	2802      	cmp	r0, #2
 8004836:	d9f4      	bls.n	8004822 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004838:	2003      	movs	r0, #3
 800483a:	e0c0      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800483c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800483e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004842:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004846:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004850:	f7fd f8ae 	bl	80019b0 <HAL_GetTick>
 8004854:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800485e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004862:	d197      	bne.n	8004794 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004864:	f7fd f8a4 	bl	80019b0 <HAL_GetTick>
 8004868:	1b80      	subs	r0, r0, r6
 800486a:	2802      	cmp	r0, #2
 800486c:	d9f3      	bls.n	8004856 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800486e:	2003      	movs	r0, #3
 8004870:	e0a5      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004872:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004878:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800487c:	f023 030f 	bic.w	r3, r3, #15
 8004880:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004884:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004888:	f7fd f892 	bl	80019b0 <HAL_GetTick>
 800488c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004896:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800489a:	f47f af7f 	bne.w	800479c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800489e:	f7fd f887 	bl	80019b0 <HAL_GetTick>
 80048a2:	1b80      	subs	r0, r0, r6
 80048a4:	2802      	cmp	r0, #2
 80048a6:	d9f2      	bls.n	800488e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80048a8:	2003      	movs	r0, #3
 80048aa:	e088      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80048ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b2:	688a      	ldr	r2, [r1, #8]
 80048b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80048bc:	f7fd f878 	bl	80019b0 <HAL_GetTick>
 80048c0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048cc:	f47f af6b 	bne.w	80047a6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048d0:	f7fd f86e 	bl	80019b0 <HAL_GetTick>
 80048d4:	1b80      	subs	r0, r0, r6
 80048d6:	2802      	cmp	r0, #2
 80048d8:	d9f3      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80048da:	2003      	movs	r0, #3
 80048dc:	e06f      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80048de:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e4:	6893      	ldr	r3, [r2, #8]
 80048e6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80048ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048ee:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80048f0:	f7fd f85e 	bl	80019b0 <HAL_GetTick>
 80048f4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004900:	f47f af56 	bne.w	80047b0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004904:	f7fd f854 	bl	80019b0 <HAL_GetTick>
 8004908:	1b80      	subs	r0, r0, r6
 800490a:	2802      	cmp	r0, #2
 800490c:	d9f3      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800490e:	2003      	movs	r0, #3
 8004910:	e055      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800491c:	d10f      	bne.n	800493e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e04d      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800492e:	2001      	movs	r0, #1
 8004930:	e045      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800493c:	d042      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800493e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004942:	688a      	ldr	r2, [r1, #8]
 8004944:	f022 0203 	bic.w	r2, r2, #3
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800494c:	f7fd f830 	bl	80019b0 <HAL_GetTick>
 8004950:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495c:	686a      	ldr	r2, [r5, #4]
 800495e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fd f824 	bl	80019b0 <HAL_GetTick>
 8004968:	1b80      	subs	r0, r0, r6
 800496a:	f241 3388 	movw	r3, #5000	; 0x1388
 800496e:	4298      	cmp	r0, r3
 8004970:	d9ef      	bls.n	8004952 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004972:	2003      	movs	r0, #3
 8004974:	e023      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	42a3      	cmp	r3, r4
 8004980:	d915      	bls.n	80049ae <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	4323      	orrs	r3, r4
 800498c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800498e:	f7fd f80f 	bl	80019b0 <HAL_GetTick>
 8004992:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <HAL_RCC_ClockConfig+0x25c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	42a3      	cmp	r3, r4
 800499e:	d006      	beq.n	80049ae <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049a0:	f7fd f806 	bl	80019b0 <HAL_GetTick>
 80049a4:	1b40      	subs	r0, r0, r5
 80049a6:	2802      	cmp	r0, #2
 80049a8:	d9f4      	bls.n	8004994 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80049aa:	2003      	movs	r0, #3
 80049ac:	e007      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049ae:	f7ff fb91 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_ClockConfig+0x260>)
 80049b4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	f7fc fff7 	bl	80019ac <HAL_InitTick>
}
 80049be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80049c0:	2001      	movs	r0, #1
}
 80049c2:	4770      	bx	lr
        return HAL_ERROR;
 80049c4:	2001      	movs	r0, #1
 80049c6:	e7fa      	b.n	80049be <HAL_RCC_ClockConfig+0x252>
 80049c8:	58004000 	.word	0x58004000
 80049cc:	20000070 	.word	0x20000070
 80049d0:	20000074 	.word	0x20000074

080049d4 <HAL_RCC_GetPCLK1Freq>:
{
 80049d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049d6:	f7ff fb7d 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80049e4:	4a02      	ldr	r2, [pc, #8]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80049ea:	40d8      	lsrs	r0, r3
 80049ec:	bd08      	pop	{r3, pc}
 80049ee:	bf00      	nop
 80049f0:	080126d4 	.word	0x080126d4

080049f4 <HAL_RCC_GetPCLK2Freq>:
{
 80049f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80049f6:	f7ff fb6d 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004a04:	4a02      	ldr	r2, [pc, #8]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004a0a:	40d8      	lsrs	r0, r3
 8004a0c:	bd08      	pop	{r3, pc}
 8004a0e:	bf00      	nop
 8004a10:	080126d4 	.word	0x080126d4

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	6803      	ldr	r3, [r0, #0]
 8004a1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004a1e:	f040 80ab 	bne.w	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004a22:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f013 0f01 	tst.w	r3, #1
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a2c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a32:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a36:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f013 0f02 	tst.w	r3, #2
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a4a:	68a2      	ldr	r2, [r4, #8]
 8004a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a54:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	f013 0f20 	tst.w	r3, #32
 8004a66:	d009      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a68:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004a82:	d00c      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a84:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a8e:	0c02      	lsrs	r2, r0, #16
 8004a90:	0412      	lsls	r2, r2, #16
 8004a92:	ea23 0302 	bic.w	r3, r3, r2
 8004a96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ab0:	0c02      	lsrs	r2, r0, #16
 8004ab2:	0412      	lsls	r2, r2, #16
 8004ab4:	ea23 0302 	bic.w	r3, r3, r2
 8004ab8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ace:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ad2:	0c02      	lsrs	r2, r0, #16
 8004ad4:	0412      	lsls	r2, r2, #16
 8004ad6:	ea23 0302 	bic.w	r3, r3, r2
 8004ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ae8:	f040 809e 	bne.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004af2:	f040 80aa 	bne.w	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004afc:	f040 80b6 	bne.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	f013 0f10 	tst.w	r3, #16
 8004b06:	d00e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b08:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004b1c:	68e3      	ldr	r3, [r4, #12]
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	f000 80b4 	beq.w	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004b2c:	d00f      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b38:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b44:	b91b      	cbnz	r3, 8004b4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004b46:	68cb      	ldr	r3, [r1, #12]
 8004b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004b54:	d00e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b70:	f000 8092 	beq.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004b74:	4628      	mov	r0, r5
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004b78:	f7ff f922 	bl	8003dc0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004b7c:	f7fc ff18 	bl	80019b0 <HAL_GetTick>
 8004b80:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fc ff10 	bl	80019b0 <HAL_GetTick>
 8004b90:	1b40      	subs	r0, r0, r5
 8004b92:	2802      	cmp	r0, #2
 8004b94:	d9f5      	bls.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004b96:	2503      	movs	r5, #3
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004b9a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004b9c:	2d00      	cmp	r5, #0
 8004b9e:	f47f af41 	bne.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004bae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d024      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004bbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bc0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004bc4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004bc8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bcc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004bd0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004bd4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004bdc:	f012 0f02 	tst.w	r2, #2
 8004be0:	d10f      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f47f af1e 	bne.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004bfc:	e712      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004bfe:	2200      	movs	r2, #0
 8004c00:	e7ec      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004c02:	f7fc fed5 	bl	80019b0 <HAL_GetTick>
 8004c06:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f013 0f02 	tst.w	r3, #2
 8004c14:	d1e5      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fc fecb 	bl	80019b0 <HAL_GetTick>
 8004c1a:	1b80      	subs	r0, r0, r6
 8004c1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c20:	4298      	cmp	r0, r3
 8004c22:	d9f1      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004c24:	2503      	movs	r5, #3
 8004c26:	e7dc      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c28:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c2a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c2e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c32:	0919      	lsrs	r1, r3, #4
 8004c34:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c38:	ea22 0201 	bic.w	r2, r2, r1
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004c48:	e750      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c4a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c4c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c50:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c54:	0919      	lsrs	r1, r3, #4
 8004c56:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c5a:	ea22 0201 	bic.w	r2, r2, r1
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004c6a:	e744      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004c6e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004c72:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004c76:	0919      	lsrs	r1, r3, #4
 8004c78:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004c7c:	ea22 0201 	bic.w	r2, r2, r1
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004c8c:	e738      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004c8e:	68cb      	ldr	r3, [r1, #12]
 8004c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c94:	60cb      	str	r3, [r1, #12]
 8004c96:	e746      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c98:	68cb      	ldr	r3, [r1, #12]
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	60cb      	str	r3, [r1, #12]
 8004ca0:	e768      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ca2:	bf00      	nop
 8004ca4:	58000400 	.word	0x58000400

08004ca8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d036      	beq.n	8004d1e <HAL_RTC_DeactivateAlarm+0x76>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004cbe:	22ca      	movs	r2, #202	; 0xca
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc2:	2253      	movs	r2, #83	; 0x53
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004cc6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004cca:	d019      	beq.n	8004d00 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004cd4:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004cde:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ce0:	f022 0202 	bic.w	r2, r2, #2
 8004ce4:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004d06:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004d10:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d1c:	e7e5      	b.n	8004cea <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8004d1e:	2002      	movs	r0, #2
}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40002800 	.word	0x40002800

08004d28 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d2e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004d30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d32:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004d34:	f015 0f01 	tst.w	r5, #1
 8004d38:	d106      	bne.n	8004d48 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004d3a:	f015 0f02 	tst.w	r5, #2
 8004d3e:	d109      	bne.n	8004d54 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004d4e:	f7fc ffd1 	bl	8001cf4 <HAL_RTC_AlarmAEventCallback>
 8004d52:	e7f2      	b.n	8004d3a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8004d56:	2202      	movs	r2, #2
 8004d58:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 f9e6 	bl	800512c <HAL_RTCEx_AlarmBEventCallback>
 8004d60:	e7ee      	b.n	8004d40 <HAL_RTC_AlarmIRQHandler+0x18>
 8004d62:	bf00      	nop
 8004d64:	40002800 	.word	0x40002800

08004d68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d68:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004d6a:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <HAL_RTC_WaitForSynchro+0x30>)
 8004d6c:	68d3      	ldr	r3, [r2, #12]
 8004d6e:	f023 0320 	bic.w	r3, r3, #32
 8004d72:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004d74:	f7fc fe1c 	bl	80019b0 <HAL_GetTick>
 8004d78:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <HAL_RTC_WaitForSynchro+0x30>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f013 0f20 	tst.w	r3, #32
 8004d82:	d107      	bne.n	8004d94 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d84:	f7fc fe14 	bl	80019b0 <HAL_GetTick>
 8004d88:	1b00      	subs	r0, r0, r4
 8004d8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004d8e:	d9f4      	bls.n	8004d7a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8004d90:	2003      	movs	r0, #3
 8004d92:	e000      	b.n	8004d96 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004d94:	2000      	movs	r0, #0
}
 8004d96:	bd10      	pop	{r4, pc}
 8004d98:	40002800 	.word	0x40002800

08004d9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <RTC_EnterInitMode+0x48>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004da6:	d002      	beq.n	8004dae <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8004daa:	4620      	mov	r0, r4
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004db0:	4a0c      	ldr	r2, [pc, #48]	; (8004de4 <RTC_EnterInitMode+0x48>)
 8004db2:	68d3      	ldr	r3, [r2, #12]
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8004dba:	f7fc fdf9 	bl	80019b0 <HAL_GetTick>
 8004dbe:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <RTC_EnterInitMode+0x48>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004dca:	d1ee      	bne.n	8004daa <RTC_EnterInitMode+0xe>
 8004dcc:	2c03      	cmp	r4, #3
 8004dce:	d0ec      	beq.n	8004daa <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004dd0:	f7fc fdee 	bl	80019b0 <HAL_GetTick>
 8004dd4:	1b43      	subs	r3, r0, r5
 8004dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dda:	d9f2      	bls.n	8004dc2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ddc:	2403      	movs	r4, #3
 8004dde:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8004de2:	e7ee      	b.n	8004dc2 <RTC_EnterInitMode+0x26>
 8004de4:	40002800 	.word	0x40002800

08004de8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <RTC_ExitInitMode+0x4c>)
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f013 0f20 	tst.w	r3, #32
 8004dfc:	d107      	bne.n	8004e0e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfe:	f7ff ffb3 	bl	8004d68 <HAL_RTC_WaitForSynchro>
 8004e02:	4603      	mov	r3, r0
 8004e04:	b1a0      	cbz	r0, 8004e30 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004e0c:	e010      	b.n	8004e30 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <RTC_ExitInitMode+0x4c>)
 8004e10:	6993      	ldr	r3, [r2, #24]
 8004e12:	f023 0320 	bic.w	r3, r3, #32
 8004e16:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e18:	f7ff ffa6 	bl	8004d68 <HAL_RTC_WaitForSynchro>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b110      	cbz	r0, 8004e26 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e26:	4903      	ldr	r1, [pc, #12]	; (8004e34 <RTC_ExitInitMode+0x4c>)
 8004e28:	698a      	ldr	r2, [r1, #24]
 8004e2a:	f042 0220 	orr.w	r2, r2, #32
 8004e2e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd10      	pop	{r4, pc}
 8004e34:	40002800 	.word	0x40002800

08004e38 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_RTC_Init+0x9a>
{
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e40:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004e44:	b19b      	cbz	r3, 8004e6e <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e46:	2302      	movs	r3, #2
 8004e48:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RTC_Init+0xa0>)
 8004e4e:	22ca      	movs	r2, #202	; 0xca
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
 8004e52:	2253      	movs	r2, #83	; 0x53
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7ff ffa0 	bl	8004d9c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004e5c:	b160      	cbz	r0, 8004e78 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RTC_Init+0xa0>)
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8004e64:	b910      	cbnz	r0, 8004e6c <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004e6e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8004e72:	f7fc fc27 	bl	80016c4 <HAL_RTC_MspInit>
 8004e76:	e7e6      	b.n	8004e46 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <HAL_RTC_Init+0xa0>)
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8004e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e84:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004e86:	6999      	ldr	r1, [r3, #24]
 8004e88:	6862      	ldr	r2, [r4, #4]
 8004e8a:	6920      	ldr	r0, [r4, #16]
 8004e8c:	4302      	orrs	r2, r0
 8004e8e:	69a0      	ldr	r0, [r4, #24]
 8004e90:	4302      	orrs	r2, r0
 8004e92:	430a      	orrs	r2, r1
 8004e94:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004e96:	68e2      	ldr	r2, [r4, #12]
 8004e98:	68a1      	ldr	r1, [r4, #8]
 8004e9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e9e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004ea6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ea8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004eaa:	4301      	orrs	r1, r0
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff ff99 	bl	8004de8 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d1d1      	bne.n	8004e5e <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8004eba:	4907      	ldr	r1, [pc, #28]	; (8004ed8 <HAL_RTC_Init+0xa0>)
 8004ebc:	698b      	ldr	r3, [r1, #24]
 8004ebe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004ec2:	6a22      	ldr	r2, [r4, #32]
 8004ec4:	69e5      	ldr	r5, [r4, #28]
 8004ec6:	432a      	orrs	r2, r5
 8004ec8:	6965      	ldr	r5, [r4, #20]
 8004eca:	432a      	orrs	r2, r5
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	618b      	str	r3, [r1, #24]
 8004ed0:	e7c5      	b.n	8004e5e <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ed2:	2001      	movs	r0, #1
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40002800 	.word	0x40002800

08004edc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004edc:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004ede:	e002      	b.n	8004ee6 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004ee0:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004ee2:	380a      	subs	r0, #10
 8004ee4:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8004ee6:	2809      	cmp	r0, #9
 8004ee8:	d8fa      	bhi.n	8004ee0 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	b2db      	uxtb	r3, r3
}
 8004eee:	4318      	orrs	r0, r3
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004ef4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	f000 80b0 	beq.w	800505e <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8004f06:	2301      	movs	r3, #1
 8004f08:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004f12:	4b54      	ldr	r3, [pc, #336]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f14:	68de      	ldr	r6, [r3, #12]
 8004f16:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8004f1a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004f1e:	d043      	beq.n	8004fa8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004f20:	bb12      	cbnz	r2, 8004f68 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f28:	d101      	bne.n	8004f2e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004f2e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f32:	7820      	ldrb	r0, [r4, #0]
 8004f34:	f7ff ffd2 	bl	8004edc <RTC_ByteToBcd2>
 8004f38:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f3a:	7860      	ldrb	r0, [r4, #1]
 8004f3c:	f7ff ffce 	bl	8004edc <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f40:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f44:	78a0      	ldrb	r0, [r4, #2]
 8004f46:	f7ff ffc9 	bl	8004edc <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f4a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f4c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f4e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f52:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8004f56:	f7ff ffc1 	bl	8004edc <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f5a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f5e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f60:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f62:	ea48 0000 	orr.w	r0, r8, r0
 8004f66:	e020      	b.n	8004faa <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004f68:	6948      	ldr	r0, [r1, #20]
 8004f6a:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8004f6e:	d009      	beq.n	8004f84 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004f70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004f74:	d006      	beq.n	8004f84 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004f76:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f7e:	d101      	bne.n	8004f84 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f84:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f86:	7863      	ldrb	r3, [r4, #1]
 8004f88:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f8e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f90:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f92:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f94:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004f98:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004f9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fa0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fa2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fa4:	4318      	orrs	r0, r3
 8004fa6:	e000      	b.n	8004faa <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8004fa8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004faa:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fac:	22ca      	movs	r2, #202	; 0xca
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb0:	2253      	movs	r2, #83	; 0x53
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fba:	d02a      	beq.n	8005012 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004fbc:	4b29      	ldr	r3, [pc, #164]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004fc4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004fca:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004fce:	d040      	beq.n	8005052 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fd2:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004fd4:	69a2      	ldr	r2, [r4, #24]
 8004fd6:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004fdc:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004fde:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004fe0:	f042 0202 	orr.w	r2, r2, #2
 8004fe4:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004fec:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_RTC_SetAlarm_IT+0x174>)
 8004ff0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8004ffe:	22ff      	movs	r2, #255	; 0xff
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005002:	2301      	movs	r3, #1
 8005004:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005008:	2000      	movs	r0, #0
 800500a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800501a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800501c:	2201      	movs	r2, #1
 800501e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005020:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005024:	d00f      	beq.n	8005046 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8005028:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800502a:	69a2      	ldr	r2, [r4, #24]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 8005032:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005034:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005042:	619a      	str	r2, [r3, #24]
 8005044:	e7d3      	b.n	8004fee <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005046:	69a3      	ldr	r3, [r4, #24]
 8005048:	69e2      	ldr	r2, [r4, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	4a05      	ldr	r2, [pc, #20]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 800504e:	6453      	str	r3, [r2, #68]	; 0x44
 8005050:	e7ed      	b.n	800502e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005052:	69a3      	ldr	r3, [r4, #24]
 8005054:	69e2      	ldr	r2, [r4, #28]
 8005056:	4313      	orrs	r3, r2
 8005058:	4a02      	ldr	r2, [pc, #8]	; (8005064 <HAL_RTC_SetAlarm_IT+0x170>)
 800505a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800505c:	e7bc      	b.n	8004fd8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800505e:	2002      	movs	r0, #2
}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40002800 	.word	0x40002800
 8005068:	58000800 	.word	0x58000800

0800506c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800506c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d017      	beq.n	80050a4 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005074:	2101      	movs	r1, #1
 8005076:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800507a:	2302      	movs	r3, #2
 800507c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005082:	22ca      	movs	r2, #202	; 0xca
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
 8005086:	2253      	movs	r2, #83	; 0x53
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	f042 0220 	orr.w	r2, r2, #32
 8005090:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005092:	22ff      	movs	r2, #255	; 0xff
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005096:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800509a:	2300      	movs	r3, #0
 800509c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80050a0:	4618      	mov	r0, r3
 80050a2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80050a4:	2002      	movs	r0, #2
}
 80050a6:	4770      	bx	lr
 80050a8:	40002800 	.word	0x40002800

080050ac <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d020      	beq.n	80050f6 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80050b4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80050b6:	2101      	movs	r1, #1
 80050b8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_RTCEx_SetSSRU_IT+0x50>)
 80050c4:	22ca      	movs	r2, #202	; 0xca
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
 80050c8:	2253      	movs	r2, #83	; 0x53
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050d2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80050d4:	4c0a      	ldr	r4, [pc, #40]	; (8005100 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80050d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80050da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80050de:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e2:	22ff      	movs	r2, #255	; 0xff
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80050e6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050ea:	2300      	movs	r3, #0
 80050ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80050f0:	4618      	mov	r0, r3
}
 80050f2:	bc10      	pop	{r4}
 80050f4:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80050f6:	2002      	movs	r0, #2
}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40002800 	.word	0x40002800
 8005100:	58000800 	.word	0x58000800

08005104 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005110:	d103      	bne.n	800511a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005112:	2301      	movs	r3, #1
 8005114:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005118:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800511a:	4b03      	ldr	r3, [pc, #12]	; (8005128 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800511c:	2240      	movs	r2, #64	; 0x40
 800511e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005120:	f7fc fdec 	bl	8001cfc <HAL_RTCEx_SSRUEventCallback>
 8005124:	e7f5      	b.n	8005112 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005126:	bf00      	nop
 8005128:	40002800 	.word	0x40002800

0800512c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800512c:	4770      	bx	lr

0800512e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800512e:	0089      	lsls	r1, r1, #2
 8005130:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005134:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005138:	600a      	str	r2, [r1, #0]
}
 800513a:	4770      	bx	lr

0800513c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800513c:	0089      	lsls	r1, r1, #2
 800513e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005142:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005146:	6808      	ldr	r0, [r1, #0]
}
 8005148:	4770      	bx	lr
	...

0800514c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <SUBGHZSPI_Init+0x20>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005154:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005156:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800515a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800515c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005160:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	4770      	bx	lr
 800516c:	58010000 	.word	0x58010000

08005170 <HAL_SUBGHZ_Init>:
{
 8005170:	b530      	push	{r4, r5, lr}
 8005172:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005174:	2800      	cmp	r0, #0
 8005176:	d04e      	beq.n	8005216 <HAL_SUBGHZ_Init+0xa6>
 8005178:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800517a:	7983      	ldrb	r3, [r0, #6]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03b      	beq.n	80051f8 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005188:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800518c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_SUBGHZ_Init+0xac>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800519c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80051a0:	2264      	movs	r2, #100	; 0x64
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80051a8:	9b01      	ldr	r3, [sp, #4]
 80051aa:	b34b      	cbz	r3, 8005200 <HAL_SUBGHZ_Init+0x90>
    count--;
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80051be:	d1f3      	bne.n	80051a8 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80051c0:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <HAL_SUBGHZ_Init+0xb0>)
 80051c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80051d0:	4914      	ldr	r1, [pc, #80]	; (8005224 <HAL_SUBGHZ_Init+0xb4>)
 80051d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e4:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80051e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ea:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80051ec:	b15d      	cbz	r5, 8005206 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80051ee:	2301      	movs	r3, #1
 80051f0:	71a3      	strb	r3, [r4, #6]
}
 80051f2:	4628      	mov	r0, r5
 80051f4:	b003      	add	sp, #12
 80051f6:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 80051f8:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80051fa:	f7fc fb03 	bl	8001804 <HAL_SUBGHZ_MspInit>
 80051fe:	e7bf      	b.n	8005180 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005200:	2501      	movs	r5, #1
 8005202:	60a5      	str	r5, [r4, #8]
      break;
 8005204:	e7dd      	b.n	80051c2 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	f7ff ffa0 	bl	800514c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800520c:	2301      	movs	r3, #1
 800520e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	e7eb      	b.n	80051ee <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005216:	2501      	movs	r5, #1
 8005218:	e7eb      	b.n	80051f2 <HAL_SUBGHZ_Init+0x82>
 800521a:	bf00      	nop
 800521c:	20000070 	.word	0x20000070
 8005220:	58000400 	.word	0x58000400
 8005224:	58000800 	.word	0x58000800

08005228 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005228:	b082      	sub	sp, #8
 800522a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <SUBGHZSPI_Transmit+0x70>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005234:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005238:	2064      	movs	r0, #100	; 0x64
 800523a:	fb00 f303 	mul.w	r3, r0, r3
 800523e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	b14b      	cbz	r3, 8005258 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <SUBGHZSPI_Transmit+0x74>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f013 0f02 	tst.w	r3, #2
 8005252:	d0f5      	beq.n	8005240 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	2000      	movs	r0, #0
 8005256:	e001      	b.n	800525c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005258:	2001      	movs	r0, #1
 800525a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <SUBGHZSPI_Transmit+0x74>)
 800525e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <SUBGHZSPI_Transmit+0x70>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005268:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800526c:	2164      	movs	r1, #100	; 0x64
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005274:	9b01      	ldr	r3, [sp, #4]
 8005276:	b143      	cbz	r3, 800528a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <SUBGHZSPI_Transmit+0x74>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f013 0f01 	tst.w	r3, #1
 8005286:	d0f5      	beq.n	8005274 <SUBGHZSPI_Transmit+0x4c>
 8005288:	e001      	b.n	800528e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800528a:	2001      	movs	r0, #1
 800528c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800528e:	4b03      	ldr	r3, [pc, #12]	; (800529c <SUBGHZSPI_Transmit+0x74>)
 8005290:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005292:	b002      	add	sp, #8
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000070 	.word	0x20000070
 800529c:	58010000 	.word	0x58010000

080052a0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80052a0:	b082      	sub	sp, #8
 80052a2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <SUBGHZSPI_Receive+0x78>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80052ac:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80052b0:	2064      	movs	r0, #100	; 0x64
 80052b2:	fb00 f303 	mul.w	r3, r0, r3
 80052b6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	b14b      	cbz	r3, 80052d0 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80052bc:	9b01      	ldr	r3, [sp, #4]
 80052be:	3b01      	subs	r3, #1
 80052c0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <SUBGHZSPI_Receive+0x7c>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f013 0f02 	tst.w	r3, #2
 80052ca:	d0f5      	beq.n	80052b8 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2000      	movs	r0, #0
 80052ce:	e001      	b.n	80052d4 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80052d0:	2001      	movs	r0, #1
 80052d2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <SUBGHZSPI_Receive+0x7c>)
 80052d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80052da:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <SUBGHZSPI_Receive+0x78>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80052e6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80052ea:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80052ee:	fb0c f303 	mul.w	r3, ip, r3
 80052f2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80052f4:	9b01      	ldr	r3, [sp, #4]
 80052f6:	b143      	cbz	r3, 800530a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <SUBGHZSPI_Receive+0x7c>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f013 0f01 	tst.w	r3, #1
 8005306:	d0f5      	beq.n	80052f4 <SUBGHZSPI_Receive+0x54>
 8005308:	e001      	b.n	800530e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800530a:	2001      	movs	r0, #1
 800530c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <SUBGHZSPI_Receive+0x7c>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005314:	b002      	add	sp, #8
 8005316:	4770      	bx	lr
 8005318:	20000070 	.word	0x20000070
 800531c:	58010000 	.word	0x58010000

08005320 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005320:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005322:	4b13      	ldr	r3, [pc, #76]	; (8005370 <SUBGHZ_WaitOnBusy+0x50>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800532a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800532e:	2264      	movs	r2, #100	; 0x64
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	e006      	b.n	8005346 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005338:	2302      	movs	r3, #2
 800533a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800533c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800533e:	b002      	add	sp, #8
 8005340:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005342:	4213      	tst	r3, r2
 8005344:	d012      	beq.n	800536c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005346:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <SUBGHZ_WaitOnBusy+0x54>)
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f013 0304 	ands.w	r3, r3, #4
 800534e:	d000      	beq.n	8005352 <SUBGHZ_WaitOnBusy+0x32>
 8005350:	2301      	movs	r3, #1
    if (count == 0U)
 8005352:	9a01      	ldr	r2, [sp, #4]
 8005354:	2a00      	cmp	r2, #0
 8005356:	d0ef      	beq.n	8005338 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005358:	9a01      	ldr	r2, [sp, #4]
 800535a:	3a01      	subs	r2, #1
 800535c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <SUBGHZ_WaitOnBusy+0x54>)
 8005360:	6952      	ldr	r2, [r2, #20]
 8005362:	f012 0202 	ands.w	r2, r2, #2
 8005366:	d0ec      	beq.n	8005342 <SUBGHZ_WaitOnBusy+0x22>
 8005368:	2201      	movs	r2, #1
 800536a:	e7ea      	b.n	8005342 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800536c:	2000      	movs	r0, #0
 800536e:	e7e6      	b.n	800533e <SUBGHZ_WaitOnBusy+0x1e>
 8005370:	20000070 	.word	0x20000070
 8005374:	58000400 	.word	0x58000400

08005378 <SUBGHZ_CheckDeviceReady>:
{
 8005378:	b500      	push	{lr}
 800537a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800537c:	7903      	ldrb	r3, [r0, #4]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d004      	beq.n	800538c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005382:	f7ff ffcd 	bl	8005320 <SUBGHZ_WaitOnBusy>
}
 8005386:	b003      	add	sp, #12
 8005388:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <SUBGHZ_CheckDeviceReady+0x4c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005394:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005398:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800539a:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <SUBGHZ_CheckDeviceReady+0x50>)
 800539c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80053a8:	9b01      	ldr	r3, [sp, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f9      	bne.n	80053a8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <SUBGHZ_CheckDeviceReady+0x50>)
 80053b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053c2:	e7de      	b.n	8005382 <SUBGHZ_CheckDeviceReady+0xa>
 80053c4:	20000070 	.word	0x20000070
 80053c8:	58000400 	.word	0x58000400

080053cc <HAL_SUBGHZ_WriteRegisters>:
{
 80053cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053d2:	7980      	ldrb	r0, [r0, #6]
 80053d4:	fa5f f880 	uxtb.w	r8, r0
 80053d8:	f1b8 0f01 	cmp.w	r8, #1
 80053dc:	d13e      	bne.n	800545c <HAL_SUBGHZ_WriteRegisters+0x90>
 80053de:	460c      	mov	r4, r1
 80053e0:	4617      	mov	r7, r2
 80053e2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80053e4:	796b      	ldrb	r3, [r5, #5]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d03b      	beq.n	8005462 <HAL_SUBGHZ_WriteRegisters+0x96>
 80053ea:	2301      	movs	r3, #1
 80053ec:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80053ee:	2302      	movs	r3, #2
 80053f0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80053f2:	4628      	mov	r0, r5
 80053f4:	f7ff ffc0 	bl	8005378 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80053fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80053fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005406:	210d      	movs	r1, #13
 8005408:	4628      	mov	r0, r5
 800540a:	f7ff ff0d 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800540e:	0a21      	lsrs	r1, r4, #8
 8005410:	4628      	mov	r0, r5
 8005412:	f7ff ff09 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005416:	b2e1      	uxtb	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f7ff ff05 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800541e:	2400      	movs	r4, #0
 8005420:	e005      	b.n	800542e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005422:	5d39      	ldrb	r1, [r7, r4]
 8005424:	4628      	mov	r0, r5
 8005426:	f7ff feff 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800542a:	3401      	adds	r4, #1
 800542c:	b2a4      	uxth	r4, r4
 800542e:	42b4      	cmp	r4, r6
 8005430:	d3f7      	bcc.n	8005422 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005432:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005434:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005440:	4628      	mov	r0, r5
 8005442:	f7ff ff6d 	bl	8005320 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005446:	68ab      	ldr	r3, [r5, #8]
 8005448:	b90b      	cbnz	r3, 800544e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800544a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800544e:	2301      	movs	r3, #1
 8005450:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005452:	2300      	movs	r3, #0
 8005454:	716b      	strb	r3, [r5, #5]
}
 8005456:	4640      	mov	r0, r8
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800545c:	f04f 0802 	mov.w	r8, #2
 8005460:	e7f9      	b.n	8005456 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005462:	f04f 0802 	mov.w	r8, #2
 8005466:	e7f6      	b.n	8005456 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005468:	58000400 	.word	0x58000400

0800546c <HAL_SUBGHZ_ReadRegisters>:
{
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005472:	7980      	ldrb	r0, [r0, #6]
 8005474:	fa5f f880 	uxtb.w	r8, r0
 8005478:	f1b8 0f01 	cmp.w	r8, #1
 800547c:	d141      	bne.n	8005502 <HAL_SUBGHZ_ReadRegisters+0x96>
 800547e:	460c      	mov	r4, r1
 8005480:	4615      	mov	r5, r2
 8005482:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005484:	7973      	ldrb	r3, [r6, #5]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d03e      	beq.n	8005508 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800548a:	2301      	movs	r3, #1
 800548c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800548e:	4630      	mov	r0, r6
 8005490:	f7ff ff72 	bl	8005378 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005494:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005496:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800549a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800549e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80054a2:	211d      	movs	r1, #29
 80054a4:	4630      	mov	r0, r6
 80054a6:	f7ff febf 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80054aa:	0a21      	lsrs	r1, r4, #8
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff febb 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80054b2:	b2e1      	uxtb	r1, r4
 80054b4:	4630      	mov	r0, r6
 80054b6:	f7ff feb7 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80054ba:	2100      	movs	r1, #0
 80054bc:	4630      	mov	r0, r6
 80054be:	f7ff feb3 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80054c2:	2400      	movs	r4, #0
 80054c4:	e006      	b.n	80054d4 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80054c6:	4629      	mov	r1, r5
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff fee9 	bl	80052a0 <SUBGHZSPI_Receive>
      pData++;
 80054ce:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80054d0:	3401      	adds	r4, #1
 80054d2:	b2a4      	uxth	r4, r4
 80054d4:	42bc      	cmp	r4, r7
 80054d6:	d3f6      	bcc.n	80054c6 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80054da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ff1a 	bl	8005320 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80054ec:	68b3      	ldr	r3, [r6, #8]
 80054ee:	b90b      	cbnz	r3, 80054f4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80054f0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80054f4:	2301      	movs	r3, #1
 80054f6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80054f8:	2300      	movs	r3, #0
 80054fa:	7173      	strb	r3, [r6, #5]
}
 80054fc:	4640      	mov	r0, r8
 80054fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005502:	f04f 0802 	mov.w	r8, #2
 8005506:	e7f9      	b.n	80054fc <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005508:	f04f 0802 	mov.w	r8, #2
 800550c:	e7f6      	b.n	80054fc <HAL_SUBGHZ_ReadRegisters+0x90>
 800550e:	bf00      	nop
 8005510:	58000400 	.word	0x58000400

08005514 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800551a:	7980      	ldrb	r0, [r0, #6]
 800551c:	fa5f f980 	uxtb.w	r9, r0
 8005520:	f1b9 0f01 	cmp.w	r9, #1
 8005524:	d143      	bne.n	80055ae <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005526:	4688      	mov	r8, r1
 8005528:	4617      	mov	r7, r2
 800552a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800552c:	796b      	ldrb	r3, [r5, #5]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d040      	beq.n	80055b4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005532:	2301      	movs	r3, #1
 8005534:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005536:	4628      	mov	r0, r5
 8005538:	f7ff ff1e 	bl	8005378 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800553c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005540:	d005      	beq.n	800554e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005542:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005546:	d002      	beq.n	800554e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005548:	2300      	movs	r3, #0
 800554a:	712b      	strb	r3, [r5, #4]
 800554c:	e001      	b.n	8005552 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800554e:	2301      	movs	r3, #1
 8005550:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005552:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005554:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005560:	4641      	mov	r1, r8
 8005562:	4628      	mov	r0, r5
 8005564:	f7ff fe60 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005568:	2400      	movs	r4, #0
 800556a:	e005      	b.n	8005578 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800556c:	5d39      	ldrb	r1, [r7, r4]
 800556e:	4628      	mov	r0, r5
 8005570:	f7ff fe5a 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005574:	3401      	adds	r4, #1
 8005576:	b2a4      	uxth	r4, r4
 8005578:	42b4      	cmp	r4, r6
 800557a:	d3f7      	bcc.n	800556c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800557c:	4a0f      	ldr	r2, [pc, #60]	; (80055bc <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800557e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800558a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800558e:	d10a      	bne.n	80055a6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005590:	68ab      	ldr	r3, [r5, #8]
 8005592:	b90b      	cbnz	r3, 8005598 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005594:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005598:	2301      	movs	r3, #1
 800559a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800559c:	2300      	movs	r3, #0
 800559e:	716b      	strb	r3, [r5, #5]
}
 80055a0:	4648      	mov	r0, r9
 80055a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff feba 	bl	8005320 <SUBGHZ_WaitOnBusy>
 80055ac:	e7f0      	b.n	8005590 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80055ae:	f04f 0902 	mov.w	r9, #2
 80055b2:	e7f5      	b.n	80055a0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80055b4:	f04f 0902 	mov.w	r9, #2
 80055b8:	e7f2      	b.n	80055a0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80055ba:	bf00      	nop
 80055bc:	58000400 	.word	0x58000400

080055c0 <HAL_SUBGHZ_ExecGetCmd>:
{
 80055c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80055c6:	7980      	ldrb	r0, [r0, #6]
 80055c8:	fa5f f880 	uxtb.w	r8, r0
 80055cc:	f1b8 0f01 	cmp.w	r8, #1
 80055d0:	d139      	bne.n	8005646 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80055d2:	460c      	mov	r4, r1
 80055d4:	4615      	mov	r5, r2
 80055d6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80055d8:	7973      	ldrb	r3, [r6, #5]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d036      	beq.n	800564c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80055de:	2301      	movs	r3, #1
 80055e0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80055e2:	4630      	mov	r0, r6
 80055e4:	f7ff fec8 	bl	8005378 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055e8:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80055ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80055ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7ff fe15 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80055fe:	2100      	movs	r1, #0
 8005600:	4630      	mov	r0, r6
 8005602:	f7ff fe11 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005606:	2400      	movs	r4, #0
 8005608:	e006      	b.n	8005618 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800560a:	4629      	mov	r1, r5
 800560c:	4630      	mov	r0, r6
 800560e:	f7ff fe47 	bl	80052a0 <SUBGHZSPI_Receive>
      pData++;
 8005612:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005614:	3401      	adds	r4, #1
 8005616:	b2a4      	uxth	r4, r4
 8005618:	42bc      	cmp	r4, r7
 800561a:	d3f6      	bcc.n	800560a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800561e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff fe78 	bl	8005320 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005630:	68b3      	ldr	r3, [r6, #8]
 8005632:	b90b      	cbnz	r3, 8005638 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005634:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005638:	2301      	movs	r3, #1
 800563a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800563c:	2300      	movs	r3, #0
 800563e:	7173      	strb	r3, [r6, #5]
}
 8005640:	4640      	mov	r0, r8
 8005642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005646:	f04f 0802 	mov.w	r8, #2
 800564a:	e7f9      	b.n	8005640 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800564c:	f04f 0802 	mov.w	r8, #2
 8005650:	e7f6      	b.n	8005640 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005652:	bf00      	nop
 8005654:	58000400 	.word	0x58000400

08005658 <HAL_SUBGHZ_IRQHandler>:
{
 8005658:	b530      	push	{r4, r5, lr}
 800565a:	b083      	sub	sp, #12
 800565c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800565e:	2300      	movs	r3, #0
 8005660:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005664:	2302      	movs	r3, #2
 8005666:	aa01      	add	r2, sp, #4
 8005668:	2112      	movs	r1, #18
 800566a:	f7ff ffa9 	bl	80055c0 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800566e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005672:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005676:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800567a:	f013 0f01 	tst.w	r3, #1
 800567e:	d126      	bne.n	80056ce <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005680:	f014 0f02 	tst.w	r4, #2
 8005684:	d127      	bne.n	80056d6 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005686:	f014 0f04 	tst.w	r4, #4
 800568a:	d128      	bne.n	80056de <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800568c:	f014 0f08 	tst.w	r4, #8
 8005690:	d129      	bne.n	80056e6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005692:	f014 0f10 	tst.w	r4, #16
 8005696:	d12a      	bne.n	80056ee <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005698:	f014 0f20 	tst.w	r4, #32
 800569c:	d12b      	bne.n	80056f6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800569e:	f014 0f40 	tst.w	r4, #64	; 0x40
 80056a2:	d12c      	bne.n	80056fe <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80056a4:	f014 0f80 	tst.w	r4, #128	; 0x80
 80056a8:	d006      	beq.n	80056b8 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80056aa:	f414 7f80 	tst.w	r4, #256	; 0x100
 80056ae:	d02a      	beq.n	8005706 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80056b0:	2101      	movs	r1, #1
 80056b2:	4628      	mov	r0, r5
 80056b4:	f00b fd74 	bl	80111a0 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80056b8:	f414 7f00 	tst.w	r4, #512	; 0x200
 80056bc:	d128      	bne.n	8005710 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80056be:	2302      	movs	r3, #2
 80056c0:	aa01      	add	r2, sp, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4628      	mov	r0, r5
 80056c6:	f7ff ff25 	bl	8005514 <HAL_SUBGHZ_ExecSetCmd>
}
 80056ca:	b003      	add	sp, #12
 80056cc:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80056ce:	4628      	mov	r0, r5
 80056d0:	f00b fd4e 	bl	8011170 <HAL_SUBGHZ_TxCpltCallback>
 80056d4:	e7d4      	b.n	8005680 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80056d6:	4628      	mov	r0, r5
 80056d8:	f00b fd52 	bl	8011180 <HAL_SUBGHZ_RxCpltCallback>
 80056dc:	e7d3      	b.n	8005686 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80056de:	4628      	mov	r0, r5
 80056e0:	f00b fd82 	bl	80111e8 <HAL_SUBGHZ_PreambleDetectedCallback>
 80056e4:	e7d2      	b.n	800568c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80056e6:	4628      	mov	r0, r5
 80056e8:	f00b fd86 	bl	80111f8 <HAL_SUBGHZ_SyncWordValidCallback>
 80056ec:	e7d1      	b.n	8005692 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80056ee:	4628      	mov	r0, r5
 80056f0:	f00b fd8a 	bl	8011208 <HAL_SUBGHZ_HeaderValidCallback>
 80056f4:	e7d0      	b.n	8005698 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80056f6:	4628      	mov	r0, r5
 80056f8:	f00b fd6e 	bl	80111d8 <HAL_SUBGHZ_HeaderErrorCallback>
 80056fc:	e7cf      	b.n	800569e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80056fe:	4628      	mov	r0, r5
 8005700:	f00b fd46 	bl	8011190 <HAL_SUBGHZ_CRCErrorCallback>
 8005704:	e7ce      	b.n	80056a4 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005706:	2100      	movs	r1, #0
 8005708:	4628      	mov	r0, r5
 800570a:	f00b fd49 	bl	80111a0 <HAL_SUBGHZ_CADStatusCallback>
 800570e:	e7d3      	b.n	80056b8 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005710:	4628      	mov	r0, r5
 8005712:	f00b fd57 	bl	80111c4 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005716:	e7d2      	b.n	80056be <HAL_SUBGHZ_IRQHandler+0x66>

08005718 <HAL_SUBGHZ_WriteBuffer>:
{
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800571e:	7980      	ldrb	r0, [r0, #6]
 8005720:	fa5f f880 	uxtb.w	r8, r0
 8005724:	f1b8 0f01 	cmp.w	r8, #1
 8005728:	d138      	bne.n	800579c <HAL_SUBGHZ_WriteBuffer+0x84>
 800572a:	460c      	mov	r4, r1
 800572c:	4617      	mov	r7, r2
 800572e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005730:	796b      	ldrb	r3, [r5, #5]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d035      	beq.n	80057a2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005736:	2301      	movs	r3, #1
 8005738:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800573a:	4628      	mov	r0, r5
 800573c:	f7ff fe1c 	bl	8005378 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005740:	4a19      	ldr	r2, [pc, #100]	; (80057a8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005742:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800574e:	210e      	movs	r1, #14
 8005750:	4628      	mov	r0, r5
 8005752:	f7ff fd69 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fd65 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800575e:	2400      	movs	r4, #0
 8005760:	e005      	b.n	800576e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005762:	5d39      	ldrb	r1, [r7, r4]
 8005764:	4628      	mov	r0, r5
 8005766:	f7ff fd5f 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800576a:	3401      	adds	r4, #1
 800576c:	b2a4      	uxth	r4, r4
 800576e:	42b4      	cmp	r4, r6
 8005770:	d3f7      	bcc.n	8005762 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005772:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005774:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff fdcd 	bl	8005320 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005786:	68ab      	ldr	r3, [r5, #8]
 8005788:	b90b      	cbnz	r3, 800578e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800578a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800578e:	2301      	movs	r3, #1
 8005790:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005792:	2300      	movs	r3, #0
 8005794:	716b      	strb	r3, [r5, #5]
}
 8005796:	4640      	mov	r0, r8
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800579c:	f04f 0802 	mov.w	r8, #2
 80057a0:	e7f9      	b.n	8005796 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80057a2:	f04f 0802 	mov.w	r8, #2
 80057a6:	e7f6      	b.n	8005796 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80057a8:	58000400 	.word	0x58000400

080057ac <HAL_SUBGHZ_ReadBuffer>:
{
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057b2:	7980      	ldrb	r0, [r0, #6]
 80057b4:	fa5f f880 	uxtb.w	r8, r0
 80057b8:	f1b8 0f01 	cmp.w	r8, #1
 80057bc:	d13d      	bne.n	800583a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80057be:	460c      	mov	r4, r1
 80057c0:	4615      	mov	r5, r2
 80057c2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80057c4:	7973      	ldrb	r3, [r6, #5]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d03a      	beq.n	8005840 <HAL_SUBGHZ_ReadBuffer+0x94>
 80057ca:	2301      	movs	r3, #1
 80057cc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057ce:	4630      	mov	r0, r6
 80057d0:	f7ff fdd2 	bl	8005378 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80057d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80057e2:	211e      	movs	r1, #30
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff fd1f 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80057ea:	4621      	mov	r1, r4
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff fd1b 	bl	8005228 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80057f2:	2100      	movs	r1, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff fd17 	bl	8005228 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057fa:	2400      	movs	r4, #0
 80057fc:	e006      	b.n	800580c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80057fe:	4629      	mov	r1, r5
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff fd4d 	bl	80052a0 <SUBGHZSPI_Receive>
      pData++;
 8005806:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005808:	3401      	adds	r4, #1
 800580a:	b2a4      	uxth	r4, r4
 800580c:	42bc      	cmp	r4, r7
 800580e:	d3f6      	bcc.n	80057fe <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005810:	4a0d      	ldr	r2, [pc, #52]	; (8005848 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005812:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800581a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff fd7e 	bl	8005320 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005824:	68b3      	ldr	r3, [r6, #8]
 8005826:	b90b      	cbnz	r3, 800582c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005828:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800582c:	2301      	movs	r3, #1
 800582e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005830:	2300      	movs	r3, #0
 8005832:	7173      	strb	r3, [r6, #5]
}
 8005834:	4640      	mov	r0, r8
 8005836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800583a:	f04f 0802 	mov.w	r8, #2
 800583e:	e7f9      	b.n	8005834 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005840:	f04f 0802 	mov.w	r8, #2
 8005844:	e7f6      	b.n	8005834 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005846:	bf00      	nop
 8005848:	58000400 	.word	0x58000400

0800584c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800584c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e852 3f00 	ldrex	r3, [r2]
 8005852:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e842 3100 	strex	r1, r3, [r2]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f6      	bne.n	800584c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800585e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f102 0308 	add.w	r3, r2, #8
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	3208      	adds	r2, #8
 800586e:	e842 3100 	strex	r1, r3, [r2]
 8005872:	2900      	cmp	r1, #0
 8005874:	d1f3      	bne.n	800585e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005876:	2320      	movs	r3, #32
 8005878:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800587c:	4770      	bx	lr

0800587e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800587e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	e852 3f00 	ldrex	r3, [r2]
 8005884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	e842 3100 	strex	r1, r3, [r2]
 800588c:	2900      	cmp	r1, #0
 800588e:	d1f6      	bne.n	800587e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005890:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	f102 0308 	add.w	r3, r2, #8
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	3208      	adds	r2, #8
 80058a4:	e842 3100 	strex	r1, r3, [r2]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d1f1      	bne.n	8005890 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d006      	beq.n	80058c0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	2320      	movs	r3, #32
 80058b4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	2300      	movs	r3, #0
 80058ba:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058bc:	6703      	str	r3, [r0, #112]	; 0x70
}
 80058be:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	e852 3f00 	ldrex	r3, [r2]
 80058c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	e842 3100 	strex	r1, r3, [r2]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d1f6      	bne.n	80058c0 <UART_EndRxTransfer+0x42>
 80058d2:	e7ee      	b.n	80058b2 <UART_EndRxTransfer+0x34>

080058d4 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80058d4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d14c      	bne.n	8005976 <HAL_UART_Transmit_DMA+0xa2>
{
 80058dc:	b510      	push	{r4, lr}
 80058de:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d04a      	beq.n	800597a <HAL_UART_Transmit_DMA+0xa6>
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d04a      	beq.n	800597e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 80058e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d048      	beq.n	8005982 <HAL_UART_Transmit_DMA+0xae>
 80058f0:	2301      	movs	r3, #1
 80058f2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80058f6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80058f8:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80058fc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005906:	2321      	movs	r3, #33	; 0x21
 8005908:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800590c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800590e:	b1f3      	cbz	r3, 800594e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005910:	491d      	ldr	r1, [pc, #116]	; (8005988 <HAL_UART_Transmit_DMA+0xb4>)
 8005912:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005914:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005916:	491d      	ldr	r1, [pc, #116]	; (800598c <HAL_UART_Transmit_DMA+0xb8>)
 8005918:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800591a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800591c:	491c      	ldr	r1, [pc, #112]	; (8005990 <HAL_UART_Transmit_DMA+0xbc>)
 800591e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005920:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005922:	2100      	movs	r1, #0
 8005924:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005926:	6801      	ldr	r1, [r0, #0]
 8005928:	4613      	mov	r3, r2
 800592a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 800592e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005930:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005932:	f7fd fa81 	bl	8002e38 <HAL_DMA_Start_IT>
 8005936:	b150      	cbz	r0, 800594e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005938:	2310      	movs	r3, #16
 800593a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800593e:	2300      	movs	r3, #0
 8005940:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005944:	2320      	movs	r3, #32
 8005946:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800594a:	2001      	movs	r0, #1
 800594c:	e012      	b.n	8005974 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	2240      	movs	r2, #64	; 0x40
 8005952:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005954:	2300      	movs	r3, #0
 8005956:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800595a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	f102 0308 	add.w	r3, r2, #8
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	3208      	adds	r2, #8
 800596a:	e842 3100 	strex	r1, r3, [r2]
 800596e:	2900      	cmp	r1, #0
 8005970:	d1f3      	bne.n	800595a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005972:	2000      	movs	r0, #0
}
 8005974:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005976:	2002      	movs	r0, #2
}
 8005978:	4770      	bx	lr
      return HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7fa      	b.n	8005974 <HAL_UART_Transmit_DMA+0xa0>
 800597e:	2001      	movs	r0, #1
 8005980:	e7f8      	b.n	8005974 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005982:	2002      	movs	r0, #2
 8005984:	e7f6      	b.n	8005974 <HAL_UART_Transmit_DMA+0xa0>
 8005986:	bf00      	nop
 8005988:	08005995 	.word	0x08005995
 800598c:	08005a03 	.word	0x08005a03
 8005990:	08005a0f 	.word	0x08005a0f

08005994 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005994:	b508      	push	{r3, lr}
 8005996:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005998:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f013 0f20 	tst.w	r3, #32
 80059a2:	d118      	bne.n	80059d6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	f102 0308 	add.w	r3, r2, #8
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	3208      	adds	r2, #8
 80059ba:	e842 3100 	strex	r1, r3, [r2]
 80059be:	2900      	cmp	r1, #0
 80059c0:	d1f3      	bne.n	80059aa <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	e852 3f00 	ldrex	r3, [r2]
 80059c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	e842 3100 	strex	r1, r3, [r2]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d1f6      	bne.n	80059c2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059d4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80059d6:	f7fc fad1 	bl	8001f7c <HAL_UART_TxCpltCallback>
}
 80059da:	e7fb      	b.n	80059d4 <UART_DMATransmitCplt+0x40>

080059dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059dc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	e852 3f00 	ldrex	r3, [r2]
 80059e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	e842 3100 	strex	r1, r3, [r2]
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d1f6      	bne.n	80059de <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	2320      	movs	r3, #32
 80059f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059fa:	f7fc fabf 	bl	8001f7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fe:	bd08      	pop	{r3, pc}

08005a00 <HAL_UART_TxHalfCpltCallback>:
}
 8005a00:	4770      	bx	lr

08005a02 <UART_DMATxHalfCplt>:
{
 8005a02:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005a04:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005a06:	f7ff fffb 	bl	8005a00 <HAL_UART_TxHalfCpltCallback>
}
 8005a0a:	bd08      	pop	{r3, pc}

08005a0c <HAL_UART_ErrorCallback>:
}
 8005a0c:	4770      	bx	lr

08005a0e <UART_DMAError>:
{
 8005a0e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a10:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a12:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a16:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a22:	d001      	beq.n	8005a28 <UART_DMAError+0x1a>
 8005a24:	2a21      	cmp	r2, #33	; 0x21
 8005a26:	d010      	beq.n	8005a4a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a30:	d001      	beq.n	8005a36 <UART_DMAError+0x28>
 8005a32:	2d22      	cmp	r5, #34	; 0x22
 8005a34:	d010      	beq.n	8005a58 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a3a:	f043 0310 	orr.w	r3, r3, #16
 8005a3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff ffe2 	bl	8005a0c <HAL_UART_ErrorCallback>
}
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff fefb 	bl	800584c <UART_EndTxTransfer>
 8005a56:	e7e7      	b.n	8005a28 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff ff0d 	bl	800587e <UART_EndRxTransfer>
 8005a64:	e7e7      	b.n	8005a36 <UART_DMAError+0x28>

08005a66 <UART_DMAAbortOnError>:
{
 8005a66:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a68:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a70:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005a74:	f7ff ffca 	bl	8005a0c <HAL_UART_ErrorCallback>
}
 8005a78:	bd08      	pop	{r3, pc}

08005a7a <HAL_UARTEx_RxEventCallback>:
}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_IRQHandler>:
{
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a80:	6801      	ldr	r1, [r0, #0]
 8005a82:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a84:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a86:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a88:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	d108      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a90:	f013 0f20 	tst.w	r3, #32
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a96:	f010 0f20 	tst.w	r0, #32
 8005a9a:	d134      	bne.n	8005b06 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a9c:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005aa0:	d131      	bne.n	8005b06 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005aa2:	b12a      	cbz	r2, 8005ab0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005aa4:	4a95      	ldr	r2, [pc, #596]	; (8005cfc <HAL_UART_IRQHandler+0x280>)
 8005aa6:	402a      	ands	r2, r5
 8005aa8:	d133      	bne.n	8005b12 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005aaa:	4e95      	ldr	r6, [pc, #596]	; (8005d00 <HAL_UART_IRQHandler+0x284>)
 8005aac:	4230      	tst	r0, r6
 8005aae:	d130      	bne.n	8005b12 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005ab2:	2a01      	cmp	r2, #1
 8005ab4:	f000 80c3 	beq.w	8005c3e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ab8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005abc:	d003      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x4a>
 8005abe:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005ac2:	f040 815b 	bne.w	8005d7c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ac6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005aca:	d007      	beq.n	8005adc <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005acc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ad0:	f040 815b 	bne.w	8005d8a <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ad4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005ad8:	f040 8157 	bne.w	8005d8a <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005adc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ae0:	d003      	beq.n	8005aea <HAL_UART_IRQHandler+0x6e>
 8005ae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ae6:	f040 8157 	bne.w	8005d98 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005aea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005aee:	d003      	beq.n	8005af8 <HAL_UART_IRQHandler+0x7c>
 8005af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005af4:	f040 8154 	bne.w	8005da0 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005af8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_IRQHandler+0x88>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f2c0 8152 	blt.w	8005da8 <HAL_UART_IRQHandler+0x32c>
}
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005b06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0fb      	beq.n	8005b04 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4798      	blx	r3
      return;
 8005b10:	e7f8      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b12:	f013 0f01 	tst.w	r3, #1
 8005b16:	d009      	beq.n	8005b2c <HAL_UART_IRQHandler+0xb0>
 8005b18:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b1c:	d006      	beq.n	8005b2c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b1e:	2601      	movs	r6, #1
 8005b20:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b22:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b26:	4331      	orrs	r1, r6
 8005b28:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b2c:	f013 0f02 	tst.w	r3, #2
 8005b30:	d00b      	beq.n	8005b4a <HAL_UART_IRQHandler+0xce>
 8005b32:	f015 0f01 	tst.w	r5, #1
 8005b36:	d008      	beq.n	8005b4a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b38:	6821      	ldr	r1, [r4, #0]
 8005b3a:	2602      	movs	r6, #2
 8005b3c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b3e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b42:	f041 0104 	orr.w	r1, r1, #4
 8005b46:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b4a:	f013 0f04 	tst.w	r3, #4
 8005b4e:	d00b      	beq.n	8005b68 <HAL_UART_IRQHandler+0xec>
 8005b50:	f015 0f01 	tst.w	r5, #1
 8005b54:	d008      	beq.n	8005b68 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b56:	6821      	ldr	r1, [r4, #0]
 8005b58:	2604      	movs	r6, #4
 8005b5a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b60:	f041 0102 	orr.w	r1, r1, #2
 8005b64:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b68:	f013 0f08 	tst.w	r3, #8
 8005b6c:	d00b      	beq.n	8005b86 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b6e:	f010 0f20 	tst.w	r0, #32
 8005b72:	d100      	bne.n	8005b76 <HAL_UART_IRQHandler+0xfa>
 8005b74:	b13a      	cbz	r2, 8005b86 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	2108      	movs	r1, #8
 8005b7a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b7c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005b80:	430a      	orrs	r2, r1
 8005b82:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b86:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x12a>
 8005b8c:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005b90:	d009      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b98:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b9a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005b9e:	f042 0220 	orr.w	r2, r2, #32
 8005ba2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	d0aa      	beq.n	8005b04 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bae:	f013 0f20 	tst.w	r3, #32
 8005bb2:	d009      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bb4:	f010 0f20 	tst.w	r0, #32
 8005bb8:	d102      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bba:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005bbe:	d003      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005bc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005bc2:	b10b      	cbz	r3, 8005bc8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005bc8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bd4:	d102      	bne.n	8005bdc <HAL_UART_IRQHandler+0x160>
 8005bd6:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005bda:	d029      	beq.n	8005c30 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff fe4e 	bl	800587e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005bea:	d01d      	beq.n	8005c28 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	f102 0308 	add.w	r3, r2, #8
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	3208      	adds	r2, #8
 8005bfc:	e842 3100 	strex	r1, r3, [r2]
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d1f3      	bne.n	8005bec <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005c04:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005c06:	b15b      	cbz	r3, 8005c20 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c08:	4a3e      	ldr	r2, [pc, #248]	; (8005d04 <HAL_UART_IRQHandler+0x288>)
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c0c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c0e:	f7fd f999 	bl	8002f44 <HAL_DMA_Abort_IT>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f43f af76 	beq.w	8005b04 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c18:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c1c:	4798      	blx	r3
 8005c1e:	e771      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff fef3 	bl	8005a0c <HAL_UART_ErrorCallback>
 8005c26:	e76d      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff feef 	bl	8005a0c <HAL_UART_ErrorCallback>
 8005c2e:	e769      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005c30:	4620      	mov	r0, r4
 8005c32:	f7ff feeb 	bl	8005a0c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005c3c:	e762      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005c3e:	f013 0f10 	tst.w	r3, #16
 8005c42:	f43f af39 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005c46:	f010 0f10 	tst.w	r0, #16
 8005c4a:	f43f af35 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c4e:	2310      	movs	r3, #16
 8005c50:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c5a:	d055      	beq.n	8005d08 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c5c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c5e:	6813      	ldr	r3, [r2, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f43f af4d 	beq.w	8005b04 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	f67f af48 	bls.w	8005b04 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005c74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f013 0f20 	tst.w	r3, #32
 8005c80:	d131      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	e852 3f00 	ldrex	r3, [r2]
 8005c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	e842 3100 	strex	r1, r3, [r2]
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d1f6      	bne.n	8005c82 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	f102 0308 	add.w	r3, r2, #8
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	e842 3100 	strex	r1, r3, [r2]
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	d1f3      	bne.n	8005c94 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	f102 0308 	add.w	r3, r2, #8
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	3208      	adds	r2, #8
 8005cbc:	e842 3100 	strex	r1, r3, [r2]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d1f3      	bne.n	8005cac <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	e852 3f00 	ldrex	r3, [r2]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	e842 3100 	strex	r1, r3, [r2]
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	d1f6      	bne.n	8005cce <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005ce2:	f7fd f8f5 	bl	8002ed0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005cea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	1ac9      	subs	r1, r1, r3
 8005cf2:	b289      	uxth	r1, r1
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f7ff fec0 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
      return;
 8005cfa:	e703      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
 8005cfc:	10000001 	.word	0x10000001
 8005d00:	04000120 	.word	0x04000120
 8005d04:	08005a67 	.word	0x08005a67
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d08:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005d0c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	1ac9      	subs	r1, r1, r3
 8005d14:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8005d16:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f43f aef1 	beq.w	8005b04 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8005d22:	2900      	cmp	r1, #0
 8005d24:	f43f aeee 	beq.w	8005b04 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d28:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	e852 3f00 	ldrex	r3, [r2]
 8005d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	e842 3000 	strex	r0, r3, [r2]
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1f6      	bne.n	8005d28 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f102 0308 	add.w	r3, r2, #8
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	e842 3000 	strex	r0, r3, [r2]
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d1f1      	bne.n	8005d3a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8005d56:	2320      	movs	r3, #32
 8005d58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8005d60:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	e852 3f00 	ldrex	r3, [r2]
 8005d68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	e842 3000 	strex	r0, r3, [r2]
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d1f6      	bne.n	8005d62 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fe80 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
      return;
 8005d7a:	e6c3      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d80:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fe1c 	bl	80069c0 <HAL_UARTEx_WakeupCallback>
    return;
 8005d88:	e6bc      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8005d8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f43f aeb9 	beq.w	8005b04 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8005d92:	4620      	mov	r0, r4
 8005d94:	4798      	blx	r3
    return;
 8005d96:	e6b5      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7ff fe1f 	bl	80059dc <UART_EndTransmit_IT>
    return;
 8005d9e:	e6b1      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fe0f 	bl	80069c4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8005da6:	e6ad      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fe0a 	bl	80069c2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005dae:	e6a9      	b.n	8005b04 <HAL_UART_IRQHandler+0x88>

08005db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005db0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005db2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005db6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005dba:	2a22      	cmp	r2, #34	; 0x22
 8005dbc:	d005      	beq.n	8005dca <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dbe:	6802      	ldr	r2, [r0, #0]
 8005dc0:	6993      	ldr	r3, [r2, #24]
 8005dc2:	f043 0308 	orr.w	r3, r3, #8
 8005dc6:	6193      	str	r3, [r2, #24]
  }
}
 8005dc8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dca:	6802      	ldr	r2, [r0, #0]
 8005dcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005dd6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005dd8:	3301      	adds	r3, #1
 8005dda:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005ddc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005dea:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e9      	bne.n	8005dc8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	e852 3f00 	ldrex	r3, [r2]
 8005dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	e842 3100 	strex	r1, r3, [r2]
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d1f6      	bne.n	8005df4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	f102 0308 	add.w	r3, r2, #8
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	3208      	adds	r2, #8
 8005e16:	e842 3100 	strex	r1, r3, [r2]
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	d1f3      	bne.n	8005e06 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	2320      	movs	r3, #32
 8005e20:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d116      	bne.n	8005e5c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	e852 3f00 	ldrex	r3, [r2]
 8005e38:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	e842 3100 	strex	r1, r3, [r2]
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d1f6      	bne.n	8005e32 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e44:	6803      	ldr	r3, [r0, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	f012 0f10 	tst.w	r2, #16
 8005e4c:	d001      	beq.n	8005e52 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e4e:	2210      	movs	r2, #16
 8005e50:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e52:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005e56:	f7ff fe10 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
 8005e5a:	e7b5      	b.n	8005dc8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005e5c:	f7fc f89e 	bl	8001f9c <HAL_UART_RxCpltCallback>
 8005e60:	e7b2      	b.n	8005dc8 <UART_RxISR_8BIT+0x18>

08005e62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e62:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e64:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e68:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005e6c:	2b22      	cmp	r3, #34	; 0x22
 8005e6e:	d005      	beq.n	8005e7c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e70:	6802      	ldr	r2, [r0, #0]
 8005e72:	6993      	ldr	r3, [r2, #24]
 8005e74:	f043 0308 	orr.w	r3, r3, #8
 8005e78:	6193      	str	r3, [r2, #24]
  }
}
 8005e7a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e7c:	6803      	ldr	r3, [r0, #0]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e80:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e82:	4013      	ands	r3, r2
 8005e84:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8005e86:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005e88:	3302      	adds	r3, #2
 8005e8a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005e8c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005e9a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ea      	bne.n	8005e7a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	e852 3f00 	ldrex	r3, [r2]
 8005eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	e842 3100 	strex	r1, r3, [r2]
 8005eb2:	2900      	cmp	r1, #0
 8005eb4:	d1f6      	bne.n	8005ea4 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f102 0308 	add.w	r3, r2, #8
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	3208      	adds	r2, #8
 8005ec6:	e842 3100 	strex	r1, r3, [r2]
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	d1f3      	bne.n	8005eb6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005ece:	2320      	movs	r3, #32
 8005ed0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d116      	bne.n	8005f0c <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	e852 3f00 	ldrex	r3, [r2]
 8005ee8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	e842 3100 	strex	r1, r3, [r2]
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	d1f6      	bne.n	8005ee2 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ef4:	6803      	ldr	r3, [r0, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	f012 0f10 	tst.w	r2, #16
 8005efc:	d001      	beq.n	8005f02 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efe:	2210      	movs	r2, #16
 8005f00:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f02:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005f06:	f7ff fdb8 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
 8005f0a:	e7b6      	b.n	8005e7a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8005f0c:	f7fc f846 	bl	8001f9c <HAL_UART_RxCpltCallback>
 8005f10:	e7b3      	b.n	8005e7a <UART_RxISR_16BIT+0x18>
	...

08005f14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8005f18:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f1c:	6803      	ldr	r3, [r0, #0]
 8005f1e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f20:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f24:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f28:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005f2c:	2a22      	cmp	r2, #34	; 0x22
 8005f2e:	d005      	beq.n	8005f3c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	619a      	str	r2, [r3, #24]
  }
}
 8005f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8005f3e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f42:	e008      	b.n	8005f56 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f44:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d14c      	bne.n	8005fe6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005f4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d04e      	beq.n	8005ff4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f56:	2f00      	cmp	r7, #0
 8005f58:	f000 8087 	beq.w	800606a <UART_RxISR_8BIT_FIFOEN+0x156>
 8005f5c:	f015 0f20 	tst.w	r5, #32
 8005f60:	f000 8083 	beq.w	800606a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005f68:	b2f3      	uxtb	r3, r6
 8005f6a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f6c:	400b      	ands	r3, r1
 8005f6e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8005f70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f72:	3301      	adds	r3, #1
 8005f74:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005f76:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f88:	f015 0f07 	tst.w	r5, #7
 8005f8c:	d0de      	beq.n	8005f4c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f8e:	f015 0f01 	tst.w	r5, #1
 8005f92:	d009      	beq.n	8005fa8 <UART_RxISR_8BIT_FIFOEN+0x94>
 8005f94:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005f98:	d006      	beq.n	8005fa8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa8:	f015 0f02 	tst.w	r5, #2
 8005fac:	d00b      	beq.n	8005fc6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005fae:	f018 0f01 	tst.w	r8, #1
 8005fb2:	d008      	beq.n	8005fc6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc6:	f015 0f04 	tst.w	r5, #4
 8005fca:	d0bb      	beq.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005fcc:	f018 0f01 	tst.w	r8, #1
 8005fd0:	d0b8      	beq.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005fe4:	e7ae      	b.n	8005f44 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fd10 	bl	8005a0c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005ff2:	e7ab      	b.n	8005f4c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	e852 3f00 	ldrex	r3, [r2]
 8005ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	e842 3100 	strex	r1, r3, [r2]
 8006002:	2900      	cmp	r1, #0
 8006004:	d1f6      	bne.n	8005ff4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006006:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	f102 0308 	add.w	r3, r2, #8
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006014:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	3208      	adds	r2, #8
 800601a:	e842 3100 	strex	r1, r3, [r2]
 800601e:	2900      	cmp	r1, #0
 8006020:	d1f1      	bne.n	8006006 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006022:	2320      	movs	r3, #32
 8006024:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8006028:	2300      	movs	r3, #0
 800602a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d003      	beq.n	800603a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8006032:	4620      	mov	r0, r4
 8006034:	f7fb ffb2 	bl	8001f9c <HAL_UART_RxCpltCallback>
 8006038:	e78d      	b.n	8005f56 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	2300      	movs	r3, #0
 800603c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	e852 3f00 	ldrex	r3, [r2]
 8006044:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	e842 3100 	strex	r1, r3, [r2]
 800604c:	2900      	cmp	r1, #0
 800604e:	d1f6      	bne.n	800603e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	f012 0f10 	tst.w	r2, #16
 8006058:	d001      	beq.n	800605e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800605a:	2210      	movs	r2, #16
 800605c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800605e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006062:	4620      	mov	r0, r4
 8006064:	f7ff fd09 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
 8006068:	e775      	b.n	8005f56 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800606a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800606e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006070:	2b00      	cmp	r3, #0
 8006072:	f43f af61 	beq.w	8005f38 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006076:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800607a:	429a      	cmp	r2, r3
 800607c:	f67f af5c 	bls.w	8005f38 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006080:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	f102 0308 	add.w	r3, r2, #8
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	3208      	adds	r2, #8
 8006090:	e842 3100 	strex	r1, r3, [r2]
 8006094:	2900      	cmp	r1, #0
 8006096:	d1f3      	bne.n	8006080 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 800609a:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800609c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	e852 3f00 	ldrex	r3, [r2]
 80060a2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	e842 3100 	strex	r1, r3, [r2]
 80060aa:	2900      	cmp	r1, #0
 80060ac:	d1f6      	bne.n	800609c <UART_RxISR_8BIT_FIFOEN+0x188>
 80060ae:	e743      	b.n	8005f38 <UART_RxISR_8BIT_FIFOEN+0x24>
 80060b0:	08005db1 	.word	0x08005db1

080060b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060b8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80060bc:	6803      	ldr	r3, [r0, #0]
 80060be:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060c0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060c4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80060cc:	2a22      	cmp	r2, #34	; 0x22
 80060ce:	d005      	beq.n	80060dc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	619a      	str	r2, [r3, #24]
  }
}
 80060d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060dc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80060de:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060e2:	e008      	b.n	80060f6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060e4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d14b      	bne.n	8006184 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80060ec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04d      	beq.n	8006192 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	f000 8086 	beq.w	8006208 <UART_RxISR_16BIT_FIFOEN+0x154>
 80060fc:	f015 0f20 	tst.w	r5, #32
 8006100:	f000 8082 	beq.w	8006208 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006108:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800610a:	4033      	ands	r3, r6
 800610c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800610e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006110:	3302      	adds	r3, #2
 8006112:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006114:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29b      	uxth	r3, r3
 800611e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006126:	f015 0f07 	tst.w	r5, #7
 800612a:	d0df      	beq.n	80060ec <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800612c:	f015 0f01 	tst.w	r5, #1
 8006130:	d009      	beq.n	8006146 <UART_RxISR_16BIT_FIFOEN+0x92>
 8006132:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006136:	d006      	beq.n	8006146 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006138:	2201      	movs	r2, #1
 800613a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006146:	f015 0f02 	tst.w	r5, #2
 800614a:	d00b      	beq.n	8006164 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800614c:	f018 0f01 	tst.w	r8, #1
 8006150:	d008      	beq.n	8006164 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	2202      	movs	r2, #2
 8006156:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006158:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006164:	f015 0f04 	tst.w	r5, #4
 8006168:	d0bc      	beq.n	80060e4 <UART_RxISR_16BIT_FIFOEN+0x30>
 800616a:	f018 0f01 	tst.w	r8, #1
 800616e:	d0b9      	beq.n	80060e4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	2204      	movs	r2, #4
 8006174:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006176:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800617a:	f043 0302 	orr.w	r3, r3, #2
 800617e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006182:	e7af      	b.n	80060e4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006184:	4620      	mov	r0, r4
 8006186:	f7ff fc41 	bl	8005a0c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006190:	e7ac      	b.n	80060ec <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006192:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	e852 3f00 	ldrex	r3, [r2]
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	e842 3100 	strex	r1, r3, [r2]
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d1f6      	bne.n	8006192 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	f102 0308 	add.w	r3, r2, #8
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	3208      	adds	r2, #8
 80061b8:	e842 3100 	strex	r1, r3, [r2]
 80061bc:	2900      	cmp	r1, #0
 80061be:	d1f1      	bne.n	80061a4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80061c0:	2320      	movs	r3, #32
 80061c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d003      	beq.n	80061d8 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80061d0:	4620      	mov	r0, r4
 80061d2:	f7fb fee3 	bl	8001f9c <HAL_UART_RxCpltCallback>
 80061d6:	e78e      	b.n	80060f6 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	2300      	movs	r3, #0
 80061da:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	e852 3f00 	ldrex	r3, [r2]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	e842 3100 	strex	r1, r3, [r2]
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d1f6      	bne.n	80061dc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	f012 0f10 	tst.w	r2, #16
 80061f6:	d001      	beq.n	80061fc <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f8:	2210      	movs	r2, #16
 80061fa:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006200:	4620      	mov	r0, r4
 8006202:	f7ff fc3a 	bl	8005a7a <HAL_UARTEx_RxEventCallback>
 8006206:	e776      	b.n	80060f6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006208:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800620c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800620e:	2b00      	cmp	r3, #0
 8006210:	f43f af62 	beq.w	80060d8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006214:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006218:	429a      	cmp	r2, r3
 800621a:	f67f af5d 	bls.w	80060d8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800621e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	f102 0308 	add.w	r3, r2, #8
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	3208      	adds	r2, #8
 800622e:	e842 3100 	strex	r1, r3, [r2]
 8006232:	2900      	cmp	r1, #0
 8006234:	d1f3      	bne.n	800621e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8006238:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800623a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	e852 3f00 	ldrex	r3, [r2]
 8006240:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	e842 3100 	strex	r1, r3, [r2]
 8006248:	2900      	cmp	r1, #0
 800624a:	d1f6      	bne.n	800623a <UART_RxISR_16BIT_FIFOEN+0x186>
 800624c:	e744      	b.n	80060d8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800624e:	bf00      	nop
 8006250:	08005e63 	.word	0x08005e63

08006254 <UART_SetConfig>:
{
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006258:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800625a:	6883      	ldr	r3, [r0, #8]
 800625c:	6902      	ldr	r2, [r0, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	6942      	ldr	r2, [r0, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	69c2      	ldr	r2, [r0, #28]
 8006266:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006268:	6808      	ldr	r0, [r1, #0]
 800626a:	4a9d      	ldr	r2, [pc, #628]	; (80064e0 <UART_SetConfig+0x28c>)
 800626c:	4002      	ands	r2, r0
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	6853      	ldr	r3, [r2, #4]
 8006276:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800627a:	68e1      	ldr	r1, [r4, #12]
 800627c:	430b      	orrs	r3, r1
 800627e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006280:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	4b97      	ldr	r3, [pc, #604]	; (80064e4 <UART_SetConfig+0x290>)
 8006286:	429a      	cmp	r2, r3
 8006288:	d001      	beq.n	800628e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800628a:	6a23      	ldr	r3, [r4, #32]
 800628c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800628e:	6893      	ldr	r3, [r2, #8]
 8006290:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006294:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006298:	430b      	orrs	r3, r1
 800629a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80062a0:	f023 030f 	bic.w	r3, r3, #15
 80062a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80062a6:	430b      	orrs	r3, r1
 80062a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	4a8e      	ldr	r2, [pc, #568]	; (80064e8 <UART_SetConfig+0x294>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01c      	beq.n	80062ec <UART_SetConfig+0x98>
 80062b2:	4a8e      	ldr	r2, [pc, #568]	; (80064ec <UART_SetConfig+0x298>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d031      	beq.n	800631c <UART_SetConfig+0xc8>
 80062b8:	4a8a      	ldr	r2, [pc, #552]	; (80064e4 <UART_SetConfig+0x290>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d04b      	beq.n	8006356 <UART_SetConfig+0x102>
 80062be:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c0:	4988      	ldr	r1, [pc, #544]	; (80064e4 <UART_SetConfig+0x290>)
 80062c2:	428b      	cmp	r3, r1
 80062c4:	d068      	beq.n	8006398 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c6:	69e0      	ldr	r0, [r4, #28]
 80062c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80062cc:	f000 80a5 	beq.w	800641a <UART_SetConfig+0x1c6>
    switch (clocksource)
 80062d0:	2a08      	cmp	r2, #8
 80062d2:	f200 811f 	bhi.w	8006514 <UART_SetConfig+0x2c0>
 80062d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80062da:	00d3      	.short	0x00d3
 80062dc:	00d100f5 	.word	0x00d100f5
 80062e0:	00f8011d 	.word	0x00f8011d
 80062e4:	011d011d 	.word	0x011d011d
 80062e8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80062ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80062f4:	f002 0203 	and.w	r2, r2, #3
 80062f8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062fc:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006300:	2a03      	cmp	r2, #3
 8006302:	d809      	bhi.n	8006318 <UART_SetConfig+0xc4>
 8006304:	e8df f002 	tbb	[pc, r2]
 8006308:	063c0402 	.word	0x063c0402
 800630c:	2201      	movs	r2, #1
 800630e:	e7d7      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006310:	2204      	movs	r2, #4
 8006312:	e7d5      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006314:	2208      	movs	r2, #8
 8006316:	e7d3      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006318:	2210      	movs	r2, #16
 800631a:	e7d1      	b.n	80062c0 <UART_SetConfig+0x6c>
 800631c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006320:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006324:	f002 020c 	and.w	r2, r2, #12
 8006328:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800632c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006330:	2a0c      	cmp	r2, #12
 8006332:	d80e      	bhi.n	8006352 <UART_SetConfig+0xfe>
 8006334:	e8df f002 	tbb	[pc, r2]
 8006338:	0d0d0d07 	.word	0x0d0d0d07
 800633c:	0d0d0d09 	.word	0x0d0d0d09
 8006340:	0d0d0d26 	.word	0x0d0d0d26
 8006344:	0b          	.byte	0x0b
 8006345:	00          	.byte	0x00
 8006346:	2200      	movs	r2, #0
 8006348:	e7ba      	b.n	80062c0 <UART_SetConfig+0x6c>
 800634a:	2204      	movs	r2, #4
 800634c:	e7b8      	b.n	80062c0 <UART_SetConfig+0x6c>
 800634e:	2208      	movs	r2, #8
 8006350:	e7b6      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006352:	2210      	movs	r2, #16
 8006354:	e7b4      	b.n	80062c0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800635e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006362:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006366:	d00f      	beq.n	8006388 <UART_SetConfig+0x134>
 8006368:	d805      	bhi.n	8006376 <UART_SetConfig+0x122>
 800636a:	b17a      	cbz	r2, 800638c <UART_SetConfig+0x138>
 800636c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006370:	d10e      	bne.n	8006390 <UART_SetConfig+0x13c>
 8006372:	2204      	movs	r2, #4
 8006374:	e7a4      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006376:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800637a:	d10b      	bne.n	8006394 <UART_SetConfig+0x140>
 800637c:	2208      	movs	r2, #8
 800637e:	e79f      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006380:	2202      	movs	r2, #2
 8006382:	e79d      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006384:	2202      	movs	r2, #2
 8006386:	e79b      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006388:	2202      	movs	r2, #2
 800638a:	e799      	b.n	80062c0 <UART_SetConfig+0x6c>
 800638c:	2200      	movs	r2, #0
 800638e:	e797      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006390:	2210      	movs	r2, #16
 8006392:	e795      	b.n	80062c0 <UART_SetConfig+0x6c>
 8006394:	2210      	movs	r2, #16
 8006396:	e793      	b.n	80062c0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006398:	2a08      	cmp	r2, #8
 800639a:	f200 809c 	bhi.w	80064d6 <UART_SetConfig+0x282>
 800639e:	e8df f002 	tbb	[pc, r2]
 80063a2:	9a08      	.short	0x9a08
 80063a4:	9a379a3a 	.word	0x9a379a3a
 80063a8:	9a9a      	.short	0x9a9a
 80063aa:	05          	.byte	0x05
 80063ab:	00          	.byte	0x00
 80063ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80063b0:	e004      	b.n	80063bc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b2:	f7fe fb0f 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f000 808f 	beq.w	80064da <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063be:	4b4c      	ldr	r3, [pc, #304]	; (80064f0 <UART_SetConfig+0x29c>)
 80063c0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80063c4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c8:	6865      	ldr	r5, [r4, #4]
 80063ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80063ce:	4299      	cmp	r1, r3
 80063d0:	f200 8094 	bhi.w	80064fc <UART_SetConfig+0x2a8>
 80063d4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80063d8:	f200 8092 	bhi.w	8006500 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063dc:	2600      	movs	r6, #0
 80063de:	4633      	mov	r3, r6
 80063e0:	4631      	mov	r1, r6
 80063e2:	f7fa fcbf 	bl	8000d64 <__aeabi_uldivmod>
 80063e6:	0209      	lsls	r1, r1, #8
 80063e8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80063ec:	0200      	lsls	r0, r0, #8
 80063ee:	086b      	lsrs	r3, r5, #1
 80063f0:	18c0      	adds	r0, r0, r3
 80063f2:	462a      	mov	r2, r5
 80063f4:	4633      	mov	r3, r6
 80063f6:	f141 0100 	adc.w	r1, r1, #0
 80063fa:	f7fa fcb3 	bl	8000d64 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063fe:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006402:	4b3c      	ldr	r3, [pc, #240]	; (80064f4 <UART_SetConfig+0x2a0>)
 8006404:	429a      	cmp	r2, r3
 8006406:	d87d      	bhi.n	8006504 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	60d8      	str	r0, [r3, #12]
 800640c:	4630      	mov	r0, r6
 800640e:	e050      	b.n	80064b2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006410:	f7fd fdd8 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
        break;
 8006414:	e7cf      	b.n	80063b6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006416:	4838      	ldr	r0, [pc, #224]	; (80064f8 <UART_SetConfig+0x2a4>)
 8006418:	e7d0      	b.n	80063bc <UART_SetConfig+0x168>
    switch (clocksource)
 800641a:	2a08      	cmp	r2, #8
 800641c:	d874      	bhi.n	8006508 <UART_SetConfig+0x2b4>
 800641e:	e8df f002 	tbb	[pc, r2]
 8006422:	2707      	.short	0x2707
 8006424:	732a7305 	.word	0x732a7305
 8006428:	7373      	.short	0x7373
 800642a:	0b          	.byte	0x0b
 800642b:	00          	.byte	0x00
 800642c:	4832      	ldr	r0, [pc, #200]	; (80064f8 <UART_SetConfig+0x2a4>)
 800642e:	e003      	b.n	8006438 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fe fad0 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006434:	2800      	cmp	r0, #0
 8006436:	d069      	beq.n	800650c <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006438:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800643a:	4b2d      	ldr	r3, [pc, #180]	; (80064f0 <UART_SetConfig+0x29c>)
 800643c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006440:	fbb0 f0f3 	udiv	r0, r0, r3
 8006444:	6862      	ldr	r2, [r4, #4]
 8006446:	0853      	lsrs	r3, r2, #1
 8006448:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800644c:	fbb0 f0f2 	udiv	r0, r0, r2
 8006450:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006452:	f1a0 0210 	sub.w	r2, r0, #16
 8006456:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800645a:	429a      	cmp	r2, r3
 800645c:	d858      	bhi.n	8006510 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006462:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006466:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	60d8      	str	r0, [r3, #12]
 800646c:	2000      	movs	r0, #0
 800646e:	e020      	b.n	80064b2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fe fac0 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006474:	e7de      	b.n	8006434 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fd fda5 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
        break;
 800647a:	e7db      	b.n	8006434 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800647c:	481e      	ldr	r0, [pc, #120]	; (80064f8 <UART_SetConfig+0x2a4>)
 800647e:	e003      	b.n	8006488 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006480:	f7fe faa8 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006484:	2800      	cmp	r0, #0
 8006486:	d047      	beq.n	8006518 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006488:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800648a:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <UART_SetConfig+0x29c>)
 800648c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006490:	fbb0 f0f3 	udiv	r0, r0, r3
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800649a:	fbb0 f0f3 	udiv	r0, r0, r3
 800649e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a0:	f1a0 0210 	sub.w	r2, r0, #16
 80064a4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d837      	bhi.n	800651c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	60d8      	str	r0, [r3, #12]
 80064b0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064b8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80064c0:	6763      	str	r3, [r4, #116]	; 0x74
}
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7fe fa96 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
        break;
 80064c8:	e7dc      	b.n	8006484 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7fd fd7b 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
        break;
 80064ce:	e7d9      	b.n	8006484 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80064d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064d4:	e7d8      	b.n	8006488 <UART_SetConfig+0x234>
    switch (clocksource)
 80064d6:	2001      	movs	r0, #1
 80064d8:	e7eb      	b.n	80064b2 <UART_SetConfig+0x25e>
 80064da:	2000      	movs	r0, #0
 80064dc:	e7e9      	b.n	80064b2 <UART_SetConfig+0x25e>
 80064de:	bf00      	nop
 80064e0:	cfff69f3 	.word	0xcfff69f3
 80064e4:	40008000 	.word	0x40008000
 80064e8:	40013800 	.word	0x40013800
 80064ec:	40004400 	.word	0x40004400
 80064f0:	08012734 	.word	0x08012734
 80064f4:	000ffcff 	.word	0x000ffcff
 80064f8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80064fc:	2001      	movs	r0, #1
 80064fe:	e7d8      	b.n	80064b2 <UART_SetConfig+0x25e>
 8006500:	2001      	movs	r0, #1
 8006502:	e7d6      	b.n	80064b2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006504:	2001      	movs	r0, #1
 8006506:	e7d4      	b.n	80064b2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006508:	2001      	movs	r0, #1
 800650a:	e7d2      	b.n	80064b2 <UART_SetConfig+0x25e>
 800650c:	2000      	movs	r0, #0
 800650e:	e7d0      	b.n	80064b2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006510:	2001      	movs	r0, #1
 8006512:	e7ce      	b.n	80064b2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006514:	2001      	movs	r0, #1
 8006516:	e7cc      	b.n	80064b2 <UART_SetConfig+0x25e>
 8006518:	2000      	movs	r0, #0
 800651a:	e7ca      	b.n	80064b2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800651c:	2001      	movs	r0, #1
 800651e:	e7c8      	b.n	80064b2 <UART_SetConfig+0x25e>

08006520 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006520:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006522:	f013 0f01 	tst.w	r3, #1
 8006526:	d006      	beq.n	8006536 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006528:	6802      	ldr	r2, [r0, #0]
 800652a:	6853      	ldr	r3, [r2, #4]
 800652c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006530:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006532:	430b      	orrs	r3, r1
 8006534:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006536:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006538:	f013 0f02 	tst.w	r3, #2
 800653c:	d006      	beq.n	800654c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800653e:	6802      	ldr	r2, [r0, #0]
 8006540:	6853      	ldr	r3, [r2, #4]
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006548:	430b      	orrs	r3, r1
 800654a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800654c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800654e:	f013 0f04 	tst.w	r3, #4
 8006552:	d006      	beq.n	8006562 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006554:	6802      	ldr	r2, [r0, #0]
 8006556:	6853      	ldr	r3, [r2, #4]
 8006558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800655e:	430b      	orrs	r3, r1
 8006560:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006562:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006564:	f013 0f08 	tst.w	r3, #8
 8006568:	d006      	beq.n	8006578 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	6802      	ldr	r2, [r0, #0]
 800656c:	6853      	ldr	r3, [r2, #4]
 800656e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006572:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006574:	430b      	orrs	r3, r1
 8006576:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800657a:	f013 0f10 	tst.w	r3, #16
 800657e:	d006      	beq.n	800658e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006580:	6802      	ldr	r2, [r0, #0]
 8006582:	6893      	ldr	r3, [r2, #8]
 8006584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006588:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800658a:	430b      	orrs	r3, r1
 800658c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006590:	f013 0f20 	tst.w	r3, #32
 8006594:	d006      	beq.n	80065a4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006596:	6802      	ldr	r2, [r0, #0]
 8006598:	6893      	ldr	r3, [r2, #8]
 800659a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800659e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80065a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065aa:	d00a      	beq.n	80065c2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065ac:	6802      	ldr	r2, [r0, #0]
 80065ae:	6853      	ldr	r3, [r2, #4]
 80065b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065b4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80065b6:	430b      	orrs	r3, r1
 80065b8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80065bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c0:	d00b      	beq.n	80065da <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80065c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065c8:	d006      	beq.n	80065d8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ca:	6802      	ldr	r2, [r0, #0]
 80065cc:	6853      	ldr	r3, [r2, #4]
 80065ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80065d2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6053      	str	r3, [r2, #4]
}
 80065d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065da:	6802      	ldr	r2, [r0, #0]
 80065dc:	6853      	ldr	r3, [r2, #4]
 80065de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6053      	str	r3, [r2, #4]
 80065e8:	e7eb      	b.n	80065c2 <UART_AdvFeatureConfig+0xa2>

080065ea <UART_WaitOnFlagUntilTimeout>:
{
 80065ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ee:	4605      	mov	r5, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	4616      	mov	r6, r2
 80065f4:	4699      	mov	r9, r3
 80065f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fa:	682c      	ldr	r4, [r5, #0]
 80065fc:	69e4      	ldr	r4, [r4, #28]
 80065fe:	ea37 0304 	bics.w	r3, r7, r4
 8006602:	bf0c      	ite	eq
 8006604:	f04f 0c01 	moveq.w	ip, #1
 8006608:	f04f 0c00 	movne.w	ip, #0
 800660c:	45b4      	cmp	ip, r6
 800660e:	d157      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006610:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006614:	d0f1      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fb f9cb 	bl	80019b0 <HAL_GetTick>
 800661a:	eba0 0009 	sub.w	r0, r0, r9
 800661e:	4540      	cmp	r0, r8
 8006620:	d82f      	bhi.n	8006682 <UART_WaitOnFlagUntilTimeout+0x98>
 8006622:	f1b8 0f00 	cmp.w	r8, #0
 8006626:	d02c      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	f012 0f04 	tst.w	r2, #4
 8006630:	d0e3      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006638:	d0df      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800663e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006640:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	e852 3f00 	ldrex	r3, [r2]
 8006646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	e842 3100 	strex	r1, r3, [r2]
 800664e:	2900      	cmp	r1, #0
 8006650:	d1f6      	bne.n	8006640 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	f102 0308 	add.w	r3, r2, #8
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	3208      	adds	r2, #8
 8006662:	e842 3100 	strex	r1, r3, [r2]
 8006666:	2900      	cmp	r1, #0
 8006668:	d1f3      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800666a:	2320      	movs	r3, #32
 800666c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006670:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006674:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006678:	2300      	movs	r3, #0
 800667a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800667e:	2003      	movs	r0, #3
 8006680:	e01f      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006682:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	e852 3f00 	ldrex	r3, [r2]
 8006688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	e842 3100 	strex	r1, r3, [r2]
 8006690:	2900      	cmp	r1, #0
 8006692:	d1f6      	bne.n	8006682 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	f102 0308 	add.w	r3, r2, #8
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	3208      	adds	r2, #8
 80066a4:	e842 3100 	strex	r1, r3, [r2]
 80066a8:	2900      	cmp	r1, #0
 80066aa:	d1f3      	bne.n	8006694 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80066ac:	2320      	movs	r3, #32
 80066ae:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066b2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80066b6:	2300      	movs	r3, #0
 80066b8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80066bc:	2003      	movs	r0, #3
 80066be:	e000      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80066c0:	2000      	movs	r0, #0
}
 80066c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080066c6 <UART_CheckIdleState>:
{
 80066c6:	b530      	push	{r4, r5, lr}
 80066c8:	b083      	sub	sp, #12
 80066ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80066d2:	f7fb f96d 	bl	80019b0 <HAL_GetTick>
 80066d6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	f012 0f08 	tst.w	r2, #8
 80066e0:	d10f      	bne.n	8006702 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f013 0f04 	tst.w	r3, #4
 80066ea:	d118      	bne.n	800671e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80066ec:	2320      	movs	r3, #32
 80066ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	2000      	movs	r0, #0
 80066f8:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80066fa:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80066fe:	b003      	add	sp, #12
 8006700:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4603      	mov	r3, r0
 800670a:	2200      	movs	r2, #0
 800670c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006710:	4620      	mov	r0, r4
 8006712:	f7ff ff6a 	bl	80065ea <UART_WaitOnFlagUntilTimeout>
 8006716:	2800      	cmp	r0, #0
 8006718:	d0e3      	beq.n	80066e2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800671a:	2003      	movs	r0, #3
 800671c:	e7ef      	b.n	80066fe <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	462b      	mov	r3, r5
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff ff5c 	bl	80065ea <UART_WaitOnFlagUntilTimeout>
 8006732:	2800      	cmp	r0, #0
 8006734:	d0da      	beq.n	80066ec <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006736:	2003      	movs	r0, #3
 8006738:	e7e1      	b.n	80066fe <UART_CheckIdleState+0x38>

0800673a <HAL_UART_Init>:
  if (huart == NULL)
 800673a:	b378      	cbz	r0, 800679c <HAL_UART_Init+0x62>
{
 800673c:	b510      	push	{r4, lr}
 800673e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006740:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006744:	b30b      	cbz	r3, 800678a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006746:	2324      	movs	r3, #36	; 0x24
 8006748:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff fd7c 	bl	8006254 <UART_SetConfig>
 800675c:	2801      	cmp	r0, #1
 800675e:	d013      	beq.n	8006788 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006760:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006762:	b9bb      	cbnz	r3, 8006794 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	6853      	ldr	r3, [r2, #4]
 8006768:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800676c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	6893      	ldr	r3, [r2, #8]
 8006772:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006776:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006778:	6822      	ldr	r2, [r4, #0]
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ff9f 	bl	80066c6 <UART_CheckIdleState>
}
 8006788:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800678a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800678e:	f7fb faf1 	bl	8001d74 <HAL_UART_MspInit>
 8006792:	e7d8      	b.n	8006746 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff fec3 	bl	8006520 <UART_AdvFeatureConfig>
 800679a:	e7e3      	b.n	8006764 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800679c:	2001      	movs	r0, #1
}
 800679e:	4770      	bx	lr

080067a0 <UART_Start_Receive_IT>:
{
 80067a0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80067a2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80067a4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80067a8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80067b0:	6883      	ldr	r3, [r0, #8]
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b6:	d006      	beq.n	80067c6 <UART_Start_Receive_IT+0x26>
 80067b8:	b9a3      	cbnz	r3, 80067e4 <UART_Start_Receive_IT+0x44>
 80067ba:	6903      	ldr	r3, [r0, #16]
 80067bc:	b973      	cbnz	r3, 80067dc <UART_Start_Receive_IT+0x3c>
 80067be:	23ff      	movs	r3, #255	; 0xff
 80067c0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067c4:	e014      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
 80067c6:	6903      	ldr	r3, [r0, #16]
 80067c8:	b923      	cbnz	r3, 80067d4 <UART_Start_Receive_IT+0x34>
 80067ca:	f240 13ff 	movw	r3, #511	; 0x1ff
 80067ce:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067d2:	e00d      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
 80067d4:	23ff      	movs	r3, #255	; 0xff
 80067d6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067da:	e009      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
 80067dc:	237f      	movs	r3, #127	; 0x7f
 80067de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80067e2:	e005      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
 80067e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e8:	d030      	beq.n	800684c <UART_Start_Receive_IT+0xac>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f6:	2322      	movs	r3, #34	; 0x22
 80067f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fc:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	f101 0308 	add.w	r3, r1, #8
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	3108      	adds	r1, #8
 800680c:	e841 3400 	strex	r4, r3, [r1]
 8006810:	2c00      	cmp	r4, #0
 8006812:	d1f3      	bne.n	80067fc <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006814:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681a:	d021      	beq.n	8006860 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800681c:	6883      	ldr	r3, [r0, #8]
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006822:	d048      	beq.n	80068b6 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006824:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <UART_Start_Receive_IT+0x138>)
 8006826:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006828:	2300      	movs	r3, #0
 800682a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800682e:	6903      	ldr	r3, [r0, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d046      	beq.n	80068c2 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006834:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	e852 3f00 	ldrex	r3, [r2]
 800683a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	e842 3100 	strex	r1, r3, [r2]
 8006842:	2900      	cmp	r1, #0
 8006844:	d1f6      	bne.n	8006834 <UART_Start_Receive_IT+0x94>
}
 8006846:	2000      	movs	r0, #0
 8006848:	bc10      	pop	{r4}
 800684a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800684c:	6903      	ldr	r3, [r0, #16]
 800684e:	b91b      	cbnz	r3, 8006858 <UART_Start_Receive_IT+0xb8>
 8006850:	237f      	movs	r3, #127	; 0x7f
 8006852:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006856:	e7cb      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
 8006858:	233f      	movs	r3, #63	; 0x3f
 800685a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800685e:	e7c7      	b.n	80067f0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006860:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006864:	4293      	cmp	r3, r2
 8006866:	d8d9      	bhi.n	800681c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006868:	6883      	ldr	r3, [r0, #8]
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d01c      	beq.n	80068aa <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <UART_Start_Receive_IT+0x13c>)
 8006872:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006874:	2300      	movs	r3, #0
 8006876:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800687a:	6903      	ldr	r3, [r0, #16]
 800687c:	b143      	cbz	r3, 8006890 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	e852 3f00 	ldrex	r3, [r2]
 8006884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	e842 3100 	strex	r1, r3, [r2]
 800688c:	2900      	cmp	r1, #0
 800688e:	d1f6      	bne.n	800687e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006890:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	f102 0308 	add.w	r3, r2, #8
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	3208      	adds	r2, #8
 80068a0:	e842 3100 	strex	r1, r3, [r2]
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d1f3      	bne.n	8006890 <UART_Start_Receive_IT+0xf0>
 80068a8:	e7cd      	b.n	8006846 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068aa:	6903      	ldr	r3, [r0, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1df      	bne.n	8006870 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <UART_Start_Receive_IT+0x140>)
 80068b2:	6703      	str	r3, [r0, #112]	; 0x70
 80068b4:	e7de      	b.n	8006874 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b6:	6903      	ldr	r3, [r0, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1b3      	bne.n	8006824 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80068bc:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <UART_Start_Receive_IT+0x144>)
 80068be:	6703      	str	r3, [r0, #112]	; 0x70
 80068c0:	e7b2      	b.n	8006828 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80068c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	e852 3f00 	ldrex	r3, [r2]
 80068c8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	e842 3100 	strex	r1, r3, [r2]
 80068d0:	2900      	cmp	r1, #0
 80068d2:	d1f6      	bne.n	80068c2 <UART_Start_Receive_IT+0x122>
 80068d4:	e7b7      	b.n	8006846 <UART_Start_Receive_IT+0xa6>
 80068d6:	bf00      	nop
 80068d8:	08005db1 	.word	0x08005db1
 80068dc:	08005f15 	.word	0x08005f15
 80068e0:	080060b5 	.word	0x080060b5
 80068e4:	08005e63 	.word	0x08005e63

080068e8 <HAL_UART_Receive_IT>:
{
 80068e8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d11e      	bne.n	8006930 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80068f2:	b1f9      	cbz	r1, 8006934 <HAL_UART_Receive_IT+0x4c>
 80068f4:	b302      	cbz	r2, 8006938 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 80068f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d01e      	beq.n	800693c <HAL_UART_Receive_IT+0x54>
 80068fe:	2301      	movs	r3, #1
 8006900:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006904:	2300      	movs	r3, #0
 8006906:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006908:	6803      	ldr	r3, [r0, #0]
 800690a:	4c0d      	ldr	r4, [pc, #52]	; (8006940 <HAL_UART_Receive_IT+0x58>)
 800690c:	42a3      	cmp	r3, r4
 800690e:	d00c      	beq.n	800692a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006916:	d008      	beq.n	800692a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006918:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	e854 3f00 	ldrex	r3, [r4]
 800691e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	e844 3500 	strex	r5, r3, [r4]
 8006926:	2d00      	cmp	r5, #0
 8006928:	d1f6      	bne.n	8006918 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800692a:	f7ff ff39 	bl	80067a0 <UART_Start_Receive_IT>
 800692e:	e000      	b.n	8006932 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006930:	2002      	movs	r0, #2
}
 8006932:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006934:	2001      	movs	r0, #1
 8006936:	e7fc      	b.n	8006932 <HAL_UART_Receive_IT+0x4a>
 8006938:	2001      	movs	r0, #1
 800693a:	e7fa      	b.n	8006932 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800693c:	2002      	movs	r0, #2
 800693e:	e7f8      	b.n	8006932 <HAL_UART_Receive_IT+0x4a>
 8006940:	40008000 	.word	0x40008000

08006944 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006944:	b082      	sub	sp, #8
 8006946:	ab02      	add	r3, sp, #8
 8006948:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800694c:	6802      	ldr	r2, [r0, #0]
 800694e:	6853      	ldr	r3, [r2, #4]
 8006950:	f023 0310 	bic.w	r3, r3, #16
 8006954:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006958:	430b      	orrs	r3, r1
 800695a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800695c:	6802      	ldr	r2, [r0, #0]
 800695e:	6853      	ldr	r3, [r2, #4]
 8006960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006968:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800696c:	6053      	str	r3, [r2, #4]
}
 800696e:	b002      	add	sp, #8
 8006970:	4770      	bx	lr
	...

08006974 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006974:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006976:	b92b      	cbnz	r3, 8006984 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006978:	2301      	movs	r3, #1
 800697a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800697e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006982:	4770      	bx	lr
{
 8006984:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006986:	6803      	ldr	r3, [r0, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800698e:	6899      	ldr	r1, [r3, #8]
 8006990:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006992:	4d09      	ldr	r5, [pc, #36]	; (80069b8 <UARTEx_SetNbDataToProcess+0x44>)
 8006994:	5c6b      	ldrb	r3, [r5, r1]
 8006996:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006998:	4c08      	ldr	r4, [pc, #32]	; (80069bc <UARTEx_SetNbDataToProcess+0x48>)
 800699a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800699c:	fb93 f3f1 	sdiv	r3, r3, r1
 80069a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069a4:	5cab      	ldrb	r3, [r5, r2]
 80069a6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069a8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ae:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80069b2:	bc30      	pop	{r4, r5}
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	08012754 	.word	0x08012754
 80069bc:	0801274c 	.word	0x0801274c

080069c0 <HAL_UARTEx_WakeupCallback>:
}
 80069c0:	4770      	bx	lr

080069c2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80069c2:	4770      	bx	lr

080069c4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80069c4:	4770      	bx	lr

080069c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80069c6:	b510      	push	{r4, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	ab04      	add	r3, sp, #16
 80069cc:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80069d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d035      	beq.n	8006a44 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80069d8:	4604      	mov	r4, r0
 80069da:	2301      	movs	r3, #1
 80069dc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80069e0:	2324      	movs	r3, #36	; 0x24
 80069e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80069e6:	6802      	ldr	r2, [r0, #0]
 80069e8:	6813      	ldr	r3, [r2, #0]
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80069f0:	6801      	ldr	r1, [r0, #0]
 80069f2:	688b      	ldr	r3, [r1, #8]
 80069f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80069f8:	9a02      	ldr	r2, [sp, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80069fe:	b1aa      	cbz	r2, 8006a2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006a0a:	f7fa ffd1 	bl	80019b0 <HAL_GetTick>
 8006a0e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006a14:	9200      	str	r2, [sp, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f7ff fde4 	bl	80065ea <UART_WaitOnFlagUntilTimeout>
 8006a22:	b948      	cbnz	r0, 8006a38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006a24:	2320      	movs	r3, #32
 8006a26:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006a2a:	e006      	b.n	8006a3a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006a2c:	ab04      	add	r3, sp, #16
 8006a2e:	e913 0006 	ldmdb	r3, {r1, r2}
 8006a32:	f7ff ff87 	bl	8006944 <UARTEx_Wakeup_AddressConfig>
 8006a36:	e7e3      	b.n	8006a00 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006a38:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006a40:	b004      	add	sp, #16
 8006a42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006a44:	2002      	movs	r0, #2
 8006a46:	e7fb      	b.n	8006a40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006a48 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006a48:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d010      	beq.n	8006a72 <HAL_UARTEx_EnableStopMode+0x2a>
 8006a50:	2301      	movs	r3, #1
 8006a52:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006a56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	e852 3f00 	ldrex	r3, [r2]
 8006a5c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	e842 3100 	strex	r1, r3, [r2]
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d1f6      	bne.n	8006a56 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006a72:	2002      	movs	r0, #2
}
 8006a74:	4770      	bx	lr

08006a76 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006a76:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d01d      	beq.n	8006aba <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006a82:	2301      	movs	r3, #1
 8006a84:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006a88:	2324      	movs	r3, #36	; 0x24
 8006a8a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a8e:	6802      	ldr	r2, [r0, #0]
 8006a90:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006a92:	6811      	ldr	r1, [r2, #0]
 8006a94:	f021 0101 	bic.w	r1, r1, #1
 8006a98:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006a9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006aa2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006aa8:	f7ff ff64 	bl	8006974 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006aac:	2320      	movs	r3, #32
 8006aae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006ab8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006aba:	2002      	movs	r0, #2
}
 8006abc:	4770      	bx	lr

08006abe <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006abe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ac0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d01d      	beq.n	8006b04 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006ac8:	4604      	mov	r4, r0
 8006aca:	2301      	movs	r3, #1
 8006acc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	2324      	movs	r3, #36	; 0x24
 8006ad2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad6:	6803      	ldr	r3, [r0, #0]
 8006ad8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f022 0201 	bic.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ae2:	6802      	ldr	r2, [r0, #0]
 8006ae4:	6893      	ldr	r3, [r2, #8]
 8006ae6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006aea:	4319      	orrs	r1, r3
 8006aec:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006aee:	f7ff ff41 	bl	8006974 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006af6:	2320      	movs	r3, #32
 8006af8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006afc:	2000      	movs	r0, #0
 8006afe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006b04:	2002      	movs	r0, #2
 8006b06:	e7fc      	b.n	8006b02 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006b08 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006b08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006b0a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d01d      	beq.n	8006b4e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006b12:	4604      	mov	r4, r0
 8006b14:	2301      	movs	r3, #1
 8006b16:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006b1a:	2324      	movs	r3, #36	; 0x24
 8006b1c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b20:	6803      	ldr	r3, [r0, #0]
 8006b22:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b2c:	6802      	ldr	r2, [r0, #0]
 8006b2e:	6893      	ldr	r3, [r2, #8]
 8006b30:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006b34:	4319      	orrs	r1, r3
 8006b36:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006b38:	f7ff ff1c 	bl	8006974 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006b40:	2320      	movs	r3, #32
 8006b42:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006b46:	2000      	movs	r0, #0
 8006b48:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006b4e:	2002      	movs	r0, #2
 8006b50:	e7fc      	b.n	8006b4c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006b54 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006b54:	2804      	cmp	r0, #4
 8006b56:	d807      	bhi.n	8006b68 <LmHandlerPackageIsInitialized+0x14>
{
 8006b58:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <LmHandlerPackageIsInitialized+0x1c>)
 8006b5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	b11b      	cbz	r3, 8006b6c <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006b64:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006b66:	bd08      	pop	{r3, pc}
        return false;
 8006b68:	2000      	movs	r0, #0
}
 8006b6a:	4770      	bx	lr
        return false;
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e7fa      	b.n	8006b66 <LmHandlerPackageIsInitialized+0x12>
 8006b70:	2000056c 	.word	0x2000056c

08006b74 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	4605      	mov	r5, r0
 8006b78:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	e005      	b.n	8006b8a <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	b10b      	cbz	r3, 8006b86 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006b82:	4638      	mov	r0, r7
 8006b84:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006b86:	3401      	adds	r4, #1
 8006b88:	b264      	sxtb	r4, r4
 8006b8a:	2c04      	cmp	r4, #4
 8006b8c:	dc34      	bgt.n	8006bf8 <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 8006b8e:	4626      	mov	r6, r4
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <LmHandlerPackagesNotify+0x88>)
 8006b92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f5      	beq.n	8006b86 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006b9a:	2d03      	cmp	r5, #3
 8006b9c:	d8f3      	bhi.n	8006b86 <LmHandlerPackagesNotify+0x12>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <LmHandlerPackagesNotify+0x30>)
 8006ba0:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006ba4:	08006b7f 	.word	0x08006b7f
 8006ba8:	08006bb5 	.word	0x08006bb5
 8006bac:	08006be1 	.word	0x08006be1
 8006bb0:	08006bed 	.word	0x08006bed
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	d0e5      	beq.n	8006b86 <LmHandlerPackagesNotify+0x12>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d007      	beq.n	8006bd2 <LmHandlerPackagesNotify+0x5e>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 8006bc2:	2c00      	cmp	r4, #0
 8006bc4:	d1df      	bne.n	8006b86 <LmHandlerPackagesNotify+0x12>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <LmHandlerPackagesNotify+0x88>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4798      	blx	r3
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0d9      	beq.n	8006b86 <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <LmHandlerPackagesNotify+0x88>)
 8006bd4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	4798      	blx	r3
 8006bde:	e7d2      	b.n	8006b86 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0cf      	beq.n	8006b86 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006be6:	4638      	mov	r0, r7
 8006be8:	4798      	blx	r3
 8006bea:	e7cc      	b.n	8006b86 <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0c9      	beq.n	8006b86 <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	4798      	blx	r3
 8006bf6:	e7c6      	b.n	8006b86 <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8006bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	2000056c 	.word	0x2000056c

08006c00 <McpsConfirm>:
{
 8006c00:	b510      	push	{r4, lr}
 8006c02:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006c04:	480c      	ldr	r0, [pc, #48]	; (8006c38 <McpsConfirm+0x38>)
 8006c06:	2301      	movs	r3, #1
 8006c08:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006c0a:	7863      	ldrb	r3, [r4, #1]
 8006c0c:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006c0e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006c12:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006c14:	68e3      	ldr	r3, [r4, #12]
 8006c16:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006c18:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006c1c:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006c22:	7923      	ldrb	r3, [r4, #4]
 8006c24:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <McpsConfirm+0x3c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006c2e:	4621      	mov	r1, r4
 8006c30:	2000      	movs	r0, #0
 8006c32:	f7ff ff9f 	bl	8006b74 <LmHandlerPackagesNotify>
}
 8006c36:	bd10      	pop	{r4, pc}
 8006c38:	200000b8 	.word	0x200000b8
 8006c3c:	20000568 	.word	0x20000568

08006c40 <LmHandlerPackagesProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8006c40:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006c42:	2400      	movs	r4, #0
 8006c44:	e001      	b.n	8006c4a <LmHandlerPackagesProcess+0xa>
 8006c46:	3401      	adds	r4, #1
 8006c48:	b264      	sxtb	r4, r4
 8006c4a:	2c04      	cmp	r4, #4
 8006c4c:	dc12      	bgt.n	8006c74 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <LmHandlerPackagesProcess+0x38>)
 8006c50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f6      	beq.n	8006c46 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006c58:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f3      	beq.n	8006c46 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006c5e:	b2e0      	uxtb	r0, r4
 8006c60:	f7ff ff78 	bl	8006b54 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0ee      	beq.n	8006c46 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006c68:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <LmHandlerPackagesProcess+0x38>)
 8006c6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	4798      	blx	r3
 8006c72:	e7e8      	b.n	8006c46 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	2000056c 	.word	0x2000056c

08006c7c <LmHandlerDeviceTimeReq>:
{
 8006c7c:	b500      	push	{lr}
 8006c7e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8006c80:	230a      	movs	r3, #10
 8006c82:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8006c86:	a801      	add	r0, sp, #4
 8006c88:	f003 fe04 	bl	800a894 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8006c8c:	9a05      	ldr	r2, [sp, #20]
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <LmHandlerDeviceTimeReq+0x24>)
 8006c90:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8006c92:	b910      	cbnz	r0, 8006c9a <LmHandlerDeviceTimeReq+0x1e>
}
 8006c94:	b007      	add	sp, #28
 8006c96:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8006c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9e:	e7f9      	b.n	8006c94 <LmHandlerDeviceTimeReq+0x18>
 8006ca0:	20000564 	.word	0x20000564

08006ca4 <LmHandlerProcess>:
{
 8006ca4:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 8006ca6:	f002 ff5b 	bl	8009b60 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8006caa:	f7ff ffc9 	bl	8006c40 <LmHandlerPackagesProcess>
}
 8006cae:	bd08      	pop	{r3, pc}

08006cb0 <LmHandlerGetDutyCycleWaitTime>:
}
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000564 	.word	0x20000564

08006cbc <LmHandlerJoinStatus>:
{
 8006cbc:	b500      	push	{lr}
 8006cbe:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8006cc6:	a801      	add	r0, sp, #4
 8006cc8:	f003 fa22 	bl	800a110 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8006ccc:	b920      	cbnz	r0, 8006cd8 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006cce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006cd2:	b110      	cbz	r0, 8006cda <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	e000      	b.n	8006cda <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8006cd8:	2000      	movs	r0, #0
}
 8006cda:	b00b      	add	sp, #44	; 0x2c
 8006cdc:	f85d fb04 	ldr.w	pc, [sp], #4

08006ce0 <LmHandlerRequestClass>:
{
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8006ce6:	f002 ff29 	bl	8009b3c <LoRaMacIsBusy>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d136      	bne.n	8006d5c <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8006cee:	f7ff ffe5 	bl	8006cbc <LmHandlerJoinStatus>
 8006cf2:	2801      	cmp	r0, #1
 8006cf4:	d135      	bne.n	8006d62 <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8006cfc:	a801      	add	r0, sp, #4
 8006cfe:	f003 fa07 	bl	800a110 <LoRaMacMibGetRequestConfirm>
 8006d02:	bb88      	cbnz	r0, 8006d68 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8006d04:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d030      	beq.n	8006d6e <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8006d0c:	2c01      	cmp	r4, #1
 8006d0e:	d030      	beq.n	8006d72 <LmHandlerRequestClass+0x92>
 8006d10:	2c02      	cmp	r4, #2
 8006d12:	d014      	beq.n	8006d3e <LmHandlerRequestClass+0x5e>
 8006d14:	b114      	cbz	r4, 8006d1c <LmHandlerRequestClass+0x3c>
 8006d16:	2000      	movs	r0, #0
}
 8006d18:	b00a      	add	sp, #40	; 0x28
 8006d1a:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8006d1c:	b90b      	cbnz	r3, 8006d22 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e7fa      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 8006d22:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8006d26:	a801      	add	r0, sp, #4
 8006d28:	f003 fb28 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 8006d2c:	bb20      	cbnz	r0, 8006d78 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006d2e:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <LmHandlerRequestClass+0xb4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	b31b      	cbz	r3, 8006d7e <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006d36:	4620      	mov	r0, r4
 8006d38:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e7ec      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 8006d3e:	bb03      	cbnz	r3, 8006d82 <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 8006d40:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8006d44:	a801      	add	r0, sp, #4
 8006d46:	f003 fb19 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 8006d4a:	b9e8      	cbnz	r0, 8006d88 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <LmHandlerRequestClass+0xb4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	b1e3      	cbz	r3, 8006d8e <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8006d54:	4620      	mov	r0, r4
 8006d56:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e7dd      	b.n	8006d18 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006d5c:	f06f 0001 	mvn.w	r0, #1
 8006d60:	e7da      	b.n	8006d18 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006d62:	f06f 0002 	mvn.w	r0, #2
 8006d66:	e7d7      	b.n	8006d18 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e7d4      	b.n	8006d18 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e7d2      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	e7cf      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e7cc      	b.n	8006d18 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e7ca      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	e7c7      	b.n	8006d18 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	e7c4      	b.n	8006d18 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e7c2      	b.n	8006d18 <LmHandlerRequestClass+0x38>
 8006d92:	bf00      	nop
 8006d94:	20000568 	.word	0x20000568

08006d98 <LmHandlerJoin>:
{
 8006d98:	b500      	push	{lr}
 8006d9a:	b08f      	sub	sp, #60	; 0x3c
    mlmeReq.Type = MLME_JOIN;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8006da2:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <LmHandlerJoin+0xac>)
 8006da4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8006da8:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8006dac:	2802      	cmp	r0, #2
 8006dae:	d021      	beq.n	8006df4 <LmHandlerJoin+0x5c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006db0:	2001      	movs	r0, #1
 8006db2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8006db6:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <LmHandlerJoin+0xb0>)
 8006db8:	7198      	strb	r0, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8006dba:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	7158      	strb	r0, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8006dc0:	71d9      	strb	r1, [r3, #7]
        if (CtxRestoreDone == false)
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <LmHandlerJoin+0xb4>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b30b      	cbz	r3, 8006e0c <LmHandlerJoin+0x74>
        LoRaMacStart();
 8006dc8:	f003 f8ee 	bl	8009fa8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8006dd2:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8006dd6:	4668      	mov	r0, sp
 8006dd8:	f003 fad0 	bl	800a37c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <LmHandlerJoin+0xb8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	4819      	ldr	r0, [pc, #100]	; (8006e48 <LmHandlerJoin+0xb0>)
 8006de4:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8006de6:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <LmHandlerJoin+0xac>)
 8006de8:	7858      	ldrb	r0, [r3, #1]
 8006dea:	f7ff ff79 	bl	8006ce0 <LmHandlerRequestClass>
}
 8006dee:	b00f      	add	sp, #60	; 0x3c
 8006df0:	f85d fb04 	ldr.w	pc, [sp], #4
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8006df4:	2202      	movs	r2, #2
 8006df6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <LmHandlerJoin+0xb0>)
 8006dfc:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8006dfe:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8006e00:	f003 f8d2 	bl	8009fa8 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 8006e04:	a809      	add	r0, sp, #36	; 0x24
 8006e06:	f003 fd45 	bl	800a894 <LoRaMacMlmeRequest>
 8006e0a:	e7f0      	b.n	8006dee <LmHandlerJoin+0x56>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8006e0c:	231e      	movs	r3, #30
 8006e0e:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8006e12:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006e16:	4668      	mov	r0, sp
 8006e18:	f003 fab0 	bl	800a37c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8006e1c:	231f      	movs	r3, #31
 8006e1e:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <LmHandlerJoin+0xac>)
 8006e24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006e28:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8006e2c:	4668      	mov	r0, sp
 8006e2e:	f003 faa5 	bl	800a37c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8006e32:	2328      	movs	r3, #40	; 0x28
 8006e34:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <LmHandlerJoin+0xbc>)
 8006e3a:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8006e3c:	4668      	mov	r0, sp
 8006e3e:	f003 fa9d 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 8006e42:	e7c1      	b.n	8006dc8 <LmHandlerJoin+0x30>
 8006e44:	20000580 	.word	0x20000580
 8006e48:	20000090 	.word	0x20000090
 8006e4c:	20000562 	.word	0x20000562
 8006e50:	20000568 	.word	0x20000568
 8006e54:	01000300 	.word	0x01000300

08006e58 <LmHandlerSend>:
{
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8006e62:	f002 fe6b 	bl	8009b3c <LoRaMacIsBusy>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d16e      	bne.n	8006f48 <LmHandlerSend+0xf0>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8006e6a:	f7ff ff27 	bl	8006cbc <LmHandlerJoinStatus>
 8006e6e:	2801      	cmp	r0, #1
 8006e70:	d144      	bne.n	8006efc <LmHandlerSend+0xa4>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8006e72:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <LmHandlerSend+0x104>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4798      	blx	r3
 8006e7a:	b138      	cbz	r0, 8006e8c <LmHandlerSend+0x34>
 8006e7c:	7823      	ldrb	r3, [r4, #0]
 8006e7e:	4a37      	ldr	r2, [pc, #220]	; (8006f5c <LmHandlerSend+0x104>)
 8006e80:	6812      	ldr	r2, [r2, #0]
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d001      	beq.n	8006e8c <LmHandlerSend+0x34>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d160      	bne.n	8006f4e <LmHandlerSend+0xf6>
    TxParams.MsgType = isTxConfirmed;
 8006e8c:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <LmHandlerSend+0x108>)
 8006e8e:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8006e90:	3d00      	subs	r5, #0
 8006e92:	bf18      	it	ne
 8006e94:	2501      	movne	r5, #1
 8006e96:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8006e9a:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <LmHandlerSend+0x10c>)
 8006e9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006ea0:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8006ea4:	4669      	mov	r1, sp
 8006ea6:	7860      	ldrb	r0, [r4, #1]
 8006ea8:	f003 f8cc 	bl	800a044 <LoRaMacQueryTxPossible>
 8006eac:	b370      	cbz	r0, 8006f0c <LmHandlerSend+0xb4>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8006eb4:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8006eb6:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8006eba:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8006ebe:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <LmHandlerSend+0x108>)
 8006ec0:	f103 0c10 	add.w	ip, r3, #16
 8006ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ec8:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8006ecc:	4a25      	ldr	r2, [pc, #148]	; (8006f64 <LmHandlerSend+0x10c>)
 8006ece:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006ed2:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	a801      	add	r0, sp, #4
 8006ed8:	f003 fdb2 	bl	800aa40 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <LmHandlerSend+0x110>)
 8006ee0:	601a      	str	r2, [r3, #0]
    switch (status)
 8006ee2:	2811      	cmp	r0, #17
 8006ee4:	d82d      	bhi.n	8006f42 <LmHandlerSend+0xea>
 8006ee6:	e8df f000 	tbb	[pc, r0]
 8006eea:	1c21      	.short	0x1c21
 8006eec:	2c2c2c2c 	.word	0x2c2c2c2c
 8006ef0:	2c2c352c 	.word	0x2c2c352c
 8006ef4:	2c2c292c 	.word	0x2c2c292c
 8006ef8:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8006efc:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <LmHandlerSend+0x114>)
 8006efe:	79d9      	ldrb	r1, [r3, #7]
 8006f00:	7998      	ldrb	r0, [r3, #6]
 8006f02:	f7ff ff49 	bl	8006d98 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006f06:	f06f 0502 	mvn.w	r5, #2
 8006f0a:	e00c      	b.n	8006f26 <LmHandlerSend+0xce>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8006f0c:	7823      	ldrb	r3, [r4, #0]
 8006f0e:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8006f12:	7863      	ldrb	r3, [r4, #1]
 8006f14:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8006f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f20:	e7cd      	b.n	8006ebe <LmHandlerSend+0x66>
    switch (status)
 8006f22:	f06f 0501 	mvn.w	r5, #1
}
 8006f26:	4628      	mov	r0, r5
 8006f28:	b006      	add	sp, #24
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 8006f2c:	f115 0f07 	cmn.w	r5, #7
 8006f30:	d0f9      	beq.n	8006f26 <LmHandlerSend+0xce>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8006f32:	2500      	movs	r5, #0
 8006f34:	e7f7      	b.n	8006f26 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8006f36:	f06f 0504 	mvn.w	r5, #4
            break;
 8006f3a:	e7f4      	b.n	8006f26 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8006f3c:	f06f 0505 	mvn.w	r5, #5
            break;
 8006f40:	e7f1      	b.n	8006f26 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8006f42:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8006f46:	e7ee      	b.n	8006f26 <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8006f48:	f06f 0501 	mvn.w	r5, #1
 8006f4c:	e7eb      	b.n	8006f26 <LmHandlerSend+0xce>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8006f4e:	f06f 0503 	mvn.w	r5, #3
 8006f52:	e7e8      	b.n	8006f26 <LmHandlerSend+0xce>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8006f54:	f06f 0502 	mvn.w	r5, #2
 8006f58:	e7e5      	b.n	8006f26 <LmHandlerSend+0xce>
 8006f5a:	bf00      	nop
 8006f5c:	2000056c 	.word	0x2000056c
 8006f60:	200000b8 	.word	0x200000b8
 8006f64:	20000580 	.word	0x20000580
 8006f68:	20000564 	.word	0x20000564
 8006f6c:	20000090 	.word	0x20000090

08006f70 <MlmeIndication>:
{
 8006f70:	b510      	push	{r4, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <MlmeIndication+0x78>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006f7c:	7842      	ldrb	r2, [r0, #1]
 8006f7e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006f80:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006f84:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006f86:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006f8a:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006f8c:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006f90:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006f92:	78ca      	ldrb	r2, [r1, #3]
 8006f94:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006f96:	6842      	ldr	r2, [r0, #4]
 8006f98:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8006f9a:	7803      	ldrb	r3, [r0, #0]
 8006f9c:	2b0b      	cmp	r3, #11
 8006f9e:	d007      	beq.n	8006fb0 <MlmeIndication+0x40>
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d005      	beq.n	8006fb0 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006fa4:	4b11      	ldr	r3, [pc, #68]	; (8006fec <MlmeIndication+0x7c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	490f      	ldr	r1, [pc, #60]	; (8006fe8 <MlmeIndication+0x78>)
 8006fac:	2000      	movs	r0, #0
 8006fae:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	2003      	movs	r0, #3
 8006fb4:	f7ff fdde 	bl	8006b74 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8006fb8:	7823      	ldrb	r3, [r4, #0]
 8006fba:	2b07      	cmp	r3, #7
 8006fbc:	d001      	beq.n	8006fc2 <MlmeIndication+0x52>
}
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd10      	pop	{r4, pc}
            LmHandlerAppData_t appData =
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f88d 3000 	strb.w	r3, [sp]
 8006fc8:	f88d 3001 	strb.w	r3, [sp, #1]
 8006fcc:	9301      	str	r3, [sp, #4]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 8006fce:	4b08      	ldr	r3, [pc, #32]	; (8006ff0 <MlmeIndication+0x80>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4798      	blx	r3
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d1f1      	bne.n	8006fbe <MlmeIndication+0x4e>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8006fda:	2201      	movs	r2, #1
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4668      	mov	r0, sp
 8006fe0:	f7ff ff3a 	bl	8006e58 <LmHandlerSend>
}
 8006fe4:	e7eb      	b.n	8006fbe <MlmeIndication+0x4e>
 8006fe6:	bf00      	nop
 8006fe8:	200000a4 	.word	0x200000a4
 8006fec:	20000568 	.word	0x20000568
 8006ff0:	2000056c 	.word	0x2000056c

08006ff4 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8006ff4:	b170      	cbz	r0, 8007014 <LmHandlerGetCurrentClass+0x20>
{
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	b08a      	sub	sp, #40	; 0x28
 8006ffa:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007002:	a801      	add	r0, sp, #4
 8007004:	f003 f884 	bl	800a110 <LoRaMacMibGetRequestConfirm>
 8007008:	b938      	cbnz	r0, 800701a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800700a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800700e:	7023      	strb	r3, [r4, #0]
}
 8007010:	b00a      	add	sp, #40	; 0x28
 8007012:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007018:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	e7f7      	b.n	8007010 <LmHandlerGetCurrentClass+0x1c>

08007020 <McpsIndication>:
{
 8007020:	b530      	push	{r4, r5, lr}
 8007022:	b087      	sub	sp, #28
 8007024:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007026:	2200      	movs	r2, #0
 8007028:	f88d 200f 	strb.w	r2, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800702c:	4921      	ldr	r1, [pc, #132]	; (80070b4 <McpsIndication+0x94>)
 800702e:	2201      	movs	r2, #1
 8007030:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007032:	7842      	ldrb	r2, [r0, #1]
 8007034:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007036:	bb5a      	cbnz	r2, 8007090 <McpsIndication+0x70>
 8007038:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800703a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800703e:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007040:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007044:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8007046:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800704a:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800704c:	78db      	ldrb	r3, [r3, #3]
 800704e:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007050:	6903      	ldr	r3, [r0, #16]
 8007052:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007054:	78c3      	ldrb	r3, [r0, #3]
 8007056:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800705a:	7b03      	ldrb	r3, [r0, #12]
 800705c:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8007060:	6883      	ldr	r3, [r0, #8]
 8007062:	9305      	str	r3, [sp, #20]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007064:	4d14      	ldr	r5, [pc, #80]	; (80070b8 <McpsIndication+0x98>)
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	a804      	add	r0, sp, #16
 800706c:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	b113      	cbz	r3, 800707a <McpsIndication+0x5a>
 8007074:	7e22      	ldrb	r2, [r4, #24]
 8007076:	b102      	cbz	r2, 800707a <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007078:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800707a:	4621      	mov	r1, r4
 800707c:	2001      	movs	r0, #1
 800707e:	f7ff fd79 	bl	8006b74 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007082:	f10d 000f 	add.w	r0, sp, #15
 8007086:	f7ff ffb5 	bl	8006ff4 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800708a:	7963      	ldrb	r3, [r4, #5]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d001      	beq.n	8007094 <McpsIndication+0x74>
}
 8007090:	b007      	add	sp, #28
 8007092:	bd30      	pop	{r4, r5, pc}
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8007094:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f9      	bne.n	8007090 <McpsIndication+0x70>
        LmHandlerAppData_t appData =
 800709c:	2100      	movs	r1, #0
 800709e:	f88d 1004 	strb.w	r1, [sp, #4]
 80070a2:	f88d 1005 	strb.w	r1, [sp, #5]
 80070a6:	9102      	str	r1, [sp, #8]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
 80070a8:	2201      	movs	r2, #1
 80070aa:	a801      	add	r0, sp, #4
 80070ac:	f7ff fed4 	bl	8006e58 <LmHandlerSend>
 80070b0:	e7ee      	b.n	8007090 <McpsIndication+0x70>
 80070b2:	bf00      	nop
 80070b4:	200000a4 	.word	0x200000a4
 80070b8:	20000568 	.word	0x20000568

080070bc <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80070bc:	b180      	cbz	r0, 80070e0 <LmHandlerGetTxDatarate+0x24>
{
 80070be:	b510      	push	{r4, lr}
 80070c0:	b08a      	sub	sp, #40	; 0x28
 80070c2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80070c4:	231f      	movs	r3, #31
 80070c6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80070ca:	a801      	add	r0, sp, #4
 80070cc:	f003 f820 	bl	800a110 <LoRaMacMibGetRequestConfirm>
 80070d0:	b948      	cbnz	r0, 80070e6 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80070d2:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80070d6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <LmHandlerGetTxDatarate+0x30>)
 80070da:	7113      	strb	r3, [r2, #4]
}
 80070dc:	b00a      	add	sp, #40	; 0x28
 80070de:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80070e4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	e7f7      	b.n	80070dc <LmHandlerGetTxDatarate+0x20>
 80070ec:	20000580 	.word	0x20000580

080070f0 <MlmeConfirm>:
{
 80070f0:	b510      	push	{r4, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80070f6:	4824      	ldr	r0, [pc, #144]	; (8007188 <MlmeConfirm+0x98>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 80070fc:	7863      	ldrb	r3, [r4, #1]
 80070fe:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007100:	4b22      	ldr	r3, [pc, #136]	; (800718c <MlmeConfirm+0x9c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8007108:	4621      	mov	r1, r4
 800710a:	2002      	movs	r0, #2
 800710c:	f7ff fd32 	bl	8006b74 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007110:	7823      	ldrb	r3, [r4, #0]
 8007112:	2b04      	cmp	r3, #4
 8007114:	d029      	beq.n	800716a <MlmeConfirm+0x7a>
 8007116:	2b0c      	cmp	r3, #12
 8007118:	d02f      	beq.n	800717a <MlmeConfirm+0x8a>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d001      	beq.n	8007122 <MlmeConfirm+0x32>
}
 800711e:	b00a      	add	sp, #40	; 0x28
 8007120:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007122:	2306      	movs	r3, #6
 8007124:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007128:	a801      	add	r0, sp, #4
 800712a:	f002 fff1 	bl	800a110 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800712e:	9a02      	ldr	r2, [sp, #8]
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <MlmeConfirm+0xa0>)
 8007132:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007134:	4817      	ldr	r0, [pc, #92]	; (8007194 <MlmeConfirm+0xa4>)
 8007136:	f7ff ffc1 	bl	80070bc <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800713a:	7863      	ldrb	r3, [r4, #1]
 800713c:	b16b      	cbz	r3, 800715a <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800713e:	4b16      	ldr	r3, [pc, #88]	; (8007198 <MlmeConfirm+0xa8>)
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007144:	4b11      	ldr	r3, [pc, #68]	; (800718c <MlmeConfirm+0x9c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	4813      	ldr	r0, [pc, #76]	; (8007198 <MlmeConfirm+0xa8>)
 800714c:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800714e:	7863      	ldrb	r3, [r4, #1]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e4      	bne.n	800711e <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8007154:	f007 fd9c 	bl	800ec90 <SecureElementPrintSessionKeys>
        break;
 8007158:	e7e1      	b.n	800711e <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800715a:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <MlmeConfirm+0xa8>)
 800715c:	2200      	movs	r2, #0
 800715e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <MlmeConfirm+0xac>)
 8007162:	7858      	ldrb	r0, [r3, #1]
 8007164:	f7ff fdbc 	bl	8006ce0 <LmHandlerRequestClass>
 8007168:	e7ec      	b.n	8007144 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <MlmeConfirm+0xb0>)
 800716c:	2201      	movs	r2, #1
 800716e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007170:	7a22      	ldrb	r2, [r4, #8]
 8007172:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007174:	7a62      	ldrb	r2, [r4, #9]
 8007176:	74da      	strb	r2, [r3, #19]
        break;
 8007178:	e7d1      	b.n	800711e <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800717a:	7863      	ldrb	r3, [r4, #1]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ce      	beq.n	800711e <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8007180:	f7ff fd7c 	bl	8006c7c <LmHandlerDeviceTimeReq>
}
 8007184:	e7cb      	b.n	800711e <MlmeConfirm+0x2e>
 8007186:	bf00      	nop
 8007188:	200000b8 	.word	0x200000b8
 800718c:	20000568 	.word	0x20000568
 8007190:	20000078 	.word	0x20000078
 8007194:	20000094 	.word	0x20000094
 8007198:	20000090 	.word	0x20000090
 800719c:	20000580 	.word	0x20000580
 80071a0:	200000a4 	.word	0x200000a4

080071a4 <LmHandlerSetSystemMaxRxError>:
{
 80071a4:	b500      	push	{lr}
 80071a6:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80071a8:	2322      	movs	r3, #34	; 0x22
 80071aa:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80071ae:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80071b0:	a801      	add	r0, sp, #4
 80071b2:	f003 f8e3 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 80071b6:	b910      	cbnz	r0, 80071be <LmHandlerSetSystemMaxRxError+0x1a>
}
 80071b8:	b00b      	add	sp, #44	; 0x2c
 80071ba:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80071be:	f04f 30ff 	mov.w	r0, #4294967295
 80071c2:	e7f9      	b.n	80071b8 <LmHandlerSetSystemMaxRxError+0x14>

080071c4 <LmHandlerConfigure>:
{
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	b090      	sub	sp, #64	; 0x40
 80071c8:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80071ca:	4c76      	ldr	r4, [pc, #472]	; (80073a4 <LmHandlerConfigure+0x1e0>)
 80071cc:	2214      	movs	r2, #20
 80071ce:	4620      	mov	r0, r4
 80071d0:	f00a fa84 	bl	80116dc <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 80071d4:	f7fb fb7c 	bl	80028d0 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80071d8:	7822      	ldrb	r2, [r4, #0]
 80071da:	2301      	movs	r3, #1
 80071dc:	4093      	lsls	r3, r2
 80071de:	6841      	ldr	r1, [r0, #4]
 80071e0:	420b      	tst	r3, r1
 80071e2:	d106      	bne.n	80071f2 <LmHandlerConfigure+0x2e>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80071e4:	4b70      	ldr	r3, [pc, #448]	; (80073a8 <LmHandlerConfigure+0x1e4>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	2100      	movs	r1, #0
 80071ea:	4608      	mov	r0, r1
 80071ec:	f00a f960 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 80071f0:	e7fe      	b.n	80071f0 <LmHandlerConfigure+0x2c>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80071f2:	496e      	ldr	r1, [pc, #440]	; (80073ac <LmHandlerConfigure+0x1e8>)
 80071f4:	486e      	ldr	r0, [pc, #440]	; (80073b0 <LmHandlerConfigure+0x1ec>)
 80071f6:	f002 fcfd 	bl	8009bf4 <LoRaMacInitialization>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	f040 80cf 	bne.w	800739e <LmHandlerConfigure+0x1da>
    mibReq.Type = MIB_NVM_CTXS;
 8007200:	2326      	movs	r3, #38	; 0x26
 8007202:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007206:	a807      	add	r0, sp, #28
 8007208:	f003 f8b8 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 800720c:	2800      	cmp	r0, #0
 800720e:	f040 8087 	bne.w	8007320 <LmHandlerConfigure+0x15c>
        CtxRestoreDone = true;
 8007212:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <LmHandlerConfigure+0x1f0>)
 8007214:	2201      	movs	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8007218:	4b66      	ldr	r3, [pc, #408]	; (80073b4 <LmHandlerConfigure+0x1f0>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80a8 	beq.w	8007372 <LmHandlerConfigure+0x1ae>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8007222:	4b65      	ldr	r3, [pc, #404]	; (80073b8 <LmHandlerConfigure+0x1f4>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	b10b      	cbz	r3, 800722e <LmHandlerConfigure+0x6a>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800722a:	2000      	movs	r0, #0
 800722c:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 800722e:	2306      	movs	r3, #6
 8007230:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007234:	a807      	add	r0, sp, #28
 8007236:	f002 ff6b 	bl	800a110 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800723a:	9a08      	ldr	r2, [sp, #32]
 800723c:	4b5f      	ldr	r3, [pc, #380]	; (80073bc <LmHandlerConfigure+0x1f8>)
 800723e:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8007240:	2326      	movs	r3, #38	; 0x26
 8007242:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007246:	a807      	add	r0, sp, #28
 8007248:	f002 ff62 	bl	800a110 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800724c:	9a08      	ldr	r2, [sp, #32]
 800724e:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8007252:	4b54      	ldr	r3, [pc, #336]	; (80073a4 <LmHandlerConfigure+0x1e0>)
 8007254:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8007256:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 800725a:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800725c:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8007260:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8007262:	2502      	movs	r5, #2
 8007264:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007268:	a807      	add	r0, sp, #28
 800726a:	f002 ff51 	bl	800a110 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800726e:	4c53      	ldr	r4, [pc, #332]	; (80073bc <LmHandlerConfigure+0x1f8>)
 8007270:	2208      	movs	r2, #8
 8007272:	9908      	ldr	r1, [sp, #32]
 8007274:	4620      	mov	r0, r4
 8007276:	f007 fe80 	bl	800ef7a <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800727a:	2303      	movs	r3, #3
 800727c:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007280:	a807      	add	r0, sp, #28
 8007282:	f002 ff45 	bl	800a110 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8007286:	2208      	movs	r2, #8
 8007288:	9908      	ldr	r1, [sp, #32]
 800728a:	18a0      	adds	r0, r4, r2
 800728c:	f007 fe75 	bl	800ef7a <memcpy1>
    SecureElementPrintKeys();
 8007290:	f007 fc9e 	bl	800ebd0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8007294:	7de3      	ldrb	r3, [r4, #23]
 8007296:	7da2      	ldrb	r2, [r4, #22]
 8007298:	7d61      	ldrb	r1, [r4, #21]
 800729a:	7d20      	ldrb	r0, [r4, #20]
 800729c:	9003      	str	r0, [sp, #12]
 800729e:	9102      	str	r1, [sp, #8]
 80072a0:	9201      	str	r2, [sp, #4]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <LmHandlerConfigure+0x1fc>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	4611      	mov	r1, r2
 80072aa:	4628      	mov	r0, r5
 80072ac:	f00a f900 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80072b0:	260f      	movs	r6, #15
 80072b2:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80072bc:	a807      	add	r0, sp, #28
 80072be:	f003 f85d 	bl	800a37c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80072c2:	2310      	movs	r3, #16
 80072c4:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80072c8:	2500      	movs	r5, #0
 80072ca:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80072ce:	a807      	add	r0, sp, #28
 80072d0:	f003 f854 	bl	800a37c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80072d4:	2304      	movs	r3, #4
 80072d6:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80072da:	4c32      	ldr	r4, [pc, #200]	; (80073a4 <LmHandlerConfigure+0x1e0>)
 80072dc:	78a3      	ldrb	r3, [r4, #2]
 80072de:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80072e2:	a807      	add	r0, sp, #28
 80072e4:	f003 f84a 	bl	800a37c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80072e8:	2337      	movs	r3, #55	; 0x37
 80072ea:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80072f2:	a807      	add	r0, sp, #28
 80072f4:	f003 f842 	bl	800a37c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80072f8:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80072fc:	a905      	add	r1, sp, #20
 80072fe:	7820      	ldrb	r0, [r4, #0]
 8007300:	f004 fd14 	bl	800bd2c <RegionGetPhyParam>
 8007304:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007306:	1b43      	subs	r3, r0, r5
 8007308:	bf18      	it	ne
 800730a:	2301      	movne	r3, #1
 800730c:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 800730e:	2014      	movs	r0, #20
 8007310:	f7ff ff48 	bl	80071a4 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007314:	79a0      	ldrb	r0, [r4, #6]
 8007316:	f003 fc4f 	bl	800abb8 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800731a:	4628      	mov	r0, r5
}
 800731c:	b010      	add	sp, #64	; 0x40
 800731e:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007320:	2327      	movs	r3, #39	; 0x27
 8007322:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <LmHandlerConfigure+0x1f4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	b14b      	cbz	r3, 8007342 <LmHandlerConfigure+0x17e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800732e:	a807      	add	r0, sp, #28
 8007330:	f002 feee 	bl	800a110 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8007334:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <LmHandlerConfigure+0x1f4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 800733e:	9808      	ldr	r0, [sp, #32]
 8007340:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007342:	2326      	movs	r3, #38	; 0x26
 8007344:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007348:	a807      	add	r0, sp, #28
 800734a:	f003 f817 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 800734e:	2800      	cmp	r0, #0
 8007350:	f47f af62 	bne.w	8007218 <LmHandlerConfigure+0x54>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007354:	2301      	movs	r3, #1
 8007356:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800735a:	a807      	add	r0, sp, #28
 800735c:	f002 fed8 	bl	800a110 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8007360:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f43f af57 	beq.w	8007218 <LmHandlerConfigure+0x54>
                CtxRestoreDone = true;
 800736a:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <LmHandlerConfigure+0x1f0>)
 800736c:	2201      	movs	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e752      	b.n	8007218 <LmHandlerConfigure+0x54>
        mibReq.Type = MIB_NET_ID;
 8007372:	2305      	movs	r3, #5
 8007374:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007378:	2300      	movs	r3, #0
 800737a:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800737c:	a807      	add	r0, sp, #28
 800737e:	f002 fffd 	bl	800a37c <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007382:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <LmHandlerConfigure+0x1f4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4798      	blx	r3
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <LmHandlerConfigure+0x1f8>)
 800738c:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800738e:	2306      	movs	r3, #6
 8007390:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8007394:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007396:	a807      	add	r0, sp, #28
 8007398:	f002 fff0 	bl	800a37c <LoRaMacMibSetRequestConfirm>
 800739c:	e761      	b.n	8007262 <LmHandlerConfigure+0x9e>
        return LORAMAC_HANDLER_ERROR;
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	e7bb      	b.n	800731c <LmHandlerConfigure+0x158>
 80073a4:	20000580 	.word	0x20000580
 80073a8:	0801275c 	.word	0x0801275c
 80073ac:	20000594 	.word	0x20000594
 80073b0:	200005a8 	.word	0x200005a8
 80073b4:	20000562 	.word	0x20000562
 80073b8:	20000568 	.word	0x20000568
 80073bc:	20000078 	.word	0x20000078
 80073c0:	080127a8 	.word	0x080127a8

080073c4 <LmHandlerPackageRegister>:
    switch( id )
 80073c4:	b9e0      	cbnz	r0, 8007400 <LmHandlerPackageRegister+0x3c>
{
 80073c6:	b538      	push	{r3, r4, r5, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80073cc:	f000 fa82 	bl	80078d4 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80073d0:	b198      	cbz	r0, 80073fa <LmHandlerPackageRegister+0x36>
        LmHandlerPackages[id] = package;
 80073d2:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <LmHandlerPackageRegister+0x44>)
 80073d4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <LmHandlerPackageRegister+0x48>)
 80073da:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80073dc:	4a0c      	ldr	r2, [pc, #48]	; (8007410 <LmHandlerPackageRegister+0x4c>)
 80073de:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80073e0:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <LmHandlerPackageRegister+0x50>)
 80073e2:	6302      	str	r2, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80073e4:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <LmHandlerPackageRegister+0x54>)
 80073e6:	6812      	ldr	r2, [r2, #0]
 80073e8:	6992      	ldr	r2, [r2, #24]
 80073ea:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80073ec:	6843      	ldr	r3, [r0, #4]
 80073ee:	22f2      	movs	r2, #242	; 0xf2
 80073f0:	490a      	ldr	r1, [pc, #40]	; (800741c <LmHandlerPackageRegister+0x58>)
 80073f2:	4620      	mov	r0, r4
 80073f4:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80073f6:	2000      	movs	r0, #0
}
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e7fb      	b.n	80073f8 <LmHandlerPackageRegister+0x34>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	2000056c 	.word	0x2000056c
 800740c:	08006d99 	.word	0x08006d99
 8007410:	08006e59 	.word	0x08006e59
 8007414:	08006c7d 	.word	0x08006c7d
 8007418:	20000568 	.word	0x20000568
 800741c:	20000470 	.word	0x20000470

08007420 <LmHandlerInit>:
{
 8007420:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <LmHandlerInit+0x40>)
 8007424:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <LmHandlerInit+0x44>)
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <LmHandlerInit+0x48>)
 800742a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800742c:	4a0f      	ldr	r2, [pc, #60]	; (800746c <LmHandlerInit+0x4c>)
 800742e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007430:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <LmHandlerInit+0x50>)
 8007432:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007434:	4a0f      	ldr	r2, [pc, #60]	; (8007474 <LmHandlerInit+0x54>)
 8007436:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007438:	6802      	ldr	r2, [r0, #0]
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <LmHandlerInit+0x58>)
 800743c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800743e:	6842      	ldr	r2, [r0, #4]
 8007440:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007442:	6882      	ldr	r2, [r0, #8]
 8007444:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007446:	4a0d      	ldr	r2, [pc, #52]	; (800747c <LmHandlerInit+0x5c>)
 8007448:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800744a:	6982      	ldr	r2, [r0, #24]
 800744c:	611a      	str	r2, [r3, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800744e:	490c      	ldr	r1, [pc, #48]	; (8007480 <LmHandlerInit+0x60>)
 8007450:	2000      	movs	r0, #0
 8007452:	f7ff ffb7 	bl	80073c4 <LmHandlerPackageRegister>
 8007456:	b900      	cbnz	r0, 800745a <LmHandlerInit+0x3a>
}
 8007458:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	e7fb      	b.n	8007458 <LmHandlerInit+0x38>
 8007460:	20000568 	.word	0x20000568
 8007464:	200005a8 	.word	0x200005a8
 8007468:	08006c01 	.word	0x08006c01
 800746c:	08007021 	.word	0x08007021
 8007470:	080070f1 	.word	0x080070f1
 8007474:	08006f71 	.word	0x08006f71
 8007478:	20000594 	.word	0x20000594
 800747c:	0800bcd5 	.word	0x0800bcd5
 8007480:	20000098 	.word	0x20000098

08007484 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8007484:	b161      	cbz	r1, 80074a0 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8007486:	b118      	cbz	r0, 8007490 <LmHandlerGetVersion+0xc>
 8007488:	2801      	cmp	r0, #1
 800748a:	d005      	beq.n	8007498 <LmHandlerGetVersion+0x14>
 800748c:	2000      	movs	r0, #0
 800748e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007490:	4a05      	ldr	r2, [pc, #20]	; (80074a8 <LmHandlerGetVersion+0x24>)
 8007492:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007494:	2000      	movs	r0, #0
            break;
 8007496:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007498:	4a04      	ldr	r2, [pc, #16]	; (80074ac <LmHandlerGetVersion+0x28>)
 800749a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800749c:	2000      	movs	r0, #0
            break;
 800749e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	01000300 	.word	0x01000300
 80074ac:	01010003 	.word	0x01010003

080074b0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80074b0:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 80074b2:	f003 fb95 	bl	800abe0 <LoRaMacDeInitialization>
 80074b6:	b900      	cbnz	r0, 80074ba <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80074b8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80074ba:	f06f 0001 	mvn.w	r0, #1
 80074be:	e7fb      	b.n	80074b8 <LmHandlerStop+0x8>

080074c0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80074c0:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80074c2:	f002 fd8d 	bl	8009fe0 <LoRaMacHalt>
 80074c6:	b900      	cbnz	r0, 80074ca <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80074c8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80074ca:	f06f 0001 	mvn.w	r0, #1
 80074ce:	e7fb      	b.n	80074c8 <LmHandlerHalt+0x8>

080074d0 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80074d0:	b510      	push	{r4, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 80074d4:	f7ff fff4 	bl	80074c0 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 80074d8:	4604      	mov	r4, r0
 80074da:	b148      	cbz	r0, 80074f0 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 80074dc:	b92c      	cbnz	r4, 80074ea <LmHandlerNvmDataStore+0x1a>
 80074de:	4b18      	ldr	r3, [pc, #96]	; (8007540 <LmHandlerNvmDataStore+0x70>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	b10b      	cbz	r3, 80074ea <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80074e6:	2001      	movs	r0, #1
 80074e8:	4798      	blx	r3
    }

    return lmhStatus;
}
 80074ea:	4620      	mov	r0, r4
 80074ec:	b00a      	add	sp, #40	; 0x28
 80074ee:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80074f0:	f004 fbf8 	bl	800bce4 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 80074f4:	f110 0f02 	cmn.w	r0, #2
 80074f8:	d012      	beq.n	8007520 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 80074fa:	b9d0      	cbnz	r0, 8007532 <LmHandlerNvmDataStore+0x62>
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <LmHandlerNvmDataStore+0x70>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	b1cb      	cbz	r3, 8007538 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007504:	2326      	movs	r3, #38	; 0x26
 8007506:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800750a:	a801      	add	r0, sp, #4
 800750c:	f002 fe00 	bl	800a110 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <LmHandlerNvmDataStore+0x70>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 800751a:	9802      	ldr	r0, [sp, #8]
 800751c:	4798      	blx	r3
 800751e:	e001      	b.n	8007524 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007520:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007524:	f004 fbee 	bl	800bd04 <NvmDataMgmtStoreEnd>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0d7      	beq.n	80074dc <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800752c:	f04f 34ff 	mov.w	r4, #4294967295
 8007530:	e7db      	b.n	80074ea <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007532:	f04f 34ff 	mov.w	r4, #4294967295
 8007536:	e7f5      	b.n	8007524 <LmHandlerNvmDataStore+0x54>
 8007538:	f04f 34ff 	mov.w	r4, #4294967295
 800753c:	e7f2      	b.n	8007524 <LmHandlerNvmDataStore+0x54>
 800753e:	bf00      	nop
 8007540:	20000568 	.word	0x20000568

08007544 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007544:	4603      	mov	r3, r0
 8007546:	b140      	cbz	r0, 800755a <LmhpComplianceInit+0x16>
 8007548:	b139      	cbz	r1, 800755a <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800754a:	4807      	ldr	r0, [pc, #28]	; (8007568 <LmhpComplianceInit+0x24>)
 800754c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <LmhpComplianceInit+0x28>)
 8007550:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007552:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	4a02      	ldr	r2, [pc, #8]	; (8007568 <LmhpComplianceInit+0x24>)
 800755e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007560:	4a02      	ldr	r2, [pc, #8]	; (800756c <LmhpComplianceInit+0x28>)
 8007562:	7013      	strb	r3, [r2, #0]
    }
}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	200005e4 	.word	0x200005e4
 800756c:	200005b8 	.word	0x200005b8

08007570 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007570:	4b01      	ldr	r3, [pc, #4]	; (8007578 <LmhpComplianceIsInitialized+0x8>)
 8007572:	7818      	ldrb	r0, [r3, #0]
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	200005b8 	.word	0x200005b8

0800757c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <LmhpComplianceIsRunning+0xc>)
 800757e:	7818      	ldrb	r0, [r3, #0]
 8007580:	b100      	cbz	r0, 8007584 <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 8007582:	7858      	ldrb	r0, [r3, #1]
}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	200005b8 	.word	0x200005b8

0800758c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
    if (ComplianceTestState.Initialized == false)
 800758c:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <LmhpComplianceOnMcpsConfirm+0x24>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b12b      	cbz	r3, 800759e <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8007592:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <LmhpComplianceOnMcpsConfirm+0x24>)
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	b113      	cbz	r3, 800759e <LmhpComplianceOnMcpsConfirm+0x12>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8007598:	7803      	ldrb	r3, [r0, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800759a:	2b01      	cmp	r3, #1
 800759c:	d000      	beq.n	80075a0 <LmhpComplianceOnMcpsConfirm+0x14>
        (mcpsConfirm->AckReceived != 0))
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800759e:	4770      	bx	lr
        (mcpsConfirm->AckReceived != 0))
 80075a0:	7903      	ldrb	r3, [r0, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0fb      	beq.n	800759e <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 80075a6:	4a02      	ldr	r2, [pc, #8]	; (80075b0 <LmhpComplianceOnMcpsConfirm+0x24>)
 80075a8:	8993      	ldrh	r3, [r2, #12]
 80075aa:	3301      	adds	r3, #1
 80075ac:	8193      	strh	r3, [r2, #12]
 80075ae:	e7f6      	b.n	800759e <LmhpComplianceOnMcpsConfirm+0x12>
 80075b0:	200005b8 	.word	0x200005b8

080075b4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <LmhpComplianceOnMlmeConfirm+0x24>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b12b      	cbz	r3, 80075c6 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <LmhpComplianceOnMlmeConfirm+0x24>)
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	b113      	cbz	r3, 80075c6 <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80075c0:	7803      	ldrb	r3, [r0, #0]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d000      	beq.n	80075c8 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 80075c6:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <LmhpComplianceOnMlmeConfirm+0x24>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80075ce:	7a02      	ldrb	r2, [r0, #8]
 80075d0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80075d2:	7a42      	ldrb	r2, [r0, #9]
 80075d4:	741a      	strb	r2, [r3, #16]
 80075d6:	e7f6      	b.n	80075c6 <LmhpComplianceOnMlmeConfirm+0x12>
 80075d8:	200005b8 	.word	0x200005b8

080075dc <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 80075dc:	4770      	bx	lr
	...

080075e0 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 80075e0:	4b23      	ldr	r3, [pc, #140]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d03d      	beq.n	8007664 <LmhpComplianceTxProcess+0x84>
    if( ComplianceTestState.IsRunning == false )
 80075e8:	4b21      	ldr	r3, [pc, #132]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d03c      	beq.n	800766a <LmhpComplianceTxProcess+0x8a>
{
 80075f0:	b510      	push	{r4, lr}
 80075f2:	b082      	sub	sp, #8
    if( ComplianceTestState.LinkCheck == true )
 80075f4:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 80075f6:	7b9b      	ldrb	r3, [r3, #14]
 80075f8:	b30b      	cbz	r3, 800763e <LmhpComplianceTxProcess+0x5e>
        ComplianceTestState.LinkCheck = false;
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8007600:	2203      	movs	r2, #3
 8007602:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	2105      	movs	r1, #5
 8007608:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800760a:	7bd9      	ldrb	r1, [r3, #15]
 800760c:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800760e:	7c19      	ldrb	r1, [r3, #16]
 8007610:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 8007612:	2201      	movs	r2, #1
 8007614:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 8007616:	23e0      	movs	r3, #224	; 0xe0
 8007618:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 800761c:	4c14      	ldr	r4, [pc, #80]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 800761e:	79a3      	ldrb	r3, [r4, #6]
    LmHandlerAppData_t appData =
 8007620:	f88d 3001 	strb.w	r3, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8007624:	68a3      	ldr	r3, [r4, #8]
    LmHandlerAppData_t appData =
 8007626:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8007628:	4812      	ldr	r0, [pc, #72]	; (8007674 <LmhpComplianceTxProcess+0x94>)
 800762a:	f00a faef 	bl	8011c0c <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <LmhpComplianceTxProcess+0x98>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	2201      	movs	r2, #1
 8007634:	78e1      	ldrb	r1, [r4, #3]
 8007636:	4668      	mov	r0, sp
 8007638:	4798      	blx	r3
}
 800763a:	b002      	add	sp, #8
 800763c:	bd10      	pop	{r4, pc}
        switch( ComplianceTestState.State )
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 8007640:	789b      	ldrb	r3, [r3, #2]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d005      	beq.n	8007652 <LmhpComplianceTxProcess+0x72>
 8007646:	2b04      	cmp	r3, #4
 8007648:	d1e5      	bne.n	8007616 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.State = 1;
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 800764c:	2201      	movs	r2, #1
 800764e:	709a      	strb	r2, [r3, #2]
            break;
 8007650:	e7e1      	b.n	8007616 <LmhpComplianceTxProcess+0x36>
            ComplianceTestState.DataBufferSize = 2;
 8007652:	4b07      	ldr	r3, [pc, #28]	; (8007670 <LmhpComplianceTxProcess+0x90>)
 8007654:	2202      	movs	r2, #2
 8007656:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8007658:	899a      	ldrh	r2, [r3, #12]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	0a11      	lsrs	r1, r2, #8
 800765e:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8007660:	705a      	strb	r2, [r3, #1]
            break;
 8007662:	e7d8      	b.n	8007616 <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800766a:	2000      	movs	r0, #0
}
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	200005b8 	.word	0x200005b8
 8007674:	200005cc 	.word	0x200005cc
 8007678:	200000d4 	.word	0x200000d4

0800767c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800767c:	4b8e      	ldr	r3, [pc, #568]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8117 	beq.w	80078b4 <LmhpComplianceOnMcpsIndication+0x238>
    if( mcpsIndication->RxData == false )
 8007686:	7b43      	ldrb	r3, [r0, #13]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8113 	beq.w	80078b4 <LmhpComplianceOnMcpsIndication+0x238>
    if ((ComplianceTestState.IsRunning == true) &&
 800768e:	4b8a      	ldr	r3, [pc, #552]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	b12b      	cbz	r3, 80076a0 <LmhpComplianceOnMcpsIndication+0x24>
        (mcpsIndication->AckReceived == 0))
 8007694:	7b82      	ldrb	r2, [r0, #14]
    if ((ComplianceTestState.IsRunning == true) &&
 8007696:	b91a      	cbnz	r2, 80076a0 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 8007698:	4987      	ldr	r1, [pc, #540]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 800769a:	898a      	ldrh	r2, [r1, #12]
 800769c:	3201      	adds	r2, #1
 800769e:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80076a0:	78c2      	ldrb	r2, [r0, #3]
 80076a2:	2ae0      	cmp	r2, #224	; 0xe0
 80076a4:	f040 8106 	bne.w	80078b4 <LmhpComplianceOnMcpsIndication+0x238>
{
 80076a8:	b510      	push	{r4, lr}
 80076aa:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d140      	bne.n	8007732 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076b0:	7b03      	ldrb	r3, [r0, #12]
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d001      	beq.n	80076ba <LmhpComplianceOnMcpsIndication+0x3e>
}
 80076b6:	b00c      	add	sp, #48	; 0x30
 80076b8:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076ba:	6883      	ldr	r3, [r0, #8]
 80076bc:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076be:	2a01      	cmp	r2, #1
 80076c0:	d1f9      	bne.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80076c2:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076c4:	2a01      	cmp	r2, #1
 80076c6:	d1f6      	bne.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80076c8:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80076ca:	2a01      	cmp	r2, #1
 80076cc:	d1f3      	bne.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80076ce:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d1f0      	bne.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 80076d4:	4b78      	ldr	r3, [pc, #480]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 80076d6:	2400      	movs	r4, #0
 80076d8:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 80076da:	22e0      	movs	r2, #224	; 0xe0
 80076dc:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 80076de:	2202      	movs	r2, #2
 80076e0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80076e2:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80076e4:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80076e6:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80076e8:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80076ea:	2201      	movs	r2, #1
 80076ec:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80076ee:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 80076f0:	2304      	movs	r3, #4
 80076f2:	f88d 300c 	strb.w	r3, [sp, #12]
            mibReq.Param.AdrEnable = true;
 80076f6:	f88d 2010 	strb.w	r2, [sp, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80076fa:	a803      	add	r0, sp, #12
 80076fc:	f002 fe3e 	bl	800a37c <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8007700:	4620      	mov	r0, r4
 8007702:	f003 fa59 	bl	800abb8 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8007706:	4b6d      	ldr	r3, [pc, #436]	; (80078bc <LmhpComplianceOnMcpsIndication+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	b103      	cbz	r3, 8007710 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 800770e:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8007710:	4c6b      	ldr	r4, [pc, #428]	; (80078c0 <LmhpComplianceOnMcpsIndication+0x244>)
 8007712:	2200      	movs	r2, #0
 8007714:	9200      	str	r2, [sp, #0]
 8007716:	4b6b      	ldr	r3, [pc, #428]	; (80078c4 <LmhpComplianceOnMcpsIndication+0x248>)
 8007718:	f04f 31ff 	mov.w	r1, #4294967295
 800771c:	4620      	mov	r0, r4
 800771e:	f00a f9bd 	bl	8011a9c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8007722:	f241 3188 	movw	r1, #5000	; 0x1388
 8007726:	4620      	mov	r0, r4
 8007728:	f00a fab6 	bl	8011c98 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800772c:	f7ff ff58 	bl	80075e0 <LmhpComplianceTxProcess>
 8007730:	e7c1      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8007732:	6882      	ldr	r2, [r0, #8]
 8007734:	7813      	ldrb	r3, [r2, #0]
 8007736:	4960      	ldr	r1, [pc, #384]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007738:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 800773a:	2b0a      	cmp	r3, #10
 800773c:	d8bb      	bhi.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
 800773e:	e8df f003 	tbb	[pc, r3]
 8007742:	2206      	.short	0x2206
 8007744:	47312b26 	.word	0x47312b26
 8007748:	a59e6e4e 	.word	0xa59e6e4e
 800774c:	af          	.byte	0xaf
 800774d:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 800774e:	485c      	ldr	r0, [pc, #368]	; (80078c0 <LmhpComplianceOnMcpsIndication+0x244>)
 8007750:	f00a fa02 	bl	8011b58 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8007754:	4b58      	ldr	r3, [pc, #352]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007756:	2200      	movs	r2, #0
 8007758:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800775a:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 800775c:	2304      	movs	r3, #4
 800775e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8007762:	4c56      	ldr	r4, [pc, #344]	; (80078bc <LmhpComplianceOnMcpsIndication+0x240>)
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800776c:	a803      	add	r0, sp, #12
 800776e:	f002 fe05 	bl	800a37c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	7858      	ldrb	r0, [r3, #1]
 8007776:	f003 fa1f 	bl	800abb8 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d099      	beq.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                    LmhpComplianceParams->StartPeripherals( );
 8007782:	4798      	blx	r3
            break;
 8007784:	e797      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = 2;
 8007786:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007788:	2202      	movs	r2, #2
 800778a:	719a      	strb	r2, [r3, #6]
            break;
 800778c:	e793      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = true;
 800778e:	4b4a      	ldr	r3, [pc, #296]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007790:	2201      	movs	r2, #1
 8007792:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8007794:	709a      	strb	r2, [r3, #2]
            break;
 8007796:	e78e      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 8007798:	4b47      	ldr	r3, [pc, #284]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 800779a:	2200      	movs	r2, #0
 800779c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800779e:	2201      	movs	r2, #1
 80077a0:	709a      	strb	r2, [r3, #2]
            break;
 80077a2:	e788      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80077a4:	7b01      	ldrb	r1, [r0, #12]
 80077a6:	4b44      	ldr	r3, [pc, #272]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 80077a8:	7199      	strb	r1, [r3, #6]
            ComplianceTestState.DataBuffer[0] = 4;
 80077aa:	689c      	ldr	r4, [r3, #8]
 80077ac:	2304      	movs	r3, #4
 80077ae:	7023      	strb	r3, [r4, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80077b0:	2301      	movs	r3, #1
 80077b2:	4a41      	ldr	r2, [pc, #260]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 80077b4:	7952      	ldrb	r2, [r2, #5]
 80077b6:	428a      	cmp	r2, r1
 80077b8:	bf28      	it	cs
 80077ba:	460a      	movcs	r2, r1
 80077bc:	429a      	cmp	r2, r3
 80077be:	f67f af7a 	bls.w	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80077c2:	6882      	ldr	r2, [r0, #8]
 80077c4:	5cd2      	ldrb	r2, [r2, r3]
 80077c6:	3201      	adds	r2, #1
 80077c8:	54e2      	strb	r2, [r4, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	e7f0      	b.n	80077b2 <LmhpComplianceOnMcpsIndication+0x136>
                mlmeReq.Type = MLME_LINK_CHECK;
 80077d0:	2304      	movs	r3, #4
 80077d2:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 80077d6:	a803      	add	r0, sp, #12
 80077d8:	f003 f85c 	bl	800a894 <LoRaMacMlmeRequest>
            break;
 80077dc:	e76b      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                TimerStop(&ComplianceTxNextPacketTimer);
 80077de:	4838      	ldr	r0, [pc, #224]	; (80078c0 <LmhpComplianceOnMcpsIndication+0x244>)
 80077e0:	f00a f9ba 	bl	8011b58 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80077e4:	4b34      	ldr	r3, [pc, #208]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 80077ea:	705a      	strb	r2, [r3, #1]
                mibReq.Type = MIB_ADR;
 80077ec:	2304      	movs	r3, #4
 80077ee:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80077f2:	4c32      	ldr	r4, [pc, #200]	; (80078bc <LmhpComplianceOnMcpsIndication+0x240>)
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80077fc:	a803      	add	r0, sp, #12
 80077fe:	f002 fdbd 	bl	800a37c <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	7858      	ldrb	r0, [r3, #1]
 8007806:	f003 f9d7 	bl	800abb8 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	b103      	cbz	r3, 8007812 <LmhpComplianceOnMcpsIndication+0x196>
                    LmhpComplianceParams->StartPeripherals( );
 8007810:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007812:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <LmhpComplianceOnMcpsIndication+0x24c>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	2101      	movs	r1, #1
 8007818:	2002      	movs	r0, #2
 800781a:	4798      	blx	r3
            break;
 800781c:	e74b      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                if( mcpsIndication->BufferSize == 3 )
 800781e:	7b03      	ldrb	r3, [r0, #12]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d008      	beq.n	8007836 <LmhpComplianceOnMcpsIndication+0x1ba>
                else if( mcpsIndication->BufferSize == 7 )
 8007824:	2b07      	cmp	r3, #7
 8007826:	d010      	beq.n	800784a <LmhpComplianceOnMcpsIndication+0x1ce>
                LoRaMacMlmeRequest( &mlmeReq );
 8007828:	a803      	add	r0, sp, #12
 800782a:	f003 f833 	bl	800a894 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800782e:	4b22      	ldr	r3, [pc, #136]	; (80078b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007830:	2201      	movs	r2, #1
 8007832:	709a      	strb	r2, [r3, #2]
            break;
 8007834:	e73f      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_TXCW;
 8007836:	2305      	movs	r3, #5
 8007838:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800783c:	7851      	ldrb	r1, [r2, #1]
 800783e:	7893      	ldrb	r3, [r2, #2]
 8007840:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007844:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007848:	e7ee      	b.n	8007828 <LmhpComplianceOnMcpsIndication+0x1ac>
                    mlmeReq.Type = MLME_TXCW_1;
 800784a:	2306      	movs	r3, #6
 800784c:	f88d 300c 	strb.w	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007850:	7851      	ldrb	r1, [r2, #1]
 8007852:	7893      	ldrb	r3, [r2, #2]
 8007854:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007858:	f8ad 3010 	strh.w	r3, [sp, #16]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800785c:	78d1      	ldrb	r1, [r2, #3]
 800785e:	7913      	ldrb	r3, [r2, #4]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007866:	7952      	ldrb	r2, [r2, #5]
 8007868:	4313      	orrs	r3, r2
 800786a:	2264      	movs	r2, #100	; 0x64
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	9305      	str	r3, [sp, #20]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007872:	6883      	ldr	r3, [r0, #8]
 8007874:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007878:	f88d 3018 	strb.w	r3, [sp, #24]
 800787c:	e7d4      	b.n	8007828 <LmhpComplianceOnMcpsIndication+0x1ac>
                mlmeReq.Type = MLME_DEVICE_TIME;
 800787e:	230a      	movs	r3, #10
 8007880:	f88d 300c 	strb.w	r3, [sp, #12]
                LoRaMacMlmeRequest( &mlmeReq );
 8007884:	a803      	add	r0, sp, #12
 8007886:	f003 f805 	bl	800a894 <LoRaMacMlmeRequest>
            break;
 800788a:	e714      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                mibReq.Type = MIB_DEVICE_CLASS;
 800788c:	2300      	movs	r3, #0
 800788e:	f88d 300c 	strb.w	r3, [sp, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8007892:	7853      	ldrb	r3, [r2, #1]
 8007894:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007898:	a803      	add	r0, sp, #12
 800789a:	f002 fd6f 	bl	800a37c <LoRaMacMibSetRequestConfirm>
            break;
 800789e:	e70a      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 80078a0:	230d      	movs	r3, #13
 80078a2:	f88d 300c 	strb.w	r3, [sp, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80078a6:	7853      	ldrb	r3, [r2, #1]
 80078a8:	f88d 3010 	strb.w	r3, [sp, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 80078ac:	a803      	add	r0, sp, #12
 80078ae:	f002 fff1 	bl	800a894 <LoRaMacMlmeRequest>
            break;
 80078b2:	e700      	b.n	80076b6 <LmhpComplianceOnMcpsIndication+0x3a>
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200005b8 	.word	0x200005b8
 80078bc:	200005e4 	.word	0x200005e4
 80078c0:	200005cc 	.word	0x200005cc
 80078c4:	080078cd 	.word	0x080078cd
 80078c8:	200000d4 	.word	0x200000d4

080078cc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 80078cc:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 80078ce:	f7ff fe87 	bl	80075e0 <LmhpComplianceTxProcess>
}
 80078d2:	bd08      	pop	{r3, pc}

080078d4 <LmhpCompliancePackageFactory>:
}
 80078d4:	4800      	ldr	r0, [pc, #0]	; (80078d8 <LmhpCompliancePackageFactory+0x4>)
 80078d6:	4770      	bx	lr
 80078d8:	200000d4 	.word	0x200000d4

080078dc <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 80078dc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80078de:	4a06      	ldr	r2, [pc, #24]	; (80078f8 <OnRadioRxError+0x1c>)
 80078e0:	7813      	ldrb	r3, [r2, #0]
 80078e2:	f043 0302 	orr.w	r3, r3, #2
 80078e6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <OnRadioRxError+0x20>)
 80078ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80078ee:	b113      	cbz	r3, 80078f6 <OnRadioRxError+0x1a>
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	b103      	cbz	r3, 80078f6 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80078f4:	4798      	blx	r3
    }
}
 80078f6:	bd08      	pop	{r3, pc}
 80078f8:	200005e8 	.word	0x200005e8
 80078fc:	200005ec 	.word	0x200005ec

08007900 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <UpdateRxSlotIdleState+0x20>)
 8007902:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007906:	2b02      	cmp	r3, #2
 8007908:	d004      	beq.n	8007914 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <UpdateRxSlotIdleState+0x24>)
 800790c:	2206      	movs	r2, #6
 800790e:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8007912:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007914:	4b03      	ldr	r3, [pc, #12]	; (8007924 <UpdateRxSlotIdleState+0x24>)
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
    }
}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20008000 	.word	0x20008000
 8007924:	200005ec 	.word	0x200005ec

08007928 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <LoRaMacEnableRequests+0x8>)
 800792a:	f883 0486 	strb.w	r0, [r3, #1158]	; 0x486
}
 800792e:	4770      	bx	lr
 8007930:	200005ec 	.word	0x200005ec

08007934 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007934:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <LoRaMacHandleIndicationEvents+0x58>)
 8007938:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800793c:	f013 0f08 	tst.w	r3, #8
 8007940:	d00e      	beq.n	8007960 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007942:	4812      	ldr	r0, [pc, #72]	; (800798c <LoRaMacHandleIndicationEvents+0x58>)
 8007944:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 8007948:	f36f 03c3 	bfc	r3, #3, #1
 800794c:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007950:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 800795a:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 800795e:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <LoRaMacHandleIndicationEvents+0x58>)
 8007962:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8007966:	f013 0f02 	tst.w	r3, #2
 800796a:	d00e      	beq.n	800798a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800796c:	4807      	ldr	r0, [pc, #28]	; (800798c <LoRaMacHandleIndicationEvents+0x58>)
 800796e:	f890 3485 	ldrb.w	r3, [r0, #1157]	; 0x485
 8007972:	f36f 0341 	bfc	r3, #1, #1
 8007976:	f880 3485 	strb.w	r3, [r0, #1157]	; 0x485
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800797a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f500 6190 	add.w	r1, r0, #1152	; 0x480
 8007984:	f200 401c 	addw	r0, r0, #1052	; 0x41c
 8007988:	4798      	blx	r3
    }
}
 800798a:	bd08      	pop	{r3, pc}
 800798c:	200005ec 	.word	0x200005ec

08007990 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <LoRaMacCheckForRxAbort+0x20>)
 8007992:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007996:	f013 0f80 	tst.w	r3, #128	; 0x80
 800799a:	d008      	beq.n	80079ae <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800799c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80079a0:	4a03      	ldr	r2, [pc, #12]	; (80079b0 <LoRaMacCheckForRxAbort+0x20>)
 80079a2:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80079a6:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 80079aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80079ae:	4770      	bx	lr
 80079b0:	200005ec 	.word	0x200005ec

080079b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <CalculateBackOff+0x1c>)
 80079b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b8:	b94b      	cbnz	r3, 80079ce <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80079ba:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <CalculateBackOff+0x1c>)
 80079bc:	f8b2 310a 	ldrh.w	r3, [r2, #266]	; 0x10a
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <CalculateBackOff+0x20>)
 80079c2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
 80079c6:	3b01      	subs	r3, #1
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80079ce:	4770      	bx	lr
 80079d0:	20008000 	.word	0x20008000
 80079d4:	200005ec 	.word	0x200005ec

080079d8 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80079d8:	b508      	push	{r3, lr}
 80079da:	4684      	mov	ip, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <SetTxContinuousWave1+0x24>)
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	4662      	mov	r2, ip
 80079e6:	b249      	sxtb	r1, r1
 80079e8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80079ea:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <SetTxContinuousWave1+0x28>)
 80079ec:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80079f8:	2000      	movs	r0, #0
 80079fa:	bd08      	pop	{r3, pc}
 80079fc:	08012ec4 	.word	0x08012ec4
 8007a00:	200005ec 	.word	0x200005ec

08007a04 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007a04:	4602      	mov	r2, r0
 8007a06:	b1f8      	cbz	r0, 8007a48 <DetermineFrameType+0x44>
 8007a08:	b301      	cbz	r1, 8007a4c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007a0a:	7b03      	ldrb	r3, [r0, #12]
 8007a0c:	f013 030f 	ands.w	r3, r3, #15
 8007a10:	d005      	beq.n	8007a1e <DetermineFrameType+0x1a>
 8007a12:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007a16:	b110      	cbz	r0, 8007a1e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007a18:	2000      	movs	r0, #0
 8007a1a:	7008      	strb	r0, [r1, #0]
 8007a1c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007a1e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007a22:	b910      	cbnz	r0, 8007a2a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007a24:	2301      	movs	r3, #1
 8007a26:	700b      	strb	r3, [r1, #0]
 8007a28:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007a2a:	b92b      	cbnz	r3, 8007a38 <DetermineFrameType+0x34>
 8007a2c:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007a30:	b910      	cbnz	r0, 8007a38 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007a32:	2302      	movs	r3, #2
 8007a34:	700b      	strb	r3, [r1, #0]
 8007a36:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007a38:	b953      	cbnz	r3, 8007a50 <DetermineFrameType+0x4c>
 8007a3a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007a3e:	b14a      	cbz	r2, 8007a54 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007a40:	2203      	movs	r2, #3
 8007a42:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007a44:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007a46:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007a48:	2003      	movs	r0, #3
 8007a4a:	4770      	bx	lr
 8007a4c:	2003      	movs	r0, #3
 8007a4e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007a50:	2018      	movs	r0, #24
 8007a52:	4770      	bx	lr
 8007a54:	2018      	movs	r0, #24
}
 8007a56:	4770      	bx	lr

08007a58 <CheckRetransUnconfirmedUplink>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <CheckRetransUnconfirmedUplink+0x40>)
 8007a5a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <CheckRetransUnconfirmedUplink+0x44>)
 8007a60:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d20f      	bcs.n	8007a88 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <CheckRetransUnconfirmedUplink+0x40>)
 8007a6a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8007a6e:	f013 0f02 	tst.w	r3, #2
 8007a72:	d00b      	beq.n	8007a8c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8007a74:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <CheckRetransUnconfirmedUplink+0x44>)
 8007a76:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007a7a:	b14b      	cbz	r3, 8007a90 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <CheckRetransUnconfirmedUplink+0x40>)
 8007a7e:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8007a82:	b13b      	cbz	r3, 8007a94 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 8007a84:	2000      	movs	r0, #0
 8007a86:	4770      	bx	lr
        return true;
 8007a88:	2001      	movs	r0, #1
 8007a8a:	4770      	bx	lr
    return false;
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4770      	bx	lr
            return true;
 8007a90:	2001      	movs	r0, #1
 8007a92:	4770      	bx	lr
                return true;
 8007a94:	2001      	movs	r0, #1
}
 8007a96:	4770      	bx	lr
 8007a98:	200005ec 	.word	0x200005ec
 8007a9c:	20008000 	.word	0x20008000

08007aa0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <CheckRetransConfirmedUplink+0x2c>)
 8007aa2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8007aa6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d209      	bcs.n	8007ac2 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <CheckRetransConfirmedUplink+0x2c>)
 8007ab0:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8007ab4:	f013 0f02 	tst.w	r3, #2
 8007ab8:	d005      	beq.n	8007ac6 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007aba:	4b04      	ldr	r3, [pc, #16]	; (8007acc <CheckRetransConfirmedUplink+0x2c>)
 8007abc:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 8007ac0:	4770      	bx	lr
        return true;
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 8007ac6:	2000      	movs	r0, #0
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	200005ec 	.word	0x200005ec

08007ad0 <StopRetransmission>:
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <StopRetransmission+0x48>)
 8007ad2:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8007ad6:	f013 0f02 	tst.w	r3, #2
 8007ada:	d004      	beq.n	8007ae6 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8007adc:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <StopRetransmission+0x48>)
 8007ade:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d907      	bls.n	8007af6 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <StopRetransmission+0x4c>)
 8007ae8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8007aec:	b11b      	cbz	r3, 8007af6 <StopRetransmission+0x26>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8007aee:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <StopRetransmission+0x4c>)
 8007af0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007af2:	3301      	adds	r3, #1
 8007af4:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <StopRetransmission+0x48>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8007afe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8007b02:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007b06:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007b0a:	f022 0202 	bic.w	r2, r2, #2
 8007b0e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8007b12:	2001      	movs	r0, #1
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	200005ec 	.word	0x200005ec
 8007b1c:	20008000 	.word	0x20008000

08007b20 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8007b20:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007b22:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <CallNvmDataChangeCallback+0x14>)
 8007b24:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007b28:	b113      	cbz	r3, 8007b30 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8007b2a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8007b2c:	b103      	cbz	r3, 8007b30 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8007b2e:	4798      	blx	r3
    }
}
 8007b30:	bd08      	pop	{r3, pc}
 8007b32:	bf00      	nop
 8007b34:	200005ec 	.word	0x200005ec

08007b38 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <IsRequestPending+0x14>)
 8007b3a:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
 8007b3e:	f010 0005 	ands.w	r0, r0, #5
 8007b42:	d100      	bne.n	8007b46 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8007b44:	4770      	bx	lr
        return 1;
 8007b46:	2001      	movs	r0, #1
 8007b48:	e7fc      	b.n	8007b44 <IsRequestPending+0xc>
 8007b4a:	bf00      	nop
 8007b4c:	200005ec 	.word	0x200005ec

08007b50 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <AckTimeoutRetriesProcess+0x50>)
 8007b52:	f892 3412 	ldrb.w	r3, [r2, #1042]	; 0x412
 8007b56:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d207      	bcs.n	8007b6e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 8007b5e:	3301      	adds	r3, #1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	4a0f      	ldr	r2, [pc, #60]	; (8007ba0 <AckTimeoutRetriesProcess+0x50>)
 8007b64:	f882 3412 	strb.w	r3, [r2, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8007b68:	f013 0f01 	tst.w	r3, #1
 8007b6c:	d100      	bne.n	8007b70 <AckTimeoutRetriesProcess+0x20>
 8007b6e:	4770      	bx	lr
{
 8007b70:	b510      	push	{r4, lr}
 8007b72:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8007b74:	2322      	movs	r3, #34	; 0x22
 8007b76:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007b7a:	4c0a      	ldr	r4, [pc, #40]	; (8007ba4 <AckTimeoutRetriesProcess+0x54>)
 8007b7c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8007b80:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007b84:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 8007b88:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b8c:	a902      	add	r1, sp, #8
 8007b8e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007b92:	f004 f8cb 	bl	800bd2c <RegionGetPhyParam>
 8007b96:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8007b98:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 8007b9c:	b004      	add	sp, #16
 8007b9e:	bd10      	pop	{r4, pc}
 8007ba0:	200005ec 	.word	0x200005ec
 8007ba4:	20008000 	.word	0x20008000

08007ba8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8007ba8:	b500      	push	{lr}
 8007baa:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007bae:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007bb2:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8007bb6:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007bba:	220d      	movs	r2, #13
 8007bbc:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8007bc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc4:	b113      	cbz	r3, 8007bcc <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007bc6:	230e      	movs	r3, #14
 8007bc8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007bcc:	a902      	add	r1, sp, #8
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8007bd0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007bd4:	f004 f8aa 	bl	800bd2c <RegionGetPhyParam>
 8007bd8:	9001      	str	r0, [sp, #4]
}
 8007bda:	b2c0      	uxtb	r0, r0
 8007bdc:	b005      	add	sp, #20
 8007bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8007be2:	bf00      	nop
 8007be4:	20008000 	.word	0x20008000

08007be8 <ValidatePayloadLength>:
{
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4605      	mov	r5, r0
 8007bec:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f7ff ffda 	bl	8007ba8 <GetMaxAppPayloadWithoutFOptsLength>
 8007bf4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8007bf6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d303      	bcc.n	8007c04 <ValidatePayloadLength+0x1c>
 8007bfc:	2aff      	cmp	r2, #255	; 0xff
 8007bfe:	d903      	bls.n	8007c08 <ValidatePayloadLength+0x20>
    return false;
 8007c00:	2000      	movs	r0, #0
 8007c02:	e000      	b.n	8007c06 <ValidatePayloadLength+0x1e>
 8007c04:	2000      	movs	r0, #0
}
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e7fc      	b.n	8007c06 <ValidatePayloadLength+0x1e>

08007c0c <ProcessRadioTxDone>:
{
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007c10:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <ProcessRadioTxDone+0xec>)
 8007c12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d002      	beq.n	8007c20 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8007c1a:	4b38      	ldr	r3, [pc, #224]	; (8007cfc <ProcessRadioTxDone+0xf0>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8007c20:	4c37      	ldr	r4, [pc, #220]	; (8007d00 <ProcessRadioTxDone+0xf4>)
 8007c22:	f504 7560 	add.w	r5, r4, #896	; 0x380
 8007c26:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f00a f834 	bl	8011c98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8007c30:	4628      	mov	r0, r5
 8007c32:	f009 ffeb 	bl	8011c0c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8007c36:	f504 7566 	add.w	r5, r4, #920	; 0x398
 8007c3a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f00a f82a 	bl	8011c98 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8007c44:	4628      	mov	r0, r5
 8007c46:	f009 ffe1 	bl	8011c0c <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8007c4a:	4b2b      	ldr	r3, [pc, #172]	; (8007cf8 <ProcessRadioTxDone+0xec>)
 8007c4c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d002      	beq.n	8007c5a <ProcessRadioTxDone+0x4e>
 8007c54:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007c58:	b1ab      	cbz	r3, 8007c86 <ProcessRadioTxDone+0x7a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8007c5a:	2316      	movs	r3, #22
 8007c5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007c60:	a90a      	add	r1, sp, #40	; 0x28
 8007c62:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <ProcessRadioTxDone+0xec>)
 8007c64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007c68:	f004 f860 	bl	800bd2c <RegionGetPhyParam>
 8007c6c:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8007c6e:	4c24      	ldr	r4, [pc, #144]	; (8007d00 <ProcessRadioTxDone+0xf4>)
 8007c70:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8007c74:	f504 747e 	add.w	r4, r4, #1016	; 0x3f8
 8007c78:	4401      	add	r1, r0
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f00a f80c 	bl	8011c98 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8007c80:	4620      	mov	r0, r4
 8007c82:	f009 ffc3 	bl	8011c0c <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8007c86:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <ProcessRadioTxDone+0xf8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4c1b      	ldr	r4, [pc, #108]	; (8007cf8 <ProcessRadioTxDone+0xec>)
 8007c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8007c8e:	4f1c      	ldr	r7, [pc, #112]	; (8007d00 <ProcessRadioTxDone+0xf4>)
 8007c90:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8007c94:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8007c98:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007c9a:	ae0c      	add	r6, sp, #48	; 0x30
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f009 fe8f 	bl	80119c0 <SysTimeGetMcuTime>
 8007ca2:	ad02      	add	r5, sp, #8
 8007ca4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8007cae:	e896 0006 	ldmia.w	r6, {r1, r2}
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f009 fe21 	bl	80118fa <SysTimeSub>
 8007cb8:	ab07      	add	r3, sp, #28
 8007cba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007cbe:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8007cc2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8007cc6:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007cce:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8007cd2:	b90b      	cbnz	r3, 8007cd8 <ProcessRadioTxDone+0xcc>
        txDone.Joined  = false;
 8007cd4:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8007cd8:	a904      	add	r1, sp, #16
 8007cda:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <ProcessRadioTxDone+0xec>)
 8007cdc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8007ce0:	f004 f83c 	bl	800bd5c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <ProcessRadioTxDone+0xf4>)
 8007ce6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007cea:	b91b      	cbnz	r3, 8007cf4 <ProcessRadioTxDone+0xe8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8007cec:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <ProcessRadioTxDone+0xf4>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8007cf4:	b00f      	add	sp, #60	; 0x3c
 8007cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf8:	20008000 	.word	0x20008000
 8007cfc:	08012ec4 	.word	0x08012ec4
 8007d00:	200005ec 	.word	0x200005ec
 8007d04:	20000b08 	.word	0x20000b08

08007d08 <OnAckTimeoutTimerEvent>:
{
 8007d08:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007d0a:	4c10      	ldr	r4, [pc, #64]	; (8007d4c <OnAckTimeoutTimerEvent+0x44>)
 8007d0c:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 8007d10:	f009 ff22 	bl	8011b58 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007d14:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 8007d18:	b113      	cbz	r3, 8007d20 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <OnAckTimeoutTimerEvent+0x48>)
 8007d22:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d007      	beq.n	8007d3a <OnAckTimeoutTimerEvent+0x32>
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007d2a:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <OnAckTimeoutTimerEvent+0x44>)
 8007d2c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007d30:	b113      	cbz	r3, 8007d38 <OnAckTimeoutTimerEvent+0x30>
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	b103      	cbz	r3, 8007d38 <OnAckTimeoutTimerEvent+0x30>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007d36:	4798      	blx	r3
}
 8007d38:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007d3a:	4a04      	ldr	r2, [pc, #16]	; (8007d4c <OnAckTimeoutTimerEvent+0x44>)
 8007d3c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8007d40:	f043 0320 	orr.w	r3, r3, #32
 8007d44:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8007d48:	e7ef      	b.n	8007d2a <OnAckTimeoutTimerEvent+0x22>
 8007d4a:	bf00      	nop
 8007d4c:	200005ec 	.word	0x200005ec
 8007d50:	20008000 	.word	0x20008000

08007d54 <PrepareRxDoneAbort>:
{
 8007d54:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <PrepareRxDoneAbort+0x3c>)
 8007d58:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8007d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d60:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8007d64:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8007d68:	b973      	cbnz	r3, 8007d88 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <PrepareRxDoneAbort+0x3c>)
 8007d6c:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8007d70:	f042 0202 	orr.w	r2, r2, #2
 8007d74:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	f042 0220 	orr.w	r2, r2, #32
 8007d7e:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 8007d82:	f7ff fdbd 	bl	8007900 <UpdateRxSlotIdleState>
}
 8007d86:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f7ff ffbd 	bl	8007d08 <OnAckTimeoutTimerEvent>
 8007d8e:	e7ec      	b.n	8007d6a <PrepareRxDoneAbort+0x16>
 8007d90:	200005ec 	.word	0x200005ec

08007d94 <LoRaMacCheckForBeaconAcquisition>:
{
 8007d94:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007d96:	200c      	movs	r0, #12
 8007d98:	f003 fa42 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 8007d9c:	b188      	cbz	r0, 8007dc2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <LoRaMacCheckForBeaconAcquisition+0x38>)
 8007da0:	f893 0485 	ldrb.w	r0, [r3, #1157]	; 0x485
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8007da4:	f010 0f01 	tst.w	r0, #1
 8007da8:	d10d      	bne.n	8007dc6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8007daa:	f010 0004 	ands.w	r0, r0, #4
 8007dae:	d009      	beq.n	8007dc4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007db0:	461a      	mov	r2, r3
 8007db2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007db6:	f023 0302 	bic.w	r3, r3, #2
 8007dba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e000      	b.n	8007dc4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8007dc2:	2000      	movs	r0, #0
}
 8007dc4:	bd08      	pop	{r3, pc}
    return 0x00;
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7fc      	b.n	8007dc4 <LoRaMacCheckForBeaconAcquisition+0x30>
 8007dca:	bf00      	nop
 8007dcc:	200005ec 	.word	0x200005ec

08007dd0 <GetFCntDown>:
{
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	9c05      	ldr	r4, [sp, #20]
 8007dd4:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8007dd6:	b302      	cbz	r2, 8007e1a <GetFCntDown+0x4a>
 8007dd8:	4694      	mov	ip, r2
 8007dda:	b304      	cbz	r4, 8007e1e <GetFCntDown+0x4e>
 8007ddc:	b30d      	cbz	r5, 8007e22 <GetFCntDown+0x52>
    switch( addrID )
 8007dde:	b188      	cbz	r0, 8007e04 <GetFCntDown+0x34>
 8007de0:	2801      	cmp	r0, #1
 8007de2:	d120      	bne.n	8007e26 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 8007de4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007de8:	2a01      	cmp	r2, #1
 8007dea:	d002      	beq.n	8007df2 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8007dec:	2303      	movs	r3, #3
 8007dee:	7023      	strb	r3, [r4, #0]
 8007df0:	e00a      	b.n	8007e08 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8007df2:	b121      	cbz	r1, 8007dfe <GetFCntDown+0x2e>
 8007df4:	2903      	cmp	r1, #3
 8007df6:	d002      	beq.n	8007dfe <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	7023      	strb	r3, [r4, #0]
 8007dfc:	e004      	b.n	8007e08 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	7023      	strb	r3, [r4, #0]
 8007e02:	e001      	b.n	8007e08 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8007e04:	2304      	movs	r3, #4
 8007e06:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8007e08:	462b      	mov	r3, r5
 8007e0a:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 8007e0e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007e12:	7820      	ldrb	r0, [r4, #0]
 8007e14:	f003 fc26 	bl	800b664 <LoRaMacCryptoGetFCntDown>
}
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8007e1a:	200a      	movs	r0, #10
 8007e1c:	e7fc      	b.n	8007e18 <GetFCntDown+0x48>
 8007e1e:	200a      	movs	r0, #10
 8007e20:	e7fa      	b.n	8007e18 <GetFCntDown+0x48>
 8007e22:	200a      	movs	r0, #10
 8007e24:	e7f8      	b.n	8007e18 <GetFCntDown+0x48>
    switch( addrID )
 8007e26:	2005      	movs	r0, #5
 8007e28:	e7f6      	b.n	8007e18 <GetFCntDown+0x48>

08007e2a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8007e2a:	2801      	cmp	r0, #1
 8007e2c:	d900      	bls.n	8007e30 <RemoveMacCommands+0x6>
 8007e2e:	4770      	bx	lr
{
 8007e30:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8007e32:	2a01      	cmp	r2, #1
 8007e34:	d105      	bne.n	8007e42 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8007e36:	f011 0f20 	tst.w	r1, #32
 8007e3a:	d004      	beq.n	8007e46 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8007e3c:	f003 f88c 	bl	800af58 <LoRaMacCommandsRemoveStickyAnsCmds>
 8007e40:	e001      	b.n	8007e46 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8007e42:	f003 f889 	bl	800af58 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8007e46:	bd08      	pop	{r3, pc}

08007e48 <ProcessMacCommands>:
{
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	b08f      	sub	sp, #60	; 0x3c
 8007e4e:	4605      	mov	r5, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	4616      	mov	r6, r2
 8007e54:	4698      	mov	r8, r3
    uint8_t status = 0;
 8007e56:	2700      	movs	r7, #0
 8007e58:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007e5c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 8007e60:	42b4      	cmp	r4, r6
 8007e62:	f080 82c4 	bcs.w	80083ee <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8007e66:	5d28      	ldrb	r0, [r5, r4]
 8007e68:	f003 f8de 	bl	800b028 <LoRaMacCommandsGetCmdSize>
 8007e6c:	4420      	add	r0, r4
 8007e6e:	42b0      	cmp	r0, r6
 8007e70:	f300 82bd 	bgt.w	80083ee <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 8007e74:	f104 0901 	add.w	r9, r4, #1
 8007e78:	fa5f f989 	uxtb.w	r9, r9
 8007e7c:	5d29      	ldrb	r1, [r5, r4]
 8007e7e:	3902      	subs	r1, #2
 8007e80:	2911      	cmp	r1, #17
 8007e82:	f200 82b4 	bhi.w	80083ee <ProcessMacCommands+0x5a6>
 8007e86:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e8a:	0012      	.short	0x0012
 8007e8c:	00920029 	.word	0x00920029
 8007e90:	00ee00a6 	.word	0x00ee00a6
 8007e94:	01400106 	.word	0x01400106
 8007e98:	01ad0157 	.word	0x01ad0157
 8007e9c:	02b202b2 	.word	0x02b202b2
 8007ea0:	02b201de 	.word	0x02b201de
 8007ea4:	023e02b2 	.word	0x023e02b2
 8007ea8:	02750255 	.word	0x02750255
 8007eac:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007eae:	2004      	movs	r0, #4
 8007eb0:	f003 f9b6 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 8007eb4:	b908      	cbnz	r0, 8007eba <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 8007eb6:	464c      	mov	r4, r9
 8007eb8:	e7d2      	b.n	8007e60 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007eba:	2104      	movs	r1, #4
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f003 f963 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007ec2:	1ca3      	adds	r3, r4, #2
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f815 1009 	ldrb.w	r1, [r5, r9]
 8007eca:	4ac2      	ldr	r2, [pc, #776]	; (80081d4 <ProcessMacCommands+0x38c>)
 8007ecc:	f882 1454 	strb.w	r1, [r2, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007ed0:	3403      	adds	r4, #3
 8007ed2:	b2e4      	uxtb	r4, r4
 8007ed4:	5ceb      	ldrb	r3, [r5, r3]
 8007ed6:	f882 3455 	strb.w	r3, [r2, #1109]	; 0x455
 8007eda:	e7c1      	b.n	8007e60 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007ee2:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8007ee6:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8007eea:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8007eee:	b10f      	cbz	r7, 8007ef4 <ProcessMacCommands+0xac>
                break;
 8007ef0:	464c      	mov	r4, r9
 8007ef2:	e7b5      	b.n	8007e60 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007ef4:	f109 33ff 	add.w	r3, r9, #4294967295
 8007ef8:	442b      	add	r3, r5
 8007efa:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007efc:	eba6 0309 	sub.w	r3, r6, r9
 8007f00:	3301      	adds	r3, #1
 8007f02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007f06:	48b4      	ldr	r0, [pc, #720]	; (80081d8 <ProcessMacCommands+0x390>)
 8007f08:	f890 3106 	ldrb.w	r3, [r0, #262]	; 0x106
 8007f0c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007f10:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8007f14:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f18:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 8007f1c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007f20:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 8007f24:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007f28:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8007f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8007f30:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007f34:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8007f36:	ab05      	add	r3, sp, #20
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	ab03      	add	r3, sp, #12
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	f10d 030b 	add.w	r3, sp, #11
 8007f42:	f10d 020a 	add.w	r2, sp, #10
 8007f46:	a907      	add	r1, sp, #28
 8007f48:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8007f4c:	f003 ff86 	bl	800be5c <RegionLinkAdrReq>
 8007f50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 8007f54:	f000 0007 	and.w	r0, r0, #7
 8007f58:	2807      	cmp	r0, #7
 8007f5a:	d001      	beq.n	8007f60 <ProcessMacCommands+0x118>
{
 8007f5c:	2400      	movs	r4, #0
 8007f5e:	e015      	b.n	8007f8c <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8007f60:	4b9d      	ldr	r3, [pc, #628]	; (80081d8 <ProcessMacCommands+0x390>)
 8007f62:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8007f6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8007f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8007f72:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8007f76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8007f7a:	e7ef      	b.n	8007f5c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8007f82:	2003      	movs	r0, #3
 8007f84:	f002 ff88 	bl	800ae98 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007f88:	3401      	adds	r4, #1
 8007f8a:	b2e4      	uxtb	r4, r4
 8007f8c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8007f90:	4b92      	ldr	r3, [pc, #584]	; (80081dc <ProcessMacCommands+0x394>)
 8007f92:	fba3 1302 	umull	r1, r3, r3, r2
 8007f96:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 8007f9a:	d3ef      	bcc.n	8007f7c <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 8007f9c:	4491      	add	r9, r2
 8007f9e:	fa5f f989 	uxtb.w	r9, r9
 8007fa2:	f109 39ff 	add.w	r9, r9, #4294967295
 8007fa6:	fa5f f989 	uxtb.w	r9, r9
                    adrBlockFound = true;
 8007faa:	2701      	movs	r7, #1
 8007fac:	e7a0      	b.n	8007ef0 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8007fae:	3402      	adds	r4, #2
 8007fb0:	b2e4      	uxtb	r4, r4
 8007fb2:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	4987      	ldr	r1, [pc, #540]	; (80081d8 <ProcessMacCommands+0x390>)
 8007fbc:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	f8a1 310a 	strh.w	r3, [r1, #266]	; 0x10a
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007fca:	2200      	movs	r2, #0
 8007fcc:	a90b      	add	r1, sp, #44	; 0x2c
 8007fce:	2004      	movs	r0, #4
 8007fd0:	f002 ff62 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8007fd4:	e744      	b.n	8007e60 <ProcessMacCommands+0x18>
                status = 0x07;
 8007fd6:	2307      	movs	r3, #7
 8007fd8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007fdc:	f815 3009 	ldrb.w	r3, [r5, r9]
 8007fe0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007fe4:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007fe8:	f915 3009 	ldrsb.w	r3, [r5, r9]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8007ff4:	1ca3      	adds	r3, r4, #2
 8007ff6:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007ff8:	1ce1      	adds	r1, r4, #3
 8007ffa:	b2c9      	uxtb	r1, r1
 8007ffc:	5ceb      	ldrb	r3, [r5, r3]
 8007ffe:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008000:	1d22      	adds	r2, r4, #4
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	5c69      	ldrb	r1, [r5, r1]
 8008006:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800800a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800800c:	3405      	adds	r4, #5
 800800e:	b2e4      	uxtb	r4, r4
 8008010:	5caa      	ldrb	r2, [r5, r2]
 8008012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008016:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008018:	2264      	movs	r2, #100	; 0x64
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008020:	a907      	add	r1, sp, #28
 8008022:	4b6d      	ldr	r3, [pc, #436]	; (80081d8 <ProcessMacCommands+0x390>)
 8008024:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008028:	f003 ff34 	bl	800be94 <RegionRxParamSetupReq>
 800802c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008030:	f000 0307 	and.w	r3, r0, #7
 8008034:	2b07      	cmp	r3, #7
 8008036:	d007      	beq.n	8008048 <ProcessMacCommands+0x200>
                macCmdPayload[0] = status;
 8008038:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800803c:	2201      	movs	r2, #1
 800803e:	a90b      	add	r1, sp, #44	; 0x2c
 8008040:	2005      	movs	r0, #5
 8008042:	f002 ff29 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8008046:	e70b      	b.n	8007e60 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008048:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800804c:	4b62      	ldr	r3, [pc, #392]	; (80081d8 <ProcessMacCommands+0x390>)
 800804e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008056:	9a08      	ldr	r2, [sp, #32]
 8008058:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800805a:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800805c:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008060:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8008064:	e7e8      	b.n	8008038 <ProcessMacCommands+0x1f0>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008066:	4b5b      	ldr	r3, [pc, #364]	; (80081d4 <ProcessMacCommands+0x38c>)
 8008068:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800806c:	b17b      	cbz	r3, 800808e <ProcessMacCommands+0x246>
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	b17b      	cbz	r3, 8008092 <ProcessMacCommands+0x24a>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008072:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008074:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008078:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800807c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008080:	2202      	movs	r2, #2
 8008082:	a90b      	add	r1, sp, #44	; 0x2c
 8008084:	2006      	movs	r0, #6
 8008086:	f002 ff07 	bl	800ae98 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800808a:	464c      	mov	r4, r9
                break;
 800808c:	e6e8      	b.n	8007e60 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800808e:	20ff      	movs	r0, #255	; 0xff
 8008090:	e7f0      	b.n	8008074 <ProcessMacCommands+0x22c>
 8008092:	20ff      	movs	r0, #255	; 0xff
 8008094:	e7ee      	b.n	8008074 <ProcessMacCommands+0x22c>
                status = 0x03;
 8008096:	2303      	movs	r3, #3
 8008098:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800809c:	1ca3      	adds	r3, r4, #2
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f915 2009 	ldrsb.w	r2, [r5, r9]
 80080a4:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 80080a8:	aa07      	add	r2, sp, #28
 80080aa:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80080ac:	1ce2      	adds	r2, r4, #3
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	5ceb      	ldrb	r3, [r5, r3]
 80080b2:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80080b4:	1d21      	adds	r1, r4, #4
 80080b6:	b2c9      	uxtb	r1, r1
 80080b8:	5caa      	ldrb	r2, [r5, r2]
 80080ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80080be:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080c0:	1d62      	adds	r2, r4, #5
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	5c69      	ldrb	r1, [r5, r1]
 80080c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80080ca:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 80080cc:	2164      	movs	r1, #100	; 0x64
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80080d8:	3406      	adds	r4, #6
 80080da:	b2e4      	uxtb	r4, r4
 80080dc:	56ab      	ldrsb	r3, [r5, r2]
 80080de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80080e2:	a905      	add	r1, sp, #20
 80080e4:	4b3c      	ldr	r3, [pc, #240]	; (80081d8 <ProcessMacCommands+0x390>)
 80080e6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80080ea:	f003 fee2 	bl	800beb2 <RegionNewChannelReq>
 80080ee:	b2c3      	uxtb	r3, r0
 80080f0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f6ff aeb3 	blt.w	8007e60 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 80080fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80080fe:	2201      	movs	r2, #1
 8008100:	a90b      	add	r1, sp, #44	; 0x2c
 8008102:	2007      	movs	r0, #7
 8008104:	f002 fec8 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8008108:	e6aa      	b.n	8007e60 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800810a:	3402      	adds	r4, #2
 800810c:	b2e4      	uxtb	r4, r4
 800810e:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 8008112:	f013 030f 	ands.w	r3, r3, #15
 8008116:	d100      	bne.n	800811a <ProcessMacCommands+0x2d2>
                    delay++;
 8008118:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800811a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	4a2d      	ldr	r2, [pc, #180]	; (80081d8 <ProcessMacCommands+0x390>)
 8008124:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008126:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800812a:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800812c:	2200      	movs	r2, #0
 800812e:	a90b      	add	r1, sp, #44	; 0x2c
 8008130:	2008      	movs	r0, #8
 8008132:	f002 feb1 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8008136:	e693      	b.n	8007e60 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 8008138:	3402      	adds	r4, #2
 800813a:	b2e4      	uxtb	r4, r4
 800813c:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 8008140:	2200      	movs	r2, #0
 8008142:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008146:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800814a:	f013 0f20 	tst.w	r3, #32
 800814e:	d002      	beq.n	8008156 <ProcessMacCommands+0x30e>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008150:	2201      	movs	r2, #1
 8008152:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008156:	f013 0f10 	tst.w	r3, #16
 800815a:	d002      	beq.n	8008162 <ProcessMacCommands+0x31a>
                    txParamSetupReq.UplinkDwellTime = 1;
 800815c:	2201      	movs	r2, #1
 800815e:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800816a:	a903      	add	r1, sp, #12
 800816c:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <ProcessMacCommands+0x390>)
 800816e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008172:	f003 fead 	bl	800bed0 <RegionTxParamSetupReq>
 8008176:	f1b0 3fff 	cmp.w	r0, #4294967295
 800817a:	f43f ae71 	beq.w	8007e60 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800817e:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008182:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80081d8 <ProcessMacCommands+0x390>
 8008186:	f889 a074 	strb.w	sl, [r9, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800818a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800818e:	f889 3075 	strb.w	r3, [r9, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008192:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <ProcessMacCommands+0x398>)
 8008198:	5cd0      	ldrb	r0, [r2, r3]
 800819a:	f7f8 fd65 	bl	8000c68 <__aeabi_ui2f>
 800819e:	f8c9 0078 	str.w	r0, [r9, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80081a2:	2302      	movs	r3, #2
 80081a4:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80081a8:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80081ac:	a907      	add	r1, sp, #28
 80081ae:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
 80081b2:	f003 fdbb 	bl	800bd2c <RegionGetPhyParam>
 80081b6:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80081b8:	b240      	sxtb	r0, r0
 80081ba:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 80081be:	4298      	cmp	r0, r3
 80081c0:	bfb8      	it	lt
 80081c2:	4618      	movlt	r0, r3
 80081c4:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80081c8:	2200      	movs	r2, #0
 80081ca:	a90b      	add	r1, sp, #44	; 0x2c
 80081cc:	2009      	movs	r0, #9
 80081ce:	f002 fe63 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 80081d2:	e645      	b.n	8007e60 <ProcessMacCommands+0x18>
 80081d4:	200005ec 	.word	0x200005ec
 80081d8:	20008000 	.word	0x20008000
 80081dc:	cccccccd 	.word	0xcccccccd
 80081e0:	08012814 	.word	0x08012814
                status = 0x03;
 80081e4:	2303      	movs	r3, #3
 80081e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80081ea:	1ca3      	adds	r3, r4, #2
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f815 2009 	ldrb.w	r2, [r5, r9]
 80081f2:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80081f6:	1ce1      	adds	r1, r4, #3
 80081f8:	b2c9      	uxtb	r1, r1
 80081fa:	5ceb      	ldrb	r3, [r5, r3]
 80081fc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80081fe:	1d22      	adds	r2, r4, #4
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	5c69      	ldrb	r1, [r5, r1]
 8008204:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008208:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800820a:	3405      	adds	r4, #5
 800820c:	b2e4      	uxtb	r4, r4
 800820e:	5caa      	ldrb	r2, [r5, r2]
 8008210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008214:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008216:	2264      	movs	r2, #100	; 0x64
 8008218:	fb02 f303 	mul.w	r3, r2, r3
 800821c:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800821e:	a907      	add	r1, sp, #28
 8008220:	4b74      	ldr	r3, [pc, #464]	; (80083f4 <ProcessMacCommands+0x5ac>)
 8008222:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008226:	f003 fe62 	bl	800beee <RegionDlChannelReq>
 800822a:	b2c3      	uxtb	r3, r0
 800822c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008230:	2800      	cmp	r0, #0
 8008232:	f6ff ae15 	blt.w	8007e60 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 8008236:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800823a:	2201      	movs	r2, #1
 800823c:	a90b      	add	r1, sp, #44	; 0x2c
 800823e:	200a      	movs	r0, #10
 8008240:	f002 fe2a 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8008244:	e60c      	b.n	8007e60 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008246:	200a      	movs	r0, #10
 8008248:	f002 ffea 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 800824c:	b908      	cbnz	r0, 8008252 <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 800824e:	464c      	mov	r4, r9
 8008250:	e606      	b.n	8007e60 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008252:	210a      	movs	r1, #10
 8008254:	2000      	movs	r0, #0
 8008256:	f002 ff97 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800825a:	a803      	add	r0, sp, #12
 800825c:	2300      	movs	r3, #0
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008262:	f10d 0a14 	add.w	sl, sp, #20
 8008266:	9305      	str	r3, [sp, #20]
 8008268:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800826a:	f10d 0b1c 	add.w	fp, sp, #28
 800826e:	9307      	str	r3, [sp, #28]
 8008270:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008272:	1ca1      	adds	r1, r4, #2
 8008274:	b2c9      	uxtb	r1, r1
 8008276:	f815 3009 	ldrb.w	r3, [r5, r9]
 800827a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800827c:	1ce2      	adds	r2, r4, #3
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	5c69      	ldrb	r1, [r5, r1]
 8008282:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008286:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008288:	1d21      	adds	r1, r4, #4
 800828a:	b2c9      	uxtb	r1, r1
 800828c:	5caa      	ldrb	r2, [r5, r2]
 800828e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008292:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008294:	1d62      	adds	r2, r4, #5
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	5c69      	ldrb	r1, [r5, r1]
 800829a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800829e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80082a0:	3406      	adds	r4, #6
 80082a2:	b2e4      	uxtb	r4, r4
 80082a4:	5caa      	ldrb	r2, [r5, r2]
 80082a6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80082aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082ae:	fb01 f202 	mul.w	r2, r1, r2
 80082b2:	0a12      	lsrs	r2, r2, #8
 80082b4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 80082b8:	c803      	ldmia	r0, {r0, r1}
 80082ba:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80082be:	4a4e      	ldr	r2, [pc, #312]	; (80083f8 <ProcessMacCommands+0x5b0>)
 80082c0:	441a      	add	r2, r3
 80082c2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 80082c4:	4658      	mov	r0, fp
 80082c6:	f009 fb59 	bl	801197c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80082ca:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80083fc <ProcessMacCommands+0x5b4>
 80082ce:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 80082d8:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80082dc:	a80c      	add	r0, sp, #48	; 0x30
 80082de:	f009 fb0c 	bl	80118fa <SysTimeSub>
 80082e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80082ec:	4650      	mov	r0, sl
 80082ee:	f009 fae5 	bl	80118bc <SysTimeAdd>
                    SysTimeSet( sysTime );
 80082f2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80082f6:	f009 fb1f 	bl	8011938 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80082fa:	f002 fd35 	bl	800ad68 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80082fe:	2301      	movs	r3, #1
 8008300:	f889 3434 	strb.w	r3, [r9, #1076]	; 0x434
 8008304:	e5ac      	b.n	8007e60 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008306:	200d      	movs	r0, #13
 8008308:	f002 ff8a 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 800830c:	b908      	cbnz	r0, 8008312 <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 800830e:	464c      	mov	r4, r9
 8008310:	e5a6      	b.n	8007e60 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008312:	210d      	movs	r1, #13
 8008314:	2000      	movs	r0, #0
 8008316:	f002 ff37 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800831a:	4b38      	ldr	r3, [pc, #224]	; (80083fc <ProcessMacCommands+0x5b4>)
 800831c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8008320:	3b04      	subs	r3, #4
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d801      	bhi.n	800832c <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 8008328:	464c      	mov	r4, r9
 800832a:	e599      	b.n	8007e60 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800832c:	f002 fd18 	bl	800ad60 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008330:	464c      	mov	r4, r9
 8008332:	e595      	b.n	8007e60 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 8008334:	1ca2      	adds	r2, r4, #2
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800833c:	1ce1      	adds	r1, r4, #3
 800833e:	b2c9      	uxtb	r1, r1
 8008340:	5caa      	ldrb	r2, [r5, r2]
 8008342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008346:	1d22      	adds	r2, r4, #4
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	5c69      	ldrb	r1, [r5, r1]
 800834c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008350:	3405      	adds	r4, #5
 8008352:	b2e4      	uxtb	r4, r4
 8008354:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008356:	2164      	movs	r1, #100	; 0x64
 8008358:	fb03 f101 	mul.w	r1, r3, r1
 800835c:	f000 000f 	and.w	r0, r0, #15
 8008360:	f002 fcff 	bl	800ad62 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008364:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008368:	2201      	movs	r2, #1
 800836a:	a90b      	add	r1, sp, #44	; 0x2c
 800836c:	2011      	movs	r0, #17
 800836e:	f002 fd93 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 8008372:	e575      	b.n	8007e60 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008374:	200e      	movs	r0, #14
 8008376:	f002 ff53 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 800837a:	b908      	cbnz	r0, 8008380 <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 800837c:	464c      	mov	r4, r9
 800837e:	e56f      	b.n	8007e60 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008380:	210e      	movs	r1, #14
 8008382:	2000      	movs	r0, #0
 8008384:	f002 ff00 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008388:	1ca2      	adds	r2, r4, #2
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008390:	1ce3      	adds	r3, r4, #3
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008398:	3404      	adds	r4, #4
 800839a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800839c:	4a18      	ldr	r2, [pc, #96]	; (8008400 <ProcessMacCommands+0x5b8>)
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	5ce9      	ldrb	r1, [r5, r3]
 80083a2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80083a6:	f002 fcde 	bl	800ad66 <LoRaMacClassBBeaconTimingAns>
 80083aa:	e559      	b.n	8007e60 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 80083ac:	1ca1      	adds	r1, r4, #2
 80083ae:	b2c9      	uxtb	r1, r1
 80083b0:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80083b4:	1ce2      	adds	r2, r4, #3
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	5c68      	ldrb	r0, [r5, r1]
 80083ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80083be:	3404      	adds	r4, #4
 80083c0:	b2e4      	uxtb	r4, r4
 80083c2:	5ca8      	ldrb	r0, [r5, r2]
 80083c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80083c8:	2064      	movs	r0, #100	; 0x64
 80083ca:	fb03 f000 	mul.w	r0, r3, r0
 80083ce:	f002 fccc 	bl	800ad6a <LoRaMacClassBBeaconFreqReq>
 80083d2:	b140      	cbz	r0, 80083e6 <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80083da:	2201      	movs	r2, #1
 80083dc:	a90b      	add	r1, sp, #44	; 0x2c
 80083de:	2013      	movs	r0, #19
 80083e0:	f002 fd5a 	bl	800ae98 <LoRaMacCommandsAddCmd>
                break;
 80083e4:	e53c      	b.n	8007e60 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80083ec:	e7f5      	b.n	80083da <ProcessMacCommands+0x592>
}
 80083ee:	b00f      	add	sp, #60	; 0x3c
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	20008000 	.word	0x20008000
 80083f8:	12d53d80 	.word	0x12d53d80
 80083fc:	200005ec 	.word	0x200005ec
 8008400:	20000af8 	.word	0x20000af8

08008404 <ProcessRadioRxDone>:
{
 8008404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008408:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 800840a:	4bbc      	ldr	r3, [pc, #752]	; (80086fc <ProcessRadioRxDone+0x2f8>)
 800840c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800840e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008410:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008414:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	9306      	str	r3, [sp, #24]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800841c:	4ab8      	ldr	r2, [pc, #736]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 800841e:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    MacCtx.McpsConfirm.AckReceived = false;
 8008422:	4cb8      	ldr	r4, [pc, #736]	; (8008704 <ProcessRadioRxDone+0x300>)
 8008424:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8008428:	f8a4 9480 	strh.w	r9, [r4, #1152]	; 0x480
    MacCtx.RxStatus.Snr = snr;
 800842c:	f884 7482 	strb.w	r7, [r4, #1154]	; 0x482
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008430:	f894 2484 	ldrb.w	r2, [r4, #1156]	; 0x484
 8008434:	f884 2483 	strb.w	r2, [r4, #1155]	; 0x483
    MacCtx.McpsIndication.Port = 0;
 8008438:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800843c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8008440:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 8008444:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8008448:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800844c:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 8008450:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008454:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008458:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800845c:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008460:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    Radio.Sleep( );
 8008464:	4ba8      	ldr	r3, [pc, #672]	; (8008708 <ProcessRadioRxDone+0x304>)
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800846a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800846e:	f009 fb73 	bl	8011b58 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	f002 fc60 	bl	800ad3a <LoRaMacClassBRxBeacon>
 800847a:	b998      	cbnz	r0, 80084a4 <ProcessRadioRxDone+0xa0>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800847c:	4ba0      	ldr	r3, [pc, #640]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 800847e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008482:	2b01      	cmp	r3, #1
 8008484:	d013      	beq.n	80084ae <ProcessRadioRxDone+0xaa>
    macHdr.Value = payload[pktHeaderLen++];
 8008486:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008488:	0963      	lsrs	r3, r4, #5
 800848a:	3b01      	subs	r3, #1
 800848c:	2b06      	cmp	r3, #6
 800848e:	f200 8281 	bhi.w	8008994 <ProcessRadioRxDone+0x590>
 8008492:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008496:	0029      	.short	0x0029
 8008498:	00aa027f 	.word	0x00aa027f
 800849c:	00a6027f 	.word	0x00a6027f
 80084a0:	0259027f 	.word	0x0259027f
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80084a4:	f8a4 9476 	strh.w	r9, [r4, #1142]	; 0x476
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80084a8:	f884 7478 	strb.w	r7, [r4, #1144]	; 0x478
        return;
 80084ac:	e287      	b.n	80089be <ProcessRadioRxDone+0x5ba>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80084ae:	f002 fc48 	bl	800ad42 <LoRaMacClassBIsPingExpected>
 80084b2:	b150      	cbz	r0, 80084ca <ProcessRadioRxDone+0xc6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80084b4:	2000      	movs	r0, #0
 80084b6:	f002 fc39 	bl	800ad2c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80084ba:	2000      	movs	r0, #0
 80084bc:	f002 fc3b 	bl	800ad36 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80084c0:	4b90      	ldr	r3, [pc, #576]	; (8008704 <ProcessRadioRxDone+0x300>)
 80084c2:	2204      	movs	r2, #4
 80084c4:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80084c8:	e7dd      	b.n	8008486 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80084ca:	f002 fc3c 	bl	800ad46 <LoRaMacClassBIsMulticastExpected>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d0d9      	beq.n	8008486 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80084d2:	2000      	movs	r0, #0
 80084d4:	f002 fc2b 	bl	800ad2e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80084d8:	2000      	movs	r0, #0
 80084da:	f002 fc2d 	bl	800ad38 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80084de:	4b89      	ldr	r3, [pc, #548]	; (8008704 <ProcessRadioRxDone+0x300>)
 80084e0:	2205      	movs	r2, #5
 80084e2:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80084e6:	e7ce      	b.n	8008486 <ProcessRadioRxDone+0x82>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80084e8:	2d10      	cmp	r5, #16
 80084ea:	d95d      	bls.n	80085a8 <ProcessRadioRxDone+0x1a4>
            macMsgJoinAccept.Buffer = payload;
 80084ec:	9607      	str	r6, [sp, #28]
            macMsgJoinAccept.BufSize = size;
 80084ee:	b2ed      	uxtb	r5, r5
 80084f0:	f88d 5020 	strb.w	r5, [sp, #32]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80084f4:	4b82      	ldr	r3, [pc, #520]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 80084f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d15b      	bne.n	80085b6 <ProcessRadioRxDone+0x1b2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80084fe:	f006 fd0b 	bl	800ef18 <SecureElementGetJoinEui>
 8008502:	4601      	mov	r1, r0
 8008504:	aa07      	add	r2, sp, #28
 8008506:	20ff      	movs	r0, #255	; 0xff
 8008508:	f003 fa1a 	bl	800b940 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800850c:	2800      	cmp	r0, #0
 800850e:	d15e      	bne.n	80085ce <ProcessRadioRxDone+0x1ca>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008510:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8008514:	4b7a      	ldr	r3, [pc, #488]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 8008516:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800851a:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800851e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008522:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008526:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 800852a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800852e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008534:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008538:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800853c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8008540:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008544:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008548:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800854c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008550:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008556:	b90a      	cbnz	r2, 800855c <ProcessRadioRxDone+0x158>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008558:	2201      	movs	r2, #1
 800855a:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800855c:	4c68      	ldr	r4, [pc, #416]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 800855e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800856a:	4413      	add	r3, r2
 800856c:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008574:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8008578:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 800857a:	3d11      	subs	r5, #17
 800857c:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008580:	a920      	add	r1, sp, #128	; 0x80
 8008582:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008586:	f003 fc15 	bl	800bdb4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800858a:	2302      	movs	r3, #2
 800858c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008590:	2001      	movs	r0, #1
 8008592:	f002 fe45 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 8008596:	b9a8      	cbnz	r0, 80085c4 <ProcessRadioRxDone+0x1c0>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008598:	4a5a      	ldr	r2, [pc, #360]	; (8008704 <ProcessRadioRxDone+0x300>)
 800859a:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 800859e:	f043 0308 	orr.w	r3, r3, #8
 80085a2:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 80085a6:	e1e9      	b.n	800897c <ProcessRadioRxDone+0x578>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80085a8:	4b56      	ldr	r3, [pc, #344]	; (8008704 <ProcessRadioRxDone+0x300>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80085b0:	f7ff fbd0 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 80085b4:	e203      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80085b6:	4b53      	ldr	r3, [pc, #332]	; (8008704 <ProcessRadioRxDone+0x300>)
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80085be:	f7ff fbc9 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 80085c2:	e1fc      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80085c4:	2101      	movs	r1, #1
 80085c6:	2000      	movs	r0, #0
 80085c8:	f002 fdde 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
 80085cc:	e7e4      	b.n	8008598 <ProcessRadioRxDone+0x194>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80085ce:	2001      	movs	r0, #1
 80085d0:	f002 fe26 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0df      	beq.n	8008598 <ProcessRadioRxDone+0x194>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80085d8:	2101      	movs	r1, #1
 80085da:	2007      	movs	r0, #7
 80085dc:	f002 fdd4 	bl	800b188 <LoRaMacConfirmQueueSetStatus>
 80085e0:	e7da      	b.n	8008598 <ProcessRadioRxDone+0x194>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80085e2:	4b48      	ldr	r3, [pc, #288]	; (8008704 <ProcessRadioRxDone+0x300>)
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80085ea:	4b45      	ldr	r3, [pc, #276]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 80085ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80085f0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80085f4:	4a43      	ldr	r2, [pc, #268]	; (8008704 <ProcessRadioRxDone+0x300>)
 80085f6:	f992 2420 	ldrsb.w	r2, [r2, #1056]	; 0x420
 80085fa:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80085fe:	220d      	movs	r2, #13
 8008600:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008608:	b113      	cbz	r3, 8008610 <ProcessRadioRxDone+0x20c>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800860a:	230e      	movs	r3, #14
 800860c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008610:	a91e      	add	r1, sp, #120	; 0x78
 8008612:	4b3b      	ldr	r3, [pc, #236]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 8008614:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008618:	f003 fb88 	bl	800bd2c <RegionGetPhyParam>
 800861c:	901d      	str	r0, [sp, #116]	; 0x74
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800861e:	f1a5 030d 	sub.w	r3, r5, #13
 8008622:	b21b      	sxth	r3, r3
 8008624:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008628:	b200      	sxth	r0, r0
 800862a:	4283      	cmp	r3, r0
 800862c:	dc01      	bgt.n	8008632 <ProcessRadioRxDone+0x22e>
 800862e:	2d0b      	cmp	r5, #11
 8008630:	d806      	bhi.n	8008640 <ProcessRadioRxDone+0x23c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008632:	4b34      	ldr	r3, [pc, #208]	; (8008704 <ProcessRadioRxDone+0x300>)
 8008634:	2201      	movs	r2, #1
 8008636:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800863a:	f7ff fb8b 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 800863e:	e1be      	b.n	80089be <ProcessRadioRxDone+0x5ba>
            macMsgData.Buffer = payload;
 8008640:	9611      	str	r6, [sp, #68]	; 0x44
            macMsgData.BufSize = size;
 8008642:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008646:	4b31      	ldr	r3, [pc, #196]	; (800870c <ProcessRadioRxDone+0x308>)
 8008648:	931a      	str	r3, [sp, #104]	; 0x68
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800864a:	23ff      	movs	r3, #255	; 0xff
 800864c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008650:	a811      	add	r0, sp, #68	; 0x44
 8008652:	f003 fa3b 	bl	800bacc <LoRaMacParserData>
 8008656:	2800      	cmp	r0, #0
 8008658:	d149      	bne.n	80086ee <ProcessRadioRxDone+0x2ea>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800865a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800865c:	4b29      	ldr	r3, [pc, #164]	; (8008704 <ProcessRadioRxDone+0x300>)
 800865e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008662:	f10d 0116 	add.w	r1, sp, #22
 8008666:	a811      	add	r0, sp, #68	; 0x44
 8008668:	f7ff f9cc 	bl	8007a04 <DetermineFrameType>
 800866c:	4605      	mov	r5, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	d14e      	bne.n	8008710 <ProcessRadioRxDone+0x30c>
            downLinkCounter = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	9306      	str	r3, [sp, #24]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d050      	beq.n	800871e <ProcessRadioRxDone+0x31a>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800867c:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008680:	2d01      	cmp	r5, #1
 8008682:	d108      	bne.n	8008696 <ProcessRadioRxDone+0x292>
 8008684:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d174      	bne.n	8008776 <ProcessRadioRxDone+0x372>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800868c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008690:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008694:	d16f      	bne.n	8008776 <ProcessRadioRxDone+0x372>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008696:	2315      	movs	r3, #21
 8008698:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800869c:	4e18      	ldr	r6, [pc, #96]	; (8008700 <ProcessRadioRxDone+0x2fc>)
 800869e:	a91e      	add	r1, sp, #120	; 0x78
 80086a0:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 80086a4:	f003 fb42 	bl	800bd2c <RegionGetPhyParam>
 80086a8:	901d      	str	r0, [sp, #116]	; 0x74
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80086aa:	ab06      	add	r3, sp, #24
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	f10d 0317 	add.w	r3, sp, #23
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	b280      	uxth	r0, r0
 80086b6:	9000      	str	r0, [sp, #0]
 80086b8:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 80086bc:	aa11      	add	r2, sp, #68	; 0x44
 80086be:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80086c2:	4648      	mov	r0, r9
 80086c4:	f7ff fb84 	bl	8007dd0 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d074      	beq.n	80087b6 <ProcessRadioRxDone+0x3b2>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80086cc:	2807      	cmp	r0, #7
 80086ce:	d059      	beq.n	8008784 <ProcessRadioRxDone+0x380>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80086d0:	2808      	cmp	r0, #8
 80086d2:	d06b      	beq.n	80087ac <ProcessRadioRxDone+0x3a8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <ProcessRadioRxDone+0x300>)
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80086dc:	9a06      	ldr	r2, [sp, #24]
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <ProcessRadioRxDone+0x300>)
 80086e0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80086e4:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
                PrepareRxDoneAbort( );
 80086e8:	f7ff fb34 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 80086ec:	e167      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <ProcessRadioRxDone+0x300>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80086f6:	f7ff fb2d 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 80086fa:	e160      	b.n	80089be <ProcessRadioRxDone+0x5ba>
 80086fc:	20000af8 	.word	0x20000af8
 8008700:	20008000 	.word	0x20008000
 8008704:	200005ec 	.word	0x200005ec
 8008708:	08012ec4 	.word	0x08012ec4
 800870c:	20000824 	.word	0x20000824
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008710:	4bae      	ldr	r3, [pc, #696]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008712:	2201      	movs	r2, #1
 8008714:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008718:	f7ff fb1c 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 800871c:	e14f      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800871e:	4618      	mov	r0, r3
 8008720:	4aab      	ldr	r2, [pc, #684]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 8008722:	212c      	movs	r1, #44	; 0x2c
 8008724:	fb01 2203 	mla	r2, r1, r3, r2
 8008728:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800872c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800872e:	428a      	cmp	r2, r1
 8008730:	d002      	beq.n	8008738 <ProcessRadioRxDone+0x334>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008732:	3301      	adds	r3, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	e79f      	b.n	8008678 <ProcessRadioRxDone+0x274>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008738:	49a5      	ldr	r1, [pc, #660]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 800873a:	262c      	movs	r6, #44	; 0x2c
 800873c:	fb06 1103 	mla	r1, r6, r3, r1
 8008740:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008744:	2900      	cmp	r1, #0
 8008746:	d0f4      	beq.n	8008732 <ProcessRadioRxDone+0x32e>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008748:	4ba1      	ldr	r3, [pc, #644]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 800874a:	fb06 3000 	mla	r0, r6, r0, r3
 800874e:	f890 90db 	ldrb.w	r9, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008752:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8008756:	6809      	ldr	r1, [r1, #0]
 8008758:	9106      	str	r1, [sp, #24]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800875a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800875e:	2b02      	cmp	r3, #2
 8008760:	d002      	beq.n	8008768 <ProcessRadioRxDone+0x364>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008762:	4690      	mov	r8, r2
                    multicast = 1;
 8008764:	2501      	movs	r5, #1
 8008766:	e78b      	b.n	8008680 <ProcessRadioRxDone+0x27c>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008768:	4b98      	ldr	r3, [pc, #608]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800876a:	2103      	movs	r1, #3
 800876c:	f883 1483 	strb.w	r1, [r3, #1155]	; 0x483
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008770:	4690      	mov	r8, r2
                    multicast = 1;
 8008772:	2501      	movs	r5, #1
 8008774:	e784      	b.n	8008680 <ProcessRadioRxDone+0x27c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008776:	4b95      	ldr	r3, [pc, #596]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008778:	2201      	movs	r2, #1
 800877a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800877e:	f7ff fae9 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 8008782:	e11c      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008784:	4b91      	ldr	r3, [pc, #580]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008786:	2208      	movs	r2, #8
 8008788:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800878c:	f896 3116 	ldrb.w	r3, [r6, #278]	; 0x116
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1a3      	bne.n	80086dc <ProcessRadioRxDone+0x2d8>
 8008794:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008798:	2ca0      	cmp	r4, #160	; 0xa0
 800879a:	d19f      	bne.n	80086dc <ProcessRadioRxDone+0x2d8>
 800879c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800879e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d19b      	bne.n	80086dc <ProcessRadioRxDone+0x2d8>
                        Nvm.MacGroup1.SrvAckRequested = true;
 80087a4:	2201      	movs	r2, #1
 80087a6:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 80087aa:	e797      	b.n	80086dc <ProcessRadioRxDone+0x2d8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80087ac:	4b87      	ldr	r3, [pc, #540]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80087ae:	220a      	movs	r2, #10
 80087b0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80087b4:	e792      	b.n	80086dc <ProcessRadioRxDone+0x2d8>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80087b6:	ab11      	add	r3, sp, #68	; 0x44
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	9b06      	ldr	r3, [sp, #24]
 80087bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80087c0:	4641      	mov	r1, r8
 80087c2:	4648      	mov	r0, r9
 80087c4:	f003 f810 	bl	800b7e8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d13c      	bne.n	8008846 <ProcessRadioRxDone+0x442>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80087cc:	4b7f      	ldr	r3, [pc, #508]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80087ce:	2100      	movs	r1, #0
 80087d0:	f883 141d 	strb.w	r1, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80087d4:	f883 541e 	strb.w	r5, [r3, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80087d8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80087dc:	f3c2 1000 	ubfx	r0, r2, #4, #1
 80087e0:	f883 0421 	strb.w	r0, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80087e4:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 80087e8:	f883 1428 	strb.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80087ec:	9806      	ldr	r0, [sp, #24]
 80087ee:	f8c3 042c 	str.w	r0, [r3, #1068]	; 0x42c
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80087f2:	f8c3 0464 	str.w	r0, [r3, #1124]	; 0x464
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80087f6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80087fa:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80087fe:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008802:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008806:	f893 0483 	ldrb.w	r0, [r3, #1155]	; 0x483
 800880a:	2801      	cmp	r0, #1
 800880c:	d929      	bls.n	8008862 <ProcessRadioRxDone+0x45e>
            if( multicast == 1 )
 800880e:	2d01      	cmp	r5, #1
 8008810:	d02a      	beq.n	8008868 <ProcessRadioRxDone+0x464>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008812:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008816:	2ca0      	cmp	r4, #160	; 0xa0
 8008818:	d02b      	beq.n	8008872 <ProcessRadioRxDone+0x46e>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800881a:	2300      	movs	r3, #0
 800881c:	4a6c      	ldr	r2, [pc, #432]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 800881e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008822:	4a6a      	ldr	r2, [pc, #424]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008824:	f882 341c 	strb.w	r3, [r2, #1052]	; 0x41c
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008828:	4b68      	ldr	r3, [pc, #416]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800882a:	f893 2438 	ldrb.w	r2, [r3, #1080]	; 0x438
 800882e:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8008832:	f7ff fafa 	bl	8007e2a <RemoveMacCommands>
            switch( fType )
 8008836:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d87d      	bhi.n	800893a <ProcessRadioRxDone+0x536>
 800883e:	e8df f003 	tbb	[pc, r3]
 8008842:	4a27      	.short	0x4a27
 8008844:	6c5c      	.short	0x6c5c
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008846:	2802      	cmp	r0, #2
 8008848:	d006      	beq.n	8008858 <ProcessRadioRxDone+0x454>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800884a:	4b60      	ldr	r3, [pc, #384]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800884c:	220c      	movs	r2, #12
 800884e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 8008852:	f7ff fa7f 	bl	8007d54 <PrepareRxDoneAbort>
                return;
 8008856:	e0b2      	b.n	80089be <ProcessRadioRxDone+0x5ba>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008858:	4b5c      	ldr	r3, [pc, #368]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800885a:	220b      	movs	r2, #11
 800885c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8008860:	e7f7      	b.n	8008852 <ProcessRadioRxDone+0x44e>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008862:	4b5b      	ldr	r3, [pc, #364]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 8008864:	6299      	str	r1, [r3, #40]	; 0x28
 8008866:	e7d2      	b.n	800880e <ProcessRadioRxDone+0x40a>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008868:	4b58      	ldr	r3, [pc, #352]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800886a:	2202      	movs	r2, #2
 800886c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8008870:	e7da      	b.n	8008828 <ProcessRadioRxDone+0x424>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008872:	4b57      	ldr	r3, [pc, #348]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800887a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800887e:	b913      	cbnz	r3, 8008886 <ProcessRadioRxDone+0x482>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008880:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008882:	4b53      	ldr	r3, [pc, #332]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 8008884:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008886:	4b51      	ldr	r3, [pc, #324]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008888:	2201      	movs	r2, #1
 800888a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800888e:	e7cb      	b.n	8008828 <ProcessRadioRxDone+0x424>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008890:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8008894:	4c4d      	ldr	r4, [pc, #308]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008896:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	463b      	mov	r3, r7
 800889e:	f002 020f 	and.w	r2, r2, #15
 80088a2:	2100      	movs	r1, #0
 80088a4:	a815      	add	r0, sp, #84	; 0x54
 80088a6:	f7ff facf 	bl	8007e48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80088aa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80088ae:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80088b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088b4:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80088b8:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80088bc:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80088c6:	4a41      	ldr	r2, [pc, #260]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80088c8:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
            break;
 80088d4:	e052      	b.n	800897c <ProcessRadioRxDone+0x578>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80088d6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80088da:	4c3c      	ldr	r4, [pc, #240]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80088dc:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	463b      	mov	r3, r7
 80088e4:	f002 020f 	and.w	r2, r2, #15
 80088e8:	2100      	movs	r1, #0
 80088ea:	a815      	add	r0, sp, #84	; 0x54
 80088ec:	f7ff faac 	bl	8007e48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80088f0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80088f4:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 80088f8:	e7e5      	b.n	80088c6 <ProcessRadioRxDone+0x4c2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80088fa:	4c34      	ldr	r4, [pc, #208]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80088fc:	f894 3483 	ldrb.w	r3, [r4, #1155]	; 0x483
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	463b      	mov	r3, r7
 8008904:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8008908:	2100      	movs	r1, #0
 800890a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800890c:	f7ff fa9c 	bl	8007e48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008910:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8008914:	f884 341f 	strb.w	r3, [r4, #1055]	; 0x41f
                    break;
 8008918:	e7d5      	b.n	80088c6 <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800891a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800891e:	4b2b      	ldr	r3, [pc, #172]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008920:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008924:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008926:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800892a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800892e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 8008938:	e7c5      	b.n	80088c6 <ProcessRadioRxDone+0x4c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800893c:	2201      	movs	r2, #1
 800893e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 8008942:	f7ff fa07 	bl	8007d54 <PrepareRxDoneAbort>
                    break;
 8008946:	e7be      	b.n	80088c6 <ProcessRadioRxDone+0x4c2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008948:	1e6a      	subs	r2, r5, #1
 800894a:	4c20      	ldr	r4, [pc, #128]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800894c:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008950:	b292      	uxth	r2, r2
 8008952:	1c71      	adds	r1, r6, #1
 8008954:	4638      	mov	r0, r7
 8008956:	f006 fb10 	bl	800ef7a <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800895a:	2303      	movs	r3, #3
 800895c:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008966:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800896a:	3d01      	subs	r5, #1
 800896c:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008970:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8008974:	f043 0302 	orr.w	r3, r3, #2
 8008978:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
    if( MacCtx.NodeAckRequested == true )
 800897c:	4b13      	ldr	r3, [pc, #76]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 800897e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008982:	b173      	cbz	r3, 80089a2 <ProcessRadioRxDone+0x59e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008986:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800898a:	b17b      	cbz	r3, 80089ac <ProcessRadioRxDone+0x5a8>
            OnAckTimeoutTimerEvent( NULL );
 800898c:	2000      	movs	r0, #0
 800898e:	f7ff f9bb 	bl	8007d08 <OnAckTimeoutTimerEvent>
 8008992:	e00b      	b.n	80089ac <ProcessRadioRxDone+0x5a8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008994:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 8008996:	2201      	movs	r2, #1
 8008998:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800899c:	f7ff f9da 	bl	8007d54 <PrepareRxDoneAbort>
            break;
 80089a0:	e7ec      	b.n	800897c <ProcessRadioRxDone+0x578>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <ProcessRadioRxDone+0x5cc>)
 80089a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d00b      	beq.n	80089c4 <ProcessRadioRxDone+0x5c0>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80089ac:	4a07      	ldr	r2, [pc, #28]	; (80089cc <ProcessRadioRxDone+0x5c8>)
 80089ae:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 80089b2:	f043 0320 	orr.w	r3, r3, #32
 80089b6:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
    UpdateRxSlotIdleState( );
 80089ba:	f7fe ffa1 	bl	8007900 <UpdateRxSlotIdleState>
}
 80089be:	b023      	add	sp, #140	; 0x8c
 80089c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            OnAckTimeoutTimerEvent( NULL );
 80089c4:	2000      	movs	r0, #0
 80089c6:	f7ff f99f 	bl	8007d08 <OnAckTimeoutTimerEvent>
 80089ca:	e7ef      	b.n	80089ac <ProcessRadioRxDone+0x5a8>
 80089cc:	200005ec 	.word	0x200005ec
 80089d0:	20008000 	.word	0x20008000

080089d4 <ProcessRadioTxTimeout>:
{
 80089d4:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80089d6:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <ProcessRadioTxTimeout+0x40>)
 80089d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d002      	beq.n	80089e6 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <ProcessRadioTxTimeout+0x44>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 80089e6:	f7fe ff8b 	bl	8007900 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80089ea:	4c0c      	ldr	r4, [pc, #48]	; (8008a1c <ProcessRadioTxTimeout+0x48>)
 80089ec:	2002      	movs	r0, #2
 80089ee:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80089f2:	f002 fbf7 	bl	800b1e4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80089f6:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80089fa:	b113      	cbz	r3, 8008a02 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 80089fc:	2201      	movs	r2, #1
 80089fe:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008a02:	4a06      	ldr	r2, [pc, #24]	; (8008a1c <ProcessRadioTxTimeout+0x48>)
 8008a04:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8008a08:	f043 0320 	orr.w	r3, r3, #32
 8008a0c:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
}
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	20008000 	.word	0x20008000
 8008a18:	08012ec4 	.word	0x08012ec4
 8008a1c:	200005ec 	.word	0x200005ec

08008a20 <CheckForClassBCollision>:
{
 8008a20:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008a22:	f002 f98c 	bl	800ad3e <LoRaMacClassBIsBeaconExpected>
 8008a26:	b978      	cbnz	r0, 8008a48 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008a28:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <CheckForClassBCollision+0x30>)
 8008a2a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d001      	beq.n	8008a36 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008a32:	2000      	movs	r0, #0
}
 8008a34:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008a36:	f002 f984 	bl	800ad42 <LoRaMacClassBIsPingExpected>
 8008a3a:	b938      	cbnz	r0, 8008a4c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008a3c:	f002 f983 	bl	800ad46 <LoRaMacClassBIsMulticastExpected>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0f7      	beq.n	8008a34 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008a44:	200f      	movs	r0, #15
 8008a46:	e7f5      	b.n	8008a34 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008a48:	200e      	movs	r0, #14
 8008a4a:	e7f3      	b.n	8008a34 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008a4c:	200f      	movs	r0, #15
 8008a4e:	e7f1      	b.n	8008a34 <CheckForClassBCollision+0x14>
 8008a50:	20008000 	.word	0x20008000

08008a54 <HandleRadioRxErrorTimeout>:
{
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	4605      	mov	r5, r0
 8008a58:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008a5a:	4b37      	ldr	r3, [pc, #220]	; (8008b38 <HandleRadioRxErrorTimeout+0xe4>)
 8008a5c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d002      	beq.n	8008a6a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008a64:	4b35      	ldr	r3, [pc, #212]	; (8008b3c <HandleRadioRxErrorTimeout+0xe8>)
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008a6a:	f002 f968 	bl	800ad3e <LoRaMacClassBIsBeaconExpected>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	bb00      	cbnz	r0, 8008ab4 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008a72:	4b31      	ldr	r3, [pc, #196]	; (8008b38 <HandleRadioRxErrorTimeout+0xe4>)
 8008a74:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d022      	beq.n	8008ac2 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 8008a7c:	b9be      	cbnz	r6, 8008aae <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008a7e:	4b30      	ldr	r3, [pc, #192]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008a80:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d13f      	bne.n	8008b08 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 8008a88:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008a8a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008a8e:	b113      	cbz	r3, 8008a96 <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008a90:	4b2b      	ldr	r3, [pc, #172]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008a92:	f883 5439 	strb.w	r5, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008a96:	4628      	mov	r0, r5
 8008a98:	f002 fba4 	bl	800b1e4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008a9c:	4b26      	ldr	r3, [pc, #152]	; (8008b38 <HandleRadioRxErrorTimeout+0xe4>)
 8008a9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008aa0:	f009 f824 	bl	8011aec <UTIL_TIMER_GetElapsedTime>
 8008aa4:	4b26      	ldr	r3, [pc, #152]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008aa6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8008aaa:	4298      	cmp	r0, r3
 8008aac:	d220      	bcs.n	8008af0 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 8008aae:	f7fe ff27 	bl	8007900 <UpdateRxSlotIdleState>
}
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008ab4:	2002      	movs	r0, #2
 8008ab6:	f002 f938 	bl	800ad2a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008aba:	2000      	movs	r0, #0
 8008abc:	f002 f93a 	bl	800ad34 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8008ac0:	e7d7      	b.n	8008a72 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008ac2:	f002 f93e 	bl	800ad42 <LoRaMacClassBIsPingExpected>
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	b950      	cbnz	r0, 8008ae0 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008aca:	f002 f93c 	bl	800ad46 <LoRaMacClassBIsMulticastExpected>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d0d4      	beq.n	8008a7c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	f002 f92b 	bl	800ad2e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f002 f92d 	bl	800ad38 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8008ade:	e7e6      	b.n	8008aae <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	f002 f923 	bl	800ad2c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f002 f925 	bl	800ad36 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008aec:	463e      	mov	r6, r7
 8008aee:	e7ec      	b.n	8008aca <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008af0:	4c13      	ldr	r4, [pc, #76]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008af2:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008af6:	f009 f82f 	bl	8011b58 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008afa:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8008afe:	f043 0320 	orr.w	r3, r3, #32
 8008b02:	f884 3485 	strb.w	r3, [r4, #1157]	; 0x485
 8008b06:	e7d2      	b.n	8008aae <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008b0a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008b0e:	b113      	cbz	r3, 8008b16 <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008b12:	f883 4439 	strb.w	r4, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008b16:	4620      	mov	r0, r4
 8008b18:	f002 fb64 	bl	800b1e4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <HandleRadioRxErrorTimeout+0xe4>)
 8008b1e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d0c3      	beq.n	8008aae <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008b26:	4a06      	ldr	r2, [pc, #24]	; (8008b40 <HandleRadioRxErrorTimeout+0xec>)
 8008b28:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8008b2c:	f043 0320 	orr.w	r3, r3, #32
 8008b30:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8008b34:	e7bb      	b.n	8008aae <HandleRadioRxErrorTimeout+0x5a>
 8008b36:	bf00      	nop
 8008b38:	20008000 	.word	0x20008000
 8008b3c:	08012ec4 	.word	0x08012ec4
 8008b40:	200005ec 	.word	0x200005ec

08008b44 <ProcessRadioRxError>:
{
 8008b44:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008b46:	2106      	movs	r1, #6
 8008b48:	2005      	movs	r0, #5
 8008b4a:	f7ff ff83 	bl	8008a54 <HandleRadioRxErrorTimeout>
}
 8008b4e:	bd08      	pop	{r3, pc}

08008b50 <ProcessRadioRxTimeout>:
{
 8008b50:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008b52:	2104      	movs	r1, #4
 8008b54:	2003      	movs	r0, #3
 8008b56:	f7ff ff7d 	bl	8008a54 <HandleRadioRxErrorTimeout>
}
 8008b5a:	bd08      	pop	{r3, pc}

08008b5c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008b60:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8008b62:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <LoRaMacHandleIrqEvents+0x58>)
 8008b64:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008b66:	2000      	movs	r0, #0
 8008b68:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008b6e:	b303      	cbz	r3, 8008bb2 <LoRaMacHandleIrqEvents+0x56>
{
 8008b70:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8008b72:	b2dc      	uxtb	r4, r3
 8008b74:	f013 0f10 	tst.w	r3, #16
 8008b78:	d10c      	bne.n	8008b94 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8008b7a:	f014 0f08 	tst.w	r4, #8
 8008b7e:	d10c      	bne.n	8008b9a <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8008b80:	f014 0f04 	tst.w	r4, #4
 8008b84:	d10c      	bne.n	8008ba0 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8008b86:	f014 0f02 	tst.w	r4, #2
 8008b8a:	d10c      	bne.n	8008ba6 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8008b8c:	f014 0f01 	tst.w	r4, #1
 8008b90:	d10c      	bne.n	8008bac <LoRaMacHandleIrqEvents+0x50>
}
 8008b92:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8008b94:	f7ff f83a 	bl	8007c0c <ProcessRadioTxDone>
 8008b98:	e7ef      	b.n	8008b7a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8008b9a:	f7ff fc33 	bl	8008404 <ProcessRadioRxDone>
 8008b9e:	e7ef      	b.n	8008b80 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8008ba0:	f7ff ff18 	bl	80089d4 <ProcessRadioTxTimeout>
 8008ba4:	e7ef      	b.n	8008b86 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8008ba6:	f7ff ffcd 	bl	8008b44 <ProcessRadioRxError>
 8008baa:	e7ef      	b.n	8008b8c <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8008bac:	f7ff ffd0 	bl	8008b50 <ProcessRadioRxTimeout>
}
 8008bb0:	e7ef      	b.n	8008b92 <LoRaMacHandleIrqEvents+0x36>
 8008bb2:	4770      	bx	lr
 8008bb4:	200005e8 	.word	0x200005e8

08008bb8 <LoRaMacHandleMlmeRequest>:
{
 8008bb8:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008bba:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <LoRaMacHandleMlmeRequest+0x5c>)
 8008bbc:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8008bc0:	f013 0f04 	tst.w	r3, #4
 8008bc4:	d100      	bne.n	8008bc8 <LoRaMacHandleMlmeRequest+0x10>
}
 8008bc6:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008bc8:	2001      	movs	r0, #1
 8008bca:	f002 fb29 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 8008bce:	b178      	cbz	r0, 8008bf0 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f002 faef 	bl	800b1b4 <LoRaMacConfirmQueueGetStatus>
 8008bd6:	b918      	cbnz	r0, 8008be0 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <LoRaMacHandleMlmeRequest+0x5c>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008be0:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <LoRaMacHandleMlmeRequest+0x5c>)
 8008be2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008be6:	f023 0302 	bic.w	r3, r3, #2
 8008bea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8008bee:	e7ea      	b.n	8008bc6 <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008bf0:	2005      	movs	r0, #5
 8008bf2:	f002 fb15 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
 8008bf6:	b138      	cbz	r0, 8008c08 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008bf8:	4a06      	ldr	r2, [pc, #24]	; (8008c14 <LoRaMacHandleMlmeRequest+0x5c>)
 8008bfa:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008bfe:	f023 0302 	bic.w	r3, r3, #2
 8008c02:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8008c06:	e7de      	b.n	8008bc6 <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008c08:	2006      	movs	r0, #6
 8008c0a:	f002 fb09 	bl	800b220 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0d9      	beq.n	8008bc6 <LoRaMacHandleMlmeRequest+0xe>
 8008c12:	e7f1      	b.n	8008bf8 <LoRaMacHandleMlmeRequest+0x40>
 8008c14:	200005ec 	.word	0x200005ec

08008c18 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 8008c18:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <AckTimeoutRetriesFinalize+0x54>)
 8008c1a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008c1e:	b12b      	cbz	r3, 8008c2c <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <AckTimeoutRetriesFinalize+0x54>)
 8008c22:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008c26:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8008c2a:	4770      	bx	lr
{
 8008c2c:	b500      	push	{lr}
 8008c2e:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008c30:	2302      	movs	r3, #2
 8008c32:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8008c36:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <AckTimeoutRetriesFinalize+0x58>)
 8008c38:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8008c3c:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8008c3e:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8008c42:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008c44:	a901      	add	r1, sp, #4
 8008c46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008c4a:	f003 f895 	bl	800bd78 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <AckTimeoutRetriesFinalize+0x54>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8008c56:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008c5a:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <AckTimeoutRetriesFinalize+0x54>)
 8008c5c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8008c60:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8008c64:	b005      	add	sp, #20
 8008c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c6a:	bf00      	nop
 8008c6c:	200005ec 	.word	0x200005ec
 8008c70:	20008000 	.word	0x20008000

08008c74 <SerializeTxFrame>:
{
 8008c74:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <SerializeTxFrame+0x40>)
 8008c78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008c7c:	b11b      	cbz	r3, 8008c86 <SerializeTxFrame+0x12>
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d00a      	beq.n	8008c98 <SerializeTxFrame+0x24>
 8008c82:	2003      	movs	r0, #3
}
 8008c84:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008c86:	480c      	ldr	r0, [pc, #48]	; (8008cb8 <SerializeTxFrame+0x44>)
 8008c88:	f002 ff7f 	bl	800bb8a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008c8c:	b968      	cbnz	r0, 8008caa <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <SerializeTxFrame+0x40>)
 8008c90:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008c94:	801a      	strh	r2, [r3, #0]
            break;
 8008c96:	e7f5      	b.n	8008c84 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8008c98:	4807      	ldr	r0, [pc, #28]	; (8008cb8 <SerializeTxFrame+0x44>)
 8008c9a:	f002 ffac 	bl	800bbf6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8008c9e:	b930      	cbnz	r0, 8008cae <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008ca0:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <SerializeTxFrame+0x40>)
 8008ca2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008ca6:	801a      	strh	r2, [r3, #0]
            break;
 8008ca8:	e7ec      	b.n	8008c84 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008caa:	2011      	movs	r0, #17
 8008cac:	e7ea      	b.n	8008c84 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008cae:	2011      	movs	r0, #17
 8008cb0:	e7e8      	b.n	8008c84 <SerializeTxFrame+0x10>
 8008cb2:	bf00      	nop
 8008cb4:	200005ec 	.word	0x200005ec
 8008cb8:	200006f4 	.word	0x200006f4

08008cbc <ComputeRxWindowParameters>:
{
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008cc0:	4c1d      	ldr	r4, [pc, #116]	; (8008d38 <ComputeRxWindowParameters+0x7c>)
 8008cc2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8008cc6:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 8008cca:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8008cce:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f003 f94d 	bl	800bf72 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008cd8:	4d18      	ldr	r5, [pc, #96]	; (8008d3c <ComputeRxWindowParameters+0x80>)
 8008cda:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ce2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008ce6:	b241      	sxtb	r1, r0
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f003 f880 	bl	800bdee <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008cee:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008cf6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8008cfa:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8008cfe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008d02:	f003 f874 	bl	800bdee <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008d06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008d08:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8008d0c:	440b      	add	r3, r1
 8008d0e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008d12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008d14:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 8008d18:	4413      	add	r3, r2
 8008d1a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008d1e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8008d22:	b93b      	cbnz	r3, 8008d34 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008d24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d26:	4419      	add	r1, r3
 8008d28:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008d2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008d2e:	440a      	add	r2, r1
 8008d30:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8008d34:	b002      	add	sp, #8
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	20008000 	.word	0x20008000
 8008d3c:	200005ec 	.word	0x200005ec

08008d40 <VerifyTxFrame>:
{
 8008d40:	b510      	push	{r4, lr}
 8008d42:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <VerifyTxFrame+0x40>)
 8008d4a:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 8008d4e:	b914      	cbnz	r4, 8008d56 <VerifyTxFrame+0x16>
}
 8008d50:	4620      	mov	r0, r4
 8008d52:	b002      	add	sp, #8
 8008d54:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008d56:	a801      	add	r0, sp, #4
 8008d58:	f002 f912 	bl	800af80 <LoRaMacCommandsGetSizeSerializedCmds>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	b968      	cbnz	r0, 8008d7c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8008d60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d64:	4b06      	ldr	r3, [pc, #24]	; (8008d80 <VerifyTxFrame+0x40>)
 8008d66:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <VerifyTxFrame+0x44>)
 8008d6c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8008d70:	f7fe ff3a 	bl	8007be8 <ValidatePayloadLength>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d1eb      	bne.n	8008d50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8008d78:	2408      	movs	r4, #8
 8008d7a:	e7e9      	b.n	8008d50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008d7c:	2413      	movs	r4, #19
 8008d7e:	e7e7      	b.n	8008d50 <VerifyTxFrame+0x10>
 8008d80:	20008000 	.word	0x20008000
 8008d84:	200005ec 	.word	0x200005ec

08008d88 <SecureFrame>:
{
 8008d88:	b530      	push	{r4, r5, lr}
 8008d8a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <SecureFrame+0x74>)
 8008d92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008d96:	b133      	cbz	r3, 8008da6 <SecureFrame+0x1e>
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d00b      	beq.n	8008db8 <SecureFrame+0x30>
 8008da0:	2003      	movs	r0, #3
}
 8008da2:	b003      	add	sp, #12
 8008da4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8008da6:	4816      	ldr	r0, [pc, #88]	; (8008e00 <SecureFrame+0x78>)
 8008da8:	f002 fcae 	bl	800b708 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008dac:	bb00      	cbnz	r0, 8008df0 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <SecureFrame+0x74>)
 8008db0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008db4:	801a      	strh	r2, [r3, #0]
            break;
 8008db6:	e7f4      	b.n	8008da2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008db8:	a801      	add	r0, sp, #4
 8008dba:	f002 fc47 	bl	800b64c <LoRaMacCryptoGetFCntUp>
 8008dbe:	b9c8      	cbnz	r0, 8008df4 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <SecureFrame+0x74>)
 8008dc2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8008dc6:	b923      	cbnz	r3, 8008dd2 <SecureFrame+0x4a>
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <SecureFrame+0x74>)
 8008dca:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d902      	bls.n	8008dd8 <SecureFrame+0x50>
                fCntUp -= 1;
 8008dd2:	9b01      	ldr	r3, [sp, #4]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <SecureFrame+0x78>)
 8008dda:	4622      	mov	r2, r4
 8008ddc:	4629      	mov	r1, r5
 8008dde:	9801      	ldr	r0, [sp, #4]
 8008de0:	f002 fcbe 	bl	800b760 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008de4:	b940      	cbnz	r0, 8008df8 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <SecureFrame+0x74>)
 8008de8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8008dec:	801a      	strh	r2, [r3, #0]
            break;
 8008dee:	e7d8      	b.n	8008da2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008df0:	2011      	movs	r0, #17
 8008df2:	e7d6      	b.n	8008da2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008df4:	2012      	movs	r0, #18
 8008df6:	e7d4      	b.n	8008da2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008df8:	2011      	movs	r0, #17
 8008dfa:	e7d2      	b.n	8008da2 <SecureFrame+0x1a>
 8008dfc:	200005ec 	.word	0x200005ec
 8008e00:	200006f4 	.word	0x200006f4

08008e04 <SendFrameOnChannel>:
{
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8008e10:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e14:	4d33      	ldr	r5, [pc, #204]	; (8008ee4 <SendFrameOnChannel+0xe0>)
 8008e16:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8008e1a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008e1e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 8008e22:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8008e26:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8008e28:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8008e2a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8008e2c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8008e2e:	4c2e      	ldr	r4, [pc, #184]	; (8008ee8 <SendFrameOnChannel+0xe4>)
 8008e30:	8823      	ldrh	r3, [r4, #0]
 8008e32:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008e36:	f504 6383 	add.w	r3, r4, #1048	; 0x418
 8008e3a:	f10d 0207 	add.w	r2, sp, #7
 8008e3e:	a902      	add	r1, sp, #8
 8008e40:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8008e44:	f002 fff7 	bl	800be36 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f884 3439 	strb.w	r3, [r4, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008e4e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8008e52:	f884 343a 	strb.w	r3, [r4, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8008e56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e5a:	f884 343b 	strb.w	r3, [r4, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8008e5e:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008e62:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
 8008e66:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008e6a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8008e6e:	f001 ff6c 	bl	800ad4a <LoRaMacClassBIsBeaconModeActive>
 8008e72:	bb58      	cbnz	r0, 8008ecc <SendFrameOnChannel+0xc8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008e74:	4b1b      	ldr	r3, [pc, #108]	; (8008ee4 <SendFrameOnChannel+0xe0>)
 8008e76:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d02e      	beq.n	8008edc <SendFrameOnChannel+0xd8>
    LoRaMacClassBHaltBeaconing( );
 8008e7e:	f001 ff67 	bl	800ad50 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8008e82:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <SendFrameOnChannel+0xe0>)
 8008e84:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8008e88:	4b17      	ldr	r3, [pc, #92]	; (8008ee8 <SendFrameOnChannel+0xe4>)
 8008e8a:	f893 1415 	ldrb.w	r1, [r3, #1045]	; 0x415
 8008e8e:	b2c0      	uxtb	r0, r0
 8008e90:	f7ff ff7a 	bl	8008d88 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8008e94:	4604      	mov	r4, r0
 8008e96:	b9b0      	cbnz	r0, 8008ec6 <SendFrameOnChannel+0xc2>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008e98:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <SendFrameOnChannel+0xe4>)
 8008e9a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008e9e:	f042 0202 	orr.w	r2, r2, #2
 8008ea2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8008ea6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8008eaa:	b92b      	cbnz	r3, 8008eb8 <SendFrameOnChannel+0xb4>
        MacCtx.ChannelsNbTransCounter++;
 8008eac:	4a0e      	ldr	r2, [pc, #56]	; (8008ee8 <SendFrameOnChannel+0xe4>)
 8008eae:	f892 3410 	ldrb.w	r3, [r2, #1040]	; 0x410
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f882 3410 	strb.w	r3, [r2, #1040]	; 0x410
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <SendFrameOnChannel+0xe8>)
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	480a      	ldr	r0, [pc, #40]	; (8008ee8 <SendFrameOnChannel+0xe4>)
 8008ebe:	f830 1b02 	ldrh.w	r1, [r0], #2
 8008ec2:	b2c9      	uxtb	r1, r1
 8008ec4:	4798      	blx	r3
}
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	b006      	add	sp, #24
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008ecc:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
 8008ed0:	f001 ff4d 	bl	800ad6e <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d0cd      	beq.n	8008e74 <SendFrameOnChannel+0x70>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8008ed8:	2410      	movs	r4, #16
 8008eda:	e7f4      	b.n	8008ec6 <SendFrameOnChannel+0xc2>
        LoRaMacClassBStopRxSlots( );
 8008edc:	f001 ff49 	bl	800ad72 <LoRaMacClassBStopRxSlots>
 8008ee0:	e7cd      	b.n	8008e7e <SendFrameOnChannel+0x7a>
 8008ee2:	bf00      	nop
 8008ee4:	20008000 	.word	0x20008000
 8008ee8:	200005ec 	.word	0x200005ec
 8008eec:	08012ec4 	.word	0x08012ec4

08008ef0 <ScheduleTx>:
{
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	b08c      	sub	sp, #48	; 0x30
 8008ef6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8008ef8:	f7ff fd92 	bl	8008a20 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8008efc:	4604      	mov	r4, r0
 8008efe:	b118      	cbz	r0, 8008f08 <ScheduleTx+0x18>
}
 8008f00:	4620      	mov	r0, r4
 8008f02:	b00c      	add	sp, #48	; 0x30
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8008f08:	f7fe fd54 	bl	80079b4 <CalculateBackOff>
    status = SerializeTxFrame( );
 8008f0c:	f7ff feb2 	bl	8008c74 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008f10:	4604      	mov	r4, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1f4      	bne.n	8008f00 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8008f16:	4e36      	ldr	r6, [pc, #216]	; (8008ff0 <ScheduleTx+0x100>)
 8008f18:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008f1a:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8008f1c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008f20:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8008f24:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 8008f28:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008f2c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008f30:	4640      	mov	r0, r8
 8008f32:	f008 fd45 	bl	80119c0 <SysTimeGetMcuTime>
 8008f36:	af02      	add	r7, sp, #8
 8008f38:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 8008f42:	e898 0006 	ldmia.w	r8, {r1, r2}
 8008f46:	4638      	mov	r0, r7
 8008f48:	f008 fcd7 	bl	80118fa <SysTimeSub>
 8008f4c:	ab07      	add	r3, sp, #28
 8008f4e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008f52:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8008f56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008f58:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8008f60:	2301      	movs	r3, #1
 8008f62:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8008f66:	4b23      	ldr	r3, [pc, #140]	; (8008ff4 <ScheduleTx+0x104>)
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008f6e:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
 8008f72:	b92b      	cbnz	r3, 8008f80 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8008f80:	4a1c      	ldr	r2, [pc, #112]	; (8008ff4 <ScheduleTx+0x104>)
 8008f82:	481b      	ldr	r0, [pc, #108]	; (8008ff0 <ScheduleTx+0x100>)
 8008f84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	f502 6391 	add.w	r3, r2, #1160	; 0x488
 8008f8e:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8008f92:	a904      	add	r1, sp, #16
 8008f94:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008f98:	f002 ffc8 	bl	800bf2c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8008f9c:	b1b0      	cbz	r0, 8008fcc <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008f9e:	280b      	cmp	r0, #11
 8008fa0:	d122      	bne.n	8008fe8 <ScheduleTx+0xf8>
 8008fa2:	b31d      	cbz	r5, 8008fec <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8008fa4:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <ScheduleTx+0x104>)
 8008fa6:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d0a8      	beq.n	8008f00 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8008fae:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008fb2:	f042 0220 	orr.w	r2, r2, #32
 8008fb6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8008fba:	f503 755a 	add.w	r5, r3, #872	; 0x368
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f008 fe6a 	bl	8011c98 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f008 fe21 	bl	8011c0c <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8008fca:	e799      	b.n	8008f00 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8008fcc:	f7ff fe76 	bl	8008cbc <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8008fd0:	f7ff feb6 	bl	8008d40 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d192      	bne.n	8008f00 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <ScheduleTx+0x104>)
 8008fdc:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8008fe0:	f7ff ff10 	bl	8008e04 <SendFrameOnChannel>
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	e78b      	b.n	8008f00 <ScheduleTx+0x10>
            return status;
 8008fe8:	4604      	mov	r4, r0
 8008fea:	e789      	b.n	8008f00 <ScheduleTx+0x10>
 8008fec:	4604      	mov	r4, r0
 8008fee:	e787      	b.n	8008f00 <ScheduleTx+0x10>
 8008ff0:	20008000 	.word	0x20008000
 8008ff4:	200005ec 	.word	0x200005ec

08008ff8 <OnTxDelayedTimerEvent>:
{
 8008ff8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008ffa:	4c11      	ldr	r4, [pc, #68]	; (8009040 <OnTxDelayedTimerEvent+0x48>)
 8008ffc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009000:	f008 fdaa 	bl	8011b58 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009004:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009008:	f023 0320 	bic.w	r3, r3, #32
 800900c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 8009010:	2001      	movs	r0, #1
 8009012:	f7ff ff6d 	bl	8008ef0 <ScheduleTx>
 8009016:	b108      	cbz	r0, 800901c <OnTxDelayedTimerEvent+0x24>
 8009018:	280b      	cmp	r0, #11
 800901a:	d100      	bne.n	800901e <OnTxDelayedTimerEvent+0x26>
}
 800901c:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <OnTxDelayedTimerEvent+0x4c>)
 8009020:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009024:	f884 243a 	strb.w	r2, [r4, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009028:	f894 2412 	ldrb.w	r2, [r4, #1042]	; 0x412
 800902c:	f884 243d 	strb.w	r2, [r4, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009030:	2009      	movs	r0, #9
 8009032:	f884 0439 	strb.w	r0, [r4, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009036:	f002 f8d5 	bl	800b1e4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800903a:	f7fe fd49 	bl	8007ad0 <StopRetransmission>
}
 800903e:	e7ed      	b.n	800901c <OnTxDelayedTimerEvent+0x24>
 8009040:	200005ec 	.word	0x200005ec
 8009044:	20008000 	.word	0x20008000

08009048 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009048:	4b23      	ldr	r3, [pc, #140]	; (80090d8 <LoRaMacHandleMcpsRequest+0x90>)
 800904a:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 800904e:	f013 0f01 	tst.w	r3, #1
 8009052:	d040      	beq.n	80090d6 <LoRaMacHandleMcpsRequest+0x8e>
{
 8009054:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009056:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <LoRaMacHandleMcpsRequest+0x90>)
 8009058:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800905c:	b12b      	cbz	r3, 800906a <LoRaMacHandleMcpsRequest+0x22>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d003      	beq.n	800906a <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009062:	2b01      	cmp	r3, #1
 8009064:	d007      	beq.n	8009076 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 8009066:	2400      	movs	r4, #0
 8009068:	e003      	b.n	8009072 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800906a:	f7fe fcf5 	bl	8007a58 <CheckRetransUnconfirmedUplink>
 800906e:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 8009070:	b9a4      	cbnz	r4, 800909c <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 8009072:	b31c      	cbz	r4, 80090bc <LoRaMacHandleMcpsRequest+0x74>
}
 8009074:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <LoRaMacHandleMcpsRequest+0x90>)
 8009078:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800907c:	b1e3      	cbz	r3, 80090b8 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800907e:	f7fe fd0f 	bl	8007aa0 <CheckRetransConfirmedUplink>
 8009082:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009084:	4b15      	ldr	r3, [pc, #84]	; (80090dc <LoRaMacHandleMcpsRequest+0x94>)
 8009086:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1f0      	bne.n	8009070 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800908e:	b910      	cbnz	r0, 8009096 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 8009090:	f7fe fd5e 	bl	8007b50 <AckTimeoutRetriesProcess>
 8009094:	e7ec      	b.n	8009070 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 8009096:	f7ff fdbf 	bl	8008c18 <AckTimeoutRetriesFinalize>
 800909a:	e7e9      	b.n	8009070 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800909c:	4c0e      	ldr	r4, [pc, #56]	; (80090d8 <LoRaMacHandleMcpsRequest+0x90>)
 800909e:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80090a2:	f008 fd59 	bl	8011b58 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80090a6:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80090aa:	f023 0320 	bic.w	r3, r3, #32
 80090ae:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80090b2:	f7fe fd0d 	bl	8007ad0 <StopRetransmission>
 80090b6:	e7dd      	b.n	8009074 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 80090b8:	2401      	movs	r4, #1
 80090ba:	e7da      	b.n	8009072 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <LoRaMacHandleMcpsRequest+0x90>)
 80090be:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 80090c2:	f36f 1245 	bfc	r2, #5, #1
 80090c6:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
            MacCtx.AckTimeoutRetry = false;
 80090ca:	2000      	movs	r0, #0
 80090cc:	f883 0413 	strb.w	r0, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 80090d0:	f7ff ff92 	bl	8008ff8 <OnTxDelayedTimerEvent>
}
 80090d4:	e7ce      	b.n	8009074 <LoRaMacHandleMcpsRequest+0x2c>
 80090d6:	4770      	bx	lr
 80090d8:	200005ec 	.word	0x200005ec
 80090dc:	20008000 	.word	0x20008000

080090e0 <LoRaMacHandleRequestEvents>:
{
 80090e0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80090e2:	4b22      	ldr	r3, [pc, #136]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 80090e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80090e8:	bb7b      	cbnz	r3, 800914a <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80090ea:	4b20      	ldr	r3, [pc, #128]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 80090ec:	f893 4485 	ldrb.w	r4, [r3, #1157]	; 0x485
 80090f0:	f014 0501 	ands.w	r5, r4, #1
 80090f4:	d005      	beq.n	8009102 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80090f6:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 80090fa:	f36f 0200 	bfc	r2, #0, #1
 80090fe:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 8009104:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009108:	f013 0f04 	tst.w	r3, #4
 800910c:	d006      	beq.n	800911c <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800910e:	4b17      	ldr	r3, [pc, #92]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 8009110:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009114:	f36f 0282 	bfc	r2, #2, #1
 8009118:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800911c:	2001      	movs	r0, #1
 800911e:	f7fe fc03 	bl	8007928 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009122:	b135      	cbz	r5, 8009132 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009124:	4811      	ldr	r0, [pc, #68]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 8009126:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f500 6087 	add.w	r0, r0, #1080	; 0x438
 8009130:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009132:	f014 0f04 	tst.w	r4, #4
 8009136:	d109      	bne.n	800914c <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009138:	f001 fe0b 	bl	800ad52 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 800913e:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009142:	f36f 1245 	bfc	r2, #5, #1
 8009146:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
}
 800914a:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800914c:	4808      	ldr	r0, [pc, #32]	; (8009170 <LoRaMacHandleRequestEvents+0x90>)
 800914e:	f002 f873 	bl	800b238 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009152:	f002 f8a3 	bl	800b29c <LoRaMacConfirmQueueGetCnt>
 8009156:	2800      	cmp	r0, #0
 8009158:	d0ee      	beq.n	8009138 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800915a:	4a04      	ldr	r2, [pc, #16]	; (800916c <LoRaMacHandleRequestEvents+0x8c>)
 800915c:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009160:	f043 0304 	orr.w	r3, r3, #4
 8009164:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8009168:	e7e6      	b.n	8009138 <LoRaMacHandleRequestEvents+0x58>
 800916a:	bf00      	nop
 800916c:	200005ec 	.word	0x200005ec
 8009170:	20000a38 	.word	0x20000a38

08009174 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 8009176:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800917a:	b103      	cbz	r3, 800917e <LoRaMacHandleScheduleUplinkEvent+0xa>
 800917c:	4770      	bx	lr
{
 800917e:	b500      	push	{lr}
 8009180:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8009182:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009186:	f10d 0007 	add.w	r0, sp, #7
 800918a:	f001 ff37 	bl	800affc <LoRaMacCommandsStickyCmdsPending>
}
 800918e:	b003      	add	sp, #12
 8009190:	f85d fb04 	ldr.w	pc, [sp], #4
 8009194:	200005ec 	.word	0x200005ec

08009198 <OpenContinuousRxCWindow>:
{
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800919c:	4c14      	ldr	r4, [pc, #80]	; (80091f0 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800919e:	4d15      	ldr	r5, [pc, #84]	; (80091f4 <OpenContinuousRxCWindow+0x5c>)
 80091a0:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 80091a4:	9600      	str	r6, [sp, #0]
 80091a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091a8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80091ac:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80091b0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091b4:	f002 fe1b 	bl	800bdee <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80091b8:	2302      	movs	r3, #2
 80091ba:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80091be:	2301      	movs	r3, #1
 80091c0:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80091c4:	f505 6284 	add.w	r2, r5, #1056	; 0x420
 80091c8:	4631      	mov	r1, r6
 80091ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80091ce:	f002 fe22 	bl	800be16 <RegionRxConfig>
 80091d2:	b158      	cbz	r0, 80091ec <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80091d4:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 80091d8:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( 0 ); // Continuous mode
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <OpenContinuousRxCWindow+0x60>)
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	2000      	movs	r0, #0
 80091e2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80091e4:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 80091e8:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 80091ec:	b002      	add	sp, #8
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	20008000 	.word	0x20008000
 80091f4:	200005ec 	.word	0x200005ec
 80091f8:	08012ec4 	.word	0x08012ec4

080091fc <RxWindowSetup>:
{
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009200:	f008 fcaa 	bl	8011b58 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <RxWindowSetup+0x3c>)
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800920a:	4a0c      	ldr	r2, [pc, #48]	; (800923c <RxWindowSetup+0x40>)
 800920c:	4621      	mov	r1, r4
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <RxWindowSetup+0x44>)
 8009210:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009214:	f002 fdff 	bl	800be16 <RegionRxConfig>
 8009218:	b160      	cbz	r0, 8009234 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800921a:	4d0a      	ldr	r5, [pc, #40]	; (8009244 <RxWindowSetup+0x48>)
 800921c:	f895 3420 	ldrb.w	r3, [r5, #1056]	; 0x420
 8009220:	f885 3462 	strb.w	r3, [r5, #1122]	; 0x462
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <RxWindowSetup+0x3c>)
 8009226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009228:	4a05      	ldr	r2, [pc, #20]	; (8009240 <RxWindowSetup+0x44>)
 800922a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800922c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800922e:	7ce3      	ldrb	r3, [r4, #19]
 8009230:	f885 3484 	strb.w	r3, [r5, #1156]	; 0x484
}
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	08012ec4 	.word	0x08012ec4
 800923c:	20000a0c 	.word	0x20000a0c
 8009240:	20008000 	.word	0x20008000
 8009244:	200005ec 	.word	0x200005ec

08009248 <OnRxWindow2TimerEvent>:
{
 8009248:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <OnRxWindow2TimerEvent+0x48>)
 800924c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8009250:	b903      	cbnz	r3, 8009254 <OnRxWindow2TimerEvent+0xc>
}
 8009252:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009254:	480e      	ldr	r0, [pc, #56]	; (8009290 <OnRxWindow2TimerEvent+0x48>)
 8009256:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 800925a:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800925e:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <OnRxWindow2TimerEvent+0x4c>)
 8009260:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009262:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009266:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800926a:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800926e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009272:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009276:	2300      	movs	r3, #0
 8009278:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800927c:	2301      	movs	r3, #1
 800927e:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009282:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 8009286:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800928a:	f7ff ffb7 	bl	80091fc <RxWindowSetup>
 800928e:	e7e0      	b.n	8009252 <OnRxWindow2TimerEvent+0xa>
 8009290:	200005ec 	.word	0x200005ec
 8009294:	20008000 	.word	0x20008000

08009298 <OnRxWindow1TimerEvent>:
{
 8009298:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800929a:	480f      	ldr	r0, [pc, #60]	; (80092d8 <OnRxWindow1TimerEvent+0x40>)
 800929c:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415
 80092a0:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <OnRxWindow1TimerEvent+0x44>)
 80092a6:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 80092aa:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80092ae:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80092b2:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80092b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092ba:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80092be:	2300      	movs	r3, #0
 80092c0:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80092c4:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80092c8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80092cc:	f500 7060 	add.w	r0, r0, #896	; 0x380
 80092d0:	f7ff ff94 	bl	80091fc <RxWindowSetup>
}
 80092d4:	bd08      	pop	{r3, pc}
 80092d6:	bf00      	nop
 80092d8:	200005ec 	.word	0x200005ec
 80092dc:	20008000 	.word	0x20008000

080092e0 <LoRaMacHandleNvm>:
{
 80092e0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 80092e2:	4b30      	ldr	r3, [pc, #192]	; (80093a4 <LoRaMacHandleNvm+0xc4>)
 80092e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80092e8:	b103      	cbz	r3, 80092ec <LoRaMacHandleNvm+0xc>
}
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80092ee:	2124      	movs	r1, #36	; 0x24
 80092f0:	f005 fe64 	bl	800efbc <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 80092f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f6:	4283      	cmp	r3, r0
 80092f8:	d052      	beq.n	80093a0 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 80092fa:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80092fc:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80092fe:	2114      	movs	r1, #20
 8009300:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009304:	f005 fe5a 	bl	800efbc <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800930a:	4283      	cmp	r3, r0
 800930c:	d002      	beq.n	8009314 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800930e:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009310:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009314:	21dc      	movs	r1, #220	; 0xdc
 8009316:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800931a:	f005 fe4f 	bl	800efbc <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800931e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009322:	4283      	cmp	r3, r0
 8009324:	d003      	beq.n	800932e <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009326:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800932a:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800932e:	21bc      	movs	r1, #188	; 0xbc
 8009330:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8009334:	f005 fe42 	bl	800efbc <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009338:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800933c:	4283      	cmp	r3, r0
 800933e:	d003      	beq.n	8009348 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009340:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009344:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009348:	21a0      	movs	r1, #160	; 0xa0
 800934a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800934e:	f005 fe35 	bl	800efbc <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009352:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 8009356:	4283      	cmp	r3, r0
 8009358:	d003      	beq.n	8009362 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800935a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800935e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009362:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8009366:	f504 7021 	add.w	r0, r4, #644	; 0x284
 800936a:	f005 fe27 	bl	800efbc <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800936e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
 8009372:	4283      	cmp	r3, r0
 8009374:	d003      	beq.n	800937e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8009376:	f8c4 071c 	str.w	r0, [r4, #1820]	; 0x71c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800937a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800937e:	2114      	movs	r1, #20
 8009380:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 8009384:	f005 fe1a 	bl	800efbc <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009388:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 800938c:	4283      	cmp	r3, r0
 800938e:	d003      	beq.n	8009398 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 8009390:	f8c4 0734 	str.w	r0, [r4, #1844]	; 0x734
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009394:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009398:	4628      	mov	r0, r5
 800939a:	f7fe fbc1 	bl	8007b20 <CallNvmDataChangeCallback>
 800939e:	e7a4      	b.n	80092ea <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80093a0:	2500      	movs	r5, #0
 80093a2:	e7ac      	b.n	80092fe <LoRaMacHandleNvm+0x1e>
 80093a4:	200005ec 	.word	0x200005ec

080093a8 <RestoreNvmData>:
{
 80093a8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80093aa:	4b34      	ldr	r3, [pc, #208]	; (800947c <RestoreNvmData+0xd4>)
 80093ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d001      	beq.n	80093b8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80093b4:	2001      	movs	r0, #1
}
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80093b8:	4c31      	ldr	r4, [pc, #196]	; (8009480 <RestoreNvmData+0xd8>)
 80093ba:	2124      	movs	r1, #36	; 0x24
 80093bc:	4620      	mov	r0, r4
 80093be:	f005 fdfd 	bl	800efbc <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 80093c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c4:	4283      	cmp	r3, r0
 80093c6:	d001      	beq.n	80093cc <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80093c8:	2017      	movs	r0, #23
 80093ca:	e7f4      	b.n	80093b6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80093cc:	2114      	movs	r1, #20
 80093ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80093d2:	f005 fdf3 	bl	800efbc <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80093d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093d8:	4283      	cmp	r3, r0
 80093da:	d001      	beq.n	80093e0 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80093dc:	2017      	movs	r0, #23
 80093de:	e7ea      	b.n	80093b6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80093e0:	21dc      	movs	r1, #220	; 0xdc
 80093e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80093e6:	f005 fde9 	bl	800efbc <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80093ea:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80093ee:	4283      	cmp	r3, r0
 80093f0:	d001      	beq.n	80093f6 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80093f2:	2017      	movs	r0, #23
 80093f4:	e7df      	b.n	80093b6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80093f6:	21bc      	movs	r1, #188	; 0xbc
 80093f8:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80093fc:	f005 fdde 	bl	800efbc <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009400:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8009404:	4283      	cmp	r3, r0
 8009406:	d001      	beq.n	800940c <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009408:	2017      	movs	r0, #23
 800940a:	e7d4      	b.n	80093b6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800940c:	21a0      	movs	r1, #160	; 0xa0
 800940e:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 8009412:	f005 fdd3 	bl	800efbc <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009416:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
 800941a:	4283      	cmp	r3, r0
 800941c:	d001      	beq.n	8009422 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800941e:	2017      	movs	r0, #23
 8009420:	e7c9      	b.n	80093b6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009422:	2114      	movs	r1, #20
 8009424:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 8009428:	f005 fdc8 	bl	800efbc <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800942c:	f8d4 3734 	ldr.w	r3, [r4, #1844]	; 0x734
 8009430:	4283      	cmp	r3, r0
 8009432:	d001      	beq.n	8009438 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009434:	2017      	movs	r0, #23
 8009436:	e7be      	b.n	80093b6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009438:	4625      	mov	r5, r4
 800943a:	4c12      	ldr	r4, [pc, #72]	; (8009484 <RestoreNvmData+0xdc>)
 800943c:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 8009440:	4629      	mov	r1, r5
 8009442:	4620      	mov	r0, r4
 8009444:	f005 fd99 	bl	800ef7a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009448:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800944c:	2100      	movs	r1, #0
 800944e:	4628      	mov	r0, r5
 8009450:	f005 fdab 	bl	800efaa <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <RestoreNvmData+0xd4>)
 8009456:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800945a:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800945e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009460:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009464:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009468:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800946c:	2201      	movs	r2, #1
 800946e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009472:	2202      	movs	r2, #2
 8009474:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    return LORAMAC_STATUS_OK;
 8009478:	2000      	movs	r0, #0
 800947a:	e79c      	b.n	80093b6 <RestoreNvmData+0xe>
 800947c:	200005ec 	.word	0x200005ec
 8009480:	20008738 	.word	0x20008738
 8009484:	20008000 	.word	0x20008000

08009488 <OnRadioRxTimeout>:
{
 8009488:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800948a:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <OnRadioRxTimeout+0x28>)
 800948c:	7813      	ldrb	r3, [r2, #0]
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <OnRadioRxTimeout+0x2c>)
 8009496:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800949a:	b113      	cbz	r3, 80094a2 <OnRadioRxTimeout+0x1a>
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	b103      	cbz	r3, 80094a2 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80094a0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80094a2:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <OnRadioRxTimeout+0x30>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	2100      	movs	r1, #0
 80094a8:	2002      	movs	r0, #2
 80094aa:	f008 f801 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 80094ae:	bd08      	pop	{r3, pc}
 80094b0:	200005e8 	.word	0x200005e8
 80094b4:	200005ec 	.word	0x200005ec
 80094b8:	080127d4 	.word	0x080127d4

080094bc <OnRadioTxTimeout>:
{
 80094bc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80094be:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <OnRadioTxTimeout+0x28>)
 80094c0:	7813      	ldrb	r3, [r2, #0]
 80094c2:	f043 0304 	orr.w	r3, r3, #4
 80094c6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80094c8:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <OnRadioTxTimeout+0x2c>)
 80094ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80094ce:	b113      	cbz	r3, 80094d6 <OnRadioTxTimeout+0x1a>
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	b103      	cbz	r3, 80094d6 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80094d4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <OnRadioTxTimeout+0x30>)
 80094d8:	2201      	movs	r2, #1
 80094da:	2100      	movs	r1, #0
 80094dc:	2002      	movs	r0, #2
 80094de:	f007 ffe7 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 80094e2:	bd08      	pop	{r3, pc}
 80094e4:	200005e8 	.word	0x200005e8
 80094e8:	200005ec 	.word	0x200005ec
 80094ec:	080127e4 	.word	0x080127e4

080094f0 <OnRadioRxDone>:
{
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	4680      	mov	r8, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	4616      	mov	r6, r2
 80094fa:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80094fc:	f008 faec 	bl	8011ad8 <UTIL_TIMER_GetCurrentTime>
 8009500:	4c0d      	ldr	r4, [pc, #52]	; (8009538 <OnRadioRxDone+0x48>)
 8009502:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009504:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009508:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800950a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800950c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800950e:	4a0b      	ldr	r2, [pc, #44]	; (800953c <OnRadioRxDone+0x4c>)
 8009510:	7813      	ldrb	r3, [r2, #0]
 8009512:	f043 0308 	orr.w	r3, r3, #8
 8009516:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <OnRadioRxDone+0x50>)
 800951a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800951e:	b113      	cbz	r3, 8009526 <OnRadioRxDone+0x36>
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	b103      	cbz	r3, 8009526 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009524:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <OnRadioRxDone+0x54>)
 8009528:	2201      	movs	r2, #1
 800952a:	2100      	movs	r1, #0
 800952c:	2002      	movs	r0, #2
 800952e:	f007 ffbf 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 8009532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009536:	bf00      	nop
 8009538:	20000af8 	.word	0x20000af8
 800953c:	200005e8 	.word	0x200005e8
 8009540:	200005ec 	.word	0x200005ec
 8009544:	080127f4 	.word	0x080127f4

08009548 <OnRadioTxDone>:
{
 8009548:	b530      	push	{r4, r5, lr}
 800954a:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800954c:	f008 fac4 	bl	8011ad8 <UTIL_TIMER_GetCurrentTime>
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <OnRadioTxDone+0x48>)
 8009552:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009554:	4d0f      	ldr	r5, [pc, #60]	; (8009594 <OnRadioTxDone+0x4c>)
 8009556:	466c      	mov	r4, sp
 8009558:	4620      	mov	r0, r4
 800955a:	f008 fa0f 	bl	801197c <SysTimeGet>
 800955e:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8009562:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009566:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800956a:	4a0b      	ldr	r2, [pc, #44]	; (8009598 <OnRadioTxDone+0x50>)
 800956c:	7813      	ldrb	r3, [r2, #0]
 800956e:	f043 0310 	orr.w	r3, r3, #16
 8009572:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009574:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009578:	b113      	cbz	r3, 8009580 <OnRadioTxDone+0x38>
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	b103      	cbz	r3, 8009580 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800957e:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <OnRadioTxDone+0x54>)
 8009582:	2201      	movs	r2, #1
 8009584:	2100      	movs	r1, #0
 8009586:	2002      	movs	r0, #2
 8009588:	f007 ff92 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800958c:	b003      	add	sp, #12
 800958e:	bd30      	pop	{r4, r5, pc}
 8009590:	20000b08 	.word	0x20000b08
 8009594:	200005ec 	.word	0x200005ec
 8009598:	200005e8 	.word	0x200005e8
 800959c:	08012804 	.word	0x08012804

080095a0 <ResetMacParameters>:
{
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	b08f      	sub	sp, #60	; 0x3c
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80095a4:	4c4d      	ldr	r4, [pc, #308]	; (80096dc <ResetMacParameters+0x13c>)
 80095a6:	2600      	movs	r6, #0
 80095a8:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup1.AdrAckCounter = 0;
 80095ac:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 80095ae:	4d4c      	ldr	r5, [pc, #304]	; (80096e0 <ResetMacParameters+0x140>)
 80095b0:	f885 6410 	strb.w	r6, [r5, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 80095b4:	2701      	movs	r7, #1
 80095b6:	f885 7411 	strb.w	r7, [r5, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 80095ba:	f885 7412 	strb.w	r7, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 80095be:	f885 6413 	strb.w	r6, [r5, #1043]	; 0x413
    Nvm.MacGroup2.MaxDCycle = 0;
 80095c2:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80095c6:	f8a4 710a 	strh.w	r7, [r4, #266]	; 0x10a
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80095ca:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 80095ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80095d2:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 80095d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80095da:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80095de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80095e2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80095e6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 80095ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095ee:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80095f2:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80095f6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80095fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095fe:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009602:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009606:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800960a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800960e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009612:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8009616:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009618:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800961c:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800961e:	f885 6414 	strb.w	r6, [r5, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8009622:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009626:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800962a:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 800962e:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009630:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8009634:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009636:	a901      	add	r1, sp, #4
 8009638:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800963c:	f002 fb9c 	bl	800bd78 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009640:	f885 6415 	strb.w	r6, [r5, #1045]	; 0x415
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009644:	f885 63cc 	strb.w	r6, [r5, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964a:	f8c5 33d0 	str.w	r3, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800964e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009652:	f885 33dc 	strb.w	r3, [r5, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009656:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800965a:	f885 33dd 	strb.w	r3, [r5, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800965e:	f885 63de 	strb.w	r6, [r5, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009662:	f885 73df 	strb.w	r7, [r5, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009666:	f505 7478 	add.w	r4, r5, #992	; 0x3e0
 800966a:	f505 7c73 	add.w	ip, r5, #972	; 0x3cc
 800966e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009674:	f8dc 3000 	ldr.w	r3, [ip]
 8009678:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800967a:	f885 73f2 	strb.w	r7, [r5, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800967e:	2302      	movs	r3, #2
 8009680:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 8009684:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8009686:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 8009688:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800968c:	b11b      	cbz	r3, 8009696 <ResetMacParameters+0xf6>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <ResetMacParameters+0x140>)
 8009698:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 800969c:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800969e:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 80096a2:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80096a4:	f203 424c 	addw	r2, r3, #1100	; 0x44c
 80096a8:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80096aa:	f203 4385 	addw	r3, r3, #1157	; 0x485
 80096ae:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80096b0:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <ResetMacParameters+0x13c>)
 80096b2:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 80096b6:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80096b8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80096bc:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80096be:	f102 0344 	add.w	r3, r2, #68	; 0x44
 80096c2:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80096c4:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 80096c8:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80096ca:	f502 62e4 	add.w	r2, r2, #1824	; 0x720
 80096ce:	a90c      	add	r1, sp, #48	; 0x30
 80096d0:	a804      	add	r0, sp, #16
 80096d2:	f001 fb29 	bl	800ad28 <LoRaMacClassBInit>
}
 80096d6:	b00f      	add	sp, #60	; 0x3c
 80096d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096da:	bf00      	nop
 80096dc:	20008000 	.word	0x20008000
 80096e0:	200005ec 	.word	0x200005ec

080096e4 <SwitchClass>:
{
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80096e8:	4b3e      	ldr	r3, [pc, #248]	; (80097e4 <SwitchClass+0x100>)
 80096ea:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 80096ee:	2d01      	cmp	r5, #1
 80096f0:	d064      	beq.n	80097bc <SwitchClass+0xd8>
 80096f2:	2d02      	cmp	r5, #2
 80096f4:	d06a      	beq.n	80097cc <SwitchClass+0xe8>
 80096f6:	b10d      	cbz	r5, 80096fc <SwitchClass+0x18>
 80096f8:	2003      	movs	r0, #3
}
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 80096fc:	b930      	cbnz	r0, 800970c <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80096fe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009702:	3364      	adds	r3, #100	; 0x64
 8009704:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009708:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800970c:	2c01      	cmp	r4, #1
 800970e:	d021      	beq.n	8009754 <SwitchClass+0x70>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009710:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009712:	2c02      	cmp	r4, #2
 8009714:	d1f1      	bne.n	80096fa <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009716:	4b33      	ldr	r3, [pc, #204]	; (80097e4 <SwitchClass+0x100>)
 8009718:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800971c:	4e32      	ldr	r6, [pc, #200]	; (80097e8 <SwitchClass+0x104>)
 800971e:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 8009722:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 8009726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800972a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800972c:	f8dc 3000 	ldr.w	r3, [ip]
 8009730:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009732:	2302      	movs	r3, #2
 8009734:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd13      	ble.n	8009766 <SwitchClass+0x82>
                MacCtx.NodeAckRequested = false;
 800973e:	4b2a      	ldr	r3, [pc, #168]	; (80097e8 <SwitchClass+0x104>)
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                Radio.Sleep( );
 8009746:	4b29      	ldr	r3, [pc, #164]	; (80097ec <SwitchClass+0x108>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800974c:	f7ff fd24 	bl	8009198 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009750:	4628      	mov	r0, r5
 8009752:	e7d2      	b.n	80096fa <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009754:	4620      	mov	r0, r4
 8009756:	f001 fafd 	bl	800ad54 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800975a:	2800      	cmp	r0, #0
 800975c:	d1d9      	bne.n	8009712 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800975e:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <SwitchClass+0x100>)
 8009760:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009764:	e7d5      	b.n	8009712 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009766:	4618      	mov	r0, r3
 8009768:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <SwitchClass+0x100>)
 800976a:	212c      	movs	r1, #44	; 0x2c
 800976c:	fb01 2203 	mla	r2, r1, r3, r2
 8009770:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8009774:	b912      	cbnz	r2, 800977c <SwitchClass+0x98>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009776:	3301      	adds	r3, #1
 8009778:	b25b      	sxtb	r3, r3
 800977a:	e7de      	b.n	800973a <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800977c:	4a19      	ldr	r2, [pc, #100]	; (80097e4 <SwitchClass+0x100>)
 800977e:	fb01 2000 	mla	r0, r1, r0, r2
 8009782:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009786:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009788:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800978c:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009790:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <SwitchClass+0x104>)
 8009792:	f893 0415 	ldrb.w	r0, [r3, #1045]	; 0x415
 8009796:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800979a:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800979e:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 80097a2:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80097a6:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80097aa:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80097ae:	2203      	movs	r2, #3
 80097b0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80097ba:	e7c0      	b.n	800973e <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 80097bc:	f001 faca 	bl	800ad54 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d19a      	bne.n	80096fa <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80097c4:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <SwitchClass+0x100>)
 80097c6:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 80097ca:	e796      	b.n	80096fa <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 80097cc:	b938      	cbnz	r0, 80097de <SwitchClass+0xfa>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80097ce:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <SwitchClass+0x100>)
 80097d0:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <SwitchClass+0x108>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80097da:	4620      	mov	r0, r4
 80097dc:	e78d      	b.n	80096fa <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80097de:	2003      	movs	r0, #3
 80097e0:	e78b      	b.n	80096fa <SwitchClass+0x16>
 80097e2:	bf00      	nop
 80097e4:	20008000 	.word	0x20008000
 80097e8:	200005ec 	.word	0x200005ec
 80097ec:	08012ec4 	.word	0x08012ec4

080097f0 <SendReJoinReq>:
{
 80097f0:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 80097f2:	28ff      	cmp	r0, #255	; 0xff
 80097f4:	d003      	beq.n	80097fe <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 80097f6:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 80097f8:	f7ff fb7a 	bl	8008ef0 <ScheduleTx>
}
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 80097fe:	2000      	movs	r0, #0
 8009800:	f7ff ff70 	bl	80096e4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009804:	4d0e      	ldr	r5, [pc, #56]	; (8009840 <SendReJoinReq+0x50>)
 8009806:	2400      	movs	r4, #0
 8009808:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800980c:	1cab      	adds	r3, r5, #2
 800980e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009812:	23ff      	movs	r3, #255	; 0xff
 8009814:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009818:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800981c:	f005 fb7c 	bl	800ef18 <SecureElementGetJoinEui>
 8009820:	4601      	mov	r1, r0
 8009822:	2208      	movs	r2, #8
 8009824:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009828:	f005 fba7 	bl	800ef7a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800982c:	f005 fb5e 	bl	800eeec <SecureElementGetDevEui>
 8009830:	4601      	mov	r1, r0
 8009832:	2208      	movs	r2, #8
 8009834:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009838:	f005 fb9f 	bl	800ef7a <memcpy1>
            allowDelayedTx = false;
 800983c:	4620      	mov	r0, r4
            break;
 800983e:	e7db      	b.n	80097f8 <SendReJoinReq+0x8>
 8009840:	200005ec 	.word	0x200005ec

08009844 <SetTxContinuousWave>:
{
 8009844:	b510      	push	{r4, lr}
 8009846:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 8009848:	4c10      	ldr	r4, [pc, #64]	; (800988c <SetTxContinuousWave+0x48>)
 800984a:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 800984e:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009852:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <SetTxContinuousWave+0x4c>)
 8009854:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8009858:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800985c:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8009860:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009864:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009866:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009868:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800986a:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800986c:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009870:	4669      	mov	r1, sp
 8009872:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009876:	f002 fb6e 	bl	800bf56 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800987a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800987e:	f043 0302 	orr.w	r3, r3, #2
 8009882:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 8009886:	2000      	movs	r0, #0
 8009888:	b004      	add	sp, #16
 800988a:	bd10      	pop	{r4, pc}
 800988c:	200005ec 	.word	0x200005ec
 8009890:	20008000 	.word	0x20008000

08009894 <PrepareFrame>:
{
 8009894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009898:	b083      	sub	sp, #12
 800989a:	4605      	mov	r5, r0
 800989c:	460e      	mov	r6, r1
 800989e:	4617      	mov	r7, r2
 80098a0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 80098a4:	4959      	ldr	r1, [pc, #356]	; (8009a0c <PrepareFrame+0x178>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 80098aa:	f881 2414 	strb.w	r2, [r1, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80098ae:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 80098b0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 80098b2:	4698      	mov	r8, r3
 80098b4:	b1cb      	cbz	r3, 80098ea <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80098b6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009a0c <PrepareFrame+0x178>
 80098ba:	4622      	mov	r2, r4
 80098bc:	4641      	mov	r1, r8
 80098be:	f509 709c 	add.w	r0, r9, #312	; 0x138
 80098c2:	f005 fb5a 	bl	800ef7a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80098c6:	b2e0      	uxtb	r0, r4
 80098c8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80098cc:	782b      	ldrb	r3, [r5, #0]
 80098ce:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 80098d2:	782b      	ldrb	r3, [r5, #0]
 80098d4:	095b      	lsrs	r3, r3, #5
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d009      	beq.n	80098ee <PrepareFrame+0x5a>
 80098da:	2b07      	cmp	r3, #7
 80098dc:	d079      	beq.n	80099d2 <PrepareFrame+0x13e>
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d009      	beq.n	80098f6 <PrepareFrame+0x62>
 80098e2:	2002      	movs	r0, #2
}
 80098e4:	b003      	add	sp, #12
 80098e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 80098ea:	4614      	mov	r4, r2
 80098ec:	e7e3      	b.n	80098b6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 80098ee:	4b47      	ldr	r3, [pc, #284]	; (8009a0c <PrepareFrame+0x178>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80098f6:	4b45      	ldr	r3, [pc, #276]	; (8009a0c <PrepareFrame+0x178>)
 80098f8:	2204      	movs	r2, #4
 80098fa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80098fe:	1c9a      	adds	r2, r3, #2
 8009900:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009904:	22ff      	movs	r2, #255	; 0xff
 8009906:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800990a:	782a      	ldrb	r2, [r5, #0]
 800990c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009910:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009914:	4a3e      	ldr	r2, [pc, #248]	; (8009a10 <PrepareFrame+0x17c>)
 8009916:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800991a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800991e:	7832      	ldrb	r2, [r6, #0]
 8009920:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009924:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009928:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800992c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009930:	a801      	add	r0, sp, #4
 8009932:	f001 fe8b 	bl	800b64c <LoRaMacCryptoGetFCntUp>
 8009936:	2800      	cmp	r0, #0
 8009938:	d15c      	bne.n	80099f4 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800993a:	9a01      	ldr	r2, [sp, #4]
 800993c:	4b33      	ldr	r3, [pc, #204]	; (8009a0c <PrepareFrame+0x178>)
 800993e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 8009942:	2100      	movs	r1, #0
 8009944:	f883 143d 	strb.w	r1, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8009948:	f883 143c 	strb.w	r1, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800994c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009950:	4668      	mov	r0, sp
 8009952:	f001 fb15 	bl	800af80 <LoRaMacCommandsGetSizeSerializedCmds>
 8009956:	2800      	cmp	r0, #0
 8009958:	d14e      	bne.n	80099f8 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0c1      	beq.n	80098e4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009960:	4b2b      	ldr	r3, [pc, #172]	; (8009a10 <PrepareFrame+0x17c>)
 8009962:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009966:	f7fe f91f 	bl	8007ba8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800996a:	4b28      	ldr	r3, [pc, #160]	; (8009a0c <PrepareFrame+0x178>)
 800996c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009970:	b113      	cbz	r3, 8009978 <PrepareFrame+0xe4>
 8009972:	9a00      	ldr	r2, [sp, #0]
 8009974:	2a0f      	cmp	r2, #15
 8009976:	d915      	bls.n	80099a4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009978:	b113      	cbz	r3, 8009980 <PrepareFrame+0xec>
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	2b0f      	cmp	r3, #15
 800997e:	d821      	bhi.n	80099c4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009980:	4a24      	ldr	r2, [pc, #144]	; (8009a14 <PrepareFrame+0x180>)
 8009982:	4669      	mov	r1, sp
 8009984:	f001 fb08 	bl	800af98 <LoRaMacCommandsSerializeCmds>
 8009988:	2800      	cmp	r0, #0
 800998a:	d13b      	bne.n	8009a04 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800998c:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <PrepareFrame+0x178>)
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009994:	f203 428c 	addw	r2, r3, #1164	; 0x48c
 8009998:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800999c:	9a00      	ldr	r2, [sp, #0]
 800999e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80099a2:	e79f      	b.n	80098e4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80099a4:	4a1c      	ldr	r2, [pc, #112]	; (8009a18 <PrepareFrame+0x184>)
 80099a6:	4669      	mov	r1, sp
 80099a8:	200f      	movs	r0, #15
 80099aa:	f001 faf5 	bl	800af98 <LoRaMacCommandsSerializeCmds>
 80099ae:	bb28      	cbnz	r0, 80099fc <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80099b0:	7833      	ldrb	r3, [r6, #0]
 80099b2:	9a00      	ldr	r2, [sp, #0]
 80099b4:	f362 0303 	bfi	r3, r2, #0, #4
 80099b8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <PrepareFrame+0x178>)
 80099be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80099c2:	e78f      	b.n	80098e4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80099c4:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <PrepareFrame+0x180>)
 80099c6:	4669      	mov	r1, sp
 80099c8:	f001 fae6 	bl	800af98 <LoRaMacCommandsSerializeCmds>
 80099cc:	b1c0      	cbz	r0, 8009a00 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80099ce:	2013      	movs	r0, #19
 80099d0:	e788      	b.n	80098e4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80099d2:	f1b8 0f00 	cmp.w	r8, #0
 80099d6:	d017      	beq.n	8009a08 <PrepareFrame+0x174>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d083      	beq.n	80098e4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80099dc:	4c0b      	ldr	r4, [pc, #44]	; (8009a0c <PrepareFrame+0x178>)
 80099de:	b282      	uxth	r2, r0
 80099e0:	4641      	mov	r1, r8
 80099e2:	1ce0      	adds	r0, r4, #3
 80099e4:	f005 fac9 	bl	800ef7a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80099e8:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 80099ec:	3301      	adds	r3, #1
 80099ee:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 80099f0:	2000      	movs	r0, #0
 80099f2:	e777      	b.n	80098e4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80099f4:	2012      	movs	r0, #18
 80099f6:	e775      	b.n	80098e4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80099f8:	2013      	movs	r0, #19
 80099fa:	e773      	b.n	80098e4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80099fc:	2013      	movs	r0, #19
 80099fe:	e771      	b.n	80098e4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009a00:	200a      	movs	r0, #10
 8009a02:	e76f      	b.n	80098e4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009a04:	2013      	movs	r0, #19
 8009a06:	e76d      	b.n	80098e4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e76b      	b.n	80098e4 <PrepareFrame+0x50>
 8009a0c:	200005ec 	.word	0x200005ec
 8009a10:	20008000 	.word	0x20008000
 8009a14:	20000a78 	.word	0x20000a78
 8009a18:	20000704 	.word	0x20000704

08009a1c <Send>:
{
 8009a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a20:	b08a      	sub	sp, #40	; 0x28
 8009a22:	4617      	mov	r7, r2
 8009a24:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009a26:	4c43      	ldr	r4, [pc, #268]	; (8009b34 <Send+0x118>)
 8009a28:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009a2c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009a30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009a32:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009a34:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d079      	beq.n	8009b30 <Send+0x114>
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009a40:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8009a44:	b90b      	cbnz	r3, 8009a4a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009a46:	2100      	movs	r1, #0
 8009a48:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009a50:	4838      	ldr	r0, [pc, #224]	; (8009b34 <Send+0x118>)
 8009a52:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 8009a56:	f361 13c7 	bfi	r3, r1, #7, #1
 8009a5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009a5e:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d051      	beq.n	8009b0a <Send+0xee>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009a66:	4b33      	ldr	r3, [pc, #204]	; (8009b34 <Send+0x118>)
 8009a68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a6c:	b12b      	cbz	r3, 8009a7a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009a6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009a72:	f043 0320 	orr.w	r3, r3, #32
 8009a76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.Version = Nvm.MacGroup2.Version;
 8009a7a:	4c2e      	ldr	r4, [pc, #184]	; (8009b34 <Send+0x118>)
 8009a7c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009a80:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = true;
 8009a82:	2301      	movs	r3, #1
 8009a84:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009a88:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009a8c:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009a8e:	4b2a      	ldr	r3, [pc, #168]	; (8009b38 <Send+0x11c>)
 8009a90:	f8b3 23f4 	ldrh.w	r2, [r3, #1012]	; 0x3f4
 8009a94:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009a98:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8009a9c:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009aa0:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009aa4:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009aa8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8009aac:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009ab0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009ab4:	f88d 301f 	strb.w	r3, [sp, #31]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009ab8:	ab08      	add	r3, sp, #32
 8009aba:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8009abe:	f104 0139 	add.w	r1, r4, #57	; 0x39
 8009ac2:	a803      	add	r0, sp, #12
 8009ac4:	f001 f928 	bl	800ad18 <LoRaMacAdrCalcNext>
 8009ac8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009acc:	f360 1386 	bfi	r3, r0, #6, #1
 8009ad0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009ad4:	f8cd 8000 	str.w	r8, [sp]
 8009ad8:	463b      	mov	r3, r7
 8009ada:	4632      	mov	r2, r6
 8009adc:	a909      	add	r1, sp, #36	; 0x24
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f7ff fed8 	bl	8009894 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	b108      	cbz	r0, 8009aec <Send+0xd0>
 8009ae8:	280a      	cmp	r0, #10
 8009aea:	d104      	bne.n	8009af6 <Send+0xda>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009aec:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009af0:	f7ff f9fe 	bl	8008ef0 <ScheduleTx>
 8009af4:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 8009af6:	b17c      	cbz	r4, 8009b18 <Send+0xfc>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8009af8:	4b0e      	ldr	r3, [pc, #56]	; (8009b34 <Send+0x118>)
 8009afa:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8009afe:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 8009b02:	4620      	mov	r0, r4
 8009b04:	b00a      	add	sp, #40	; 0x28
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 8009b0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009b0e:	f043 0310 	orr.w	r3, r3, #16
 8009b12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009b16:	e7a6      	b.n	8009a66 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <Send+0x118>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8009b20:	9a08      	ldr	r2, [sp, #32]
 8009b22:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8009b24:	f001 fa00 	bl	800af28 <LoRaMacCommandsRemoveNoneStickyCmds>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d0ea      	beq.n	8009b02 <Send+0xe6>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b2c:	2413      	movs	r4, #19
 8009b2e:	e7e8      	b.n	8009b02 <Send+0xe6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8009b30:	2407      	movs	r4, #7
 8009b32:	e7e6      	b.n	8009b02 <Send+0xe6>
 8009b34:	20008000 	.word	0x20008000
 8009b38:	200005ec 	.word	0x200005ec

08009b3c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <LoRaMacIsBusy+0x20>)
 8009b3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009b42:	b933      	cbnz	r3, 8009b52 <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <LoRaMacIsBusy+0x20>)
 8009b46:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d003      	beq.n	8009b56 <LoRaMacIsBusy+0x1a>
    return true;
 8009b4e:	2001      	movs	r0, #1
 8009b50:	4770      	bx	lr
 8009b52:	2001      	movs	r0, #1
 8009b54:	4770      	bx	lr
        return false;
 8009b56:	2000      	movs	r0, #0
}
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	200005ec 	.word	0x200005ec

08009b60 <LoRaMacProcess>:
{
 8009b60:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8009b62:	f7fe fffb 	bl	8008b5c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8009b66:	f001 f905 	bl	800ad74 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009b6a:	4b20      	ldr	r3, [pc, #128]	; (8009bec <LoRaMacProcess+0x8c>)
 8009b6c:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009b70:	f013 0f20 	tst.w	r3, #32
 8009b74:	d10d      	bne.n	8009b92 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 8009b76:	f7fd fedd 	bl	8007934 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8009b7a:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <LoRaMacProcess+0x8c>)
 8009b7c:	f893 3484 	ldrb.w	r3, [r3, #1156]	; 0x484
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d024      	beq.n	8009bce <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8009b84:	4b19      	ldr	r3, [pc, #100]	; (8009bec <LoRaMacProcess+0x8c>)
 8009b86:	f893 3485 	ldrb.w	r3, [r3, #1157]	; 0x485
 8009b8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b8e:	d121      	bne.n	8009bd4 <LoRaMacProcess+0x74>
}
 8009b90:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8009b92:	2000      	movs	r0, #0
 8009b94:	f7fd fec8 	bl	8007928 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8009b98:	f7fd fefa 	bl	8007990 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8009b9c:	f7fd ffcc 	bl	8007b38 <IsRequestPending>
 8009ba0:	b110      	cbz	r0, 8009ba8 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8009ba2:	f7fe f8f7 	bl	8007d94 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8009ba6:	b918      	cbnz	r0, 8009bb0 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 8009ba8:	f7ff f806 	bl	8008bb8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8009bac:	f7ff fa4c 	bl	8009048 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8009bb0:	f7ff fa96 	bl	80090e0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8009bb4:	f7ff fade 	bl	8009174 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009bb8:	2001      	movs	r0, #1
 8009bba:	f7fd feb5 	bl	8007928 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8009bbe:	4a0b      	ldr	r2, [pc, #44]	; (8009bec <LoRaMacProcess+0x8c>)
 8009bc0:	f892 3485 	ldrb.w	r3, [r2, #1157]	; 0x485
 8009bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc8:	f882 3485 	strb.w	r3, [r2, #1157]	; 0x485
 8009bcc:	e7d3      	b.n	8009b76 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8009bce:	f7ff fae3 	bl	8009198 <OpenContinuousRxCWindow>
 8009bd2:	e7d7      	b.n	8009b84 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <LoRaMacProcess+0x8c>)
 8009bd6:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 8009bda:	f36f 1286 	bfc	r2, #6, #1
 8009bde:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
        LoRaMacHandleNvm( &Nvm );
 8009be2:	4803      	ldr	r0, [pc, #12]	; (8009bf0 <LoRaMacProcess+0x90>)
 8009be4:	f7ff fb7c 	bl	80092e0 <LoRaMacHandleNvm>
}
 8009be8:	e7d2      	b.n	8009b90 <LoRaMacProcess+0x30>
 8009bea:	bf00      	nop
 8009bec:	200005ec 	.word	0x200005ec
 8009bf0:	20008000 	.word	0x20008000

08009bf4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f000 81a0 	beq.w	8009f40 <LoRaMacInitialization+0x34c>
 8009c00:	460e      	mov	r6, r1
 8009c02:	4691      	mov	r9, r2
 8009c04:	4680      	mov	r8, r0
 8009c06:	2900      	cmp	r1, #0
 8009c08:	f000 819c 	beq.w	8009f44 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009c0c:	6803      	ldr	r3, [r0, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 819a 	beq.w	8009f48 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009c14:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8198 	beq.w	8009f4c <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009c1c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 8196 	beq.w	8009f50 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 8009c24:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8194 	beq.w	8009f54 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f002 f873 	bl	800bd18 <RegionIsActive>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f000 8190 	beq.w	8009f58 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8009c38:	4640      	mov	r0, r8
 8009c3a:	f001 fa57 	bl	800b0ec <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8009c3e:	4ccc      	ldr	r4, [pc, #816]	; (8009f70 <LoRaMacInitialization+0x37c>)
 8009c40:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 8009c44:	2100      	movs	r1, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	f005 f9af 	bl	800efaa <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009c4c:	4dc9      	ldr	r5, [pc, #804]	; (8009f74 <LoRaMacInitialization+0x380>)
 8009c4e:	f240 520c 	movw	r2, #1292	; 0x50c
 8009c52:	2100      	movs	r1, #0
 8009c54:	4628      	mov	r0, r5
 8009c56:	f005 f9a8 	bl	800efaa <memset1>

    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009c5a:	f04f 0a01 	mov.w	sl, #1
 8009c5e:	f885 a412 	strb.w	sl, [r5, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8009c62:	f885 a411 	strb.w	sl, [r5, #1041]	; 0x411
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8009c66:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009c6a:	2700      	movs	r7, #0
 8009c6c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009c70:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009c74:	4bc0      	ldr	r3, [pc, #768]	; (8009f78 <LoRaMacInitialization+0x384>)
 8009c76:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009c7a:	230f      	movs	r3, #15
 8009c7c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c80:	a908      	add	r1, sp, #32
 8009c82:	4648      	mov	r0, r9
 8009c84:	f002 f852 	bl	800bd2c <RegionGetPhyParam>
 8009c88:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009c8a:	1bc0      	subs	r0, r0, r7
 8009c8c:	bf18      	it	ne
 8009c8e:	2001      	movne	r0, #1
 8009c90:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009c94:	f04f 0b0a 	mov.w	fp, #10
 8009c98:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c9c:	a908      	add	r1, sp, #32
 8009c9e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ca2:	f002 f843 	bl	800bd2c <RegionGetPhyParam>
 8009ca6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009ca8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009cac:	f04f 0906 	mov.w	r9, #6
 8009cb0:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009cb4:	a908      	add	r1, sp, #32
 8009cb6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009cba:	f002 f837 	bl	800bd2c <RegionGetPhyParam>
 8009cbe:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009cc0:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009cca:	a908      	add	r1, sp, #32
 8009ccc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009cd0:	f002 f82c 	bl	800bd2c <RegionGetPhyParam>
 8009cd4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009cd6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009cda:	2311      	movs	r3, #17
 8009cdc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009ce0:	a908      	add	r1, sp, #32
 8009ce2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ce6:	f002 f821 	bl	800bd2c <RegionGetPhyParam>
 8009cea:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009cec:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009cf0:	2312      	movs	r3, #18
 8009cf2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009cf6:	a908      	add	r1, sp, #32
 8009cf8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009cfc:	f002 f816 	bl	800bd2c <RegionGetPhyParam>
 8009d00:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009d02:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009d06:	2313      	movs	r3, #19
 8009d08:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d0c:	a908      	add	r1, sp, #32
 8009d0e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d12:	f002 f80b 	bl	800bd2c <RegionGetPhyParam>
 8009d16:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009d18:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009d1c:	2314      	movs	r3, #20
 8009d1e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d22:	a908      	add	r1, sp, #32
 8009d24:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d28:	f002 f800 	bl	800bd2c <RegionGetPhyParam>
 8009d2c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009d2e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009d32:	2317      	movs	r3, #23
 8009d34:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d38:	a908      	add	r1, sp, #32
 8009d3a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d3e:	f001 fff5 	bl	800bd2c <RegionGetPhyParam>
 8009d42:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009d44:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009d48:	2318      	movs	r3, #24
 8009d4a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d4e:	a908      	add	r1, sp, #32
 8009d50:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d54:	f001 ffea 	bl	800bd2c <RegionGetPhyParam>
 8009d58:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009d5a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8009d5e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009d62:	2319      	movs	r3, #25
 8009d64:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d68:	a908      	add	r1, sp, #32
 8009d6a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d6e:	f001 ffdd 	bl	800bd2c <RegionGetPhyParam>
 8009d72:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009d74:	b2c0      	uxtb	r0, r0
 8009d76:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009d7a:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009d7e:	231e      	movs	r3, #30
 8009d80:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d84:	a908      	add	r1, sp, #32
 8009d86:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009d8a:	f001 ffcf 	bl	800bd2c <RegionGetPhyParam>
 8009d8e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009d90:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009d94:	231f      	movs	r3, #31
 8009d96:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d9a:	a908      	add	r1, sp, #32
 8009d9c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009da0:	f001 ffc4 	bl	800bd2c <RegionGetPhyParam>
 8009da4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009da6:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009daa:	2320      	movs	r3, #32
 8009dac:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009db0:	eb0d 0103 	add.w	r1, sp, r3
 8009db4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009db8:	f001 ffb8 	bl	800bd2c <RegionGetPhyParam>
 8009dbc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009dc4:	2321      	movs	r3, #33	; 0x21
 8009dc6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009dca:	a908      	add	r1, sp, #32
 8009dcc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009dd0:	f001 ffac 	bl	800bd2c <RegionGetPhyParam>
 8009dd4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009dd6:	9b07      	ldr	r3, [sp, #28]
 8009dd8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009ddc:	230b      	movs	r3, #11
 8009dde:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009de2:	a908      	add	r1, sp, #32
 8009de4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009de8:	f001 ffa0 	bl	800bd2c <RegionGetPhyParam>
 8009dec:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckLimit = phyParam.Value;
 8009dee:	f8a5 03f4 	strh.w	r0, [r5, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8009df2:	230c      	movs	r3, #12
 8009df4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009df8:	a908      	add	r1, sp, #32
 8009dfa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009dfe:	f001 ff95 	bl	800bd2c <RegionGetPhyParam>
 8009e02:	9007      	str	r0, [sp, #28]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009e04:	f8a5 03f6 	strh.w	r0, [r5, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009e08:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009e0c:	f8c4 b088 	str.w	fp, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8009e10:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8009e14:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009e18:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8009e1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009e20:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8009e22:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009e26:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8009e28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009e2c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8009e2e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009e32:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8009e34:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009e38:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8009e3a:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8009e3e:	f88d 7018 	strb.w	r7, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009e42:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 8009e46:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009e48:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8009e4c:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009e4e:	a904      	add	r1, sp, #16
 8009e50:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009e54:	f001 ff90 	bl	800bd78 <RegionInitDefaults>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8009e58:	f8c5 6348 	str.w	r6, [r5, #840]	; 0x348
    ResetMacParameters( );
 8009e5c:	f7ff fba0 	bl	80095a0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8009e60:	f884 a105 	strb.w	sl, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8009e64:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8009e68:	f885 7485 	strb.w	r7, [r5, #1157]	; 0x485
    MacCtx.MacState = LORAMAC_STOPPED;
 8009e6c:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8009e70:	62e7      	str	r7, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009e72:	6327      	str	r7, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009e74:	9700      	str	r7, [sp, #0]
 8009e76:	4b41      	ldr	r3, [pc, #260]	; (8009f7c <LoRaMacInitialization+0x388>)
 8009e78:	463a      	mov	r2, r7
 8009e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e7e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 8009e82:	f007 fe0b 	bl	8011a9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009e86:	9700      	str	r7, [sp, #0]
 8009e88:	4b3d      	ldr	r3, [pc, #244]	; (8009f80 <LoRaMacInitialization+0x38c>)
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e90:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8009e94:	f007 fe02 	bl	8011a9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009e98:	9700      	str	r7, [sp, #0]
 8009e9a:	4b3a      	ldr	r3, [pc, #232]	; (8009f84 <LoRaMacInitialization+0x390>)
 8009e9c:	463a      	mov	r2, r7
 8009e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8009ea2:	f505 7066 	add.w	r0, r5, #920	; 0x398
 8009ea6:	f007 fdf9 	bl	8011a9c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009eaa:	9700      	str	r7, [sp, #0]
 8009eac:	4b36      	ldr	r3, [pc, #216]	; (8009f88 <LoRaMacInitialization+0x394>)
 8009eae:	463a      	mov	r2, r7
 8009eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009eb4:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 8009eb8:	f007 fdf0 	bl	8011a9c <UTIL_TIMER_Create>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f007 fd7e 	bl	80119c0 <SysTimeGetMcuTime>
 8009ec4:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8009ec8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009ecc:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009ed0:	4b2e      	ldr	r3, [pc, #184]	; (8009f8c <LoRaMacInitialization+0x398>)
 8009ed2:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8009ed6:	4b2e      	ldr	r3, [pc, #184]	; (8009f90 <LoRaMacInitialization+0x39c>)
 8009ed8:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009edc:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <LoRaMacInitialization+0x3a0>)
 8009ede:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009ee2:	4b2d      	ldr	r3, [pc, #180]	; (8009f98 <LoRaMacInitialization+0x3a4>)
 8009ee4:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009ee8:	4b2c      	ldr	r3, [pc, #176]	; (8009f9c <LoRaMacInitialization+0x3a8>)
 8009eea:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <LoRaMacInitialization+0x3ac>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 8009ef6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8009ef8:	68b1      	ldr	r1, [r6, #8]
 8009efa:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8009efe:	f004 fd91 	bl	800ea24 <SecureElementInit>
 8009f02:	bb70      	cbnz	r0, 8009f62 <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009f04:	4620      	mov	r0, r4
 8009f06:	f001 fb81 	bl	800b60c <LoRaMacCryptoInit>
 8009f0a:	bb60      	cbnz	r0, 8009f66 <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8009f0c:	f000 ffb6 	bl	800ae7c <LoRaMacCommandsInit>
 8009f10:	bb58      	cbnz	r0, 8009f6a <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009f12:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8009f16:	f001 fbdf 	bl	800b6d8 <LoRaMacCryptoSetMulticastReference>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d141      	bne.n	8009fa4 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8009f20:	4d1f      	ldr	r5, [pc, #124]	; (8009fa0 <LoRaMacInitialization+0x3ac>)
 8009f22:	696b      	ldr	r3, [r5, #20]
 8009f24:	4798      	blx	r3
 8009f26:	f005 f815 	bl	800ef54 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009f2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009f2c:	4a10      	ldr	r2, [pc, #64]	; (8009f70 <LoRaMacInitialization+0x37c>)
 8009f2e:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 8009f32:	4798      	blx	r3
    Radio.Sleep( );
 8009f34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009f36:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009f38:	4650      	mov	r0, sl
 8009f3a:	f7fd fcf5 	bl	8007928 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8009f3e:	e00c      	b.n	8009f5a <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f40:	2403      	movs	r4, #3
 8009f42:	e00a      	b.n	8009f5a <LoRaMacInitialization+0x366>
 8009f44:	2403      	movs	r4, #3
 8009f46:	e008      	b.n	8009f5a <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f48:	2403      	movs	r4, #3
 8009f4a:	e006      	b.n	8009f5a <LoRaMacInitialization+0x366>
 8009f4c:	2403      	movs	r4, #3
 8009f4e:	e004      	b.n	8009f5a <LoRaMacInitialization+0x366>
 8009f50:	2403      	movs	r4, #3
 8009f52:	e002      	b.n	8009f5a <LoRaMacInitialization+0x366>
 8009f54:	2403      	movs	r4, #3
 8009f56:	e000      	b.n	8009f5a <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009f58:	2409      	movs	r4, #9
}
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	b00b      	add	sp, #44	; 0x2c
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f62:	2411      	movs	r4, #17
 8009f64:	e7f9      	b.n	8009f5a <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f66:	2411      	movs	r4, #17
 8009f68:	e7f7      	b.n	8009f5a <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f6a:	2413      	movs	r4, #19
 8009f6c:	e7f5      	b.n	8009f5a <LoRaMacInitialization+0x366>
 8009f6e:	bf00      	nop
 8009f70:	20008000 	.word	0x20008000
 8009f74:	200005ec 	.word	0x200005ec
 8009f78:	01000300 	.word	0x01000300
 8009f7c:	08008ff9 	.word	0x08008ff9
 8009f80:	08009299 	.word	0x08009299
 8009f84:	08009249 	.word	0x08009249
 8009f88:	08007d09 	.word	0x08007d09
 8009f8c:	08009549 	.word	0x08009549
 8009f90:	080094f1 	.word	0x080094f1
 8009f94:	080078dd 	.word	0x080078dd
 8009f98:	080094bd 	.word	0x080094bd
 8009f9c:	08009489 	.word	0x08009489
 8009fa0:	08012ec4 	.word	0x08012ec4
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009fa4:	2411      	movs	r4, #17
 8009fa6:	e7d8      	b.n	8009f5a <LoRaMacInitialization+0x366>

08009fa8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009fa8:	2000      	movs	r0, #0
 8009faa:	4b02      	ldr	r3, [pc, #8]	; (8009fb4 <LoRaMacStart+0xc>)
 8009fac:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	200005ec 	.word	0x200005ec

08009fb8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8009fb8:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 8009fba:	f7ff fdbf 	bl	8009b3c <LoRaMacIsBusy>
 8009fbe:	b130      	cbz	r0, 8009fce <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <LoRaMacStop+0x24>)
 8009fc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d006      	beq.n	8009fd8 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 8009fca:	2001      	movs	r0, #1
}
 8009fcc:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <LoRaMacStop+0x24>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8009fd6:	e7f9      	b.n	8009fcc <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e7f7      	b.n	8009fcc <LoRaMacStop+0x14>
 8009fdc:	200005ec 	.word	0x200005ec

08009fe0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8009fe0:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8009fe2:	4c14      	ldr	r4, [pc, #80]	; (800a034 <LoRaMacHalt+0x54>)
 8009fe4:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009fe8:	f007 fdb6 	bl	8011b58 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8009fec:	f504 7060 	add.w	r0, r4, #896	; 0x380
 8009ff0:	f007 fdb2 	bl	8011b58 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009ff4:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009ff8:	f007 fdae 	bl	8011b58 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8009ffc:	f504 707e 	add.w	r0, r4, #1016	; 0x3f8
 800a000:	f007 fdaa 	bl	8011b58 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a004:	f000 fea4 	bl	800ad50 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a008:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <LoRaMacHalt+0x58>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a00e:	2500      	movs	r5, #0
 800a010:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a014:	4e09      	ldr	r6, [pc, #36]	; (800a03c <LoRaMacHalt+0x5c>)
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff f962 	bl	80092e0 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a01c:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 800a020:	4631      	mov	r1, r6
 800a022:	4807      	ldr	r0, [pc, #28]	; (800a040 <LoRaMacHalt+0x60>)
 800a024:	f004 ffa9 	bl	800ef7a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a028:	2301      	movs	r3, #1
 800a02a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a02e:	4628      	mov	r0, r5
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	bf00      	nop
 800a034:	200005ec 	.word	0x200005ec
 800a038:	08012ec4 	.word	0x08012ec4
 800a03c:	20008000 	.word	0x20008000
 800a040:	20008738 	.word	0x20008738

0800a044 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a044:	b530      	push	{r4, r5, lr}
 800a046:	b089      	sub	sp, #36	; 0x24
 800a048:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a04a:	4b2f      	ldr	r3, [pc, #188]	; (800a108 <LoRaMacQueryTxPossible+0xc4>)
 800a04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a04e:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a050:	f993 00cd 	ldrsb.w	r0, [r3, #205]	; 0xcd
 800a054:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a058:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a05c:	f88d 3006 	strb.w	r3, [sp, #6]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800a064:	2900      	cmp	r1, #0
 800a066:	d048      	beq.n	800a0fa <LoRaMacQueryTxPossible+0xb6>
 800a068:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800a06a:	4b27      	ldr	r3, [pc, #156]	; (800a108 <LoRaMacQueryTxPossible+0xc4>)
 800a06c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 800a070:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a072:	2100      	movs	r1, #0
 800a074:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a078:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a07c:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a080:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a082:	4a22      	ldr	r2, [pc, #136]	; (800a10c <LoRaMacQueryTxPossible+0xc8>)
 800a084:	f8b2 13f4 	ldrh.w	r1, [r2, #1012]	; 0x3f4
 800a088:	f8ad 1018 	strh.w	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a08c:	f8b2 23f6 	ldrh.w	r2, [r2, #1014]	; 0x3f6
 800a090:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a094:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800a098:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a09c:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800a0a0:	f88d 201d 	strb.w	r2, [sp, #29]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0a4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a0a8:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a0ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0b0:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800a0b4:	ab02      	add	r3, sp, #8
 800a0b6:	f10d 0206 	add.w	r2, sp, #6
 800a0ba:	f10d 0107 	add.w	r1, sp, #7
 800a0be:	a803      	add	r0, sp, #12
 800a0c0:	f000 fe2a 	bl	800ad18 <LoRaMacAdrCalcNext>
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a0c4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800a0c8:	f7fd fd6e 	bl	8007ba8 <GetMaxAppPayloadWithoutFOptsLength>
 800a0cc:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a0ce:	4668      	mov	r0, sp
 800a0d0:	f000 ff56 	bl	800af80 <LoRaMacCommandsGetSizeSerializedCmds>
 800a0d4:	b998      	cbnz	r0, 800a0fe <LoRaMacQueryTxPossible+0xba>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a0d6:	9b00      	ldr	r3, [sp, #0]
 800a0d8:	2b0f      	cmp	r3, #15
 800a0da:	d80a      	bhi.n	800a0f2 <LoRaMacQueryTxPossible+0xae>
 800a0dc:	786a      	ldrb	r2, [r5, #1]
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d807      	bhi.n	800a0f2 <LoRaMacQueryTxPossible+0xae>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a0e6:	9b00      	ldr	r3, [sp, #0]
 800a0e8:	441c      	add	r4, r3
 800a0ea:	42a2      	cmp	r2, r4
 800a0ec:	d309      	bcc.n	800a102 <LoRaMacQueryTxPossible+0xbe>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a0ee:	b009      	add	sp, #36	; 0x24
 800a0f0:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a0f6:	2008      	movs	r0, #8
 800a0f8:	e7f9      	b.n	800a0ee <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a0fa:	2003      	movs	r0, #3
 800a0fc:	e7f7      	b.n	800a0ee <LoRaMacQueryTxPossible+0xaa>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a0fe:	2013      	movs	r0, #19
 800a100:	e7f5      	b.n	800a0ee <LoRaMacQueryTxPossible+0xaa>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a102:	2008      	movs	r0, #8
 800a104:	e7f3      	b.n	800a0ee <LoRaMacQueryTxPossible+0xaa>
 800a106:	bf00      	nop
 800a108:	20008000 	.word	0x20008000
 800a10c:	200005ec 	.word	0x200005ec

0800a110 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a110:	2800      	cmp	r0, #0
 800a112:	f000 8124 	beq.w	800a35e <LoRaMacMibGetRequestConfirm+0x24e>
{
 800a116:	b510      	push	{r4, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a11c:	7800      	ldrb	r0, [r0, #0]
 800a11e:	2837      	cmp	r0, #55	; 0x37
 800a120:	f200 8119 	bhi.w	800a356 <LoRaMacMibGetRequestConfirm+0x246>
 800a124:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a128:	003e0038 	.word	0x003e0038
 800a12c:	00490044 	.word	0x00490044
 800a130:	0054004e 	.word	0x0054004e
 800a134:	0117005a 	.word	0x0117005a
 800a138:	01170117 	.word	0x01170117
 800a13c:	01170117 	.word	0x01170117
 800a140:	01170117 	.word	0x01170117
 800a144:	00600117 	.word	0x00600117
 800a148:	006c0066 	.word	0x006c0066
 800a14c:	00810079 	.word	0x00810079
 800a150:	00910089 	.word	0x00910089
 800a154:	009900a6 	.word	0x009900a6
 800a158:	00b900b3 	.word	0x00b900b3
 800a15c:	00c300be 	.word	0x00c300be
 800a160:	00cd00c8 	.word	0x00cd00c8
 800a164:	00d800d2 	.word	0x00d800d2
 800a168:	00de00e4 	.word	0x00de00e4
 800a16c:	00ef00ea 	.word	0x00ef00ea
 800a170:	010200f5 	.word	0x010200f5
 800a174:	00fe00fa 	.word	0x00fe00fa
 800a178:	01080117 	.word	0x01080117
 800a17c:	01170117 	.word	0x01170117
 800a180:	01170117 	.word	0x01170117
 800a184:	01170117 	.word	0x01170117
 800a188:	01170117 	.word	0x01170117
 800a18c:	01170117 	.word	0x01170117
 800a190:	01170117 	.word	0x01170117
 800a194:	01110117 	.word	0x01110117
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a198:	4b72      	ldr	r3, [pc, #456]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a19a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a19e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a1a0:	b004      	add	sp, #16
 800a1a2:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a1a4:	4b6f      	ldr	r3, [pc, #444]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1a6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a1aa:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1ac:	2000      	movs	r0, #0
            break;
 800a1ae:	e7f7      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a1b0:	f004 fe9c 	bl	800eeec <SecureElementGetDevEui>
 800a1b4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1b6:	2000      	movs	r0, #0
            break;
 800a1b8:	e7f2      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a1ba:	f004 fead 	bl	800ef18 <SecureElementGetJoinEui>
 800a1be:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1c0:	2000      	movs	r0, #0
            break;
 800a1c2:	e7ed      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a1c4:	4b67      	ldr	r3, [pc, #412]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1c6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a1ca:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1cc:	2000      	movs	r0, #0
            break;
 800a1ce:	e7e7      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a1d0:	4b64      	ldr	r3, [pc, #400]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a1d6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1d8:	2000      	movs	r0, #0
            break;
 800a1da:	e7e1      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a1dc:	4b61      	ldr	r3, [pc, #388]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a1e2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1e4:	2000      	movs	r0, #0
            break;
 800a1e6:	e7db      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a1e8:	4b5e      	ldr	r3, [pc, #376]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1ea:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a1ee:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1f0:	2000      	movs	r0, #0
            break;
 800a1f2:	e7d5      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a1f4:	4b5b      	ldr	r3, [pc, #364]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a1f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1fa:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a1fc:	2000      	movs	r0, #0
            break;
 800a1fe:	e7cf      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS;
 800a200:	231d      	movs	r3, #29
 800a202:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a206:	a902      	add	r1, sp, #8
 800a208:	4b56      	ldr	r3, [pc, #344]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a20a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a20e:	f001 fd8d 	bl	800bd2c <RegionGetPhyParam>
 800a212:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800a214:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a216:	2000      	movs	r0, #0
            break;
 800a218:	e7c2      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a21a:	3404      	adds	r4, #4
 800a21c:	4b52      	ldr	r3, [pc, #328]	; (800a368 <LoRaMacMibGetRequestConfirm+0x258>)
 800a21e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a222:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a226:	2000      	movs	r0, #0
            break;
 800a228:	e7ba      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a22a:	3404      	adds	r4, #4
 800a22c:	4b4f      	ldr	r3, [pc, #316]	; (800a36c <LoRaMacMibGetRequestConfirm+0x25c>)
 800a22e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a232:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a236:	2000      	movs	r0, #0
            break;
 800a238:	e7b2      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a23a:	3404      	adds	r4, #4
 800a23c:	4b4c      	ldr	r3, [pc, #304]	; (800a370 <LoRaMacMibGetRequestConfirm+0x260>)
 800a23e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a242:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a246:	2000      	movs	r0, #0
            break;
 800a248:	e7aa      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a24a:	3404      	adds	r4, #4
 800a24c:	4b49      	ldr	r3, [pc, #292]	; (800a374 <LoRaMacMibGetRequestConfirm+0x264>)
 800a24e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a252:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a256:	2000      	movs	r0, #0
            break;
 800a258:	e7a2      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a25a:	231b      	movs	r3, #27
 800a25c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a260:	a902      	add	r1, sp, #8
 800a262:	4b40      	ldr	r3, [pc, #256]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a264:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a268:	f001 fd60 	bl	800bd2c <RegionGetPhyParam>
 800a26c:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a26e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a270:	2000      	movs	r0, #0
            break;
 800a272:	e795      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a274:	231a      	movs	r3, #26
 800a276:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a27a:	a902      	add	r1, sp, #8
 800a27c:	4b39      	ldr	r3, [pc, #228]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a27e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a282:	f001 fd53 	bl	800bd2c <RegionGetPhyParam>
 800a286:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a288:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a28a:	2000      	movs	r0, #0
            break;
 800a28c:	e788      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a28e:	4b35      	ldr	r3, [pc, #212]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a290:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a294:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a296:	2000      	movs	r0, #0
            break;
 800a298:	e782      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a29a:	4b32      	ldr	r3, [pc, #200]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2a0:	2000      	movs	r0, #0
            break;
 800a2a2:	e77d      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a2a4:	4b2f      	ldr	r3, [pc, #188]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2aa:	2000      	movs	r0, #0
            break;
 800a2ac:	e778      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a2ae:	4b2d      	ldr	r3, [pc, #180]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2b4:	2000      	movs	r0, #0
            break;
 800a2b6:	e773      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a2b8:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2bc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2be:	2000      	movs	r0, #0
            break;
 800a2c0:	e76e      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a2c2:	4b28      	ldr	r3, [pc, #160]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2c8:	2000      	movs	r0, #0
            break;
 800a2ca:	e769      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a2cc:	4b25      	ldr	r3, [pc, #148]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2ce:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800a2d2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2d4:	2000      	movs	r0, #0
            break;
 800a2d6:	e763      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a2d8:	4b22      	ldr	r3, [pc, #136]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2da:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a2de:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2e0:	2000      	movs	r0, #0
            break;
 800a2e2:	e75d      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a2e4:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2e6:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a2ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2ec:	2000      	movs	r0, #0
            break;
 800a2ee:	e757      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a2f0:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2f2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a2f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a2f8:	2000      	movs	r0, #0
            break;
 800a2fa:	e751      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a2fc:	4b19      	ldr	r3, [pc, #100]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a300:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a302:	2000      	movs	r0, #0
            break;
 800a304:	e74c      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a306:	4b17      	ldr	r3, [pc, #92]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a308:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a30c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a30e:	2000      	movs	r0, #0
            break;
 800a310:	e746      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a316:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a318:	2000      	movs	r0, #0
            break;
 800a31a:	e741      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.Contexts = &Nvm;
 800a31c:	4b11      	ldr	r3, [pc, #68]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a31e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a320:	2000      	movs	r0, #0
            break;
 800a322:	e73d      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a324:	4b14      	ldr	r3, [pc, #80]	; (800a378 <LoRaMacMibGetRequestConfirm+0x268>)
 800a326:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a328:	2000      	movs	r0, #0
            break;
 800a32a:	e739      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a32e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a332:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a334:	2000      	movs	r0, #0
            break;
 800a336:	e733      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a338:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a33a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a33e:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a340:	f001 fe2a 	bl	800bf98 <RegionGetVersion>
 800a344:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a346:	2000      	movs	r0, #0
            break;
 800a348:	e72a      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a34a:	4b06      	ldr	r3, [pc, #24]	; (800a364 <LoRaMacMibGetRequestConfirm+0x254>)
 800a34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a350:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a352:	2000      	movs	r0, #0
            break;
 800a354:	e724      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a356:	4620      	mov	r0, r4
 800a358:	f000 fcfe 	bl	800ad58 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a35c:	e720      	b.n	800a1a0 <LoRaMacMibGetRequestConfirm+0x90>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a35e:	2003      	movs	r0, #3
}
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	20008000 	.word	0x20008000
 800a368:	20008064 	.word	0x20008064
 800a36c:	200080a8 	.word	0x200080a8
 800a370:	2000806c 	.word	0x2000806c
 800a374:	200080b0 	.word	0x200080b0
 800a378:	20008738 	.word	0x20008738

0800a37c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800a37c:	b530      	push	{r4, r5, lr}
 800a37e:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a380:	2800      	cmp	r0, #0
 800a382:	f000 8255 	beq.w	800a830 <LoRaMacMibSetRequestConfirm+0x4b4>
 800a386:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a388:	4bae      	ldr	r3, [pc, #696]	; (800a644 <LoRaMacMibSetRequestConfirm+0x2c8>)
 800a38a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a38e:	f013 0f02 	tst.w	r3, #2
 800a392:	f040 824f 	bne.w	800a834 <LoRaMacMibSetRequestConfirm+0x4b8>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a396:	7804      	ldrb	r4, [r0, #0]
 800a398:	2c37      	cmp	r4, #55	; 0x37
 800a39a:	f200 8245 	bhi.w	800a828 <LoRaMacMibSetRequestConfirm+0x4ac>
 800a39e:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a3a2:	0038      	.short	0x0038
 800a3a4:	0046003d 	.word	0x0046003d
 800a3a8:	0057004f 	.word	0x0057004f
 800a3ac:	0063005d 	.word	0x0063005d
 800a3b0:	00760069 	.word	0x00760069
 800a3b4:	00900083 	.word	0x00900083
 800a3b8:	00aa009d 	.word	0x00aa009d
 800a3bc:	00c400b7 	.word	0x00c400b7
 800a3c0:	00dc00d1 	.word	0x00dc00d1
 800a3c4:	00e20243 	.word	0x00e20243
 800a3c8:	01220108 	.word	0x01220108
 800a3cc:	0185015b 	.word	0x0185015b
 800a3d0:	01950175 	.word	0x01950175
 800a3d4:	01a501a0 	.word	0x01a501a0
 800a3d8:	01af01aa 	.word	0x01af01aa
 800a3dc:	01b901b4 	.word	0x01b901b4
 800a3e0:	01fb01ce 	.word	0x01fb01ce
 800a3e4:	020f01e7 	.word	0x020f01e7
 800a3e8:	021e0216 	.word	0x021e0216
 800a3ec:	02290223 	.word	0x02290223
 800a3f0:	022d0243 	.word	0x022d0243
 800a3f4:	02430243 	.word	0x02430243
 800a3f8:	02430243 	.word	0x02430243
 800a3fc:	02430243 	.word	0x02430243
 800a400:	02430243 	.word	0x02430243
 800a404:	02430243 	.word	0x02430243
 800a408:	02430243 	.word	0x02430243
 800a40c:	02430243 	.word	0x02430243
 800a410:	023d      	.short	0x023d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a412:	7900      	ldrb	r0, [r0, #4]
 800a414:	f7ff f966 	bl	80096e4 <SwitchClass>
 800a418:	4604      	mov	r4, r0
            break;
 800a41a:	e20c      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a41c:	7903      	ldrb	r3, [r0, #4]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	f000 820c 	beq.w	800a83c <LoRaMacMibSetRequestConfirm+0x4c0>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a424:	4a88      	ldr	r2, [pc, #544]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a426:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a42a:	2400      	movs	r4, #0
 800a42c:	e203      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a42e:	6840      	ldr	r0, [r0, #4]
 800a430:	f004 fd4e 	bl	800eed0 <SecureElementSetDevEui>
 800a434:	4604      	mov	r4, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	f000 81fd 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a43c:	2403      	movs	r4, #3
 800a43e:	e1fa      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a440:	6840      	ldr	r0, [r0, #4]
 800a442:	f004 fd59 	bl	800eef8 <SecureElementSetJoinEui>
 800a446:	2800      	cmp	r0, #0
 800a448:	f040 81f5 	bne.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a44c:	4604      	mov	r4, r0
 800a44e:	e1f2      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a450:	7902      	ldrb	r2, [r0, #4]
 800a452:	4b7d      	ldr	r3, [pc, #500]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a454:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a458:	2400      	movs	r4, #0
            break;
 800a45a:	e1ec      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a45c:	6842      	ldr	r2, [r0, #4]
 800a45e:	4b7a      	ldr	r3, [pc, #488]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a460:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a464:	2400      	movs	r4, #0
            break;
 800a466:	e1e6      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a468:	6842      	ldr	r2, [r0, #4]
 800a46a:	4b77      	ldr	r3, [pc, #476]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a46c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a470:	2400      	movs	r4, #0
            break;
 800a472:	e1e0      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800a474:	6841      	ldr	r1, [r0, #4]
 800a476:	2900      	cmp	r1, #0
 800a478:	f000 81e2 	beq.w	800a840 <LoRaMacMibSetRequestConfirm+0x4c4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a47c:	2000      	movs	r0, #0
 800a47e:	f001 fa43 	bl	800b908 <LoRaMacCryptoSetKey>
 800a482:	4604      	mov	r4, r0
 800a484:	2800      	cmp	r0, #0
 800a486:	f000 81d6 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a48a:	2411      	movs	r4, #17
 800a48c:	e1d3      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800a48e:	6841      	ldr	r1, [r0, #4]
 800a490:	2900      	cmp	r1, #0
 800a492:	f000 81d7 	beq.w	800a844 <LoRaMacMibSetRequestConfirm+0x4c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800a496:	2001      	movs	r0, #1
 800a498:	f001 fa36 	bl	800b908 <LoRaMacCryptoSetKey>
 800a49c:	4604      	mov	r4, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f000 81c9 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4a4:	2411      	movs	r4, #17
 800a4a6:	e1c6      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800a4a8:	6841      	ldr	r1, [r0, #4]
 800a4aa:	2900      	cmp	r1, #0
 800a4ac:	f000 81cc 	beq.w	800a848 <LoRaMacMibSetRequestConfirm+0x4cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f001 fa29 	bl	800b908 <LoRaMacCryptoSetKey>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f000 81bc 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4be:	2411      	movs	r4, #17
 800a4c0:	e1b9      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800a4c2:	6841      	ldr	r1, [r0, #4]
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	f000 81c1 	beq.w	800a84c <LoRaMacMibSetRequestConfirm+0x4d0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800a4ca:	2003      	movs	r0, #3
 800a4cc:	f001 fa1c 	bl	800b908 <LoRaMacCryptoSetKey>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f000 81af 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4d8:	2411      	movs	r4, #17
 800a4da:	e1ac      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800a4dc:	6841      	ldr	r1, [r0, #4]
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	f000 81b6 	beq.w	800a850 <LoRaMacMibSetRequestConfirm+0x4d4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800a4e4:	207f      	movs	r0, #127	; 0x7f
 800a4e6:	f001 fa0f 	bl	800b908 <LoRaMacCryptoSetKey>
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f000 81a2 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4f2:	2411      	movs	r4, #17
 800a4f4:	e19f      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800a4f6:	6841      	ldr	r1, [r0, #4]
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	f000 81ab 	beq.w	800a854 <LoRaMacMibSetRequestConfirm+0x4d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800a4fe:	2080      	movs	r0, #128	; 0x80
 800a500:	f001 fa02 	bl	800b908 <LoRaMacCryptoSetKey>
 800a504:	4604      	mov	r4, r0
 800a506:	2800      	cmp	r0, #0
 800a508:	f000 8195 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a50c:	2411      	movs	r4, #17
 800a50e:	e192      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800a510:	6841      	ldr	r1, [r0, #4]
 800a512:	2900      	cmp	r1, #0
 800a514:	f000 81a0 	beq.w	800a858 <LoRaMacMibSetRequestConfirm+0x4dc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800a518:	2081      	movs	r0, #129	; 0x81
 800a51a:	f001 f9f5 	bl	800b908 <LoRaMacCryptoSetKey>
 800a51e:	4604      	mov	r4, r0
 800a520:	2800      	cmp	r0, #0
 800a522:	f000 8188 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a526:	2411      	movs	r4, #17
 800a528:	e185      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800a52a:	6841      	ldr	r1, [r0, #4]
 800a52c:	2900      	cmp	r1, #0
 800a52e:	f000 8195 	beq.w	800a85c <LoRaMacMibSetRequestConfirm+0x4e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800a532:	2082      	movs	r0, #130	; 0x82
 800a534:	f001 f9e8 	bl	800b908 <LoRaMacCryptoSetKey>
 800a538:	4604      	mov	r4, r0
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f000 817b 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a540:	2411      	movs	r4, #17
 800a542:	e178      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800a544:	7900      	ldrb	r0, [r0, #4]
 800a546:	4b40      	ldr	r3, [pc, #256]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a548:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a54c:	4c3f      	ldr	r4, [pc, #252]	; (800a64c <LoRaMacMibSetRequestConfirm+0x2d0>)
 800a54e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a550:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 800a552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a554:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a556:	2400      	movs	r4, #0
            /* ST_WORKAROUND_END */
            break;
 800a558:	e16d      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800a55a:	7902      	ldrb	r2, [r0, #4]
 800a55c:	4b3a      	ldr	r3, [pc, #232]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a562:	2400      	movs	r4, #0
            break;
 800a564:	e167      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a566:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a56a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a56e:	4b36      	ldr	r3, [pc, #216]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a570:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a574:	f88d 2005 	strb.w	r2, [sp, #5]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800a578:	2207      	movs	r2, #7
 800a57a:	a901      	add	r1, sp, #4
 800a57c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a580:	f001 fc08 	bl	800bd94 <RegionVerify>
 800a584:	b908      	cbnz	r0, 800a58a <LoRaMacMibSetRequestConfirm+0x20e>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a586:	2403      	movs	r4, #3
 800a588:	e155      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800a58a:	686b      	ldr	r3, [r5, #4]
 800a58c:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800a58e:	2200      	movs	r2, #0
 800a590:	a901      	add	r1, sp, #4
 800a592:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a594:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a598:	f001 fbfc 	bl	800bd94 <RegionVerify>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f000 815f 	beq.w	800a860 <LoRaMacMibSetRequestConfirm+0x4e4>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800a5a2:	4b2b      	ldr	r3, [pc, #172]	; (800a650 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800a5a4:	3504      	adds	r5, #4
 800a5a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a5aa:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5ae:	2400      	movs	r4, #0
 800a5b0:	e141      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            /* ST_WORKAROUND_END */
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800a5b2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a5b6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a5bc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a5c0:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a5c4:	2207      	movs	r2, #7
 800a5c6:	a901      	add	r1, sp, #4
 800a5c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a5cc:	f001 fbe2 	bl	800bd94 <RegionVerify>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f000 8147 	beq.w	800a864 <LoRaMacMibSetRequestConfirm+0x4e8>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800a5d6:	4b1f      	ldr	r3, [pc, #124]	; (800a654 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800a5d8:	3504      	adds	r5, #4
 800a5da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a5de:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a5e2:	2400      	movs	r4, #0
 800a5e4:	e127      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a5e6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a5ea:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a5ee:	4b16      	ldr	r3, [pc, #88]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a5f0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a5f4:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a5f8:	2207      	movs	r2, #7
 800a5fa:	a901      	add	r1, sp, #4
 800a5fc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a600:	f001 fbc8 	bl	800bd94 <RegionVerify>
 800a604:	2800      	cmp	r0, #0
 800a606:	f000 812f 	beq.w	800a868 <LoRaMacMibSetRequestConfirm+0x4ec>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800a60a:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <LoRaMacMibSetRequestConfirm+0x2cc>)
 800a60c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a610:	3504      	adds	r5, #4
 800a612:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a616:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a61a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d001      	beq.n	800a626 <LoRaMacMibSetRequestConfirm+0x2aa>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a622:	2400      	movs	r4, #0
 800a624:	e107      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800a626:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800a62a:	f893 4118 	ldrb.w	r4, [r3, #280]	; 0x118
 800a62e:	2c00      	cmp	r4, #0
 800a630:	f000 8101 	beq.w	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <LoRaMacMibSetRequestConfirm+0x2d0>)
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800a63a:	f7fe fdad 	bl	8009198 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a63e:	2400      	movs	r4, #0
 800a640:	e0f9      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
 800a642:	bf00      	nop
 800a644:	200005ec 	.word	0x200005ec
 800a648:	20008000 	.word	0x20008000
 800a64c:	08012ec4 	.word	0x08012ec4
 800a650:	20008064 	.word	0x20008064
 800a654:	200080a8 	.word	0x200080a8
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800a658:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800a65c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a660:	4b8a      	ldr	r3, [pc, #552]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a662:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800a666:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800a66a:	2207      	movs	r2, #7
 800a66c:	a901      	add	r1, sp, #4
 800a66e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a672:	f001 fb8f 	bl	800bd94 <RegionVerify>
 800a676:	2800      	cmp	r0, #0
 800a678:	f000 80f8 	beq.w	800a86c <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800a67c:	4b84      	ldr	r3, [pc, #528]	; (800a890 <LoRaMacMibSetRequestConfirm+0x514>)
 800a67e:	3504      	adds	r5, #4
 800a680:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a684:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a688:	2400      	movs	r4, #0
 800a68a:	e0d4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800a68c:	6843      	ldr	r3, [r0, #4]
 800a68e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800a690:	2301      	movs	r3, #1
 800a692:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a696:	a902      	add	r1, sp, #8
 800a698:	4b7c      	ldr	r3, [pc, #496]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a69a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a69e:	f001 fb97 	bl	800bdd0 <RegionChanMaskSet>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f000 80e4 	beq.w	800a870 <LoRaMacMibSetRequestConfirm+0x4f4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6a8:	2400      	movs	r4, #0
 800a6aa:	e0c4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800a6ac:	6843      	ldr	r3, [r0, #4]
 800a6ae:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800a6b6:	a902      	add	r1, sp, #8
 800a6b8:	4b74      	ldr	r3, [pc, #464]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a6ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a6be:	f001 fb87 	bl	800bdd0 <RegionChanMaskSet>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f000 80d6 	beq.w	800a874 <LoRaMacMibSetRequestConfirm+0x4f8>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6c8:	2400      	movs	r4, #0
 800a6ca:	e0b4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800a6cc:	7902      	ldrb	r2, [r0, #4]
 800a6ce:	1e53      	subs	r3, r2, #1
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b0e      	cmp	r3, #14
 800a6d4:	f200 80d0 	bhi.w	800a878 <LoRaMacMibSetRequestConfirm+0x4fc>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800a6d8:	4b6c      	ldr	r3, [pc, #432]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a6da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6de:	2400      	movs	r4, #0
 800a6e0:	e0a9      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800a6e2:	6842      	ldr	r2, [r0, #4]
 800a6e4:	4b69      	ldr	r3, [pc, #420]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a6e6:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6e8:	2400      	movs	r4, #0
            break;
 800a6ea:	e0a4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800a6ec:	6842      	ldr	r2, [r0, #4]
 800a6ee:	4b67      	ldr	r3, [pc, #412]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6f2:	2400      	movs	r4, #0
            break;
 800a6f4:	e09f      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800a6f6:	6842      	ldr	r2, [r0, #4]
 800a6f8:	4b64      	ldr	r3, [pc, #400]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a6fa:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6fc:	2400      	movs	r4, #0
            break;
 800a6fe:	e09a      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800a700:	6842      	ldr	r2, [r0, #4]
 800a702:	4b62      	ldr	r3, [pc, #392]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a704:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a706:	2400      	movs	r4, #0
            break;
 800a708:	e095      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800a70a:	6842      	ldr	r2, [r0, #4]
 800a70c:	4b5f      	ldr	r3, [pc, #380]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a70e:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a710:	2400      	movs	r4, #0
            break;
 800a712:	e090      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800a714:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a718:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800a71c:	2206      	movs	r2, #6
 800a71e:	a901      	add	r1, sp, #4
 800a720:	4b5a      	ldr	r3, [pc, #360]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a722:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a726:	f001 fb35 	bl	800bd94 <RegionVerify>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f000 80a6 	beq.w	800a87c <LoRaMacMibSetRequestConfirm+0x500>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800a730:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a734:	4b55      	ldr	r3, [pc, #340]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a736:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a73a:	2400      	movs	r4, #0
 800a73c:	e07b      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800a73e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a742:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a746:	4b51      	ldr	r3, [pc, #324]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a748:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a74c:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a750:	2205      	movs	r2, #5
 800a752:	a901      	add	r1, sp, #4
 800a754:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a758:	f001 fb1c 	bl	800bd94 <RegionVerify>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f000 808f 	beq.w	800a880 <LoRaMacMibSetRequestConfirm+0x504>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a762:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a766:	4b49      	ldr	r3, [pc, #292]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a76c:	2400      	movs	r4, #0
 800a76e:	e062      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800a770:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a774:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800a778:	220a      	movs	r2, #10
 800a77a:	a901      	add	r1, sp, #4
 800a77c:	4b43      	ldr	r3, [pc, #268]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a77e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a782:	f001 fb07 	bl	800bd94 <RegionVerify>
 800a786:	2800      	cmp	r0, #0
 800a788:	d07c      	beq.n	800a884 <LoRaMacMibSetRequestConfirm+0x508>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800a78a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a78e:	4b3f      	ldr	r3, [pc, #252]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a790:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a794:	2400      	movs	r4, #0
 800a796:	e04e      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800a798:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800a79c:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800a7a0:	2209      	movs	r2, #9
 800a7a2:	a901      	add	r1, sp, #4
 800a7a4:	4b39      	ldr	r3, [pc, #228]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7a6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7aa:	f001 faf3 	bl	800bd94 <RegionVerify>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d06a      	beq.n	800a888 <LoRaMacMibSetRequestConfirm+0x50c>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800a7b2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800a7b6:	4b35      	ldr	r3, [pc, #212]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7bc:	2400      	movs	r4, #0
 800a7be:	e03a      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800a7c0:	6842      	ldr	r2, [r0, #4]
 800a7c2:	4b32      	ldr	r3, [pc, #200]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a7c8:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7ca:	2400      	movs	r4, #0
            break;
 800a7cc:	e033      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800a7ce:	7902      	ldrb	r2, [r0, #4]
 800a7d0:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800a7d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7da:	2400      	movs	r4, #0
            break;
 800a7dc:	e02b      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800a7de:	6842      	ldr	r2, [r0, #4]
 800a7e0:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7e2:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7e4:	2400      	movs	r4, #0
            break;
 800a7e6:	e026      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800a7e8:	6842      	ldr	r2, [r0, #4]
 800a7ea:	4b28      	ldr	r3, [pc, #160]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a7ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7f0:	2400      	movs	r4, #0
            break;
 800a7f2:	e020      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800a7f4:	f7fe fdd8 	bl	80093a8 <RestoreNvmData>
 800a7f8:	4604      	mov	r4, r0
            break;
 800a7fa:	e01c      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800a7fc:	7983      	ldrb	r3, [r0, #6]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d901      	bls.n	800a806 <LoRaMacMibSetRequestConfirm+0x48a>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a802:	2403      	movs	r4, #3
 800a804:	e017      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800a806:	6842      	ldr	r2, [r0, #4]
 800a808:	4b20      	ldr	r3, [pc, #128]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a80a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800a80e:	6840      	ldr	r0, [r0, #4]
 800a810:	f000 ff14 	bl	800b63c <LoRaMacCryptoSetLrWanVersion>
 800a814:	4604      	mov	r4, r0
 800a816:	b170      	cbz	r0, 800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a818:	2411      	movs	r4, #17
 800a81a:	e00c      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800a81c:	6842      	ldr	r2, [r0, #4]
 800a81e:	4b1b      	ldr	r3, [pc, #108]	; (800a88c <LoRaMacMibSetRequestConfirm+0x510>)
 800a820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a824:	2400      	movs	r4, #0
            break;
 800a826:	e006      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
            break;
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800a828:	f000 fa98 	bl	800ad5c <LoRaMacMibClassBSetRequestConfirm>
 800a82c:	4604      	mov	r4, r0
            break;
 800a82e:	e002      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a830:	2403      	movs	r4, #3
 800a832:	e000      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
        return LORAMAC_STATUS_BUSY;
 800a834:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800a836:	4620      	mov	r0, r4
 800a838:	b005      	add	sp, #20
 800a83a:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a83c:	2403      	movs	r4, #3
 800a83e:	e7fa      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a840:	2403      	movs	r4, #3
 800a842:	e7f8      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a844:	2403      	movs	r4, #3
 800a846:	e7f6      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a848:	2403      	movs	r4, #3
 800a84a:	e7f4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a84c:	2403      	movs	r4, #3
 800a84e:	e7f2      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a850:	2403      	movs	r4, #3
 800a852:	e7f0      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a854:	2403      	movs	r4, #3
 800a856:	e7ee      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a858:	2403      	movs	r4, #3
 800a85a:	e7ec      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a85c:	2403      	movs	r4, #3
 800a85e:	e7ea      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a860:	2403      	movs	r4, #3
 800a862:	e7e8      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a864:	2403      	movs	r4, #3
 800a866:	e7e6      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a868:	2403      	movs	r4, #3
 800a86a:	e7e4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a86c:	2403      	movs	r4, #3
 800a86e:	e7e2      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a870:	2403      	movs	r4, #3
 800a872:	e7e0      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a874:	2403      	movs	r4, #3
 800a876:	e7de      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a878:	2403      	movs	r4, #3
 800a87a:	e7dc      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a87c:	2403      	movs	r4, #3
 800a87e:	e7da      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a880:	2403      	movs	r4, #3
 800a882:	e7d8      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a884:	2403      	movs	r4, #3
 800a886:	e7d6      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a888:	2403      	movs	r4, #3
 800a88a:	e7d4      	b.n	800a836 <LoRaMacMibSetRequestConfirm+0x4ba>
 800a88c:	20008000 	.word	0x20008000
 800a890:	200080b0 	.word	0x200080b0

0800a894 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	b082      	sub	sp, #8
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800a898:	2300      	movs	r3, #0
 800a89a:	f8ad 3000 	strh.w	r3, [sp]

    if( mlmeRequest == NULL )
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f000 80c5 	beq.w	800aa2e <LoRaMacMlmeRequest+0x19a>
 800a8a4:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800a8a6:	f7ff f949 	bl	8009b3c <LoRaMacIsBusy>
 800a8aa:	b118      	cbz	r0, 800a8b4 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800a8ac:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	b002      	add	sp, #8
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800a8b4:	f000 fcf8 	bl	800b2a8 <LoRaMacConfirmQueueIsFull>
 800a8b8:	b108      	cbz	r0, 800a8be <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800a8ba:	2401      	movs	r4, #1
 800a8bc:	e7f7      	b.n	800a8ae <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a8be:	f000 fced 	bl	800b29c <LoRaMacConfirmQueueGetCnt>
 800a8c2:	b1f8      	cbz	r0, 800a904 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8c4:	4b5b      	ldr	r3, [pc, #364]	; (800aa34 <LoRaMacMlmeRequest+0x1a0>)
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	f883 144d 	strb.w	r1, [r3, #1101]	; 0x44d
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a8cc:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800a8d0:	f042 0204 	orr.w	r2, r2, #4
 800a8d4:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
    queueElement.Request = mlmeRequest->Type;
 800a8d8:	782b      	ldrb	r3, [r5, #0]
 800a8da:	f88d 3004 	strb.w	r3, [sp, #4]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a8de:	f88d 1005 	strb.w	r1, [sp, #5]
    queueElement.RestrictCommonReadyToHandle = false;
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f88d 2007 	strb.w	r2, [sp, #7]
    switch( mlmeRequest->Type )
 800a8e8:	461c      	mov	r4, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	2b0d      	cmp	r3, #13
 800a8ee:	f200 8084 	bhi.w	800a9fa <LoRaMacMlmeRequest+0x166>
 800a8f2:	e8df f003 	tbb	[pc, r3]
 800a8f6:	820d      	.short	0x820d
 800a8f8:	423d3382 	.word	0x423d3382
 800a8fc:	4b828282 	.word	0x4b828282
 800a900:	6a547382 	.word	0x6a547382
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800a904:	2214      	movs	r2, #20
 800a906:	2100      	movs	r1, #0
 800a908:	484b      	ldr	r0, [pc, #300]	; (800aa38 <LoRaMacMlmeRequest+0x1a4>)
 800a90a:	f004 fb4e 	bl	800efaa <memset1>
 800a90e:	e7d9      	b.n	800a8c4 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a910:	4b48      	ldr	r3, [pc, #288]	; (800aa34 <LoRaMacMlmeRequest+0x1a0>)
 800a912:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a916:	f013 0f20 	tst.w	r3, #32
 800a91a:	d1c8      	bne.n	800a8ae <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800a91c:	f7fe fe40 	bl	80095a0 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a920:	4c46      	ldr	r4, [pc, #280]	; (800aa3c <LoRaMacMlmeRequest+0x1a8>)
 800a922:	2200      	movs	r2, #0
 800a924:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a928:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a92c:	f001 faee 	bl	800bf0c <RegionAlternateDr>
 800a930:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a934:	2307      	movs	r3, #7
 800a936:	f88d 3005 	strb.w	r3, [sp, #5]
            status = SendReJoinReq( JOIN_REQ );
 800a93a:	20ff      	movs	r0, #255	; 0xff
 800a93c:	f7fe ff58 	bl	80097f0 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800a940:	4604      	mov	r4, r0
 800a942:	2800      	cmp	r0, #0
 800a944:	d05a      	beq.n	800a9fc <LoRaMacMlmeRequest+0x168>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a946:	4e3d      	ldr	r6, [pc, #244]	; (800aa3c <LoRaMacMlmeRequest+0x1a8>)
 800a948:	2201      	movs	r2, #1
 800a94a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800a94e:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800a952:	f001 fadb 	bl	800bf0c <RegionAlternateDr>
 800a956:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800a95a:	e04f      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a95c:	2200      	movs	r2, #0
 800a95e:	4669      	mov	r1, sp
 800a960:	2002      	movs	r0, #2
 800a962:	f000 fa99 	bl	800ae98 <LoRaMacCommandsAddCmd>
 800a966:	4604      	mov	r4, r0
 800a968:	2800      	cmp	r0, #0
 800a96a:	d047      	beq.n	800a9fc <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a96c:	2413      	movs	r4, #19
 800a96e:	e045      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a970:	88a8      	ldrh	r0, [r5, #4]
 800a972:	f7fe ff67 	bl	8009844 <SetTxContinuousWave>
 800a976:	4604      	mov	r4, r0
            break;
 800a978:	e040      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a97a:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	68a9      	ldr	r1, [r5, #8]
 800a982:	88a8      	ldrh	r0, [r5, #4]
 800a984:	f7fd f828 	bl	80079d8 <SetTxContinuousWave1>
 800a988:	4604      	mov	r4, r0
            break;
 800a98a:	e037      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a98c:	2200      	movs	r2, #0
 800a98e:	4669      	mov	r1, sp
 800a990:	200d      	movs	r0, #13
 800a992:	f000 fa81 	bl	800ae98 <LoRaMacCommandsAddCmd>
 800a996:	4604      	mov	r4, r0
 800a998:	b380      	cbz	r0, 800a9fc <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a99a:	2413      	movs	r4, #19
 800a99c:	e02e      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800a99e:	4b27      	ldr	r3, [pc, #156]	; (800aa3c <LoRaMacMlmeRequest+0x1a8>)
 800a9a0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a9a4:	b10b      	cbz	r3, 800a9aa <LoRaMacMlmeRequest+0x116>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a9a6:	2402      	movs	r4, #2
 800a9a8:	e028      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800a9aa:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800a9ac:	f004 0007 	and.w	r0, r4, #7
 800a9b0:	f000 f9cd 	bl	800ad4e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800a9b4:	f88d 4000 	strb.w	r4, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	4669      	mov	r1, sp
 800a9bc:	2010      	movs	r0, #16
 800a9be:	f000 fa6b 	bl	800ae98 <LoRaMacCommandsAddCmd>
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	b1d0      	cbz	r0, 800a9fc <LoRaMacMlmeRequest+0x168>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9c6:	2413      	movs	r4, #19
 800a9c8:	e018      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4669      	mov	r1, sp
 800a9ce:	2012      	movs	r0, #18
 800a9d0:	f000 fa62 	bl	800ae98 <LoRaMacCommandsAddCmd>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	b188      	cbz	r0, 800a9fc <LoRaMacMlmeRequest+0x168>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9d8:	2413      	movs	r4, #19
 800a9da:	e00f      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
            queueElement.RestrictCommonReadyToHandle = true;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f88d 3007 	strb.w	r3, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a9e2:	f000 f9a5 	bl	800ad30 <LoRaMacClassBIsAcquisitionInProgress>
 800a9e6:	b108      	cbz	r0, 800a9ec <LoRaMacMlmeRequest+0x158>
                status = LORAMAC_STATUS_BUSY;
 800a9e8:	2401      	movs	r4, #1
 800a9ea:	e007      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800a9ec:	f000 f99d 	bl	800ad2a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f000 f99f 	bl	800ad34 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800a9f6:	2400      	movs	r4, #0
 800a9f8:	e000      	b.n	800a9fc <LoRaMacMlmeRequest+0x168>
    switch( mlmeRequest->Type )
 800a9fa:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a9fc:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <LoRaMacMlmeRequest+0x1a0>)
 800a9fe:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800aa02:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800aa04:	b17c      	cbz	r4, 800aa26 <LoRaMacMlmeRequest+0x192>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800aa06:	f000 fc49 	bl	800b29c <LoRaMacConfirmQueueGetCnt>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f47f af4f 	bne.w	800a8ae <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800aa10:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <LoRaMacMlmeRequest+0x1a0>)
 800aa12:	2100      	movs	r1, #0
 800aa14:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800aa18:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800aa1c:	f361 0282 	bfi	r2, r1, #2, #1
 800aa20:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800aa24:	e743      	b.n	800a8ae <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800aa26:	a801      	add	r0, sp, #4
 800aa28:	f000 fb74 	bl	800b114 <LoRaMacConfirmQueueAdd>
 800aa2c:	e73f      	b.n	800a8ae <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa2e:	2403      	movs	r4, #3
 800aa30:	e73d      	b.n	800a8ae <LoRaMacMlmeRequest+0x1a>
 800aa32:	bf00      	nop
 800aa34:	200005ec 	.word	0x200005ec
 800aa38:	20000a38 	.word	0x20000a38
 800aa3c:	20008000 	.word	0x20008000

0800aa40 <LoRaMacMcpsRequest>:
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f000 80b0 	beq.w	800aba6 <LoRaMacMcpsRequest+0x166>
{
 800aa46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4a:	b088      	sub	sp, #32
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	f04f 0800 	mov.w	r8, #0
 800aa52:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800aa54:	f7ff f872 	bl	8009b3c <LoRaMacIsBusy>
 800aa58:	4606      	mov	r6, r0
 800aa5a:	b118      	cbz	r0, 800aa64 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800aa5c:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800aa5e:	b008      	add	sp, #32
 800aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800aa64:	4641      	mov	r1, r8
 800aa66:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800aa6a:	4f51      	ldr	r7, [pc, #324]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800aa6c:	2214      	movs	r2, #20
 800aa6e:	f507 6087 	add.w	r0, r7, #1080	; 0x438
 800aa72:	f004 fa9a 	bl	800efaa <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 800aa7c:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412
    switch( mcpsRequest->Type )
 800aa80:	7823      	ldrb	r3, [r4, #0]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d059      	beq.n	800ab3a <LoRaMacMcpsRequest+0xfa>
 800aa86:	2b03      	cmp	r3, #3
 800aa88:	d06f      	beq.n	800ab6a <LoRaMacMcpsRequest+0x12a>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d042      	beq.n	800ab14 <LoRaMacMcpsRequest+0xd4>
 800aa8e:	2700      	movs	r7, #0
 800aa90:	46ba      	mov	sl, r7
 800aa92:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800aa94:	2302      	movs	r3, #2
 800aa96:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aa9a:	4b46      	ldr	r3, [pc, #280]	; (800abb4 <LoRaMacMcpsRequest+0x174>)
 800aa9c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800aaa0:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aaa4:	a906      	add	r1, sp, #24
 800aaa6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaaa:	f001 f93f 	bl	800bd2c <RegionGetPhyParam>
 800aaae:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800aab0:	b240      	sxtb	r0, r0
 800aab2:	42b8      	cmp	r0, r7
 800aab4:	bfb8      	it	lt
 800aab6:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	d06e      	beq.n	800ab9a <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800aabc:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <LoRaMacMcpsRequest+0x174>)
 800aabe:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800aac2:	b99b      	cbnz	r3, 800aaec <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800aac4:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aac8:	4b3a      	ldr	r3, [pc, #232]	; (800abb4 <LoRaMacMcpsRequest+0x174>)
 800aaca:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800aace:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800aad2:	2205      	movs	r2, #5
 800aad4:	a903      	add	r1, sp, #12
 800aad6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aada:	f001 f95b 	bl	800bd94 <RegionVerify>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d063      	beq.n	800abaa <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800aae2:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800aae6:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <LoRaMacMcpsRequest+0x174>)
 800aae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800aaec:	9500      	str	r5, [sp, #0]
 800aaee:	4643      	mov	r3, r8
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	a804      	add	r0, sp, #16
 800aaf6:	f7fe ff91 	bl	8009a1c <Send>
        if( status == LORAMAC_STATUS_OK )
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d148      	bne.n	800ab90 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800aafe:	7822      	ldrb	r2, [r4, #0]
 800ab00:	4b2b      	ldr	r3, [pc, #172]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800ab02:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ab06:	f893 2485 	ldrb.w	r2, [r3, #1157]	; 0x485
 800ab0a:	f042 0201 	orr.w	r2, r2, #1
 800ab0e:	f883 2485 	strb.w	r2, [r3, #1157]	; 0x485
 800ab12:	e043      	b.n	800ab9c <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800ab14:	2601      	movs	r6, #1
 800ab16:	f887 6411 	strb.w	r6, [r7, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ab1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f362 1347 	bfi	r3, r2, #5, #3
 800ab24:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800ab28:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800ab2c:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800ab30:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800ab34:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800ab38:	e7ac      	b.n	800aa94 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800ab3a:	7be3      	ldrb	r3, [r4, #15]
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	bf28      	it	cs
 800ab40:	2308      	movcs	r3, #8
 800ab42:	4a1b      	ldr	r2, [pc, #108]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800ab44:	f882 3411 	strb.w	r3, [r2, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ab48:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	f362 1347 	bfi	r3, r2, #5, #3
 800ab52:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800ab56:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ab5a:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800ab5e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800ab62:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800ab66:	2601      	movs	r6, #1
            break;
 800ab68:	e794      	b.n	800aa94 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800ab6a:	2601      	movs	r6, #1
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800ab6e:	f883 6411 	strb.w	r6, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ab72:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ab76:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800ab7a:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ab7e:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ab82:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ab86:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800ab8a:	f04f 0900 	mov.w	r9, #0
            break;
 800ab8e:	e781      	b.n	800aa94 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800ab98:	e000      	b.n	800ab9c <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ab9a:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ab9c:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <LoRaMacMcpsRequest+0x170>)
 800ab9e:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800aba2:	6123      	str	r3, [r4, #16]
    return status;
 800aba4:	e75b      	b.n	800aa5e <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aba6:	2003      	movs	r0, #3
}
 800aba8:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800abaa:	2003      	movs	r0, #3
 800abac:	e757      	b.n	800aa5e <LoRaMacMcpsRequest+0x1e>
 800abae:	bf00      	nop
 800abb0:	200005ec 	.word	0x200005ec
 800abb4:	20008000 	.word	0x20008000

0800abb8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800abb8:	b510      	push	{r4, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800abbe:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800abc2:	220f      	movs	r2, #15
 800abc4:	a901      	add	r1, sp, #4
 800abc6:	4b05      	ldr	r3, [pc, #20]	; (800abdc <LoRaMacTestSetDutyCycleOn+0x24>)
 800abc8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abcc:	f001 f8e2 	bl	800bd94 <RegionVerify>
 800abd0:	b110      	cbz	r0, 800abd8 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800abd2:	4b02      	ldr	r3, [pc, #8]	; (800abdc <LoRaMacTestSetDutyCycleOn+0x24>)
 800abd4:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800abd8:	b002      	add	sp, #8
 800abda:	bd10      	pop	{r4, pc}
 800abdc:	20008000 	.word	0x20008000

0800abe0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800abe0:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800abe2:	f7ff f9e9 	bl	8009fb8 <LoRaMacStop>
 800abe6:	b110      	cbz	r0, 800abee <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800abe8:	2401      	movs	r4, #1
    }
}
 800abea:	4620      	mov	r0, r4
 800abec:	bd38      	pop	{r3, r4, r5, pc}
 800abee:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800abf0:	4d0c      	ldr	r5, [pc, #48]	; (800ac24 <LoRaMacDeInitialization+0x44>)
 800abf2:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800abf6:	f006 ffaf 	bl	8011b58 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800abfa:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800abfe:	f006 ffab 	bl	8011b58 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ac02:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800ac06:	f006 ffa7 	bl	8011b58 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800ac0a:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 800ac0e:	f006 ffa3 	bl	8011b58 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800ac12:	f000 f89d 	bl	800ad50 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800ac16:	f7fe fcc3 	bl	80095a0 <ResetMacParameters>
        Radio.Sleep( );
 800ac1a:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <LoRaMacDeInitialization+0x48>)
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800ac20:	e7e3      	b.n	800abea <LoRaMacDeInitialization+0xa>
 800ac22:	bf00      	nop
 800ac24:	200005ec 	.word	0x200005ec
 800ac28:	08012ec4 	.word	0x08012ec4

0800ac2c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	b089      	sub	sp, #36	; 0x24
 800ac32:	460f      	mov	r7, r1
 800ac34:	4616      	mov	r6, r2
 800ac36:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800ac38:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800ac3c:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800ac40:	6883      	ldr	r3, [r0, #8]
 800ac42:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800ac44:	f890 8005 	ldrb.w	r8, [r0, #5]
 800ac48:	f1b8 0f00 	cmp.w	r8, #0
 800ac4c:	d107      	bne.n	800ac5e <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800ac4e:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800ac52:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800ac56:	4640      	mov	r0, r8
 800ac58:	b009      	add	sp, #36	; 0x24
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ac60:	2302      	movs	r3, #2
 800ac62:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ac66:	7c83      	ldrb	r3, [r0, #18]
 800ac68:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ac6c:	a906      	add	r1, sp, #24
 800ac6e:	7cc0      	ldrb	r0, [r0, #19]
 800ac70:	f001 f85c 	bl	800bd2c <RegionGetPhyParam>
 800ac74:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800ac76:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800ac7a:	464a      	mov	r2, r9
 800ac7c:	45d1      	cmp	r9, sl
 800ac7e:	bfb8      	it	lt
 800ac80:	4652      	movlt	r2, sl
 800ac82:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800ac84:	45d1      	cmp	r9, sl
 800ac86:	dc04      	bgt.n	800ac92 <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ac8c:	4691      	mov	r9, r2
            adrAckReq = false;
 800ac8e:	4698      	mov	r8, r3
 800ac90:	e7dd      	b.n	800ac4e <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ac92:	68a2      	ldr	r2, [r4, #8]
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d201      	bcs.n	800ac9e <CalcNextV10X+0x72>
                adrAckReq = false;
 800ac9a:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ac9e:	89e1      	ldrh	r1, [r4, #14]
 800aca0:	440b      	add	r3, r1
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d202      	bcs.n	800acac <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800aca6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acaa:	e7d0      	b.n	800ac4e <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800acac:	2308      	movs	r3, #8
 800acae:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800acb2:	a906      	add	r1, sp, #24
 800acb4:	7ce0      	ldrb	r0, [r4, #19]
 800acb6:	f001 f839 	bl	800bd2c <RegionGetPhyParam>
 800acba:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800acbc:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800acc0:	68a3      	ldr	r3, [r4, #8]
 800acc2:	89e2      	ldrh	r2, [r4, #14]
 800acc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800acc8:	fb02 3311 	mls	r3, r2, r1, r3
 800accc:	2b01      	cmp	r3, #1
 800acce:	d002      	beq.n	800acd6 <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800acd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800acd4:	e7bb      	b.n	800ac4e <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800acd6:	2322      	movs	r3, #34	; 0x22
 800acd8:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ace2:	7ca3      	ldrb	r3, [r4, #18]
 800ace4:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ace8:	a906      	add	r1, sp, #24
 800acea:	7ce0      	ldrb	r0, [r4, #19]
 800acec:	f001 f81e 	bl	800bd2c <RegionGetPhyParam>
 800acf0:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800acf2:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800acf6:	45ca      	cmp	sl, r9
 800acf8:	d1a9      	bne.n	800ac4e <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800acfa:	f894 8004 	ldrb.w	r8, [r4, #4]
 800acfe:	f1b8 0f00 	cmp.w	r8, #0
 800ad02:	d0a4      	beq.n	800ac4e <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ad04:	2302      	movs	r3, #2
 800ad06:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800ad0a:	a902      	add	r1, sp, #8
 800ad0c:	7ce0      	ldrb	r0, [r4, #19]
 800ad0e:	f001 f833 	bl	800bd78 <RegionInitDefaults>
                        adrAckReq = false;
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	e79a      	b.n	800ac4e <CalcNextV10X+0x22>

0800ad18 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800ad18:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800ad1a:	7884      	ldrb	r4, [r0, #2]
 800ad1c:	b10c      	cbz	r4, 800ad22 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ad1e:	2000      	movs	r0, #0
}
 800ad20:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800ad22:	f7ff ff83 	bl	800ac2c <CalcNextV10X>
 800ad26:	e7fb      	b.n	800ad20 <LoRaMacAdrCalcNext+0x8>

0800ad28 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad28:	4770      	bx	lr

0800ad2a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad2a:	4770      	bx	lr

0800ad2c <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad2c:	4770      	bx	lr

0800ad2e <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad2e:	4770      	bx	lr

0800ad30 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad30:	2000      	movs	r0, #0
 800ad32:	4770      	bx	lr

0800ad34 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad34:	4770      	bx	lr

0800ad36 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad36:	4770      	bx	lr

0800ad38 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad38:	4770      	bx	lr

0800ad3a <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	4770      	bx	lr

0800ad3e <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad3e:	2000      	movs	r0, #0
 800ad40:	4770      	bx	lr

0800ad42 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad42:	2000      	movs	r0, #0
 800ad44:	4770      	bx	lr

0800ad46 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad46:	2000      	movs	r0, #0
 800ad48:	4770      	bx	lr

0800ad4a <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	4770      	bx	lr

0800ad4e <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad4e:	4770      	bx	lr

0800ad50 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad50:	4770      	bx	lr

0800ad52 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad52:	4770      	bx	lr

0800ad54 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad54:	2002      	movs	r0, #2
 800ad56:	4770      	bx	lr

0800ad58 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad58:	2002      	movs	r0, #2
 800ad5a:	4770      	bx	lr

0800ad5c <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad5c:	2002      	movs	r0, #2
 800ad5e:	4770      	bx	lr

0800ad60 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad60:	4770      	bx	lr

0800ad62 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad62:	2000      	movs	r0, #0
 800ad64:	4770      	bx	lr

0800ad66 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad66:	4770      	bx	lr

0800ad68 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad68:	4770      	bx	lr

0800ad6a <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	4770      	bx	lr

0800ad6e <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad6e:	2000      	movs	r0, #0
 800ad70:	4770      	bx	lr

0800ad72 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad72:	4770      	bx	lr

0800ad74 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ad74:	4770      	bx	lr

0800ad76 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ad76:	2300      	movs	r3, #0
 800ad78:	2b0f      	cmp	r3, #15
 800ad7a:	d804      	bhi.n	800ad86 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800ad7c:	5cc2      	ldrb	r2, [r0, r3]
 800ad7e:	b922      	cbnz	r2, 800ad8a <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ad80:	3301      	adds	r3, #1
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	e7f8      	b.n	800ad78 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ad86:	2001      	movs	r0, #1
 800ad88:	4770      	bx	lr
            return false;
 800ad8a:	2000      	movs	r0, #0
}
 800ad8c:	4770      	bx	lr
	...

0800ad90 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ad90:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ad92:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ad94:	0125      	lsls	r5, r4, #4
 800ad96:	f105 0308 	add.w	r3, r5, #8
 800ad9a:	4d06      	ldr	r5, [pc, #24]	; (800adb4 <MallocNewMacCommandSlot+0x24>)
 800ad9c:	441d      	add	r5, r3
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f7ff ffe9 	bl	800ad76 <IsSlotFree>
 800ada4:	b920      	cbnz	r0, 800adb0 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800ada6:	3401      	adds	r4, #1
 800ada8:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800adaa:	2c0f      	cmp	r4, #15
 800adac:	d1f2      	bne.n	800ad94 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800adae:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800adb0:	4628      	mov	r0, r5
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000b0c 	.word	0x20000b0c

0800adb8 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800adb8:	b120      	cbz	r0, 800adc4 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800adba:	2200      	movs	r2, #0
 800adbc:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800adbe:	6042      	str	r2, [r0, #4]

    return true;
 800adc0:	2001      	movs	r0, #1
 800adc2:	4770      	bx	lr
        return false;
 800adc4:	2000      	movs	r0, #0
}
 800adc6:	4770      	bx	lr

0800adc8 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800adc8:	4603      	mov	r3, r0
 800adca:	b160      	cbz	r0, 800ade6 <LinkedListAdd+0x1e>
 800adcc:	b169      	cbz	r1, 800adea <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800adce:	6802      	ldr	r2, [r0, #0]
 800add0:	b13a      	cbz	r2, 800ade2 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	b102      	cbz	r2, 800add8 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800add6:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800add8:	2200      	movs	r2, #0
 800adda:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800addc:	6059      	str	r1, [r3, #4]

    return true;
 800adde:	2001      	movs	r0, #1
 800ade0:	4770      	bx	lr
        list->First = element;
 800ade2:	6001      	str	r1, [r0, #0]
 800ade4:	e7f5      	b.n	800add2 <LinkedListAdd+0xa>
        return false;
 800ade6:	2000      	movs	r0, #0
 800ade8:	4770      	bx	lr
 800adea:	2000      	movs	r0, #0
}
 800adec:	4770      	bx	lr

0800adee <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800adee:	b160      	cbz	r0, 800ae0a <LinkedListGetPrevious+0x1c>
 800adf0:	b161      	cbz	r1, 800ae0c <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800adf2:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800adf4:	4281      	cmp	r1, r0
 800adf6:	d102      	bne.n	800adfe <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800adf8:	2000      	movs	r0, #0
    }

    return curElement;
}
 800adfa:	4770      	bx	lr
            curElement = curElement->Next;
 800adfc:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d0fb      	beq.n	800adfa <LinkedListGetPrevious+0xc>
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	428b      	cmp	r3, r1
 800ae06:	d1f9      	bne.n	800adfc <LinkedListGetPrevious+0xe>
 800ae08:	4770      	bx	lr
 800ae0a:	4770      	bx	lr
        return NULL;
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4770      	bx	lr

0800ae10 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ae10:	b1b8      	cbz	r0, 800ae42 <LinkedListRemove+0x32>
{
 800ae12:	b538      	push	{r3, r4, r5, lr}
 800ae14:	460c      	mov	r4, r1
 800ae16:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ae18:	b1a9      	cbz	r1, 800ae46 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ae1a:	f7ff ffe8 	bl	800adee <LinkedListGetPrevious>

    if( list->First == element )
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d009      	beq.n	800ae38 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800ae24:	686b      	ldr	r3, [r5, #4]
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	d009      	beq.n	800ae3e <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800ae2a:	b108      	cbz	r0, 800ae30 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	6023      	str	r3, [r4, #0]

    return true;
 800ae34:	2001      	movs	r0, #1
}
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	e7f2      	b.n	800ae24 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800ae3e:	6068      	str	r0, [r5, #4]
 800ae40:	e7f3      	b.n	800ae2a <LinkedListRemove+0x1a>
        return false;
 800ae42:	2000      	movs	r0, #0
}
 800ae44:	4770      	bx	lr
        return false;
 800ae46:	2000      	movs	r0, #0
 800ae48:	e7f5      	b.n	800ae36 <LinkedListRemove+0x26>

0800ae4a <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ae4a:	2805      	cmp	r0, #5
 800ae4c:	d006      	beq.n	800ae5c <IsSticky+0x12>
 800ae4e:	d307      	bcc.n	800ae60 <IsSticky+0x16>
 800ae50:	3808      	subs	r0, #8
 800ae52:	b2c0      	uxtb	r0, r0
 800ae54:	2802      	cmp	r0, #2
 800ae56:	d905      	bls.n	800ae64 <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4770      	bx	lr
    switch( cid )
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	4770      	bx	lr
            return false;
 800ae60:	2000      	movs	r0, #0
 800ae62:	4770      	bx	lr
    switch( cid )
 800ae64:	2001      	movs	r0, #1
    }
}
 800ae66:	4770      	bx	lr

0800ae68 <FreeMacCommandSlot>:
    if( slot == NULL )
 800ae68:	b130      	cbz	r0, 800ae78 <FreeMacCommandSlot+0x10>
{
 800ae6a:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ae6c:	2210      	movs	r2, #16
 800ae6e:	2100      	movs	r1, #0
 800ae70:	f004 f89b 	bl	800efaa <memset1>
    return true;
 800ae74:	2001      	movs	r0, #1
}
 800ae76:	bd08      	pop	{r3, pc}
        return false;
 800ae78:	2000      	movs	r0, #0
}
 800ae7a:	4770      	bx	lr

0800ae7c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ae7c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ae7e:	4c05      	ldr	r4, [pc, #20]	; (800ae94 <LoRaMacCommandsInit+0x18>)
 800ae80:	22fc      	movs	r2, #252	; 0xfc
 800ae82:	2100      	movs	r1, #0
 800ae84:	4620      	mov	r0, r4
 800ae86:	f004 f890 	bl	800efaa <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f7ff ff94 	bl	800adb8 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ae90:	2000      	movs	r0, #0
 800ae92:	bd10      	pop	{r4, pc}
 800ae94:	20000b0c 	.word	0x20000b0c

0800ae98 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ae98:	b301      	cbz	r1, 800aedc <LoRaMacCommandsAddCmd+0x44>
{
 800ae9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	4614      	mov	r4, r2
 800aea0:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800aea2:	f7ff ff75 	bl	800ad90 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800aea6:	4606      	mov	r6, r0
 800aea8:	b1d0      	cbz	r0, 800aee0 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800aeaa:	4601      	mov	r1, r0
 800aeac:	480e      	ldr	r0, [pc, #56]	; (800aee8 <LoRaMacCommandsAddCmd+0x50>)
 800aeae:	f7ff ff8b 	bl	800adc8 <LinkedListAdd>
 800aeb2:	b1b8      	cbz	r0, 800aee4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800aeb4:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800aeb6:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800aeb8:	b2a2      	uxth	r2, r4
 800aeba:	4639      	mov	r1, r7
 800aebc:	1d70      	adds	r0, r6, #5
 800aebe:	f004 f85c 	bl	800ef7a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800aec2:	4628      	mov	r0, r5
 800aec4:	f7ff ffc1 	bl	800ae4a <IsSticky>
 800aec8:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800aeca:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <LoRaMacCommandsAddCmd+0x50>)
 800aecc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800aed0:	4414      	add	r4, r2
 800aed2:	3401      	adds	r4, #1
 800aed4:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800aed8:	2000      	movs	r0, #0
}
 800aeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800aedc:	2001      	movs	r0, #1
}
 800aede:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800aee0:	2002      	movs	r0, #2
 800aee2:	e7fa      	b.n	800aeda <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800aee4:	2005      	movs	r0, #5
 800aee6:	e7f8      	b.n	800aeda <LoRaMacCommandsAddCmd+0x42>
 800aee8:	20000b0c 	.word	0x20000b0c

0800aeec <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800aeec:	b1a0      	cbz	r0, 800af18 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800aeee:	b510      	push	{r4, lr}
 800aef0:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800aef2:	4601      	mov	r1, r0
 800aef4:	480b      	ldr	r0, [pc, #44]	; (800af24 <LoRaMacCommandsRemoveCmd+0x38>)
 800aef6:	f7ff ff8b 	bl	800ae10 <LinkedListRemove>
 800aefa:	b178      	cbz	r0, 800af1c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800aefc:	68a1      	ldr	r1, [r4, #8]
 800aefe:	4a09      	ldr	r2, [pc, #36]	; (800af24 <LoRaMacCommandsRemoveCmd+0x38>)
 800af00:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800af04:	1a5b      	subs	r3, r3, r1
 800af06:	3b01      	subs	r3, #1
 800af08:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff ffab 	bl	800ae68 <FreeMacCommandSlot>
 800af12:	b128      	cbz	r0, 800af20 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800af14:	2000      	movs	r0, #0
}
 800af16:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af18:	2001      	movs	r0, #1
}
 800af1a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800af1c:	2003      	movs	r0, #3
 800af1e:	e7fa      	b.n	800af16 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800af20:	2005      	movs	r0, #5
 800af22:	e7f8      	b.n	800af16 <LoRaMacCommandsRemoveCmd+0x2a>
 800af24:	20000b0c 	.word	0x20000b0c

0800af28 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800af28:	4b0a      	ldr	r3, [pc, #40]	; (800af54 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800af2a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800af2c:	b120      	cbz	r0, 800af38 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800af2e:	7b03      	ldrb	r3, [r0, #12]
 800af30:	b11b      	cbz	r3, 800af3a <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800af32:	6800      	ldr	r0, [r0, #0]
 800af34:	e7fa      	b.n	800af2c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800af36:	bd10      	pop	{r4, pc}
 800af38:	4770      	bx	lr
{
 800af3a:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800af3c:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800af3e:	f7ff ffd5 	bl	800aeec <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800af42:	4620      	mov	r0, r4
    while( curElement != NULL )
 800af44:	2800      	cmp	r0, #0
 800af46:	d0f6      	beq.n	800af36 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800af48:	7b03      	ldrb	r3, [r0, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0f6      	beq.n	800af3c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800af4e:	6800      	ldr	r0, [r0, #0]
 800af50:	e7f8      	b.n	800af44 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800af52:	bf00      	nop
 800af54:	20000b0c 	.word	0x20000b0c

0800af58 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800af58:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800af5c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800af5e:	e000      	b.n	800af62 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800af60:	462c      	mov	r4, r5
    while( curElement != NULL )
 800af62:	b14c      	cbz	r4, 800af78 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800af64:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800af66:	7920      	ldrb	r0, [r4, #4]
 800af68:	f7ff ff6f 	bl	800ae4a <IsSticky>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d0f7      	beq.n	800af60 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800af70:	4620      	mov	r0, r4
 800af72:	f7ff ffbb 	bl	800aeec <LoRaMacCommandsRemoveCmd>
 800af76:	e7f3      	b.n	800af60 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800af78:	2000      	movs	r0, #0
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20000b0c 	.word	0x20000b0c

0800af80 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800af80:	b128      	cbz	r0, 800af8e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800af82:	4a04      	ldr	r2, [pc, #16]	; (800af94 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800af84:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800af88:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800af8a:	2000      	movs	r0, #0
 800af8c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800af8e:	2001      	movs	r0, #1
}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	20000b0c 	.word	0x20000b0c

0800af98 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800af9c:	4b16      	ldr	r3, [pc, #88]	; (800aff8 <LoRaMacCommandsSerializeCmds+0x60>)
 800af9e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800afa0:	b32a      	cbz	r2, 800afee <LoRaMacCommandsSerializeCmds+0x56>
 800afa2:	4607      	mov	r7, r0
 800afa4:	4688      	mov	r8, r1
 800afa6:	4616      	mov	r6, r2
 800afa8:	b319      	cbz	r1, 800aff2 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800afaa:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800afac:	b194      	cbz	r4, 800afd4 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800afae:	1a7a      	subs	r2, r7, r1
 800afb0:	68a3      	ldr	r3, [r4, #8]
 800afb2:	3301      	adds	r3, #1
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d30d      	bcc.n	800afd4 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800afb8:	1c4d      	adds	r5, r1, #1
 800afba:	b2ed      	uxtb	r5, r5
 800afbc:	7923      	ldrb	r3, [r4, #4]
 800afbe:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800afc0:	8922      	ldrh	r2, [r4, #8]
 800afc2:	1d61      	adds	r1, r4, #5
 800afc4:	1970      	adds	r0, r6, r5
 800afc6:	f003 ffd8 	bl	800ef7a <memcpy1>
            itr += curElement->PayloadSize;
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	441d      	add	r5, r3
 800afce:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800afd0:	6824      	ldr	r4, [r4, #0]
 800afd2:	e7eb      	b.n	800afac <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800afd4:	b12c      	cbz	r4, 800afe2 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800afd6:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800afd8:	4620      	mov	r0, r4
 800afda:	f7ff ff87 	bl	800aeec <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800afde:	462c      	mov	r4, r5
 800afe0:	e7f8      	b.n	800afd4 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800afe2:	4640      	mov	r0, r8
 800afe4:	f7ff ffcc 	bl	800af80 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800afe8:	2000      	movs	r0, #0
}
 800afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800afee:	2001      	movs	r0, #1
 800aff0:	e7fb      	b.n	800afea <LoRaMacCommandsSerializeCmds+0x52>
 800aff2:	2001      	movs	r0, #1
 800aff4:	e7f9      	b.n	800afea <LoRaMacCommandsSerializeCmds+0x52>
 800aff6:	bf00      	nop
 800aff8:	20000b0c 	.word	0x20000b0c

0800affc <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800affc:	4601      	mov	r1, r0
 800affe:	b170      	cbz	r0, 800b01e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b000:	4b08      	ldr	r3, [pc, #32]	; (800b024 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b002:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b004:	2200      	movs	r2, #0
 800b006:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b008:	b13b      	cbz	r3, 800b01a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b00a:	7b1a      	ldrb	r2, [r3, #12]
 800b00c:	b90a      	cbnz	r2, 800b012 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	e7fa      	b.n	800b008 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b012:	2301      	movs	r3, #1
 800b014:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b016:	2000      	movs	r0, #0
 800b018:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b01e:	2001      	movs	r0, #1
}
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000b0c 	.word	0x20000b0c

0800b028 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b028:	1e83      	subs	r3, r0, #2
 800b02a:	2b11      	cmp	r3, #17
 800b02c:	d80a      	bhi.n	800b044 <LoRaMacCommandsGetCmdSize+0x1c>
 800b02e:	e8df f003 	tbb	[pc, r3]
 800b032:	0b23      	.short	0x0b23
 800b034:	110f240d 	.word	0x110f240d
 800b038:	09171513 	.word	0x09171513
 800b03c:	09091909 	.word	0x09091909
 800b040:	211f1d1b 	.word	0x211f1d1b
 800b044:	2000      	movs	r0, #0
 800b046:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b048:	2005      	movs	r0, #5
            break;
 800b04a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b04c:	2002      	movs	r0, #2
            break;
 800b04e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b050:	2001      	movs	r0, #1
            break;
 800b052:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b054:	2006      	movs	r0, #6
            break;
 800b056:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b058:	2002      	movs	r0, #2
            break;
 800b05a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b05c:	2002      	movs	r0, #2
            break;
 800b05e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b060:	2005      	movs	r0, #5
            break;
 800b062:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b064:	2006      	movs	r0, #6
            break;
 800b066:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b068:	2001      	movs	r0, #1
            break;
 800b06a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b06c:	2005      	movs	r0, #5
            break;
 800b06e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b070:	2004      	movs	r0, #4
            break;
 800b072:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b074:	2004      	movs	r0, #4
            break;
 800b076:	4770      	bx	lr
            cidSize = 3;
 800b078:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b07a:	4770      	bx	lr

0800b07c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b07c:	4b03      	ldr	r3, [pc, #12]	; (800b08c <IncreaseBufferPointer+0x10>)
 800b07e:	4298      	cmp	r0, r3
 800b080:	d001      	beq.n	800b086 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b082:	3004      	adds	r0, #4
 800b084:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b086:	4802      	ldr	r0, [pc, #8]	; (800b090 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	20000c24 	.word	0x20000c24
 800b090:	20000c14 	.word	0x20000c14

0800b094 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b094:	b108      	cbz	r0, 800b09a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b096:	2000      	movs	r0, #0
 800b098:	4770      	bx	lr
        return true;
 800b09a:	2001      	movs	r0, #1
}
 800b09c:	4770      	bx	lr

0800b09e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b09e:	2804      	cmp	r0, #4
 800b0a0:	d801      	bhi.n	800b0a6 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	4770      	bx	lr
        return true;
 800b0a6:	2001      	movs	r0, #1
}
 800b0a8:	4770      	bx	lr
	...

0800b0ac <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <GetElement+0x3c>)
 800b0b4:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff ffeb 	bl	800b094 <IsListEmpty>
 800b0be:	b970      	cbnz	r0, 800b0de <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b0c0:	2500      	movs	r5, #0
 800b0c2:	42af      	cmp	r7, r5
 800b0c4:	d909      	bls.n	800b0da <GetElement+0x2e>
    {
        if( element->Request == request )
 800b0c6:	7823      	ldrb	r3, [r4, #0]
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	d00a      	beq.n	800b0e2 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7ff ffd5 	bl	800b07c <IncreaseBufferPointer>
 800b0d2:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	b2ed      	uxtb	r5, r5
 800b0d8:	e7f3      	b.n	800b0c2 <GetElement+0x16>
    }

    return NULL;
 800b0da:	2000      	movs	r0, #0
}
 800b0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e7fc      	b.n	800b0dc <GetElement+0x30>
            return element;
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	e7fa      	b.n	800b0dc <GetElement+0x30>
 800b0e6:	bf00      	nop
 800b0e8:	20000c08 	.word	0x20000c08

0800b0ec <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b0ec:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b0ee:	4c08      	ldr	r4, [pc, #32]	; (800b110 <LoRaMacConfirmQueueInit+0x24>)
 800b0f0:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b0f8:	f104 000c 	add.w	r0, r4, #12
 800b0fc:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b0fe:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b100:	2214      	movs	r2, #20
 800b102:	21ff      	movs	r1, #255	; 0xff
 800b104:	f003 ff51 	bl	800efaa <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b10e:	bd10      	pop	{r4, pc}
 800b110:	20000c08 	.word	0x20000c08

0800b114 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <LoRaMacConfirmQueueAdd+0x44>)
 800b11a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b11e:	f7ff ffbe 	bl	800b09e <IsListFull>
 800b122:	b9b8      	cbnz	r0, 800b154 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b124:	4c0c      	ldr	r4, [pc, #48]	; (800b158 <LoRaMacConfirmQueueAdd+0x44>)
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	782a      	ldrb	r2, [r5, #0]
 800b12a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b12c:	68a3      	ldr	r3, [r4, #8]
 800b12e:	786a      	ldrb	r2, [r5, #1]
 800b130:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	78ea      	ldrb	r2, [r5, #3]
 800b136:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b13e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b142:	3301      	adds	r3, #1
 800b144:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b148:	68a0      	ldr	r0, [r4, #8]
 800b14a:	f7ff ff97 	bl	800b07c <IncreaseBufferPointer>
 800b14e:	60a0      	str	r0, [r4, #8]

    return true;
 800b150:	2001      	movs	r0, #1
}
 800b152:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b154:	2000      	movs	r0, #0
 800b156:	e7fc      	b.n	800b152 <LoRaMacConfirmQueueAdd+0x3e>
 800b158:	20000c08 	.word	0x20000c08

0800b15c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b15c:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b160:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b164:	4620      	mov	r0, r4
 800b166:	f7ff ff95 	bl	800b094 <IsListEmpty>
 800b16a:	b948      	cbnz	r0, 800b180 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b16c:	4d05      	ldr	r5, [pc, #20]	; (800b184 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b16e:	3c01      	subs	r4, #1
 800b170:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b174:	6868      	ldr	r0, [r5, #4]
 800b176:	f7ff ff81 	bl	800b07c <IncreaseBufferPointer>
 800b17a:	6068      	str	r0, [r5, #4]

    return true;
 800b17c:	2001      	movs	r0, #1
}
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b180:	2000      	movs	r0, #0
 800b182:	e7fc      	b.n	800b17e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b184:	20000c08 	.word	0x20000c08

0800b188 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4605      	mov	r5, r0
 800b18c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b18e:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b190:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b194:	f7ff ff7e 	bl	800b094 <IsListEmpty>
 800b198:	b948      	cbnz	r0, 800b1ae <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b19a:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	6859      	ldr	r1, [r3, #4]
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f7ff ff83 	bl	800b0ac <GetElement>
        if( element != NULL )
 800b1a6:	b110      	cbz	r0, 800b1ae <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b1a8:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000c08 	.word	0x20000c08

0800b1b4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b1b8:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b1ba:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b1be:	f7ff ff69 	bl	800b094 <IsListEmpty>
 800b1c2:	b940      	cbnz	r0, 800b1d6 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b1c4:	4b06      	ldr	r3, [pc, #24]	; (800b1e0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	6859      	ldr	r1, [r3, #4]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff ff6e 	bl	800b0ac <GetElement>
        if( element != NULL )
 800b1d0:	b118      	cbz	r0, 800b1da <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b1d2:	7840      	ldrb	r0, [r0, #1]
 800b1d4:	e000      	b.n	800b1d8 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b1d6:	2001      	movs	r0, #1
}
 800b1d8:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b1da:	2001      	movs	r0, #1
 800b1dc:	e7fc      	b.n	800b1d8 <LoRaMacConfirmQueueGetStatus+0x24>
 800b1de:	bf00      	nop
 800b1e0:	20000c08 	.word	0x20000c08

0800b1e4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b1e8:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b1ea:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b1ec:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b1f0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b1f4:	f7ff ff4e 	bl	800b094 <IsListEmpty>
 800b1f8:	b150      	cbz	r0, 800b210 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b200:	4620      	mov	r0, r4
 800b202:	f7ff ff3b 	bl	800b07c <IncreaseBufferPointer>
 800b206:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b208:	4b04      	ldr	r3, [pc, #16]	; (800b21c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	4283      	cmp	r3, r0
 800b20e:	d0f4      	beq.n	800b1fa <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b210:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b212:	78e3      	ldrb	r3, [r4, #3]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1f3      	bne.n	800b200 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b218:	e7f0      	b.n	800b1fc <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b21a:	bf00      	nop
 800b21c:	20000c08 	.word	0x20000c08

0800b220 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b220:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b222:	4b04      	ldr	r3, [pc, #16]	; (800b234 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	6859      	ldr	r1, [r3, #4]
 800b228:	f7ff ff40 	bl	800b0ac <GetElement>
 800b22c:	b100      	cbz	r0, 800b230 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b22e:	2001      	movs	r0, #1
    }
    return false;
}
 800b230:	bd08      	pop	{r3, pc}
 800b232:	bf00      	nop
 800b234:	20000c08 	.word	0x20000c08

0800b238 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23a:	b083      	sub	sp, #12
 800b23c:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b23e:	4b16      	ldr	r3, [pc, #88]	; (800b298 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b240:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b244:	2400      	movs	r4, #0
 800b246:	e00d      	b.n	800b264 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b24e:	785a      	ldrb	r2, [r3, #1]
 800b250:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b254:	78db      	ldrb	r3, [r3, #3]
 800b256:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b25a:	f7ff ff7f 	bl	800b15c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b25e:	b1a5      	cbz	r5, 800b28a <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b260:	3401      	adds	r4, #1
 800b262:	b2e4      	uxtb	r4, r4
 800b264:	42bc      	cmp	r4, r7
 800b266:	d214      	bcs.n	800b292 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b268:	4b0b      	ldr	r3, [pc, #44]	; (800b298 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	7812      	ldrb	r2, [r2, #0]
 800b26e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	7852      	ldrb	r2, [r2, #1]
 800b274:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	d0e4      	beq.n	800b248 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b27e:	4b06      	ldr	r3, [pc, #24]	; (800b298 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	4630      	mov	r0, r6
 800b286:	4798      	blx	r3
 800b288:	e7e7      	b.n	800b25a <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b28a:	a801      	add	r0, sp, #4
 800b28c:	f7ff ff42 	bl	800b114 <LoRaMacConfirmQueueAdd>
 800b290:	e7e6      	b.n	800b260 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b292:	b003      	add	sp, #12
 800b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b296:	bf00      	nop
 800b298:	20000c08 	.word	0x20000c08

0800b29c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b29c:	4b01      	ldr	r3, [pc, #4]	; (800b2a4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b29e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2a2:	4770      	bx	lr
 800b2a4:	20000c08 	.word	0x20000c08

0800b2a8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b2a8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b2aa:	4b03      	ldr	r3, [pc, #12]	; (800b2b8 <LoRaMacConfirmQueueIsFull+0x10>)
 800b2ac:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b2b0:	f7ff fef5 	bl	800b09e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b2b4:	bd08      	pop	{r3, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20000c08 	.word	0x20000c08

0800b2bc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b2bc:	b410      	push	{r4}
 800b2be:	9c01      	ldr	r4, [sp, #4]
 800b2c0:	9902      	ldr	r1, [sp, #8]
 800b2c2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b2c4:	b1da      	cbz	r2, 800b2fe <PrepareB0+0x42>
 800b2c6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b2c8:	2049      	movs	r0, #73	; 0x49
 800b2ca:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b2d0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b2d2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b2d4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b2d6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b2d8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b2da:	0a23      	lsrs	r3, r4, #8
 800b2dc:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b2de:	0c23      	lsrs	r3, r4, #16
 800b2e0:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b2e2:	0e24      	lsrs	r4, r4, #24
 800b2e4:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b2e6:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b2e8:	0a0b      	lsrs	r3, r1, #8
 800b2ea:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b2ec:	0c0b      	lsrs	r3, r1, #16
 800b2ee:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b2f0:	0e09      	lsrs	r1, r1, #24
 800b2f2:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b2f4:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b2f6:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b2fa:	bc10      	pop	{r4}
 800b2fc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b2fe:	200a      	movs	r0, #10
 800b300:	e7fb      	b.n	800b2fa <PrepareB0+0x3e>
	...

0800b304 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b304:	2300      	movs	r3, #0
 800b306:	2b01      	cmp	r3, #1
 800b308:	d80e      	bhi.n	800b328 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b30a:	469c      	mov	ip, r3
 800b30c:	4a07      	ldr	r2, [pc, #28]	; (800b32c <GetKeyAddrItem+0x28>)
 800b30e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b312:	4282      	cmp	r2, r0
 800b314:	d002      	beq.n	800b31c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b316:	3301      	adds	r3, #1
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	e7f4      	b.n	800b306 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b31c:	4b03      	ldr	r3, [pc, #12]	; (800b32c <GetKeyAddrItem+0x28>)
 800b31e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b322:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b324:	2000      	movs	r0, #0
 800b326:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b328:	200c      	movs	r0, #12
}
 800b32a:	4770      	bx	lr
 800b32c:	2000010c 	.word	0x2000010c

0800b330 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b330:	460b      	mov	r3, r1
 800b332:	2900      	cmp	r1, #0
 800b334:	d024      	beq.n	800b380 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b336:	3801      	subs	r0, #1
 800b338:	2803      	cmp	r0, #3
 800b33a:	d823      	bhi.n	800b384 <GetLastFcntDown+0x54>
 800b33c:	e8df f000 	tbb	[pc, r0]
 800b340:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b344:	4a10      	ldr	r2, [pc, #64]	; (800b388 <GetLastFcntDown+0x58>)
 800b346:	6812      	ldr	r2, [r2, #0]
 800b348:	6911      	ldr	r1, [r2, #16]
 800b34a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b34c:	6913      	ldr	r3, [r2, #16]
 800b34e:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b350:	2000      	movs	r0, #0
            break;
 800b352:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b354:	4a0c      	ldr	r2, [pc, #48]	; (800b388 <GetLastFcntDown+0x58>)
 800b356:	6812      	ldr	r2, [r2, #0]
 800b358:	6951      	ldr	r1, [r2, #20]
 800b35a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b35c:	6953      	ldr	r3, [r2, #20]
 800b35e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b360:	2000      	movs	r0, #0
            break;
 800b362:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b364:	4a08      	ldr	r2, [pc, #32]	; (800b388 <GetLastFcntDown+0x58>)
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	6991      	ldr	r1, [r2, #24]
 800b36a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b36c:	6993      	ldr	r3, [r2, #24]
 800b36e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b370:	2000      	movs	r0, #0
            break;
 800b372:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b374:	4a04      	ldr	r2, [pc, #16]	; (800b388 <GetLastFcntDown+0x58>)
 800b376:	6812      	ldr	r2, [r2, #0]
 800b378:	69d2      	ldr	r2, [r2, #28]
 800b37a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b37c:	2000      	movs	r0, #0
            break;
 800b37e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b380:	200a      	movs	r0, #10
 800b382:	4770      	bx	lr
    switch( fCntID )
 800b384:	2005      	movs	r0, #5
}
 800b386:	4770      	bx	lr
 800b388:	20000c2c 	.word	0x20000c2c

0800b38c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b38c:	b510      	push	{r4, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b396:	a901      	add	r1, sp, #4
 800b398:	f7ff ffca 	bl	800b330 <GetLastFcntDown>
 800b39c:	b948      	cbnz	r0, 800b3b2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b39e:	9b01      	ldr	r3, [sp, #4]
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	d309      	bcc.n	800b3b8 <CheckFCntDown+0x2c>
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a8:	d001      	beq.n	800b3ae <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e002      	b.n	800b3b4 <CheckFCntDown+0x28>
        return true;
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	e000      	b.n	800b3b4 <CheckFCntDown+0x28>
        return false;
 800b3b2:	2000      	movs	r0, #0
    }
}
 800b3b4:	b002      	add	sp, #8
 800b3b6:	bd10      	pop	{r4, pc}
        return true;
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	e7fb      	b.n	800b3b4 <CheckFCntDown+0x28>

0800b3bc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b3bc:	3801      	subs	r0, #1
 800b3be:	2803      	cmp	r0, #3
 800b3c0:	d812      	bhi.n	800b3e8 <UpdateFCntDown+0x2c>
 800b3c2:	e8df f000 	tbb	[pc, r0]
 800b3c6:	0602      	.short	0x0602
 800b3c8:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b3ca:	4b08      	ldr	r3, [pc, #32]	; (800b3ec <UpdateFCntDown+0x30>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6119      	str	r1, [r3, #16]
            break;
 800b3d0:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b3d2:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <UpdateFCntDown+0x30>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6159      	str	r1, [r3, #20]
            break;
 800b3d8:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b3da:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <UpdateFCntDown+0x30>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6199      	str	r1, [r3, #24]
            break;
 800b3e0:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b3e2:	4b02      	ldr	r3, [pc, #8]	; (800b3ec <UpdateFCntDown+0x30>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000c2c 	.word	0x20000c2c

0800b3f0 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <ResetFCnts+0x2c>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3fc:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b3fe:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800b400:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b402:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd00      	ble.n	800b40a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800b408:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800b40a:	1d99      	adds	r1, r3, #6
 800b40c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b416:	3301      	adds	r3, #1
 800b418:	e7f4      	b.n	800b404 <ResetFCnts+0x14>
 800b41a:	bf00      	nop
 800b41c:	20000c2c 	.word	0x20000c2c

0800b420 <ComputeCmacB0>:
{
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	b088      	sub	sp, #32
 800b426:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800b428:	b1f0      	cbz	r0, 800b468 <ComputeCmacB0+0x48>
 800b42a:	460c      	mov	r4, r1
 800b42c:	4615      	mov	r5, r2
 800b42e:	461a      	mov	r2, r3
 800b430:	4680      	mov	r8, r0
 800b432:	b1de      	cbz	r6, 800b46c <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b434:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b438:	d81a      	bhi.n	800b470 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b43a:	af04      	add	r7, sp, #16
 800b43c:	9702      	str	r7, [sp, #8]
 800b43e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800b44a:	4629      	mov	r1, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff ff35 	bl	800b2bc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800b452:	9600      	str	r6, [sp, #0]
 800b454:	462b      	mov	r3, r5
 800b456:	4622      	mov	r2, r4
 800b458:	4641      	mov	r1, r8
 800b45a:	4638      	mov	r0, r7
 800b45c:	f003 fc27 	bl	800ecae <SecureElementComputeAesCmac>
 800b460:	b940      	cbnz	r0, 800b474 <ComputeCmacB0+0x54>
}
 800b462:	b008      	add	sp, #32
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b468:	200a      	movs	r0, #10
 800b46a:	e7fa      	b.n	800b462 <ComputeCmacB0+0x42>
 800b46c:	200a      	movs	r0, #10
 800b46e:	e7f8      	b.n	800b462 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b470:	200e      	movs	r0, #14
 800b472:	e7f6      	b.n	800b462 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b474:	200f      	movs	r0, #15
 800b476:	e7f4      	b.n	800b462 <ComputeCmacB0+0x42>

0800b478 <DeriveSessionKey10x>:
{
 800b478:	b510      	push	{r4, lr}
 800b47a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800b47c:	2400      	movs	r4, #0
 800b47e:	9400      	str	r4, [sp, #0]
 800b480:	9401      	str	r4, [sp, #4]
 800b482:	9402      	str	r4, [sp, #8]
 800b484:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800b486:	2802      	cmp	r0, #2
 800b488:	d003      	beq.n	800b492 <DeriveSessionKey10x+0x1a>
 800b48a:	2803      	cmp	r0, #3
 800b48c:	d025      	beq.n	800b4da <DeriveSessionKey10x+0x62>
 800b48e:	200b      	movs	r0, #11
 800b490:	e021      	b.n	800b4d6 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800b492:	2401      	movs	r4, #1
 800b494:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800b498:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800b49c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b4a0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800b4a4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800b4a8:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800b4ac:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800b4b0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b4b4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800b4b8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800b4bc:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800b4c0:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800b4c4:	0a1b      	lsrs	r3, r3, #8
 800b4c6:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4668      	mov	r0, sp
 800b4d0:	f003 fc8c 	bl	800edec <SecureElementDeriveAndStoreKey>
 800b4d4:	b928      	cbnz	r0, 800b4e2 <DeriveSessionKey10x+0x6a>
}
 800b4d6:	b004      	add	sp, #16
 800b4d8:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800b4da:	2402      	movs	r4, #2
 800b4dc:	f88d 4000 	strb.w	r4, [sp]
            break;
 800b4e0:	e7da      	b.n	800b498 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b4e2:	200f      	movs	r0, #15
 800b4e4:	e7f7      	b.n	800b4d6 <DeriveSessionKey10x+0x5e>

0800b4e6 <PayloadEncrypt>:
{
 800b4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	4690      	mov	r8, r2
 800b4ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d052      	beq.n	800b59a <PayloadEncrypt+0xb4>
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	9604      	str	r6, [sp, #16]
 800b4fc:	9605      	str	r6, [sp, #20]
 800b4fe:	9606      	str	r6, [sp, #24]
 800b500:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800b502:	9600      	str	r6, [sp, #0]
 800b504:	9601      	str	r6, [sp, #4]
 800b506:	9602      	str	r6, [sp, #8]
 800b508:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800b50a:	2701      	movs	r7, #1
 800b50c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800b510:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b514:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800b518:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800b51c:	0a19      	lsrs	r1, r3, #8
 800b51e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800b522:	0c19      	lsrs	r1, r3, #16
 800b524:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800b528:	0e1b      	lsrs	r3, r3, #24
 800b52a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800b52e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800b532:	0a13      	lsrs	r3, r2, #8
 800b534:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800b538:	0c13      	lsrs	r3, r2, #16
 800b53a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800b53e:	0e12      	lsrs	r2, r2, #24
 800b540:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800b544:	e014      	b.n	800b570 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800b546:	18f2      	adds	r2, r6, r3
 800b548:	5ca0      	ldrb	r0, [r4, r2]
 800b54a:	f103 0120 	add.w	r1, r3, #32
 800b54e:	4469      	add	r1, sp
 800b550:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800b554:	4048      	eors	r0, r1
 800b556:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800b558:	3301      	adds	r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	462a      	mov	r2, r5
 800b55e:	2d10      	cmp	r5, #16
 800b560:	bfa8      	it	ge
 800b562:	2210      	movge	r2, #16
 800b564:	4293      	cmp	r3, r2
 800b566:	dbee      	blt.n	800b546 <PayloadEncrypt+0x60>
        size -= 16;
 800b568:	3d10      	subs	r5, #16
 800b56a:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800b56c:	3610      	adds	r6, #16
 800b56e:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800b570:	2d00      	cmp	r5, #0
 800b572:	dd0e      	ble.n	800b592 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800b574:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800b578:	3701      	adds	r7, #1
 800b57a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800b57c:	ab04      	add	r3, sp, #16
 800b57e:	4642      	mov	r2, r8
 800b580:	2110      	movs	r1, #16
 800b582:	4668      	mov	r0, sp
 800b584:	f003 fbb8 	bl	800ecf8 <SecureElementAesEncrypt>
 800b588:	4603      	mov	r3, r0
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d0e6      	beq.n	800b55c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b58e:	200f      	movs	r0, #15
 800b590:	e000      	b.n	800b594 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800b592:	2000      	movs	r0, #0
}
 800b594:	b008      	add	sp, #32
 800b596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b59a:	200a      	movs	r0, #10
 800b59c:	e7fa      	b.n	800b594 <PayloadEncrypt+0xae>

0800b59e <VerifyCmacB0>:
    if( msg == 0 )
 800b59e:	b370      	cbz	r0, 800b5fe <VerifyCmacB0+0x60>
{
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	b0c8      	sub	sp, #288	; 0x120
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	4615      	mov	r5, r2
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800b5ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b5b2:	d826      	bhi.n	800b602 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800b5b4:	af04      	add	r7, sp, #16
 800b5b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f003 fcf4 	bl	800efaa <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800b5c2:	9702      	str	r7, [sp, #8]
 800b5c4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7ff fe71 	bl	800b2bc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800b5da:	4622      	mov	r2, r4
 800b5dc:	4641      	mov	r1, r8
 800b5de:	a808      	add	r0, sp, #32
 800b5e0:	f003 fccb 	bl	800ef7a <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800b5e4:	f104 0110 	add.w	r1, r4, #16
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800b5ec:	b289      	uxth	r1, r1
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	f003 fb6c 	bl	800eccc <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800b5f4:	b130      	cbz	r0, 800b604 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800b5f6:	2801      	cmp	r0, #1
 800b5f8:	d004      	beq.n	800b604 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b5fa:	200f      	movs	r0, #15
 800b5fc:	e002      	b.n	800b604 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b5fe:	200a      	movs	r0, #10
}
 800b600:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800b602:	200e      	movs	r0, #14
}
 800b604:	b048      	add	sp, #288	; 0x120
 800b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b60c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800b60c:	b188      	cbz	r0, 800b632 <LoRaMacCryptoInit+0x26>
{
 800b60e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800b610:	4c09      	ldr	r4, [pc, #36]	; (800b638 <LoRaMacCryptoInit+0x2c>)
 800b612:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800b614:	2228      	movs	r2, #40	; 0x28
 800b616:	2100      	movs	r1, #0
 800b618:	f003 fcc7 	bl	800efaa <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	2201      	movs	r2, #1
 800b620:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800b622:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800b624:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800b626:	2400      	movs	r4, #0
 800b628:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800b62a:	f7ff fee1 	bl	800b3f0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800b62e:	4620      	mov	r0, r4
}
 800b630:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800b632:	2009      	movs	r0, #9
}
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	20000c2c 	.word	0x20000c2c

0800b63c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800b63c:	4b02      	ldr	r3, [pc, #8]	; (800b648 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800b642:	2000      	movs	r0, #0
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000c2c 	.word	0x20000c2c

0800b64c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800b64c:	b130      	cbz	r0, 800b65c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800b64e:	4b04      	ldr	r3, [pc, #16]	; (800b660 <LoRaMacCryptoGetFCntUp+0x14>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	3301      	adds	r3, #1
 800b656:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800b658:	2000      	movs	r0, #0
 800b65a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b65c:	200a      	movs	r0, #10
}
 800b65e:	4770      	bx	lr
 800b660:	20000c2c 	.word	0x20000c2c

0800b664 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800b66a:	2200      	movs	r2, #0
 800b66c:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800b66e:	b363      	cbz	r3, 800b6ca <LoRaMacCryptoGetFCntDown+0x66>
 800b670:	460d      	mov	r5, r1
 800b672:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800b674:	a901      	add	r1, sp, #4
 800b676:	f7ff fe5b 	bl	800b330 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b67a:	b9b8      	cbnz	r0, 800b6ac <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800b67c:	9b01      	ldr	r3, [sp, #4]
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d015      	beq.n	800b6b0 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800b684:	b29a      	uxth	r2, r3
 800b686:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800b688:	2a00      	cmp	r2, #0
 800b68a:	dd13      	ble.n	800b6b4 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800b68c:	4413      	add	r3, r2
 800b68e:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b690:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <LoRaMacCryptoGetFCntDown+0x70>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	789a      	ldrb	r2, [r3, #2]
 800b696:	b94a      	cbnz	r2, 800b6ac <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800b698:	6833      	ldr	r3, [r6, #0]
 800b69a:	9901      	ldr	r1, [sp, #4]
 800b69c:	1a5b      	subs	r3, r3, r1
 800b69e:	eb61 0101 	sbc.w	r1, r1, r1
 800b6a2:	42ab      	cmp	r3, r5
 800b6a4:	f171 0300 	sbcs.w	r3, r1, #0
 800b6a8:	da11      	bge.n	800b6ce <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800b6aa:	4610      	mov	r0, r2
}
 800b6ac:	b002      	add	sp, #8
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800b6b0:	6034      	str	r4, [r6, #0]
 800b6b2:	e7ed      	b.n	800b690 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800b6b4:	b132      	cbz	r2, 800b6c4 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800b6b6:	0c1b      	lsrs	r3, r3, #16
 800b6b8:	041b      	lsls	r3, r3, #16
 800b6ba:	4423      	add	r3, r4
 800b6bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b6c0:	6033      	str	r3, [r6, #0]
 800b6c2:	e7e5      	b.n	800b690 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800b6c4:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800b6c6:	2007      	movs	r0, #7
 800b6c8:	e7f0      	b.n	800b6ac <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b6ca:	200a      	movs	r0, #10
 800b6cc:	e7ee      	b.n	800b6ac <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800b6ce:	2008      	movs	r0, #8
 800b6d0:	e7ec      	b.n	800b6ac <LoRaMacCryptoGetFCntDown+0x48>
 800b6d2:	bf00      	nop
 800b6d4:	20000c2c 	.word	0x20000c2c

0800b6d8 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800b6d8:	4601      	mov	r1, r0
 800b6da:	b908      	cbnz	r0, 800b6e0 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b6dc:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b6de:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	dd01      	ble.n	800b6ea <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800b6ea:	4a06      	ldr	r2, [pc, #24]	; (800b704 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800b6ec:	6812      	ldr	r2, [r2, #0]
 800b6ee:	202c      	movs	r0, #44	; 0x2c
 800b6f0:	fb00 1003 	mla	r0, r0, r3, r1
 800b6f4:	f103 0c06 	add.w	ip, r3, #6
 800b6f8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800b6fc:	3204      	adds	r2, #4
 800b6fe:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b700:	3301      	adds	r3, #1
 800b702:	e7ee      	b.n	800b6e2 <LoRaMacCryptoSetMulticastReference+0xa>
 800b704:	20000c2c 	.word	0x20000c2c

0800b708 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800b708:	b300      	cbz	r0, 800b74c <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800b70a:	b510      	push	{r4, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800b714:	a803      	add	r0, sp, #12
 800b716:	f003 fbcd 	bl	800eeb4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800b71a:	4b10      	ldr	r3, [pc, #64]	; (800b75c <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b722:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800b724:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b726:	4620      	mov	r0, r4
 800b728:	f000 fa2f 	bl	800bb8a <LoRaMacSerializerJoinRequest>
 800b72c:	b980      	cbnz	r0, 800b750 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800b72e:	4623      	mov	r3, r4
 800b730:	f853 1b18 	ldr.w	r1, [r3], #24
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	2301      	movs	r3, #1
 800b738:	2213      	movs	r2, #19
 800b73a:	f003 fab8 	bl	800ecae <SecureElementComputeAesCmac>
 800b73e:	b950      	cbnz	r0, 800b756 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fa22 	bl	800bb8a <LoRaMacSerializerJoinRequest>
 800b746:	b120      	cbz	r0, 800b752 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b748:	2011      	movs	r0, #17
 800b74a:	e002      	b.n	800b752 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b74c:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b74e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b750:	2011      	movs	r0, #17
}
 800b752:	b004      	add	sp, #16
 800b754:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b756:	200f      	movs	r0, #15
 800b758:	e7fb      	b.n	800b752 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800b75a:	bf00      	nop
 800b75c:	20000c2c 	.word	0x20000c2c

0800b760 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800b760:	2b00      	cmp	r3, #0
 800b762:	d036      	beq.n	800b7d2 <LoRaMacCryptoSecureMessage+0x72>
{
 800b764:	b530      	push	{r4, r5, lr}
 800b766:	b085      	sub	sp, #20
 800b768:	4604      	mov	r4, r0
 800b76a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800b76c:	4b1d      	ldr	r3, [pc, #116]	; (800b7e4 <LoRaMacCryptoSecureMessage+0x84>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	4283      	cmp	r3, r0
 800b774:	d82f      	bhi.n	800b7d6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800b776:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b77a:	b342      	cbz	r2, 800b7ce <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800b77c:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800b77e:	42a3      	cmp	r3, r4
 800b780:	d209      	bcs.n	800b796 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800b782:	9401      	str	r4, [sp, #4]
 800b784:	2300      	movs	r3, #0
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	68ab      	ldr	r3, [r5, #8]
 800b78a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800b78e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b790:	f7ff fea9 	bl	800b4e6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b794:	bb10      	cbnz	r0, 800b7dc <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b796:	4628      	mov	r0, r5
 800b798:	f000 fa2d 	bl	800bbf6 <LoRaMacSerializerData>
 800b79c:	b9e8      	cbnz	r0, 800b7da <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800b79e:	7929      	ldrb	r1, [r5, #4]
 800b7a0:	3904      	subs	r1, #4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	f853 0b2c 	ldr.w	r0, [r3], #44
 800b7a8:	9303      	str	r3, [sp, #12]
 800b7aa:	9402      	str	r4, [sp, #8]
 800b7ac:	68ab      	ldr	r3, [r5, #8]
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	b289      	uxth	r1, r1
 800b7b8:	f7ff fe32 	bl	800b420 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b7bc:	b970      	cbnz	r0, 800b7dc <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 fa19 	bl	800bbf6 <LoRaMacSerializerData>
 800b7c4:	b960      	cbnz	r0, 800b7e0 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800b7c6:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <LoRaMacCryptoSecureMessage+0x84>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800b7cc:	e006      	b.n	800b7dc <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	e7d5      	b.n	800b77e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b7d2:	200a      	movs	r0, #10
}
 800b7d4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b7d6:	2006      	movs	r0, #6
 800b7d8:	e000      	b.n	800b7dc <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b7da:	2011      	movs	r0, #17
}
 800b7dc:	b005      	add	sp, #20
 800b7de:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800b7e0:	2011      	movs	r0, #17
 800b7e2:	e7fb      	b.n	800b7dc <LoRaMacCryptoSecureMessage+0x7c>
 800b7e4:	20000c2c 	.word	0x20000c2c

0800b7e8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800b7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7ec:	b087      	sub	sp, #28
 800b7ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	d049      	beq.n	800b888 <LoRaMacCryptoUnsecureMessage+0xa0>
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	4688      	mov	r8, r1
 800b7f8:	4617      	mov	r7, r2
 800b7fa:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4610      	mov	r0, r2
 800b800:	f7ff fdc4 	bl	800b38c <CheckFCntDown>
 800b804:	2800      	cmp	r0, #0
 800b806:	d041      	beq.n	800b88c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 f95f 	bl	800bacc <LoRaMacParserData>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d141      	bne.n	800b896 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800b812:	a905      	add	r1, sp, #20
 800b814:	4628      	mov	r0, r5
 800b816:	f7ff fd75 	bl	800b304 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b81a:	4605      	mov	r5, r0
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d136      	bne.n	800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800b820:	9b05      	ldr	r3, [sp, #20]
 800b822:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800b826:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800b828:	68b3      	ldr	r3, [r6, #8]
 800b82a:	4543      	cmp	r3, r8
 800b82c:	d135      	bne.n	800b89a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800b82e:	7b33      	ldrb	r3, [r6, #12]
 800b830:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800b834:	491a      	ldr	r1, [pc, #104]	; (800b8a0 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800b836:	6809      	ldr	r1, [r1, #0]
 800b838:	7889      	ldrb	r1, [r1, #2]
 800b83a:	b901      	cbnz	r1, 800b83e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800b83c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800b83e:	7931      	ldrb	r1, [r6, #4]
 800b840:	3904      	subs	r1, #4
 800b842:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800b844:	9003      	str	r0, [sp, #12]
 800b846:	9402      	str	r4, [sp, #8]
 800b848:	f8cd 8004 	str.w	r8, [sp, #4]
 800b84c:	2001      	movs	r0, #1
 800b84e:	9000      	str	r0, [sp, #0]
 800b850:	b289      	uxth	r1, r1
 800b852:	6830      	ldr	r0, [r6, #0]
 800b854:	f7ff fea3 	bl	800b59e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b858:	4605      	mov	r5, r0
 800b85a:	b9c0      	cbnz	r0, 800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800b85c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800b860:	b90b      	cbnz	r3, 800b866 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800b862:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800b866:	9401      	str	r4, [sp, #4]
 800b868:	2301      	movs	r3, #1
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	4643      	mov	r3, r8
 800b86e:	464a      	mov	r2, r9
 800b870:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b874:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b876:	f7ff fe36 	bl	800b4e6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b87a:	4605      	mov	r5, r0
 800b87c:	b938      	cbnz	r0, 800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800b87e:	4621      	mov	r1, r4
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff fd9b 	bl	800b3bc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800b886:	e002      	b.n	800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b888:	250a      	movs	r5, #10
 800b88a:	e000      	b.n	800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800b88c:	2506      	movs	r5, #6
}
 800b88e:	4628      	mov	r0, r5
 800b890:	b007      	add	sp, #28
 800b892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800b896:	2510      	movs	r5, #16
 800b898:	e7f9      	b.n	800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800b89a:	2502      	movs	r5, #2
 800b89c:	e7f7      	b.n	800b88e <LoRaMacCryptoUnsecureMessage+0xa6>
 800b89e:	bf00      	nop
 800b8a0:	20000c2c 	.word	0x20000c2c

0800b8a4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800b8a4:	b9b1      	cbnz	r1, 800b8d4 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800b8a6:	b500      	push	{lr}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	9302      	str	r3, [sp, #8]
 800b8b4:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800b8b6:	2801      	cmp	r0, #1
 800b8b8:	d008      	beq.n	800b8cc <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	4661      	mov	r1, ip
 800b8be:	4668      	mov	r0, sp
 800b8c0:	f003 fa94 	bl	800edec <SecureElementDeriveAndStoreKey>
 800b8c4:	b940      	cbnz	r0, 800b8d8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b8c6:	b005      	add	sp, #20
 800b8c8:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800b8cc:	2320      	movs	r3, #32
 800b8ce:	f88d 3000 	strb.w	r3, [sp]
 800b8d2:	e7f2      	b.n	800b8ba <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800b8d4:	200b      	movs	r0, #11
}
 800b8d6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b8d8:	200f      	movs	r0, #15
 800b8da:	e7f4      	b.n	800b8c6 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800b8dc <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800b8dc:	2804      	cmp	r0, #4
 800b8de:	d001      	beq.n	800b8e4 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800b8e0:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b8e2:	4770      	bx	lr
{
 800b8e4:	b500      	push	{lr}
 800b8e6:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	9302      	str	r3, [sp, #8]
 800b8f0:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800b8f2:	227f      	movs	r2, #127	; 0x7f
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4668      	mov	r0, sp
 800b8f8:	f003 fa78 	bl	800edec <SecureElementDeriveAndStoreKey>
 800b8fc:	b910      	cbnz	r0, 800b904 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800b8fe:	b005      	add	sp, #20
 800b900:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b904:	200f      	movs	r0, #15
 800b906:	e7fa      	b.n	800b8fe <LoRaMacCryptoDeriveMcKEKey+0x22>

0800b908 <LoRaMacCryptoSetKey>:
{
 800b908:	b510      	push	{r4, lr}
 800b90a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800b90c:	f003 fa2c 	bl	800ed68 <SecureElementSetKey>
 800b910:	b978      	cbnz	r0, 800b932 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800b912:	b104      	cbz	r4, 800b916 <LoRaMacCryptoSetKey+0xe>
}
 800b914:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <LoRaMacCryptoSetKey+0x34>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4621      	mov	r1, r4
 800b91c:	7898      	ldrb	r0, [r3, #2]
 800b91e:	f7ff ffc1 	bl	800b8a4 <LoRaMacCryptoDeriveMcRootKey>
 800b922:	b940      	cbnz	r0, 800b936 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800b924:	2004      	movs	r0, #4
 800b926:	f7ff ffd9 	bl	800b8dc <LoRaMacCryptoDeriveMcKEKey>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0f2      	beq.n	800b914 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b92e:	200f      	movs	r0, #15
 800b930:	e7f0      	b.n	800b914 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b932:	200f      	movs	r0, #15
 800b934:	e7ee      	b.n	800b914 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800b936:	200f      	movs	r0, #15
 800b938:	e7ec      	b.n	800b914 <LoRaMacCryptoSetKey+0xc>
 800b93a:	bf00      	nop
 800b93c:	20000c2c 	.word	0x20000c2c

0800b940 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800b940:	2a00      	cmp	r2, #0
 800b942:	d064      	beq.n	800ba0e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800b944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b946:	b08f      	sub	sp, #60	; 0x3c
 800b948:	4607      	mov	r7, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800b94e:	2900      	cmp	r1, #0
 800b950:	d05f      	beq.n	800ba12 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800b952:	2600      	movs	r6, #0
 800b954:	9605      	str	r6, [sp, #20]
 800b956:	221d      	movs	r2, #29
 800b958:	4631      	mov	r1, r6
 800b95a:	a806      	add	r0, sp, #24
 800b95c:	f006 fb80 	bl	8012060 <memset>
    uint8_t versionMinor         = 0;
 800b960:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800b964:	4b2f      	ldr	r3, [pc, #188]	; (800ba24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800b96a:	f10d 0313 	add.w	r3, sp, #19
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	ab05      	add	r3, sp, #20
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	7923      	ldrb	r3, [r4, #4]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	4632      	mov	r2, r6
 800b97c:	4629      	mov	r1, r5
 800b97e:	4638      	mov	r0, r7
 800b980:	f003 fa54 	bl	800ee2c <SecureElementProcessJoinAccept>
 800b984:	2800      	cmp	r0, #0
 800b986:	d146      	bne.n	800ba16 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800b988:	7922      	ldrb	r2, [r4, #4]
 800b98a:	a905      	add	r1, sp, #20
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	f003 faf4 	bl	800ef7a <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f848 	bl	800ba28 <LoRaMacParserJoinAccept>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d13f      	bne.n	800ba1c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800b99c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800b99e:	79e3      	ldrb	r3, [r4, #7]
 800b9a0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800b9a4:	7a23      	ldrb	r3, [r4, #8]
 800b9a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800b9aa:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	42aa      	cmp	r2, r5
 800b9b2:	d035      	beq.n	800ba20 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800b9b4:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800b9bc:	f7ff ff72 	bl	800b8a4 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9c0:	bb50      	cbnz	r0, 800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800b9c2:	2004      	movs	r0, #4
 800b9c4:	f7ff ff8a 	bl	800b8dc <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9c8:	bb30      	cbnz	r0, 800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800b9ca:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800b9cc:	7aa2      	ldrb	r2, [r4, #10]
 800b9ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800b9d2:	7ae4      	ldrb	r4, [r4, #11]
 800b9d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800b9d8:	4633      	mov	r3, r6
 800b9da:	4622      	mov	r2, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	2003      	movs	r0, #3
 800b9e0:	f7ff fd4a 	bl	800b478 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9e4:	b9c0      	cbnz	r0, 800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800b9e6:	4633      	mov	r3, r6
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	2002      	movs	r0, #2
 800b9ee:	f7ff fd43 	bl	800b478 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800b9f2:	b988      	cbnz	r0, 800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800b9fc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800b9fe:	2200      	movs	r2, #0
 800ba00:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba02:	f04f 32ff 	mov.w	r2, #4294967295
 800ba06:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba08:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba0a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ba0c:	e004      	b.n	800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba0e:	200a      	movs	r0, #10
}
 800ba10:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba12:	200a      	movs	r0, #10
 800ba14:	e000      	b.n	800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba16:	200f      	movs	r0, #15
}
 800ba18:	b00f      	add	sp, #60	; 0x3c
 800ba1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ba1c:	2010      	movs	r0, #16
 800ba1e:	e7fb      	b.n	800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ba20:	2003      	movs	r0, #3
 800ba22:	e7f9      	b.n	800ba18 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ba24:	20000c2c 	.word	0x20000c2c

0800ba28 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d049      	beq.n	800bac0 <LoRaMacParserJoinAccept+0x98>
{
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ba30:	6801      	ldr	r1, [r0, #0]
 800ba32:	2900      	cmp	r1, #0
 800ba34:	d046      	beq.n	800bac4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ba36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba3a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ba3c:	2203      	movs	r2, #3
 800ba3e:	3006      	adds	r0, #6
 800ba40:	f003 fa9b 	bl	800ef7a <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ba44:	4620      	mov	r0, r4
 800ba46:	f850 1b09 	ldr.w	r1, [r0], #9
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	3104      	adds	r1, #4
 800ba4e:	f003 fa94 	bl	800ef7a <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ba52:	6821      	ldr	r1, [r4, #0]
 800ba54:	79cb      	ldrb	r3, [r1, #7]
 800ba56:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ba58:	7a0a      	ldrb	r2, [r1, #8]
 800ba5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba5e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ba60:	7a4a      	ldrb	r2, [r1, #9]
 800ba62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba66:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ba68:	7a8a      	ldrb	r2, [r1, #10]
 800ba6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ba6e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ba70:	7acb      	ldrb	r3, [r1, #11]
 800ba72:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ba74:	7b0b      	ldrb	r3, [r1, #12]
 800ba76:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ba78:	7923      	ldrb	r3, [r4, #4]
 800ba7a:	2b21      	cmp	r3, #33	; 0x21
 800ba7c:	d018      	beq.n	800bab0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800ba7e:	2b11      	cmp	r3, #17
 800ba80:	dc22      	bgt.n	800bac8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ba82:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ba84:	6821      	ldr	r1, [r4, #0]
 800ba86:	f102 0c01 	add.w	ip, r2, #1
 800ba8a:	5c8b      	ldrb	r3, [r1, r2]
 800ba8c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ba8e:	1c90      	adds	r0, r2, #2
 800ba90:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800ba94:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ba98:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ba9a:	3203      	adds	r2, #3
 800ba9c:	5c08      	ldrb	r0, [r1, r0]
 800ba9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800baa2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800baa4:	5c8a      	ldrb	r2, [r1, r2]
 800baa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800baaa:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800baac:	2000      	movs	r0, #0
}
 800baae:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800bab0:	2210      	movs	r2, #16
 800bab2:	310d      	adds	r1, #13
 800bab4:	f104 0012 	add.w	r0, r4, #18
 800bab8:	f003 fa5f 	bl	800ef7a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800babc:	221d      	movs	r2, #29
 800babe:	e7e1      	b.n	800ba84 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800bac0:	2002      	movs	r0, #2
}
 800bac2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bac4:	2002      	movs	r0, #2
 800bac6:	e7f2      	b.n	800baae <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800bac8:	2001      	movs	r0, #1
 800baca:	e7f0      	b.n	800baae <LoRaMacParserJoinAccept+0x86>

0800bacc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bacc:	2800      	cmp	r0, #0
 800bace:	d058      	beq.n	800bb82 <LoRaMacParserData+0xb6>
{
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bad4:	6801      	ldr	r1, [r0, #0]
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d055      	beq.n	800bb86 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800bada:	780b      	ldrb	r3, [r1, #0]
 800badc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800bade:	784b      	ldrb	r3, [r1, #1]
 800bae0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800bae2:	788a      	ldrb	r2, [r1, #2]
 800bae4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bae8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800baea:	78ca      	ldrb	r2, [r1, #3]
 800baec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baf0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800baf2:	790a      	ldrb	r2, [r1, #4]
 800baf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800baf8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800bafa:	794b      	ldrb	r3, [r1, #5]
 800bafc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800bafe:	798b      	ldrb	r3, [r1, #6]
 800bb00:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800bb02:	79ca      	ldrb	r2, [r1, #7]
 800bb04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bb08:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bb0a:	7b02      	ldrb	r2, [r0, #12]
 800bb0c:	f002 020f 	and.w	r2, r2, #15
 800bb10:	3108      	adds	r1, #8
 800bb12:	3010      	adds	r0, #16
 800bb14:	f003 fa31 	bl	800ef7a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bb18:	7b23      	ldrb	r3, [r4, #12]
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800bb22:	2200      	movs	r2, #0
 800bb24:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800bb28:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800bb2c:	7922      	ldrb	r2, [r4, #4]
 800bb2e:	1a11      	subs	r1, r2, r0
 800bb30:	2904      	cmp	r1, #4
 800bb32:	dc16      	bgt.n	800bb62 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800bb34:	6822      	ldr	r2, [r4, #0]
 800bb36:	7923      	ldrb	r3, [r4, #4]
 800bb38:	441a      	add	r2, r3
 800bb3a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800bb3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800bb40:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800bb44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bb48:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800bb4a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800bb4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bb52:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800bb54:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800bb58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb5c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800bb5e:	2000      	movs	r0, #0
}
 800bb60:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800bb62:	6821      	ldr	r1, [r4, #0]
 800bb64:	3309      	adds	r3, #9
 800bb66:	5c08      	ldrb	r0, [r1, r0]
 800bb68:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800bb6c:	1ad2      	subs	r2, r2, r3
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	3a04      	subs	r2, #4
 800bb72:	b2d2      	uxtb	r2, r2
 800bb74:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800bb78:	4419      	add	r1, r3
 800bb7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb7c:	f003 f9fd 	bl	800ef7a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800bb80:	e7d8      	b.n	800bb34 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800bb82:	2002      	movs	r0, #2
}
 800bb84:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800bb86:	2002      	movs	r0, #2
 800bb88:	e7ea      	b.n	800bb60 <LoRaMacParserData+0x94>

0800bb8a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb8a:	b370      	cbz	r0, 800bbea <LoRaMacSerializerJoinRequest+0x60>
{
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	b363      	cbz	r3, 800bbee <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800bb94:	7902      	ldrb	r2, [r0, #4]
 800bb96:	2a16      	cmp	r2, #22
 800bb98:	d92b      	bls.n	800bbf2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bb9a:	7942      	ldrb	r2, [r0, #5]
 800bb9c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800bb9e:	4601      	mov	r1, r0
 800bba0:	f851 0b06 	ldr.w	r0, [r1], #6
 800bba4:	2208      	movs	r2, #8
 800bba6:	3001      	adds	r0, #1
 800bba8:	f003 f9f2 	bl	800ef90 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800bbac:	4621      	mov	r1, r4
 800bbae:	f851 0b0e 	ldr.w	r0, [r1], #14
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	3009      	adds	r0, #9
 800bbb6:	f003 f9eb 	bl	800ef90 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800bbba:	8ae2      	ldrh	r2, [r4, #22]
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800bbc0:	8ae3      	ldrh	r3, [r4, #22]
 800bbc2:	6822      	ldr	r2, [r4, #0]
 800bbc4:	0a1b      	lsrs	r3, r3, #8
 800bbc6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bbc8:	69a2      	ldr	r2, [r4, #24]
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bbce:	69a3      	ldr	r3, [r4, #24]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bbd6:	8b62      	ldrh	r2, [r4, #26]
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bbdc:	7ee2      	ldrb	r2, [r4, #27]
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800bbe2:	2317      	movs	r3, #23
 800bbe4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bbe6:	2000      	movs	r0, #0
}
 800bbe8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bbea:	2001      	movs	r0, #1
}
 800bbec:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bbee:	2001      	movs	r0, #1
 800bbf0:	e7fa      	b.n	800bbe8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bbf2:	2002      	movs	r0, #2
 800bbf4:	e7f8      	b.n	800bbe8 <LoRaMacSerializerJoinRequest+0x5e>

0800bbf6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d066      	beq.n	800bcc8 <LoRaMacSerializerData+0xd2>
{
 800bbfa:	b538      	push	{r3, r4, r5, lr}
 800bbfc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bbfe:	6801      	ldr	r1, [r0, #0]
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d063      	beq.n	800bccc <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bc04:	7b02      	ldrb	r2, [r0, #12]
 800bc06:	f002 020f 	and.w	r2, r2, #15
 800bc0a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bc0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc12:	b10b      	cbz	r3, 800bc18 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800bc14:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800bc18:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800bc1e:	7922      	ldrb	r2, [r4, #4]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d355      	bcc.n	800bcd0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800bc24:	7963      	ldrb	r3, [r4, #5]
 800bc26:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800bc28:	68a2      	ldr	r2, [r4, #8]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	0a1b      	lsrs	r3, r3, #8
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800bc36:	8962      	ldrh	r2, [r4, #10]
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800bc3c:	7ae2      	ldrb	r2, [r4, #11]
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	7b22      	ldrb	r2, [r4, #12]
 800bc46:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800bc48:	89e2      	ldrh	r2, [r4, #14]
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800bc4e:	89e3      	ldrh	r3, [r4, #14]
 800bc50:	6822      	ldr	r2, [r4, #0]
 800bc52:	0a1b      	lsrs	r3, r3, #8
 800bc54:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800bc56:	4621      	mov	r1, r4
 800bc58:	f851 0b10 	ldr.w	r0, [r1], #16
 800bc5c:	7b22      	ldrb	r2, [r4, #12]
 800bc5e:	f002 020f 	and.w	r2, r2, #15
 800bc62:	3008      	adds	r0, #8
 800bc64:	f003 f989 	bl	800ef7a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800bc68:	7b23      	ldrb	r3, [r4, #12]
 800bc6a:	f003 030f 	and.w	r3, r3, #15
 800bc6e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800bc72:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bc76:	b12a      	cbz	r2, 800bc84 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800bc7e:	5551      	strb	r1, [r2, r5]
 800bc80:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bc8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc8c:	4428      	add	r0, r5
 800bc8e:	f003 f974 	bl	800ef7a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800bc92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc96:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800bc98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bc9a:	6821      	ldr	r1, [r4, #0]
 800bc9c:	1c5a      	adds	r2, r3, #1
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800bca2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bca4:	0a08      	lsrs	r0, r1, #8
 800bca6:	6825      	ldr	r5, [r4, #0]
 800bca8:	1c99      	adds	r1, r3, #2
 800bcaa:	b289      	uxth	r1, r1
 800bcac:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800bcae:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	1cda      	adds	r2, r3, #3
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800bcb8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800bcbc:	6821      	ldr	r1, [r4, #0]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800bcc2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800bcc4:	2000      	movs	r0, #0
}
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bcc8:	2001      	movs	r0, #1
}
 800bcca:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800bccc:	2001      	movs	r0, #1
 800bcce:	e7fa      	b.n	800bcc6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800bcd0:	2002      	movs	r0, #2
 800bcd2:	e7f8      	b.n	800bcc6 <LoRaMacSerializerData+0xd0>

0800bcd4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <NvmDataMgmtEvent+0xc>)
 800bcd6:	881a      	ldrh	r2, [r3, #0]
 800bcd8:	4310      	orrs	r0, r2
 800bcda:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	20000c30 	.word	0x20000c30

0800bce4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800bce4:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800bce6:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <NvmDataMgmtStoreBegin+0x1c>)
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b11b      	cbz	r3, 800bcf4 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800bcec:	f7fe f964 	bl	8009fb8 <LoRaMacStop>
 800bcf0:	b918      	cbnz	r0, 800bcfa <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800bcf2:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800bcf4:	f06f 0001 	mvn.w	r0, #1
 800bcf8:	e7fb      	b.n	800bcf2 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800bcfa:	f06f 0002 	mvn.w	r0, #2
 800bcfe:	e7f8      	b.n	800bcf2 <NvmDataMgmtStoreBegin+0xe>
 800bd00:	20000c30 	.word	0x20000c30

0800bd04 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800bd04:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800bd06:	2400      	movs	r4, #0
 800bd08:	4b02      	ldr	r3, [pc, #8]	; (800bd14 <NvmDataMgmtStoreEnd+0x10>)
 800bd0a:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800bd0c:	f7fe f94c 	bl	8009fa8 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800bd10:	4620      	mov	r0, r4
 800bd12:	bd10      	pop	{r4, pc}
 800bd14:	20000c30 	.word	0x20000c30

0800bd18 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800bd18:	2805      	cmp	r0, #5
 800bd1a:	d005      	beq.n	800bd28 <RegionIsActive+0x10>
 800bd1c:	2808      	cmp	r0, #8
 800bd1e:	d001      	beq.n	800bd24 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800bd20:	2000      	movs	r0, #0
        }
    }
}
 800bd22:	4770      	bx	lr
    switch( region )
 800bd24:	2001      	movs	r0, #1
 800bd26:	4770      	bx	lr
 800bd28:	2001      	movs	r0, #1
 800bd2a:	4770      	bx	lr

0800bd2c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800bd2c:	b500      	push	{lr}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	4603      	mov	r3, r0
 800bd32:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800bd34:	2200      	movs	r2, #0
 800bd36:	9200      	str	r2, [sp, #0]
    switch( region )
 800bd38:	2b05      	cmp	r3, #5
 800bd3a:	d004      	beq.n	800bd46 <RegionGetPhyParam+0x1a>
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d009      	beq.n	800bd54 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800bd40:	9b00      	ldr	r3, [sp, #0]
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	e002      	b.n	800bd4c <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800bd46:	f000 fdf9 	bl	800c93c <RegionEU868GetPhyParam>
 800bd4a:	9001      	str	r0, [sp, #4]
        }
    }
}
 800bd4c:	9801      	ldr	r0, [sp, #4]
 800bd4e:	b003      	add	sp, #12
 800bd50:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800bd54:	f001 fc18 	bl	800d588 <RegionUS915GetPhyParam>
 800bd58:	9001      	str	r0, [sp, #4]
 800bd5a:	e7f7      	b.n	800bd4c <RegionGetPhyParam+0x20>

0800bd5c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800bd5c:	b508      	push	{r3, lr}
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4608      	mov	r0, r1
    switch( region )
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d002      	beq.n	800bd6c <RegionSetBandTxDone+0x10>
 800bd66:	2b08      	cmp	r3, #8
 800bd68:	d003      	beq.n	800bd72 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800bd6a:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800bd6c:	f000 fea8 	bl	800cac0 <RegionEU868SetBandTxDone>
 800bd70:	e7fb      	b.n	800bd6a <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800bd72:	f001 fce5 	bl	800d740 <RegionUS915SetBandTxDone>
 800bd76:	e7f8      	b.n	800bd6a <RegionSetBandTxDone+0xe>

0800bd78 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800bd78:	b508      	push	{r3, lr}
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4608      	mov	r0, r1
    switch( region )
 800bd7e:	2b05      	cmp	r3, #5
 800bd80:	d002      	beq.n	800bd88 <RegionInitDefaults+0x10>
 800bd82:	2b08      	cmp	r3, #8
 800bd84:	d003      	beq.n	800bd8e <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800bd86:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800bd88:	f000 feb8 	bl	800cafc <RegionEU868InitDefaults>
 800bd8c:	e7fb      	b.n	800bd86 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800bd8e:	f001 fcf5 	bl	800d77c <RegionUS915InitDefaults>
}
 800bd92:	e7f8      	b.n	800bd86 <RegionInitDefaults+0xe>

0800bd94 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bd94:	b508      	push	{r3, lr}
 800bd96:	4603      	mov	r3, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
    switch( region )
 800bd9c:	2b05      	cmp	r3, #5
 800bd9e:	d003      	beq.n	800bda8 <RegionVerify+0x14>
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d004      	beq.n	800bdae <RegionVerify+0x1a>
 800bda4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800bda6:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800bda8:	f000 ff14 	bl	800cbd4 <RegionEU868Verify>
 800bdac:	e7fb      	b.n	800bda6 <RegionVerify+0x12>
        US915_VERIFY( );
 800bdae:	f001 fd8b 	bl	800d8c8 <RegionUS915Verify>
 800bdb2:	e7f8      	b.n	800bda6 <RegionVerify+0x12>

0800bdb4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800bdb4:	b508      	push	{r3, lr}
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4608      	mov	r0, r1
    switch( region )
 800bdba:	2b05      	cmp	r3, #5
 800bdbc:	d002      	beq.n	800bdc4 <RegionApplyCFList+0x10>
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d003      	beq.n	800bdca <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800bdc2:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800bdc4:	f001 fad4 	bl	800d370 <RegionEU868ApplyCFList>
 800bdc8:	e7fb      	b.n	800bdc2 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800bdca:	f001 fdad 	bl	800d928 <RegionUS915ApplyCFList>
}
 800bdce:	e7f8      	b.n	800bdc2 <RegionApplyCFList+0xe>

0800bdd0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800bdd0:	b508      	push	{r3, lr}
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	4608      	mov	r0, r1
    switch( region )
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	d003      	beq.n	800bde2 <RegionChanMaskSet+0x12>
 800bdda:	2b08      	cmp	r3, #8
 800bddc:	d004      	beq.n	800bde8 <RegionChanMaskSet+0x18>
 800bdde:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800bde0:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800bde2:	f000 ff3d 	bl	800cc60 <RegionEU868ChanMaskSet>
 800bde6:	e7fb      	b.n	800bde0 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800bde8:	f001 fde0 	bl	800d9ac <RegionUS915ChanMaskSet>
 800bdec:	e7f8      	b.n	800bde0 <RegionChanMaskSet+0x10>

0800bdee <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bdee:	b508      	push	{r3, lr}
 800bdf0:	4684      	mov	ip, r0
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	461a      	mov	r2, r3
    switch( region )
 800bdf8:	f1bc 0f05 	cmp.w	ip, #5
 800bdfc:	d003      	beq.n	800be06 <RegionComputeRxWindowParameters+0x18>
 800bdfe:	f1bc 0f08 	cmp.w	ip, #8
 800be02:	d004      	beq.n	800be0e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800be04:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800be06:	9b02      	ldr	r3, [sp, #8]
 800be08:	f000 ff48 	bl	800cc9c <RegionEU868ComputeRxWindowParameters>
 800be0c:	e7fa      	b.n	800be04 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	f001 fe10 	bl	800da34 <RegionUS915ComputeRxWindowParameters>
}
 800be14:	e7f6      	b.n	800be04 <RegionComputeRxWindowParameters+0x16>

0800be16 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800be16:	b508      	push	{r3, lr}
 800be18:	4603      	mov	r3, r0
 800be1a:	4608      	mov	r0, r1
 800be1c:	4611      	mov	r1, r2
    switch( region )
 800be1e:	2b05      	cmp	r3, #5
 800be20:	d003      	beq.n	800be2a <RegionRxConfig+0x14>
 800be22:	2b08      	cmp	r3, #8
 800be24:	d004      	beq.n	800be30 <RegionRxConfig+0x1a>
 800be26:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800be28:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800be2a:	f000 ff6d 	bl	800cd08 <RegionEU868RxConfig>
 800be2e:	e7fb      	b.n	800be28 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800be30:	f001 fe2e 	bl	800da90 <RegionUS915RxConfig>
 800be34:	e7f8      	b.n	800be28 <RegionRxConfig+0x12>

0800be36 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800be36:	b508      	push	{r3, lr}
 800be38:	4684      	mov	ip, r0
 800be3a:	4608      	mov	r0, r1
 800be3c:	4611      	mov	r1, r2
 800be3e:	461a      	mov	r2, r3
    switch( region )
 800be40:	f1bc 0f05 	cmp.w	ip, #5
 800be44:	d004      	beq.n	800be50 <RegionTxConfig+0x1a>
 800be46:	f1bc 0f08 	cmp.w	ip, #8
 800be4a:	d004      	beq.n	800be56 <RegionTxConfig+0x20>
 800be4c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800be4e:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800be50:	f000 ffde 	bl	800ce10 <RegionEU868TxConfig>
 800be54:	e7fb      	b.n	800be4e <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800be56:	f001 fe75 	bl	800db44 <RegionUS915TxConfig>
 800be5a:	e7f8      	b.n	800be4e <RegionTxConfig+0x18>

0800be5c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800be5c:	b500      	push	{lr}
 800be5e:	b083      	sub	sp, #12
 800be60:	4684      	mov	ip, r0
 800be62:	4608      	mov	r0, r1
 800be64:	4611      	mov	r1, r2
 800be66:	461a      	mov	r2, r3
    switch( region )
 800be68:	f1bc 0f05 	cmp.w	ip, #5
 800be6c:	d006      	beq.n	800be7c <RegionLinkAdrReq+0x20>
 800be6e:	f1bc 0f08 	cmp.w	ip, #8
 800be72:	d009      	beq.n	800be88 <RegionLinkAdrReq+0x2c>
 800be74:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800be76:	b003      	add	sp, #12
 800be78:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800be7c:	9b05      	ldr	r3, [sp, #20]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	f001 f85d 	bl	800cf40 <RegionEU868LinkAdrReq>
 800be86:	e7f6      	b.n	800be76 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800be88:	9b05      	ldr	r3, [sp, #20]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	9b04      	ldr	r3, [sp, #16]
 800be8e:	f001 fed3 	bl	800dc38 <RegionUS915LinkAdrReq>
 800be92:	e7f0      	b.n	800be76 <RegionLinkAdrReq+0x1a>

0800be94 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800be94:	b508      	push	{r3, lr}
 800be96:	4603      	mov	r3, r0
 800be98:	4608      	mov	r0, r1
    switch( region )
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	d003      	beq.n	800bea6 <RegionRxParamSetupReq+0x12>
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	d004      	beq.n	800beac <RegionRxParamSetupReq+0x18>
 800bea2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800bea4:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800bea6:	f001 f90f 	bl	800d0c8 <RegionEU868RxParamSetupReq>
 800beaa:	e7fb      	b.n	800bea4 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800beac:	f002 f810 	bl	800ded0 <RegionUS915RxParamSetupReq>
 800beb0:	e7f8      	b.n	800bea4 <RegionRxParamSetupReq+0x10>

0800beb2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800beb2:	b508      	push	{r3, lr}
 800beb4:	4603      	mov	r3, r0
 800beb6:	4608      	mov	r0, r1
    switch( region )
 800beb8:	2b05      	cmp	r3, #5
 800beba:	d003      	beq.n	800bec4 <RegionNewChannelReq+0x12>
 800bebc:	2b08      	cmp	r3, #8
 800bebe:	d004      	beq.n	800beca <RegionNewChannelReq+0x18>
 800bec0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800bec2:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800bec4:	f001 fa95 	bl	800d3f2 <RegionEU868NewChannelReq>
 800bec8:	e7fb      	b.n	800bec2 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800beca:	f002 f82c 	bl	800df26 <RegionUS915NewChannelReq>
 800bece:	e7f8      	b.n	800bec2 <RegionNewChannelReq+0x10>

0800bed0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800bed0:	b508      	push	{r3, lr}
 800bed2:	4603      	mov	r3, r0
 800bed4:	4608      	mov	r0, r1
    switch( region )
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d003      	beq.n	800bee2 <RegionTxParamSetupReq+0x12>
 800beda:	2b08      	cmp	r3, #8
 800bedc:	d004      	beq.n	800bee8 <RegionTxParamSetupReq+0x18>
 800bede:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800bee0:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800bee2:	f001 f915 	bl	800d110 <RegionEU868TxParamSetupReq>
 800bee6:	e7fb      	b.n	800bee0 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800bee8:	f002 f820 	bl	800df2c <RegionUS915TxParamSetupReq>
 800beec:	e7f8      	b.n	800bee0 <RegionTxParamSetupReq+0x10>

0800beee <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800beee:	b508      	push	{r3, lr}
 800bef0:	4603      	mov	r3, r0
 800bef2:	4608      	mov	r0, r1
    switch( region )
 800bef4:	2b05      	cmp	r3, #5
 800bef6:	d003      	beq.n	800bf00 <RegionDlChannelReq+0x12>
 800bef8:	2b08      	cmp	r3, #8
 800befa:	d004      	beq.n	800bf06 <RegionDlChannelReq+0x18>
 800befc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800befe:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800bf00:	f001 f90a 	bl	800d118 <RegionEU868DlChannelReq>
 800bf04:	e7fb      	b.n	800befe <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800bf06:	f002 f814 	bl	800df32 <RegionUS915DlChannelReq>
 800bf0a:	e7f8      	b.n	800befe <RegionDlChannelReq+0x10>

0800bf0c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	4603      	mov	r3, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	4611      	mov	r1, r2
    switch( region )
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d003      	beq.n	800bf20 <RegionAlternateDr+0x14>
 800bf18:	2b08      	cmp	r3, #8
 800bf1a:	d004      	beq.n	800bf26 <RegionAlternateDr+0x1a>
 800bf1c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800bf1e:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800bf20:	f001 f922 	bl	800d168 <RegionEU868AlternateDr>
 800bf24:	e7fb      	b.n	800bf1e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800bf26:	f002 f807 	bl	800df38 <RegionUS915AlternateDr>
 800bf2a:	e7f8      	b.n	800bf1e <RegionAlternateDr+0x12>

0800bf2c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800bf2c:	b508      	push	{r3, lr}
 800bf2e:	4684      	mov	ip, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	461a      	mov	r2, r3
    switch( region )
 800bf36:	f1bc 0f05 	cmp.w	ip, #5
 800bf3a:	d004      	beq.n	800bf46 <RegionNextChannel+0x1a>
 800bf3c:	f1bc 0f08 	cmp.w	ip, #8
 800bf40:	d005      	beq.n	800bf4e <RegionNextChannel+0x22>
 800bf42:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800bf44:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800bf46:	9b02      	ldr	r3, [sp, #8]
 800bf48:	f001 f910 	bl	800d16c <RegionEU868NextChannel>
 800bf4c:	e7fa      	b.n	800bf44 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	f002 f818 	bl	800df84 <RegionUS915NextChannel>
 800bf54:	e7f6      	b.n	800bf44 <RegionNextChannel+0x18>

0800bf56 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800bf56:	b508      	push	{r3, lr}
 800bf58:	4603      	mov	r3, r0
 800bf5a:	4608      	mov	r0, r1
    switch( region )
 800bf5c:	2b05      	cmp	r3, #5
 800bf5e:	d002      	beq.n	800bf66 <RegionSetContinuousWave+0x10>
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d003      	beq.n	800bf6c <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800bf64:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800bf66:	f001 fa6f 	bl	800d448 <RegionEU868SetContinuousWave>
 800bf6a:	e7fb      	b.n	800bf64 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800bf6c:	f002 f8be 	bl	800e0ec <RegionUS915SetContinuousWave>
}
 800bf70:	e7f8      	b.n	800bf64 <RegionSetContinuousWave+0xe>

0800bf72 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800bf72:	b508      	push	{r3, lr}
 800bf74:	4684      	mov	ip, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	461a      	mov	r2, r3
    switch( region )
 800bf7c:	f1bc 0f05 	cmp.w	ip, #5
 800bf80:	d004      	beq.n	800bf8c <RegionApplyDrOffset+0x1a>
 800bf82:	f1bc 0f08 	cmp.w	ip, #8
 800bf86:	d004      	beq.n	800bf92 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800bf88:	b2c8      	uxtb	r0, r1
 800bf8a:	e001      	b.n	800bf90 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800bf8c:	f001 fa8a 	bl	800d4a4 <RegionEU868ApplyDrOffset>
        }
    }
}
 800bf90:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800bf92:	f002 f8df 	bl	800e154 <RegionUS915ApplyDrOffset>
 800bf96:	e7fb      	b.n	800bf90 <RegionApplyDrOffset+0x1e>

0800bf98 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800bf98:	4800      	ldr	r0, [pc, #0]	; (800bf9c <RegionGetVersion+0x4>)
 800bf9a:	4770      	bx	lr
 800bf9c:	01010003 	.word	0x01010003

0800bfa0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800bfa0:	468c      	mov	ip, r1
 800bfa2:	b1a9      	cbz	r1, 800bfd0 <FindAvailable125kHzChannels+0x30>
 800bfa4:	b1b2      	cbz	r2, 800bfd4 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800bfaa:	e001      	b.n	800bfb0 <FindAvailable125kHzChannels+0x10>
 800bfac:	3301      	adds	r3, #1
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b07      	cmp	r3, #7
 800bfb2:	d80b      	bhi.n	800bfcc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800bfb4:	fa40 f103 	asr.w	r1, r0, r3
 800bfb8:	f011 0f01 	tst.w	r1, #1
 800bfbc:	d0f6      	beq.n	800bfac <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800bfbe:	7811      	ldrb	r1, [r2, #0]
 800bfc0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800bfc4:	7811      	ldrb	r1, [r2, #0]
 800bfc6:	3101      	adds	r1, #1
 800bfc8:	7011      	strb	r1, [r2, #0]
 800bfca:	e7ef      	b.n	800bfac <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bfd0:	2003      	movs	r0, #3
 800bfd2:	4770      	bx	lr
 800bfd4:	2003      	movs	r0, #3
}
 800bfd6:	4770      	bx	lr

0800bfd8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfda:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9302      	str	r3, [sp, #8]
 800bfe0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800bfe2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d03e      	beq.n	800c068 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800bfea:	460d      	mov	r5, r1
 800bfec:	4617      	mov	r7, r2
 800bfee:	4606      	mov	r6, r0
 800bff0:	2900      	cmp	r1, #0
 800bff2:	d03b      	beq.n	800c06c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800bff4:	2a00      	cmp	r2, #0
 800bff6:	d03b      	beq.n	800c070 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800bff8:	780c      	ldrb	r4, [r1, #0]
 800bffa:	e017      	b.n	800c02c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800bffc:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800c000:	0a00      	lsrs	r0, r0, #8
 800c002:	e019      	b.n	800c038 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800c004:	3901      	subs	r1, #1
 800c006:	2000      	movs	r0, #0
 800c008:	f002 ffaa 	bl	800ef60 <randr>
 800c00c:	f100 0310 	add.w	r3, r0, #16
 800c010:	eb0d 0003 	add.w	r0, sp, r3
 800c014:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800c018:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c01c:	703b      	strb	r3, [r7, #0]
 800c01e:	e016      	b.n	800c04e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800c020:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c024:	b9cb      	cbnz	r3, 800c05a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800c026:	782a      	ldrb	r2, [r5, #0]
 800c028:	42a2      	cmp	r2, r4
 800c02a:	d016      	beq.n	800c05a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800c02c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800c02e:	f014 0f01 	tst.w	r4, #1
 800c032:	d1e3      	bne.n	800bffc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800c034:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800c038:	f10d 0207 	add.w	r2, sp, #7
 800c03c:	a902      	add	r1, sp, #8
 800c03e:	f7ff ffaf 	bl	800bfa0 <FindAvailable125kHzChannels>
 800c042:	2803      	cmp	r0, #3
 800c044:	d00b      	beq.n	800c05e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800c046:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c04a:	2900      	cmp	r1, #0
 800c04c:	d1da      	bne.n	800c004 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800c04e:	3401      	adds	r4, #1
 800c050:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800c052:	2c07      	cmp	r4, #7
 800c054:	d9e4      	bls.n	800c020 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800c056:	2400      	movs	r4, #0
 800c058:	e7e2      	b.n	800c020 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800c05a:	b913      	cbnz	r3, 800c062 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800c05c:	2003      	movs	r0, #3
}
 800c05e:	b005      	add	sp, #20
 800c060:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800c062:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800c064:	2000      	movs	r0, #0
 800c066:	e7fa      	b.n	800c05e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c068:	2003      	movs	r0, #3
 800c06a:	e7f8      	b.n	800c05e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c06c:	2003      	movs	r0, #3
 800c06e:	e7f6      	b.n	800c05e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800c070:	2003      	movs	r0, #3
 800c072:	e7f4      	b.n	800c05e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800c074 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800c074:	fb02 1000 	mla	r0, r2, r0, r1
 800c078:	4770      	bx	lr

0800c07a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c07a:	b082      	sub	sp, #8
 800c07c:	f10d 0c08 	add.w	ip, sp, #8
 800c080:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c084:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c086:	b971      	cbnz	r1, 800c0a6 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c088:	4613      	mov	r3, r2
 800c08a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c08e:	d306      	bcc.n	800c09e <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c090:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c094:	4293      	cmp	r3, r2
 800c096:	d80a      	bhi.n	800c0ae <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c09c:	e000      	b.n	800c0a0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c09e:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	bf38      	it	cc
 800c0a4:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c0a6:	b900      	cbnz	r0, 800c0aa <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c0a8:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c0aa:	b002      	add	sp, #8
 800c0ac:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c0ae:	f242 7310 	movw	r3, #10000	; 0x2710
 800c0b2:	e7f5      	b.n	800c0a0 <GetDutyCycle+0x26>

0800c0b4 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c0b4:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c0b6:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c0b8:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c0ba:	e001      	b.n	800c0c0 <CountChannels+0xc>
 800c0bc:	3301      	adds	r3, #1
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	d207      	bcs.n	800c0d4 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	409a      	lsls	r2, r3
 800c0c8:	ea32 020c 	bics.w	r2, r2, ip
 800c0cc:	d1f6      	bne.n	800c0bc <CountChannels+0x8>
        {
            nbActiveBits++;
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	b2c0      	uxtb	r0, r0
 800c0d2:	e7f3      	b.n	800c0bc <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <SetMaxTimeCredits>:
{
 800c0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0dc:	b089      	sub	sp, #36	; 0x24
 800c0de:	4604      	mov	r4, r0
 800c0e0:	460e      	mov	r6, r1
 800c0e2:	ad02      	add	r5, sp, #8
 800c0e4:	e885 000c 	stmia.w	r5, {r2, r3}
 800c0e8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c0ec:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c0f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c0f4:	f005 fc7a 	bl	80119ec <SysTimeToMs>
 800c0f8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c100:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c104:	4631      	mov	r1, r6
 800c106:	4620      	mov	r0, r4
 800c108:	f7ff ffb7 	bl	800c07a <GetDutyCycle>
 800c10c:	4605      	mov	r5, r0
    if( joined == false )
 800c10e:	2e00      	cmp	r6, #0
 800c110:	d14c      	bne.n	800c1ac <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c112:	2864      	cmp	r0, #100	; 0x64
 800c114:	d025      	beq.n	800c162 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c116:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c11a:	d025      	beq.n	800c168 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c11c:	4e27      	ldr	r6, [pc, #156]	; (800c1bc <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c11e:	68a1      	ldr	r1, [r4, #8]
 800c120:	a806      	add	r0, sp, #24
 800c122:	f005 fc83 	bl	8011a2c <SysTimeFromMs>
 800c126:	9b07      	ldr	r3, [sp, #28]
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	aa02      	add	r2, sp, #8
 800c12e:	ca06      	ldmia	r2, {r1, r2}
 800c130:	a804      	add	r0, sp, #16
 800c132:	f005 fbe2 	bl	80118fa <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c136:	f1b8 0f00 	cmp.w	r8, #0
 800c13a:	d102      	bne.n	800c142 <SetMaxTimeCredits+0x6a>
 800c13c:	f1b9 0f00 	cmp.w	r9, #0
 800c140:	d002      	beq.n	800c148 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c142:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c144:	42b3      	cmp	r3, r6
 800c146:	d012      	beq.n	800c16e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800c148:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c14a:	9b02      	ldr	r3, [sp, #8]
 800c14c:	4a1c      	ldr	r2, [pc, #112]	; (800c1c0 <SetMaxTimeCredits+0xe8>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d812      	bhi.n	800c178 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	b903      	cbnz	r3, 800c158 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800c156:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c158:	6126      	str	r6, [r4, #16]
}
 800c15a:	4628      	mov	r0, r5
 800c15c:	b009      	add	sp, #36	; 0x24
 800c15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800c162:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c164:	4e17      	ldr	r6, [pc, #92]	; (800c1c4 <SetMaxTimeCredits+0xec>)
 800c166:	e7da      	b.n	800c11e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c168:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c16a:	4e17      	ldr	r6, [pc, #92]	; (800c1c8 <SetMaxTimeCredits+0xf0>)
 800c16c:	e7d7      	b.n	800c11e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c16e:	9a04      	ldr	r2, [sp, #16]
 800c170:	4b16      	ldr	r3, [pc, #88]	; (800c1cc <SetMaxTimeCredits+0xf4>)
 800c172:	429a      	cmp	r2, r3
 800c174:	d9ed      	bls.n	800c152 <SetMaxTimeCredits+0x7a>
 800c176:	e7e7      	b.n	800c148 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c178:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c17c:	3b30      	subs	r3, #48	; 0x30
 800c17e:	4a14      	ldr	r2, [pc, #80]	; (800c1d0 <SetMaxTimeCredits+0xf8>)
 800c180:	fba2 2303 	umull	r2, r3, r2, r3
 800c184:	0c1b      	lsrs	r3, r3, #16
 800c186:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c188:	4a12      	ldr	r2, [pc, #72]	; (800c1d4 <SetMaxTimeCredits+0xfc>)
 800c18a:	fb02 f303 	mul.w	r3, r2, r3
 800c18e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c190:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c194:	3330      	adds	r3, #48	; 0x30
 800c196:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c19e:	ab04      	add	r3, sp, #16
 800c1a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c1a4:	f005 fc22 	bl	80119ec <SysTimeToMs>
 800c1a8:	60a0      	str	r0, [r4, #8]
 800c1aa:	e7d2      	b.n	800c152 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800c1ac:	f1b8 0f00 	cmp.w	r8, #0
 800c1b0:	d102      	bne.n	800c1b8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800c1b2:	4e04      	ldr	r6, [pc, #16]	; (800c1c4 <SetMaxTimeCredits+0xec>)
 800c1b4:	60e6      	str	r6, [r4, #12]
 800c1b6:	e7cc      	b.n	800c152 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c1b8:	4e02      	ldr	r6, [pc, #8]	; (800c1c4 <SetMaxTimeCredits+0xec>)
 800c1ba:	e7ca      	b.n	800c152 <SetMaxTimeCredits+0x7a>
 800c1bc:	02932e00 	.word	0x02932e00
 800c1c0:	0001ec2f 	.word	0x0001ec2f
 800c1c4:	001b7740 	.word	0x001b7740
 800c1c8:	0112a880 	.word	0x0112a880
 800c1cc:	0001517f 	.word	0x0001517f
 800c1d0:	c22e4507 	.word	0xc22e4507
 800c1d4:	00015180 	.word	0x00015180

0800c1d8 <UpdateTimeCredits>:
{
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c1e0:	9301      	str	r3, [sp, #4]
 800c1e2:	9200      	str	r2, [sp, #0]
 800c1e4:	ab06      	add	r3, sp, #24
 800c1e6:	cb0c      	ldmia	r3, {r2, r3}
 800c1e8:	f7ff ff76 	bl	800c0d8 <SetMaxTimeCredits>
 800c1ec:	4605      	mov	r5, r0
    if( joined == true )
 800c1ee:	b94e      	cbnz	r6, 800c204 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800c1f0:	68e2      	ldr	r2, [r4, #12]
 800c1f2:	6923      	ldr	r3, [r4, #16]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d900      	bls.n	800c1fa <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800c1f8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	6063      	str	r3, [r4, #4]
}
 800c1fe:	4628      	mov	r0, r5
 800c200:	b002      	add	sp, #8
 800c202:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c204:	6860      	ldr	r0, [r4, #4]
 800c206:	f005 fc71 	bl	8011aec <UTIL_TIMER_GetElapsedTime>
 800c20a:	68e3      	ldr	r3, [r4, #12]
 800c20c:	4403      	add	r3, r0
 800c20e:	60e3      	str	r3, [r4, #12]
 800c210:	e7ee      	b.n	800c1f0 <UpdateTimeCredits+0x18>

0800c212 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c212:	4288      	cmp	r0, r1
 800c214:	db03      	blt.n	800c21e <RegionCommonValueInRange+0xc>
 800c216:	4290      	cmp	r0, r2
 800c218:	dd03      	ble.n	800c222 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800c21a:	2000      	movs	r0, #0
 800c21c:	4770      	bx	lr
 800c21e:	2000      	movs	r0, #0
 800c220:	4770      	bx	lr
        return 1;
 800c222:	2001      	movs	r0, #1
}
 800c224:	4770      	bx	lr

0800c226 <RegionCommonChanVerifyDr>:
{
 800c226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22a:	4682      	mov	sl, r0
 800c22c:	460e      	mov	r6, r1
 800c22e:	4690      	mov	r8, r2
 800c230:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c234:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800c238:	4619      	mov	r1, r3
 800c23a:	4640      	mov	r0, r8
 800c23c:	f7ff ffe9 	bl	800c212 <RegionCommonValueInRange>
 800c240:	b338      	cbz	r0, 800c292 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c242:	2500      	movs	r5, #0
 800c244:	462f      	mov	r7, r5
 800c246:	e01e      	b.n	800c286 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800c248:	3401      	adds	r4, #1
 800c24a:	b2e4      	uxtb	r4, r4
 800c24c:	2c0f      	cmp	r4, #15
 800c24e:	d816      	bhi.n	800c27e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c250:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800c254:	4123      	asrs	r3, r4
 800c256:	f013 0f01 	tst.w	r3, #1
 800c25a:	d0f5      	beq.n	800c248 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c25c:	193b      	adds	r3, r7, r4
 800c25e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c262:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c266:	7a19      	ldrb	r1, [r3, #8]
 800c268:	090a      	lsrs	r2, r1, #4
 800c26a:	f001 010f 	and.w	r1, r1, #15
 800c26e:	4640      	mov	r0, r8
 800c270:	f7ff ffcf 	bl	800c212 <RegionCommonValueInRange>
 800c274:	2801      	cmp	r0, #1
 800c276:	d1e7      	bne.n	800c248 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800c278:	2001      	movs	r0, #1
}
 800c27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c27e:	3710      	adds	r7, #16
 800c280:	b2ff      	uxtb	r7, r7
 800c282:	3501      	adds	r5, #1
 800c284:	b2ed      	uxtb	r5, r5
 800c286:	4557      	cmp	r7, sl
 800c288:	d201      	bcs.n	800c28e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c28a:	2400      	movs	r4, #0
 800c28c:	e7de      	b.n	800c24c <RegionCommonChanVerifyDr+0x26>
    return false;
 800c28e:	2000      	movs	r0, #0
 800c290:	e7f3      	b.n	800c27a <RegionCommonChanVerifyDr+0x54>
        return false;
 800c292:	2000      	movs	r0, #0
 800c294:	e7f1      	b.n	800c27a <RegionCommonChanVerifyDr+0x54>

0800c296 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c296:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c29a:	0913      	lsrs	r3, r2, #4
 800c29c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c2a0:	d30e      	bcc.n	800c2c0 <RegionCommonChanDisable+0x2a>
 800c2a2:	4291      	cmp	r1, r2
 800c2a4:	d20e      	bcs.n	800c2c4 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c2a6:	f001 010f 	and.w	r1, r1, #15
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	fa03 f101 	lsl.w	r1, r3, r1
 800c2b0:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c2b4:	ea22 0101 	bic.w	r1, r2, r1
 800c2b8:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c2bc:	4618      	mov	r0, r3
 800c2be:	4770      	bx	lr
        return false;
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	4770      	bx	lr
 800c2c4:	2000      	movs	r0, #0
}
 800c2c6:	4770      	bx	lr

0800c2c8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c2ca:	b188      	cbz	r0, 800c2f0 <RegionCommonCountChannels+0x28>
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	4616      	mov	r6, r2
 800c2d0:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800c2d2:	2500      	movs	r5, #0
 800c2d4:	e008      	b.n	800c2e8 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c2d6:	2110      	movs	r1, #16
 800c2d8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800c2dc:	f7ff feea 	bl	800c0b4 <CountChannels>
 800c2e0:	4405      	add	r5, r0
 800c2e2:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c2e4:	3401      	adds	r4, #1
 800c2e6:	b2e4      	uxtb	r4, r4
 800c2e8:	42b4      	cmp	r4, r6
 800c2ea:	d3f4      	bcc.n	800c2d6 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	e7fb      	b.n	800c2ec <RegionCommonCountChannels+0x24>

0800c2f4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c2f4:	4684      	mov	ip, r0
 800c2f6:	b158      	cbz	r0, 800c310 <RegionCommonChanMaskCopy+0x1c>
 800c2f8:	b109      	cbz	r1, 800c2fe <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e006      	b.n	800c30c <RegionCommonChanMaskCopy+0x18>
 800c2fe:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c300:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c304:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800c308:	3301      	adds	r3, #1
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d3f7      	bcc.n	800c300 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800c310:	4770      	bx	lr

0800c312 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c312:	b082      	sub	sp, #8
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4604      	mov	r4, r0
 800c318:	460d      	mov	r5, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	aa04      	add	r2, sp, #16
 800c31e:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c322:	ca0c      	ldmia	r2, {r2, r3}
 800c324:	f7ff fea9 	bl	800c07a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c328:	68e3      	ldr	r3, [r4, #12]
 800c32a:	fb05 f000 	mul.w	r0, r5, r0
 800c32e:	4283      	cmp	r3, r0
 800c330:	d905      	bls.n	800c33e <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c332:	1a18      	subs	r0, r3, r0
 800c334:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800c336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33a:	b002      	add	sp, #8
 800c33c:	4770      	bx	lr
        band->TimeCredits = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	60e3      	str	r3, [r4, #12]
}
 800c342:	e7f8      	b.n	800c336 <RegionCommonSetBandTxDone+0x24>

0800c344 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c348:	b089      	sub	sp, #36	; 0x24
 800c34a:	4607      	mov	r7, r0
 800c34c:	468b      	mov	fp, r1
 800c34e:	4691      	mov	r9, r2
 800c350:	4698      	mov	r8, r3
 800c352:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c356:	f005 fbbf 	bl	8011ad8 <UTIL_TIMER_GetCurrentTime>
 800c35a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c35c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800c35e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c360:	f04f 33ff 	mov.w	r3, #4294967295
 800c364:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c366:	e005      	b.n	800c374 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800c368:	2301      	movs	r3, #1
 800c36a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800c36c:	441e      	add	r6, r3
 800c36e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c370:	3401      	adds	r4, #1
 800c372:	b2e4      	uxtb	r4, r4
 800c374:	454c      	cmp	r4, r9
 800c376:	d25d      	bcs.n	800c434 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c378:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c37c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800c380:	9b04      	ldr	r3, [sp, #16]
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	ab13      	add	r3, sp, #76	; 0x4c
 800c386:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c38a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c38e:	4653      	mov	r3, sl
 800c390:	4642      	mov	r2, r8
 800c392:	4639      	mov	r1, r7
 800c394:	4628      	mov	r0, r5
 800c396:	f7ff ff1f 	bl	800c1d8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c39c:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c3a0:	68ea      	ldr	r2, [r5, #12]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d8e0      	bhi.n	800c368 <RegionCommonUpdateBandTimeOff+0x24>
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	d101      	bne.n	800c3b0 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c3ac:	2f00      	cmp	r7, #0
 800c3ae:	d1db      	bne.n	800c368 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800c3b4:	6929      	ldr	r1, [r5, #16]
 800c3b6:	4299      	cmp	r1, r3
 800c3b8:	d907      	bls.n	800c3ca <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	9a05      	ldr	r2, [sp, #20]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	bf28      	it	cs
 800c3c2:	461a      	movcs	r2, r3
 800c3c4:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800c3ca:	2f00      	cmp	r7, #0
 800c3cc:	d1d0      	bne.n	800c370 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9306      	str	r3, [sp, #24]
 800c3d2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c3d6:	2864      	cmp	r0, #100	; 0x64
 800c3d8:	d024      	beq.n	800c424 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c3da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c3de:	d025      	beq.n	800c42c <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <RegionCommonUpdateBandTimeOff+0x104>)
 800c3e2:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3e6:	4a18      	ldr	r2, [pc, #96]	; (800c448 <RegionCommonUpdateBandTimeOff+0x104>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d90c      	bls.n	800c406 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c3ec:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c3f0:	3b30      	subs	r3, #48	; 0x30
 800c3f2:	4a16      	ldr	r2, [pc, #88]	; (800c44c <RegionCommonUpdateBandTimeOff+0x108>)
 800c3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f8:	0c1b      	lsrs	r3, r3, #16
 800c3fa:	4a15      	ldr	r2, [pc, #84]	; (800c450 <RegionCommonUpdateBandTimeOff+0x10c>)
 800c3fc:	fb03 2202 	mla	r2, r3, r2, r2
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	4413      	add	r3, r2
 800c404:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c406:	ad06      	add	r5, sp, #24
 800c408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c40e:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c412:	4628      	mov	r0, r5
 800c414:	f005 fa71 	bl	80118fa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c418:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c41c:	f005 fae6 	bl	80119ec <SysTimeToMs>
 800c420:	9005      	str	r0, [sp, #20]
 800c422:	e7a5      	b.n	800c370 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c424:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c428:	9306      	str	r3, [sp, #24]
 800c42a:	e7db      	b.n	800c3e4 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c42c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c430:	9306      	str	r3, [sp, #24]
 800c432:	e7d7      	b.n	800c3e4 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800c434:	b11e      	cbz	r6, 800c43e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800c436:	9805      	ldr	r0, [sp, #20]
 800c438:	b009      	add	sp, #36	; 0x24
 800c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c43e:	f04f 33ff 	mov.w	r3, #4294967295
 800c442:	9305      	str	r3, [sp, #20]
 800c444:	e7f7      	b.n	800c436 <RegionCommonUpdateBandTimeOff+0xf2>
 800c446:	bf00      	nop
 800c448:	0001ec30 	.word	0x0001ec30
 800c44c:	c22e4507 	.word	0xc22e4507
 800c450:	00015180 	.word	0x00015180

0800c454 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c454:	7803      	ldrb	r3, [r0, #0]
 800c456:	2b03      	cmp	r3, #3
 800c458:	d001      	beq.n	800c45e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800c45a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800c45c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800c45e:	7842      	ldrb	r2, [r0, #1]
 800c460:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c464:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c466:	f003 030f 	and.w	r3, r3, #15
 800c46a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c46c:	0913      	lsrs	r3, r2, #4
 800c46e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c470:	7883      	ldrb	r3, [r0, #2]
 800c472:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c474:	78c2      	ldrb	r2, [r0, #3]
 800c476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c47a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800c47c:	7903      	ldrb	r3, [r0, #4]
 800c47e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c480:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c484:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c486:	f003 030f 	and.w	r3, r3, #15
 800c48a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800c48c:	2005      	movs	r0, #5
 800c48e:	4770      	bx	lr

0800c490 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	b085      	sub	sp, #20
 800c496:	4604      	mov	r4, r0
 800c498:	4688      	mov	r8, r1
 800c49a:	4617      	mov	r7, r2
 800c49c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800c49e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c4a0:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800c4a4:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c4a8:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c4ac:	7943      	ldrb	r3, [r0, #5]
 800c4ae:	b92b      	cbnz	r3, 800c4bc <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800c4b0:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800c4b4:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800c4b8:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800c4bc:	b355      	cbz	r5, 800c514 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800c4be:	f1ba 0f0f 	cmp.w	sl, #15
 800c4c2:	d114      	bne.n	800c4ee <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800c4c4:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800c4c8:	f1b9 0f0f 	cmp.w	r9, #15
 800c4cc:	d020      	beq.n	800c510 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c4ce:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800c4d2:	9303      	str	r3, [sp, #12]
 800c4d4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800c4d8:	461c      	mov	r4, r3
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4648      	mov	r0, r9
 800c4de:	f7ff fe98 	bl	800c212 <RegionCommonValueInRange>
 800c4e2:	b9b8      	cbnz	r0, 800c514 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800c4e4:	454c      	cmp	r4, r9
 800c4e6:	dc21      	bgt.n	800c52c <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c4e8:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800c4ec:	e012      	b.n	800c514 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c4ee:	69a3      	ldr	r3, [r4, #24]
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c4fc:	4652      	mov	r2, sl
 800c4fe:	6921      	ldr	r1, [r4, #16]
 800c500:	7b20      	ldrb	r0, [r4, #12]
 800c502:	f7ff fe90 	bl	800c226 <RegionCommonChanVerifyDr>
 800c506:	2800      	cmp	r0, #0
 800c508:	d1de      	bne.n	800c4c8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800c50a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800c50e:	e7db      	b.n	800c4c8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800c510:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800c514:	2d07      	cmp	r5, #7
 800c516:	d00c      	beq.n	800c532 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800c518:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800c51c:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800c520:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800c524:	4628      	mov	r0, r5
 800c526:	b005      	add	sp, #20
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800c52c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c530:	e7f0      	b.n	800c514 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800c532:	f1bb 0f00 	cmp.w	fp, #0
 800c536:	d1ef      	bne.n	800c518 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800c538:	f04f 0b01 	mov.w	fp, #1
 800c53c:	e7ec      	b.n	800c518 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800c540 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800c542:	fa03 f000 	lsl.w	r0, r3, r0
}
 800c546:	fbb0 f0f1 	udiv	r0, r0, r1
 800c54a:	4770      	bx	lr
 800c54c:	000f4240 	.word	0x000f4240

0800c550 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800c550:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800c554:	fbb3 f0f0 	udiv	r0, r3, r0
 800c558:	4770      	bx	lr
	...

0800c55c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800c55c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c55e:	f1a1 0c04 	sub.w	ip, r1, #4
 800c562:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800c566:	fb0e f202 	mul.w	r2, lr, r2
 800c56a:	fb00 220c 	mla	r2, r0, ip, r2
 800c56e:	0052      	lsls	r2, r2, #1
 800c570:	d021      	beq.n	800c5b6 <RegionCommonComputeRxWindowParameters+0x5a>
 800c572:	4402      	add	r2, r0
 800c574:	3a01      	subs	r2, #1
 800c576:	fbb2 f2f0 	udiv	r2, r2, r0
 800c57a:	4291      	cmp	r1, r2
 800c57c:	bf38      	it	cc
 800c57e:	4611      	movcc	r1, r2
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c584:	0082      	lsls	r2, r0, #2
 800c586:	fb00 f101 	mul.w	r1, r0, r1
 800c58a:	b1b9      	cbz	r1, 800c5bc <RegionCommonComputeRxWindowParameters+0x60>
 800c58c:	3101      	adds	r1, #1
 800c58e:	0849      	lsrs	r1, r1, #1
 800c590:	1a51      	subs	r1, r2, r1
 800c592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c596:	fb02 1313 	mls	r3, r2, r3, r1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dd10      	ble.n	800c5c0 <RegionCommonComputeRxWindowParameters+0x64>
 800c59e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800c5a2:	4a0b      	ldr	r2, [pc, #44]	; (800c5d0 <RegionCommonComputeRxWindowParameters+0x74>)
 800c5a4:	fb82 1203 	smull	r1, r2, r2, r3
 800c5a8:	17db      	asrs	r3, r3, #31
 800c5aa:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c5ae:	9a02      	ldr	r2, [sp, #8]
 800c5b0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800c5b2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c5b6:	fbb2 f2f0 	udiv	r2, r2, r0
 800c5ba:	e7de      	b.n	800c57a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c5bc:	0849      	lsrs	r1, r1, #1
 800c5be:	e7e7      	b.n	800c590 <RegionCommonComputeRxWindowParameters+0x34>
 800c5c0:	4a03      	ldr	r2, [pc, #12]	; (800c5d0 <RegionCommonComputeRxWindowParameters+0x74>)
 800c5c2:	fb82 1203 	smull	r1, r2, r2, r3
 800c5c6:	17db      	asrs	r3, r3, #31
 800c5c8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c5cc:	e7ef      	b.n	800c5ae <RegionCommonComputeRxWindowParameters+0x52>
 800c5ce:	bf00      	nop
 800c5d0:	10624dd3 	.word	0x10624dd3

0800c5d4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c5da:	0040      	lsls	r0, r0, #1
 800c5dc:	f7f4 fb44 	bl	8000c68 <__aeabi_ui2f>
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f7f4 fa8e 	bl	8000b04 <__aeabi_fsub>
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f7f4 fa8b 	bl	8000b04 <__aeabi_fsub>
 800c5ee:	f7f4 f90d 	bl	800080c <__aeabi_f2d>
 800c5f2:	f005 fd3d 	bl	8012070 <floor>
 800c5f6:	f7f4 f9e9 	bl	80009cc <__aeabi_d2iz>

    return phyTxPower;
}
 800c5fa:	b240      	sxtb	r0, r0
 800c5fc:	bd38      	pop	{r3, r4, r5, pc}

0800c5fe <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800c5fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c602:	b083      	sub	sp, #12
 800c604:	4605      	mov	r5, r0
 800c606:	468b      	mov	fp, r1
 800c608:	9200      	str	r2, [sp, #0]
 800c60a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c60c:	2600      	movs	r6, #0
 800c60e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800c610:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800c612:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c614:	e04a      	b.n	800c6ac <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800c616:	7a3a      	ldrb	r2, [r7, #8]
 800c618:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800c61c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800c620:	b252      	sxtb	r2, r2
 800c622:	b249      	sxtb	r1, r1
 800c624:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800c628:	f7ff fdf3 	bl	800c212 <RegionCommonValueInRange>
 800c62c:	b178      	cbz	r0, 800c64e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800c62e:	68ea      	ldr	r2, [r5, #12]
 800c630:	7a7b      	ldrb	r3, [r7, #9]
 800c632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	b35b      	cbz	r3, 800c696 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800c63e:	f109 0301 	add.w	r3, r9, #1
 800c642:	eb08 0204 	add.w	r2, r8, r4
 800c646:	f80b 2009 	strb.w	r2, [fp, r9]
 800c64a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800c64e:	3401      	adds	r4, #1
 800c650:	b2e4      	uxtb	r4, r4
 800c652:	2c0f      	cmp	r4, #15
 800c654:	d824      	bhi.n	800c6a0 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800c656:	686b      	ldr	r3, [r5, #4]
 800c658:	0072      	lsls	r2, r6, #1
 800c65a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800c65e:	4123      	asrs	r3, r4
 800c660:	f013 0f01 	tst.w	r3, #1
 800c664:	d0f3      	beq.n	800c64e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800c666:	68a8      	ldr	r0, [r5, #8]
 800c668:	eb08 0304 	add.w	r3, r8, r4
 800c66c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c670:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800c674:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0e8      	beq.n	800c64e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c67c:	782b      	ldrb	r3, [r5, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1c9      	bne.n	800c616 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800c682:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0c6      	beq.n	800c616 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800c688:	5a9b      	ldrh	r3, [r3, r2]
 800c68a:	fa43 f104 	asr.w	r1, r3, r4
 800c68e:	f011 0f01 	tst.w	r1, #1
 800c692:	d1c0      	bne.n	800c616 <RegionCommonCountNbOfEnabledChannels+0x18>
 800c694:	e7db      	b.n	800c64e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800c696:	f10a 0a01 	add.w	sl, sl, #1
 800c69a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800c69e:	e7d6      	b.n	800c64e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c6a0:	f108 0810 	add.w	r8, r8, #16
 800c6a4:	fa5f f888 	uxtb.w	r8, r8
 800c6a8:	3601      	adds	r6, #1
 800c6aa:	b2f6      	uxtb	r6, r6
 800c6ac:	fa1f f388 	uxth.w	r3, r8
 800c6b0:	8a2a      	ldrh	r2, [r5, #16]
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d201      	bcs.n	800c6ba <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800c6b6:	2400      	movs	r4, #0
 800c6b8:	e7cb      	b.n	800c652 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800c6ba:	9b00      	ldr	r3, [sp, #0]
 800c6bc:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	f883 a000 	strb.w	sl, [r3]
}
 800c6c6:	b003      	add	sp, #12
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6cc <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800c6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	4616      	mov	r6, r2
 800c6d8:	461d      	mov	r5, r3
 800c6da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c6de:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800c6e2:	6840      	ldr	r0, [r0, #4]
 800c6e4:	f005 fa02 	bl	8011aec <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	1a1b      	subs	r3, r3, r0
 800c6ec:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800c6fa:	6863      	ldr	r3, [r4, #4]
 800c6fc:	b113      	cbz	r3, 800c704 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800c6fe:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800c700:	4283      	cmp	r3, r0
 800c702:	d81e      	bhi.n	800c742 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800c708:	69e3      	ldr	r3, [r4, #28]
 800c70a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c70e:	781f      	ldrb	r7, [r3, #0]
 800c710:	69a3      	ldr	r3, [r4, #24]
 800c712:	9303      	str	r3, [sp, #12]
 800c714:	ab01      	add	r3, sp, #4
 800c716:	f104 020c 	add.w	r2, r4, #12
 800c71a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c71e:	e883 0003 	stmia.w	r3, {r0, r1}
 800c722:	7d23      	ldrb	r3, [r4, #20]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	7a23      	ldrb	r3, [r4, #8]
 800c728:	7a62      	ldrb	r2, [r4, #9]
 800c72a:	4661      	mov	r1, ip
 800c72c:	4638      	mov	r0, r7
 800c72e:	f7ff fe09 	bl	800c344 <RegionCommonUpdateBandTimeOff>
 800c732:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800c736:	4643      	mov	r3, r8
 800c738:	462a      	mov	r2, r5
 800c73a:	4631      	mov	r1, r6
 800c73c:	69e0      	ldr	r0, [r4, #28]
 800c73e:	f7ff ff5e 	bl	800c5fe <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800c742:	782b      	ldrb	r3, [r5, #0]
 800c744:	b923      	cbnz	r3, 800c750 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800c746:	f898 3000 	ldrb.w	r3, [r8]
 800c74a:	b13b      	cbz	r3, 800c75c <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800c74c:	200b      	movs	r0, #11
 800c74e:	e002      	b.n	800c756 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800c750:	2000      	movs	r0, #0
 800c752:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800c756:	b005      	add	sp, #20
 800c758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800c75c:	200c      	movs	r0, #12
 800c75e:	e7fa      	b.n	800c756 <RegionCommonIdentifyChannels+0x8a>

0800c760 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800c766:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800c76a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800c76e:	42a6      	cmp	r6, r4
 800c770:	d011      	beq.n	800c796 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800c772:	3c01      	subs	r4, #1
 800c774:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800c776:	42a6      	cmp	r6, r4
 800c778:	d00e      	beq.n	800c798 <RegionCommonGetNextLowerTxDr+0x38>
 800c77a:	68ab      	ldr	r3, [r5, #8]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	4633      	mov	r3, r6
 800c786:	4622      	mov	r2, r4
 800c788:	6869      	ldr	r1, [r5, #4]
 800c78a:	78e8      	ldrb	r0, [r5, #3]
 800c78c:	f7ff fd4b 	bl	800c226 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800c790:	2800      	cmp	r0, #0
 800c792:	d0ee      	beq.n	800c772 <RegionCommonGetNextLowerTxDr+0x12>
 800c794:	e000      	b.n	800c798 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800c796:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800c798:	4620      	mov	r0, r4
 800c79a:	b002      	add	sp, #8
 800c79c:	bd70      	pop	{r4, r5, r6, pc}

0800c79e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800c79e:	4288      	cmp	r0, r1
 800c7a0:	bfb8      	it	lt
 800c7a2:	4608      	movlt	r0, r1
 800c7a4:	4770      	bx	lr
	...

0800c7a8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800c7a8:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800c7ac:	4a05      	ldr	r2, [pc, #20]	; (800c7c4 <RegionCommonGetBandwidth+0x1c>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d004      	beq.n	800c7bc <RegionCommonGetBandwidth+0x14>
 800c7b2:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <RegionCommonGetBandwidth+0x20>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d103      	bne.n	800c7c0 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800c7b8:	2002      	movs	r0, #2
 800c7ba:	4770      	bx	lr
            return 1;
 800c7bc:	2001      	movs	r0, #1
 800c7be:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800c7c0:	2000      	movs	r0, #0
    }
}
 800c7c2:	4770      	bx	lr
 800c7c4:	0003d090 	.word	0x0003d090
 800c7c8:	0007a120 	.word	0x0007a120

0800c7cc <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800c7cc:	b500      	push	{lr}
 800c7ce:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800c7d0:	2805      	cmp	r0, #5
 800c7d2:	d80e      	bhi.n	800c7f2 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800c7d4:	9202      	str	r2, [sp, #8]
 800c7d6:	9101      	str	r1, [sp, #4]
 800c7d8:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <RegionCommonRxConfigPrint+0x38>)
 800c7da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	4b09      	ldr	r3, [pc, #36]	; (800c808 <RegionCommonRxConfigPrint+0x3c>)
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	2002      	movs	r0, #2
 800c7e8:	f004 fe62 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800c7ec:	b005      	add	sp, #20
 800c7ee:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c7f2:	9201      	str	r2, [sp, #4]
 800c7f4:	9100      	str	r1, [sp, #0]
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <RegionCommonRxConfigPrint+0x40>)
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	2002      	movs	r0, #2
 800c7fe:	f004 fe57 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800c802:	e7f3      	b.n	800c7ec <RegionCommonRxConfigPrint+0x20>
 800c804:	0801288c 	.word	0x0801288c
 800c808:	08012824 	.word	0x08012824
 800c80c:	08012844 	.word	0x08012844

0800c810 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800c810:	b500      	push	{lr}
 800c812:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800c814:	9101      	str	r1, [sp, #4]
 800c816:	9000      	str	r0, [sp, #0]
 800c818:	4b04      	ldr	r3, [pc, #16]	; (800c82c <RegionCommonTxConfigPrint+0x1c>)
 800c81a:	2201      	movs	r2, #1
 800c81c:	2100      	movs	r1, #0
 800c81e:	2002      	movs	r0, #2
 800c820:	f004 fe46 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800c824:	b003      	add	sp, #12
 800c826:	f85d fb04 	ldr.w	pc, [sp], #4
 800c82a:	bf00      	nop
 800c82c:	08012860 	.word	0x08012860

0800c830 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c836:	4b1b      	ldr	r3, [pc, #108]	; (800c8a4 <VerifyRfFreq+0x74>)
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	4798      	blx	r3
 800c83c:	b130      	cbz	r0, 800c84c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800c83e:	4b1a      	ldr	r3, [pc, #104]	; (800c8a8 <VerifyRfFreq+0x78>)
 800c840:	4423      	add	r3, r4
 800c842:	4a1a      	ldr	r2, [pc, #104]	; (800c8ac <VerifyRfFreq+0x7c>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d802      	bhi.n	800c84e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800c848:	2302      	movs	r3, #2
 800c84a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800c84e:	4b18      	ldr	r3, [pc, #96]	; (800c8b0 <VerifyRfFreq+0x80>)
 800c850:	4423      	add	r3, r4
 800c852:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <VerifyRfFreq+0x84>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d802      	bhi.n	800c85e <VerifyRfFreq+0x2e>
        *band = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	702b      	strb	r3, [r5, #0]
 800c85c:	e7f6      	b.n	800c84c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800c85e:	4b16      	ldr	r3, [pc, #88]	; (800c8b8 <VerifyRfFreq+0x88>)
 800c860:	4423      	add	r3, r4
 800c862:	4a16      	ldr	r2, [pc, #88]	; (800c8bc <VerifyRfFreq+0x8c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d802      	bhi.n	800c86e <VerifyRfFreq+0x3e>
        *band = 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	702b      	strb	r3, [r5, #0]
 800c86c:	e7ee      	b.n	800c84c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800c86e:	4b14      	ldr	r3, [pc, #80]	; (800c8c0 <VerifyRfFreq+0x90>)
 800c870:	4423      	add	r3, r4
 800c872:	4a14      	ldr	r2, [pc, #80]	; (800c8c4 <VerifyRfFreq+0x94>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d802      	bhi.n	800c87e <VerifyRfFreq+0x4e>
        *band = 5;
 800c878:	2305      	movs	r3, #5
 800c87a:	702b      	strb	r3, [r5, #0]
 800c87c:	e7e6      	b.n	800c84c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800c87e:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <VerifyRfFreq+0x98>)
 800c880:	4423      	add	r3, r4
 800c882:	4a12      	ldr	r2, [pc, #72]	; (800c8cc <VerifyRfFreq+0x9c>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d802      	bhi.n	800c88e <VerifyRfFreq+0x5e>
        *band = 3;
 800c888:	2303      	movs	r3, #3
 800c88a:	702b      	strb	r3, [r5, #0]
 800c88c:	e7de      	b.n	800c84c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800c88e:	4b10      	ldr	r3, [pc, #64]	; (800c8d0 <VerifyRfFreq+0xa0>)
 800c890:	4423      	add	r3, r4
 800c892:	4a10      	ldr	r2, [pc, #64]	; (800c8d4 <VerifyRfFreq+0xa4>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d802      	bhi.n	800c89e <VerifyRfFreq+0x6e>
        *band = 4;
 800c898:	2304      	movs	r3, #4
 800c89a:	702b      	strb	r3, [r5, #0]
 800c89c:	e7d6      	b.n	800c84c <VerifyRfFreq+0x1c>
        return false;
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e7d4      	b.n	800c84c <VerifyRfFreq+0x1c>
 800c8a2:	bf00      	nop
 800c8a4:	08012ec4 	.word	0x08012ec4
 800c8a8:	cc8faa40 	.word	0xcc8faa40
 800c8ac:	001e847f 	.word	0x001e847f
 800c8b0:	cc7125c0 	.word	0xcc7125c0
 800c8b4:	002dc6c0 	.word	0x002dc6c0
 800c8b8:	cc435eff 	.word	0xcc435eff
 800c8bc:	000927bf 	.word	0x000927bf
 800c8c0:	cc38b0a0 	.word	0xcc38b0a0
 800c8c4:	0007a120 	.word	0x0007a120
 800c8c8:	cc2e0240 	.word	0xcc2e0240
 800c8cc:	0003d090 	.word	0x0003d090
 800c8d0:	cc296e60 	.word	0xcc296e60
 800c8d4:	000493e0 	.word	0x000493e0

0800c8d8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	4605      	mov	r5, r0
 800c8de:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800c8e0:	4b13      	ldr	r3, [pc, #76]	; (800c930 <GetTimeOnAir+0x58>)
 800c8e2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800c8e4:	4913      	ldr	r1, [pc, #76]	; (800c934 <GetTimeOnAir+0x5c>)
 800c8e6:	f7ff ff5f 	bl	800c7a8 <RegionCommonGetBandwidth>
 800c8ea:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800c8ec:	2d07      	cmp	r5, #7
 800c8ee:	d00e      	beq.n	800c90e <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c8f0:	4b11      	ldr	r3, [pc, #68]	; (800c938 <GetTimeOnAir+0x60>)
 800c8f2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	9003      	str	r0, [sp, #12]
 800c8f8:	b2e4      	uxtb	r4, r4
 800c8fa:	9402      	str	r4, [sp, #8]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	2308      	movs	r3, #8
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	4603      	mov	r3, r0
 800c906:	4632      	mov	r2, r6
 800c908:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800c90a:	b004      	add	sp, #16
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800c90e:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <GetTimeOnAir+0x60>)
 800c910:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800c912:	2301      	movs	r3, #1
 800c914:	9303      	str	r3, [sp, #12]
 800c916:	b2e4      	uxtb	r4, r4
 800c918:	9402      	str	r4, [sp, #8]
 800c91a:	2000      	movs	r0, #0
 800c91c:	9001      	str	r0, [sp, #4]
 800c91e:	2305      	movs	r3, #5
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4603      	mov	r3, r0
 800c924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c928:	fb06 f202 	mul.w	r2, r6, r2
 800c92c:	47a8      	blx	r5
 800c92e:	e7ec      	b.n	800c90a <GetTimeOnAir+0x32>
 800c930:	080128c4 	.word	0x080128c4
 800c934:	080128a4 	.word	0x080128a4
 800c938:	08012ec4 	.word	0x08012ec4

0800c93c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800c93c:	b500      	push	{lr}
 800c93e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800c940:	2300      	movs	r3, #0
 800c942:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800c944:	7803      	ldrb	r3, [r0, #0]
 800c946:	3b0b      	subs	r3, #11
 800c948:	2b2e      	cmp	r3, #46	; 0x2e
 800c94a:	d830      	bhi.n	800c9ae <RegionEU868GetPhyParam+0x72>
 800c94c:	e8df f003 	tbb	[pc, r3]
 800c950:	403a3734 	.word	0x403a3734
 800c954:	514d4946 	.word	0x514d4946
 800c958:	615d5955 	.word	0x615d5955
 800c95c:	6d2f6a2f 	.word	0x6d2f6a2f
 800c960:	2f7c7973 	.word	0x2f7c7973
 800c964:	1884802f 	.word	0x1884802f
 800c968:	2f2f2f2f 	.word	0x2f2f2f2f
 800c96c:	2f2f2f2f 	.word	0x2f2f2f2f
 800c970:	2f2f2f2f 	.word	0x2f2f2f2f
 800c974:	918a872f 	.word	0x918a872f
 800c978:	97942f2f 	.word	0x97942f2f
 800c97c:	9a2f      	.short	0x9a2f
 800c97e:	a0          	.byte	0xa0
 800c97f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800c980:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c984:	f88d 3004 	strb.w	r3, [sp, #4]
 800c988:	2307      	movs	r3, #7
 800c98a:	f88d 3005 	strb.w	r3, [sp, #5]
 800c98e:	2300      	movs	r3, #0
 800c990:	f88d 3006 	strb.w	r3, [sp, #6]
 800c994:	2310      	movs	r3, #16
 800c996:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c99a:	4b41      	ldr	r3, [pc, #260]	; (800caa0 <RegionEU868GetPhyParam+0x164>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c9a2:	9202      	str	r2, [sp, #8]
 800c9a4:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c9a6:	a801      	add	r0, sp, #4
 800c9a8:	f7ff feda 	bl	800c760 <RegionCommonGetNextLowerTxDr>
 800c9ac:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800c9ae:	9804      	ldr	r0, [sp, #16]
 800c9b0:	9005      	str	r0, [sp, #20]
}
 800c9b2:	b007      	add	sp, #28
 800c9b4:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c9b8:	2340      	movs	r3, #64	; 0x40
 800c9ba:	9304      	str	r3, [sp, #16]
            break;
 800c9bc:	e7f7      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c9be:	2320      	movs	r3, #32
 800c9c0:	9304      	str	r3, [sp, #16]
            break;
 800c9c2:	e7f4      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800c9c4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c9c8:	4a36      	ldr	r2, [pc, #216]	; (800caa4 <RegionEU868GetPhyParam+0x168>)
 800c9ca:	5cd3      	ldrb	r3, [r2, r3]
 800c9cc:	9304      	str	r3, [sp, #16]
            break;
 800c9ce:	e7ee      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800c9d0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c9d4:	4a34      	ldr	r2, [pc, #208]	; (800caa8 <RegionEU868GetPhyParam+0x16c>)
 800c9d6:	5cd3      	ldrb	r3, [r2, r3]
 800c9d8:	9304      	str	r3, [sp, #16]
            break;
 800c9da:	e7e8      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	9304      	str	r3, [sp, #16]
            break;
 800c9e0:	e7e5      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800c9e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c9e6:	9304      	str	r3, [sp, #16]
            break;
 800c9e8:	e7e1      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c9ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9ee:	9304      	str	r3, [sp, #16]
            break;
 800c9f0:	e7dd      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c9f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c9f6:	9304      	str	r3, [sp, #16]
            break;
 800c9f8:	e7d9      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c9fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800c9fe:	9304      	str	r3, [sp, #16]
            break;
 800ca00:	e7d5      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ca02:	f241 7370 	movw	r3, #6000	; 0x1770
 800ca06:	9304      	str	r3, [sp, #16]
            break;
 800ca08:	e7d1      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800ca0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca0e:	9304      	str	r3, [sp, #16]
            break;
 800ca10:	e7cd      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800ca12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ca16:	4825      	ldr	r0, [pc, #148]	; (800caac <RegionEU868GetPhyParam+0x170>)
 800ca18:	f002 faa2 	bl	800ef60 <randr>
 800ca1c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ca20:	9004      	str	r0, [sp, #16]
            break;
 800ca22:	e7c4      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ca24:	4b22      	ldr	r3, [pc, #136]	; (800cab0 <RegionEU868GetPhyParam+0x174>)
 800ca26:	9304      	str	r3, [sp, #16]
            break;
 800ca28:	e7c1      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ca2a:	4b1d      	ldr	r3, [pc, #116]	; (800caa0 <RegionEU868GetPhyParam+0x164>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800ca32:	9304      	str	r3, [sp, #16]
            break;
 800ca34:	e7bb      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ca36:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <RegionEU868GetPhyParam+0x164>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800ca3e:	9304      	str	r3, [sp, #16]
            break;
 800ca40:	e7b5      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ca42:	2310      	movs	r3, #16
 800ca44:	9304      	str	r3, [sp, #16]
            break;
 800ca46:	e7b2      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ca48:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <RegionEU868GetPhyParam+0x164>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	9304      	str	r3, [sp, #16]
            break;
 800ca4e:	e7ae      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ca50:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ca54:	9304      	str	r3, [sp, #16]
            break;
 800ca56:	e7aa      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ca58:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <RegionEU868GetPhyParam+0x178>)
 800ca5a:	9304      	str	r3, [sp, #16]
            break;
 800ca5c:	e7a7      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ca5e:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <RegionEU868GetPhyParam+0x174>)
 800ca60:	9304      	str	r3, [sp, #16]
            break;
 800ca62:	e7a4      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ca64:	2311      	movs	r3, #17
 800ca66:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ca70:	e79d      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ca72:	2303      	movs	r3, #3
 800ca74:	9304      	str	r3, [sp, #16]
            break;
 800ca76:	e79a      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ca78:	4b0d      	ldr	r3, [pc, #52]	; (800cab0 <RegionEU868GetPhyParam+0x174>)
 800ca7a:	9304      	str	r3, [sp, #16]
            break;
 800ca7c:	e797      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	9304      	str	r3, [sp, #16]
            break;
 800ca82:	e794      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ca84:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ca88:	4a0b      	ldr	r2, [pc, #44]	; (800cab8 <RegionEU868GetPhyParam+0x17c>)
 800ca8a:	5cd3      	ldrb	r3, [r2, r3]
 800ca8c:	9304      	str	r3, [sp, #16]
            break;
 800ca8e:	e78e      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ca90:	490a      	ldr	r1, [pc, #40]	; (800cabc <RegionEU868GetPhyParam+0x180>)
 800ca92:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ca96:	f7ff fe87 	bl	800c7a8 <RegionCommonGetBandwidth>
 800ca9a:	9004      	str	r0, [sp, #16]
            break;
 800ca9c:	e787      	b.n	800c9ae <RegionEU868GetPhyParam+0x72>
 800ca9e:	bf00      	nop
 800caa0:	20000c38 	.word	0x20000c38
 800caa4:	080128cc 	.word	0x080128cc
 800caa8:	080128d4 	.word	0x080128d4
 800caac:	fffffc18 	.word	0xfffffc18
 800cab0:	33d3e608 	.word	0x33d3e608
 800cab4:	4009999a 	.word	0x4009999a
 800cab8:	080128c4 	.word	0x080128c4
 800cabc:	080128a4 	.word	0x080128a4

0800cac0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cac0:	b510      	push	{r4, lr}
 800cac2:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cac4:	4b0b      	ldr	r3, [pc, #44]	; (800caf4 <RegionEU868SetBandTxDone+0x34>)
 800cac6:	681c      	ldr	r4, [r3, #0]
 800cac8:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <RegionEU868SetBandTxDone+0x38>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	7803      	ldrb	r3, [r0, #0]
 800cace:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cad6:	7a5b      	ldrb	r3, [r3, #9]
 800cad8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800cadc:	6903      	ldr	r3, [r0, #16]
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	68c3      	ldr	r3, [r0, #12]
 800cae2:	7842      	ldrb	r2, [r0, #1]
 800cae4:	6881      	ldr	r1, [r0, #8]
 800cae6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800caea:	f7ff fc12 	bl	800c312 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800caee:	b002      	add	sp, #8
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	bf00      	nop
 800caf4:	20000c34 	.word	0x20000c34
 800caf8:	20000c38 	.word	0x20000c38

0800cafc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800cafc:	b510      	push	{r4, lr}
 800cafe:	b0a4      	sub	sp, #144	; 0x90
 800cb00:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800cb02:	2290      	movs	r2, #144	; 0x90
 800cb04:	2100      	movs	r1, #0
 800cb06:	4668      	mov	r0, sp
 800cb08:	f005 faaa 	bl	8012060 <memset>
 800cb0c:	2364      	movs	r3, #100	; 0x64
 800cb0e:	f8ad 3000 	strh.w	r3, [sp]
 800cb12:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cb16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb1a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800cb1e:	210a      	movs	r1, #10
 800cb20:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800cb24:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800cb28:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800cb2c:	7a23      	ldrb	r3, [r4, #8]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d031      	beq.n	800cb96 <RegionEU868InitDefaults+0x9a>
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d03d      	beq.n	800cbb2 <RegionEU868InitDefaults+0xb6>
 800cb36:	b10b      	cbz	r3, 800cb3c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800cb38:	b024      	add	sp, #144	; 0x90
 800cb3a:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cb3c:	6820      	ldr	r0, [r4, #0]
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d0fa      	beq.n	800cb38 <RegionEU868InitDefaults+0x3c>
 800cb42:	6863      	ldr	r3, [r4, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0f7      	beq.n	800cb38 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cb48:	4a1f      	ldr	r2, [pc, #124]	; (800cbc8 <RegionEU868InitDefaults+0xcc>)
 800cb4a:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cb4c:	4c1f      	ldr	r4, [pc, #124]	; (800cbcc <RegionEU868InitDefaults+0xd0>)
 800cb4e:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800cb50:	2290      	movs	r2, #144	; 0x90
 800cb52:	4669      	mov	r1, sp
 800cb54:	f002 fa11 	bl	800ef7a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800cb58:	6824      	ldr	r4, [r4, #0]
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <RegionEU868InitDefaults+0xd4>)
 800cb5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800cb64:	f104 0c0c 	add.w	ip, r4, #12
 800cb68:	f103 020c 	add.w	r2, r3, #12
 800cb6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb6e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800cb72:	f104 0c18 	add.w	ip, r4, #24
 800cb76:	3318      	adds	r3, #24
 800cb78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb7c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800cb80:	2307      	movs	r3, #7
 800cb82:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cb86:	2201      	movs	r2, #1
 800cb88:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 800cb8c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 800cb90:	f7ff fbb0 	bl	800c2f4 <RegionCommonChanMaskCopy>
            break;
 800cb94:	e7d0      	b.n	800cb38 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800cb96:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <RegionEU868InitDefaults+0xd0>)
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800cb9e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800cba0:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cba2:	2201      	movs	r2, #1
 800cba4:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800cba8:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800cbac:	f7ff fba2 	bl	800c2f4 <RegionCommonChanMaskCopy>
            break;
 800cbb0:	e7c2      	b.n	800cb38 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800cbb2:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <RegionEU868InitDefaults+0xd0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 800cbba:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 800cbbe:	430a      	orrs	r2, r1
 800cbc0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 800cbc4:	e7b8      	b.n	800cb38 <RegionEU868InitDefaults+0x3c>
 800cbc6:	bf00      	nop
 800cbc8:	20000c34 	.word	0x20000c34
 800cbcc:	20000c38 	.word	0x20000c38
 800cbd0:	080121a4 	.word	0x080121a4

0800cbd4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cbd4:	b500      	push	{lr}
 800cbd6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800cbd8:	290f      	cmp	r1, #15
 800cbda:	d83c      	bhi.n	800cc56 <RegionEU868Verify+0x82>
 800cbdc:	e8df f001 	tbb	[pc, r1]
 800cbe0:	3b3b3b0a 	.word	0x3b3b3b0a
 800cbe4:	271d133b 	.word	0x271d133b
 800cbe8:	3b31313b 	.word	0x3b31313b
 800cbec:	083b3b3b 	.word	0x083b3b3b
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e031      	b.n	800cc58 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800cbfa:	f10d 0107 	add.w	r1, sp, #7
 800cbfe:	6800      	ldr	r0, [r0, #0]
 800cc00:	f7ff fe16 	bl	800c830 <VerifyRfFreq>
 800cc04:	e028      	b.n	800cc58 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800cc06:	2207      	movs	r2, #7
 800cc08:	2100      	movs	r1, #0
 800cc0a:	f990 0000 	ldrsb.w	r0, [r0]
 800cc0e:	f7ff fb00 	bl	800c212 <RegionCommonValueInRange>
 800cc12:	3800      	subs	r0, #0
 800cc14:	bf18      	it	ne
 800cc16:	2001      	movne	r0, #1
 800cc18:	e01e      	b.n	800cc58 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800cc1a:	2205      	movs	r2, #5
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	f990 0000 	ldrsb.w	r0, [r0]
 800cc22:	f7ff faf6 	bl	800c212 <RegionCommonValueInRange>
 800cc26:	3800      	subs	r0, #0
 800cc28:	bf18      	it	ne
 800cc2a:	2001      	movne	r0, #1
 800cc2c:	e014      	b.n	800cc58 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800cc2e:	2207      	movs	r2, #7
 800cc30:	2100      	movs	r1, #0
 800cc32:	f990 0000 	ldrsb.w	r0, [r0]
 800cc36:	f7ff faec 	bl	800c212 <RegionCommonValueInRange>
 800cc3a:	3800      	subs	r0, #0
 800cc3c:	bf18      	it	ne
 800cc3e:	2001      	movne	r0, #1
 800cc40:	e00a      	b.n	800cc58 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800cc42:	2207      	movs	r2, #7
 800cc44:	2100      	movs	r1, #0
 800cc46:	f990 0000 	ldrsb.w	r0, [r0]
 800cc4a:	f7ff fae2 	bl	800c212 <RegionCommonValueInRange>
 800cc4e:	3800      	subs	r0, #0
 800cc50:	bf18      	it	ne
 800cc52:	2001      	movne	r0, #1
 800cc54:	e000      	b.n	800cc58 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800cc56:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800cc58:	b003      	add	sp, #12
 800cc5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cc60 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cc60:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800cc62:	7903      	ldrb	r3, [r0, #4]
 800cc64:	b11b      	cbz	r3, 800cc6e <RegionEU868ChanMaskSet+0xe>
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d00b      	beq.n	800cc82 <RegionEU868ChanMaskSet+0x22>
 800cc6a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800cc6c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <RegionEU868ChanMaskSet+0x38>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2201      	movs	r2, #1
 800cc74:	6801      	ldr	r1, [r0, #0]
 800cc76:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 800cc7a:	f7ff fb3b 	bl	800c2f4 <RegionCommonChanMaskCopy>
    return true;
 800cc7e:	2001      	movs	r0, #1
            break;
 800cc80:	e7f4      	b.n	800cc6c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <RegionEU868ChanMaskSet+0x38>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2201      	movs	r2, #1
 800cc88:	6801      	ldr	r1, [r0, #0]
 800cc8a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 800cc8e:	f7ff fb31 	bl	800c2f4 <RegionCommonChanMaskCopy>
    return true;
 800cc92:	2001      	movs	r0, #1
            break;
 800cc94:	e7ea      	b.n	800cc6c <RegionEU868ChanMaskSet+0xc>
 800cc96:	bf00      	nop
 800cc98:	20000c38 	.word	0x20000c38

0800cc9c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	460e      	mov	r6, r1
 800cca2:	4617      	mov	r7, r2
 800cca4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800cca6:	2807      	cmp	r0, #7
 800cca8:	bfa8      	it	ge
 800ccaa:	2007      	movge	r0, #7
 800ccac:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800ccae:	4913      	ldr	r1, [pc, #76]	; (800ccfc <RegionEU868ComputeRxWindowParameters+0x60>)
 800ccb0:	f7ff fd7a 	bl	800c7a8 <RegionCommonGetBandwidth>
 800ccb4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800ccb6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ccba:	2b07      	cmp	r3, #7
 800ccbc:	d017      	beq.n	800ccee <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800ccbe:	4a0f      	ldr	r2, [pc, #60]	; (800ccfc <RegionEU868ComputeRxWindowParameters+0x60>)
 800ccc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccc4:	4a0e      	ldr	r2, [pc, #56]	; (800cd00 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ccc6:	5cd0      	ldrb	r0, [r2, r3]
 800ccc8:	f7ff fc3a 	bl	800c540 <RegionCommonComputeSymbolTimeLoRa>
 800cccc:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ccce:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <RegionEU868ComputeRxWindowParameters+0x68>)
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd2:	4798      	blx	r3
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f104 020c 	add.w	r2, r4, #12
 800ccda:	9201      	str	r2, [sp, #4]
 800ccdc:	3408      	adds	r4, #8
 800ccde:	9400      	str	r4, [sp, #0]
 800cce0:	463a      	mov	r2, r7
 800cce2:	4631      	mov	r1, r6
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7ff fc39 	bl	800c55c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800ccea:	b003      	add	sp, #12
 800ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800ccee:	4a04      	ldr	r2, [pc, #16]	; (800cd00 <RegionEU868ComputeRxWindowParameters+0x64>)
 800ccf0:	5cd0      	ldrb	r0, [r2, r3]
 800ccf2:	f7ff fc2d 	bl	800c550 <RegionCommonComputeSymbolTimeFsk>
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	e7e9      	b.n	800ccce <RegionEU868ComputeRxWindowParameters+0x32>
 800ccfa:	bf00      	nop
 800ccfc:	080128a4 	.word	0x080128a4
 800cd00:	080128c4 	.word	0x080128c4
 800cd04:	08012ec4 	.word	0x08012ec4

0800cd08 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd0c:	b08a      	sub	sp, #40	; 0x28
 800cd0e:	4604      	mov	r4, r0
 800cd10:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800cd12:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800cd16:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cd1a:	4b37      	ldr	r3, [pc, #220]	; (800cdf8 <RegionEU868RxConfig+0xf0>)
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4798      	blx	r3
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d167      	bne.n	800cdf4 <RegionEU868RxConfig+0xec>
 800cd24:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cd26:	7ce3      	ldrb	r3, [r4, #19]
 800cd28:	b983      	cbnz	r3, 800cd4c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800cd2a:	4b34      	ldr	r3, [pc, #208]	; (800cdfc <RegionEU868RxConfig+0xf4>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	7823      	ldrb	r3, [r4, #0]
 800cd30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cd34:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800cd38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd40:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800cd44:	f1b8 0f00 	cmp.w	r8, #0
 800cd48:	d100      	bne.n	800cd4c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800cd4a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800cd4c:	4b2c      	ldr	r3, [pc, #176]	; (800ce00 <RegionEU868RxConfig+0xf8>)
 800cd4e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800cd52:	4b29      	ldr	r3, [pc, #164]	; (800cdf8 <RegionEU868RxConfig+0xf0>)
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	4640      	mov	r0, r8
 800cd58:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800cd5a:	2d07      	cmp	r5, #7
 800cd5c:	d02b      	beq.n	800cdb6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800cd5e:	4b26      	ldr	r3, [pc, #152]	; (800cdf8 <RegionEU868RxConfig+0xf0>)
 800cd60:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800cd64:	7ca3      	ldrb	r3, [r4, #18]
 800cd66:	9309      	str	r3, [sp, #36]	; 0x24
 800cd68:	2601      	movs	r6, #1
 800cd6a:	9608      	str	r6, [sp, #32]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9307      	str	r3, [sp, #28]
 800cd70:	9306      	str	r3, [sp, #24]
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	8922      	ldrh	r2, [r4, #8]
 800cd7a:	9202      	str	r2, [sp, #8]
 800cd7c:	2208      	movs	r2, #8
 800cd7e:	9201      	str	r2, [sp, #4]
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4633      	mov	r3, r6
 800cd84:	464a      	mov	r2, r9
 800cd86:	78a1      	ldrb	r1, [r4, #2]
 800cd88:	4630      	mov	r0, r6
 800cd8a:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800cd8c:	7c63      	ldrb	r3, [r4, #17]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d02d      	beq.n	800cdee <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800cd92:	4b1c      	ldr	r3, [pc, #112]	; (800ce04 <RegionEU868RxConfig+0xfc>)
 800cd94:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800cd96:	4b18      	ldr	r3, [pc, #96]	; (800cdf8 <RegionEU868RxConfig+0xf0>)
 800cd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd9a:	310d      	adds	r1, #13
 800cd9c:	b2c9      	uxtb	r1, r1
 800cd9e:	4630      	mov	r0, r6
 800cda0:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800cda2:	462a      	mov	r2, r5
 800cda4:	4641      	mov	r1, r8
 800cda6:	7ce0      	ldrb	r0, [r4, #19]
 800cda8:	f7ff fd10 	bl	800c7cc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800cdac:	703d      	strb	r5, [r7, #0]
    return true;
 800cdae:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800cdb0:	b00a      	add	sp, #40	; 0x28
 800cdb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800cdb6:	4b10      	ldr	r3, [pc, #64]	; (800cdf8 <RegionEU868RxConfig+0xf0>)
 800cdb8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800cdbc:	7ca3      	ldrb	r3, [r4, #18]
 800cdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	9008      	str	r0, [sp, #32]
 800cdc4:	9007      	str	r0, [sp, #28]
 800cdc6:	9006      	str	r0, [sp, #24]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	9305      	str	r3, [sp, #20]
 800cdcc:	9004      	str	r0, [sp, #16]
 800cdce:	9003      	str	r0, [sp, #12]
 800cdd0:	8923      	ldrh	r3, [r4, #8]
 800cdd2:	9302      	str	r3, [sp, #8]
 800cdd4:	2305      	movs	r3, #5
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <RegionEU868RxConfig+0x100>)
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4603      	mov	r3, r0
 800cdde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cde2:	fb02 f209 	mul.w	r2, r2, r9
 800cde6:	f24c 3150 	movw	r1, #50000	; 0xc350
 800cdea:	47d0      	blx	sl
 800cdec:	e7ce      	b.n	800cd8c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800cdee:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <RegionEU868RxConfig+0x104>)
 800cdf0:	5d59      	ldrb	r1, [r3, r5]
 800cdf2:	e7d0      	b.n	800cd96 <RegionEU868RxConfig+0x8e>
        return false;
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	e7db      	b.n	800cdb0 <RegionEU868RxConfig+0xa8>
 800cdf8:	08012ec4 	.word	0x08012ec4
 800cdfc:	20000c38 	.word	0x20000c38
 800ce00:	080128c4 	.word	0x080128c4
 800ce04:	080128d4 	.word	0x080128d4
 800ce08:	00014585 	.word	0x00014585
 800ce0c:	080128cc 	.word	0x080128cc

0800ce10 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	b08d      	sub	sp, #52	; 0x34
 800ce16:	4604      	mov	r4, r0
 800ce18:	460f      	mov	r7, r1
 800ce1a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ce1c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ce20:	4a42      	ldr	r2, [pc, #264]	; (800cf2c <RegionEU868TxConfig+0x11c>)
 800ce22:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ce26:	4b42      	ldr	r3, [pc, #264]	; (800cf30 <RegionEU868TxConfig+0x120>)
 800ce28:	6819      	ldr	r1, [r3, #0]
 800ce2a:	4d42      	ldr	r5, [pc, #264]	; (800cf34 <RegionEU868TxConfig+0x124>)
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	7802      	ldrb	r2, [r0, #0]
 800ce30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ce34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ce38:	7a53      	ldrb	r3, [r2, #9]
 800ce3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce3e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ce42:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ce46:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ce4a:	f7ff fca8 	bl	800c79e <RegionCommonLimitTxPower>
 800ce4e:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800ce50:	4939      	ldr	r1, [pc, #228]	; (800cf38 <RegionEU868TxConfig+0x128>)
 800ce52:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ce56:	f7ff fca7 	bl	800c7a8 <RegionCommonGetBandwidth>
 800ce5a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ce5c:	68a2      	ldr	r2, [r4, #8]
 800ce5e:	6861      	ldr	r1, [r4, #4]
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7ff fbb7 	bl	800c5d4 <RegionCommonComputeTxPower>
 800ce66:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ce68:	4b34      	ldr	r3, [pc, #208]	; (800cf3c <RegionEU868TxConfig+0x12c>)
 800ce6a:	68da      	ldr	r2, [r3, #12]
 800ce6c:	6829      	ldr	r1, [r5, #0]
 800ce6e:	7823      	ldrb	r3, [r4, #0]
 800ce70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce74:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ce78:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ce7a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ce7e:	2b07      	cmp	r3, #7
 800ce80:	d031      	beq.n	800cee6 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ce82:	4b2e      	ldr	r3, [pc, #184]	; (800cf3c <RegionEU868TxConfig+0x12c>)
 800ce84:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ce88:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce8c:	9308      	str	r3, [sp, #32]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	9207      	str	r2, [sp, #28]
 800ce92:	9206      	str	r2, [sp, #24]
 800ce94:	9205      	str	r2, [sp, #20]
 800ce96:	2501      	movs	r5, #1
 800ce98:	9504      	str	r5, [sp, #16]
 800ce9a:	9203      	str	r2, [sp, #12]
 800ce9c:	2308      	movs	r3, #8
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	9501      	str	r5, [sp, #4]
 800cea2:	f8cd a000 	str.w	sl, [sp]
 800cea6:	464b      	mov	r3, r9
 800cea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ceae:	4b21      	ldr	r3, [pc, #132]	; (800cf34 <RegionEU868TxConfig+0x124>)
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	7823      	ldrb	r3, [r4, #0]
 800ceb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ceb8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cebc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cec0:	f7ff fca6 	bl	800c810 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cec4:	89a1      	ldrh	r1, [r4, #12]
 800cec6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ceca:	f7ff fd05 	bl	800c8d8 <GetTimeOnAir>
 800cece:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ced2:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <RegionEU868TxConfig+0x12c>)
 800ced4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced6:	7b21      	ldrb	r1, [r4, #12]
 800ced8:	4628      	mov	r0, r5
 800ceda:	4798      	blx	r3

    *txPower = txPowerLimited;
 800cedc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800cede:	2001      	movs	r0, #1
 800cee0:	b00d      	add	sp, #52	; 0x34
 800cee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800cee6:	4b15      	ldr	r3, [pc, #84]	; (800cf3c <RegionEU868TxConfig+0x12c>)
 800cee8:	69dd      	ldr	r5, [r3, #28]
 800ceea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ceee:	fb03 f30a 	mul.w	r3, r3, sl
 800cef2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800cef6:	9208      	str	r2, [sp, #32]
 800cef8:	f04f 0b00 	mov.w	fp, #0
 800cefc:	f8cd b01c 	str.w	fp, [sp, #28]
 800cf00:	f8cd b018 	str.w	fp, [sp, #24]
 800cf04:	f8cd b014 	str.w	fp, [sp, #20]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	9204      	str	r2, [sp, #16]
 800cf0c:	f8cd b00c 	str.w	fp, [sp, #12]
 800cf10:	2205      	movs	r2, #5
 800cf12:	9202      	str	r2, [sp, #8]
 800cf14:	f8cd b004 	str.w	fp, [sp, #4]
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	464b      	mov	r3, r9
 800cf1c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800cf20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf22:	4658      	mov	r0, fp
 800cf24:	47a8      	blx	r5
        modem = MODEM_FSK;
 800cf26:	465d      	mov	r5, fp
 800cf28:	e7c1      	b.n	800ceae <RegionEU868TxConfig+0x9e>
 800cf2a:	bf00      	nop
 800cf2c:	080128c4 	.word	0x080128c4
 800cf30:	20000c34 	.word	0x20000c34
 800cf34:	20000c38 	.word	0x20000c38
 800cf38:	080128a4 	.word	0x080128a4
 800cf3c:	08012ec4 	.word	0x08012ec4

0800cf40 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cf40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf44:	b08f      	sub	sp, #60	; 0x3c
 800cf46:	4605      	mov	r5, r0
 800cf48:	4689      	mov	r9, r1
 800cf4a:	4690      	mov	r8, r2
 800cf4c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cf4e:	2400      	movs	r4, #0
 800cf50:	940c      	str	r4, [sp, #48]	; 0x30
 800cf52:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800cf56:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800cf5a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cf5c:	e030      	b.n	800cfc0 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800cf5e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800cf62:	2607      	movs	r6, #7
 800cf64:	e012      	b.n	800cf8c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800cf66:	4a57      	ldr	r2, [pc, #348]	; (800d0c4 <RegionEU868LinkAdrReq+0x184>)
 800cf68:	6812      	ldr	r2, [r2, #0]
 800cf6a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800cf6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cf72:	b13a      	cbz	r2, 800cf84 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800cf74:	2201      	movs	r2, #1
 800cf76:	fa02 f20c 	lsl.w	r2, r2, ip
 800cf7a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800cf7e:	430a      	orrs	r2, r1
 800cf80:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800cf84:	f10c 0c01 	add.w	ip, ip, #1
 800cf88:	fa5f fc8c 	uxtb.w	ip, ip
 800cf8c:	f1bc 0f0f 	cmp.w	ip, #15
 800cf90:	d816      	bhi.n	800cfc0 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800cf92:	2b06      	cmp	r3, #6
 800cf94:	d0e7      	beq.n	800cf66 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cf96:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800cf9a:	fa4e fe0c 	asr.w	lr, lr, ip
 800cf9e:	f01e 0f01 	tst.w	lr, #1
 800cfa2:	d0ef      	beq.n	800cf84 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800cfa4:	4a47      	ldr	r2, [pc, #284]	; (800d0c4 <RegionEU868LinkAdrReq+0x184>)
 800cfa6:	6812      	ldr	r2, [r2, #0]
 800cfa8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800cfac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d1e7      	bne.n	800cf84 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800cfb4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800cfb8:	e7e4      	b.n	800cf84 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800cfba:	2606      	movs	r6, #6
 800cfbc:	e000      	b.n	800cfc0 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800cfbe:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cfc0:	7a2b      	ldrb	r3, [r5, #8]
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	d918      	bls.n	800cff8 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800cfc6:	6868      	ldr	r0, [r5, #4]
 800cfc8:	a90c      	add	r1, sp, #48	; 0x30
 800cfca:	4420      	add	r0, r4
 800cfcc:	f7ff fa42 	bl	800c454 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800cfd0:	b190      	cbz	r0, 800cff8 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800cfd2:	4404      	add	r4, r0
 800cfd4:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800cfd6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800cfda:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800cfde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cfe2:	b90b      	cbnz	r3, 800cfe8 <RegionEU868LinkAdrReq+0xa8>
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	d0e8      	beq.n	800cfba <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800cfe8:	1e5a      	subs	r2, r3, #1
 800cfea:	b2d2      	uxtb	r2, r2
 800cfec:	2a04      	cmp	r2, #4
 800cfee:	d9e6      	bls.n	800cfbe <RegionEU868LinkAdrReq+0x7e>
 800cff0:	2b06      	cmp	r3, #6
 800cff2:	d9b4      	bls.n	800cf5e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800cff4:	2606      	movs	r6, #6
 800cff6:	e7e3      	b.n	800cfc0 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cff8:	2302      	movs	r3, #2
 800cffa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cffe:	7a6b      	ldrb	r3, [r5, #9]
 800d000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800d004:	a80a      	add	r0, sp, #40	; 0x28
 800d006:	f7ff fc99 	bl	800c93c <RegionEU868GetPhyParam>
 800d00a:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800d00c:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d010:	7aab      	ldrb	r3, [r5, #10]
 800d012:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d016:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d01a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d01e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d022:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d026:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d02a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d02e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d032:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d036:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d03a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d03e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d042:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d046:	2310      	movs	r3, #16
 800d048:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d04c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800d050:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d052:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d056:	2307      	movs	r3, #7
 800d058:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d05c:	4a19      	ldr	r2, [pc, #100]	; (800d0c4 <RegionEU868LinkAdrReq+0x184>)
 800d05e:	6812      	ldr	r2, [r2, #0]
 800d060:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d062:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d066:	2300      	movs	r3, #0
 800d068:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d070:	ab0c      	add	r3, sp, #48	; 0x30
 800d072:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d076:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800d07a:	a801      	add	r0, sp, #4
 800d07c:	f7ff fa08 	bl	800c490 <RegionCommonLinkAdrReqVerifyParams>
 800d080:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d082:	2807      	cmp	r0, #7
 800d084:	d010      	beq.n	800d0a8 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d086:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d08a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d08e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d092:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d096:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d09a:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d09c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d09e:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	b00f      	add	sp, #60	; 0x3c
 800d0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d0a8:	4e06      	ldr	r6, [pc, #24]	; (800d0c4 <RegionEU868LinkAdrReq+0x184>)
 800d0aa:	6830      	ldr	r0, [r6, #0]
 800d0ac:	220c      	movs	r2, #12
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d0b4:	f001 ff79 	bl	800efaa <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d0b8:	6833      	ldr	r3, [r6, #0]
 800d0ba:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800d0be:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 800d0c2:	e7e0      	b.n	800d086 <RegionEU868LinkAdrReq+0x146>
 800d0c4:	20000c38 	.word	0x20000c38

0800d0c8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d0c8:	b530      	push	{r4, r5, lr}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d0d4:	f10d 0107 	add.w	r1, sp, #7
 800d0d8:	6840      	ldr	r0, [r0, #4]
 800d0da:	f7ff fba9 	bl	800c830 <VerifyRfFreq>
 800d0de:	b1a8      	cbz	r0, 800d10c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800d0e0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d0e2:	2207      	movs	r2, #7
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	f994 0000 	ldrsb.w	r0, [r4]
 800d0ea:	f7ff f892 	bl	800c212 <RegionCommonValueInRange>
 800d0ee:	b908      	cbnz	r0, 800d0f4 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800d0f0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d0f4:	2205      	movs	r2, #5
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d0fc:	f7ff f889 	bl	800c212 <RegionCommonValueInRange>
 800d100:	b908      	cbnz	r0, 800d106 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d102:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d106:	4628      	mov	r0, r5
 800d108:	b003      	add	sp, #12
 800d10a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d10c:	2506      	movs	r5, #6
 800d10e:	e7e8      	b.n	800d0e2 <RegionEU868RxParamSetupReq+0x1a>

0800d110 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d110:	f04f 30ff 	mov.w	r0, #4294967295
 800d114:	4770      	bx	lr
	...

0800d118 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d118:	b510      	push	{r4, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d124:	f10d 0107 	add.w	r1, sp, #7
 800d128:	6840      	ldr	r0, [r0, #4]
 800d12a:	f7ff fb81 	bl	800c830 <VerifyRfFreq>
 800d12e:	b178      	cbz	r0, 800d150 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800d130:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d132:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <RegionEU868DlChannelReq+0x4c>)
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	7823      	ldrb	r3, [r4, #0]
 800d138:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d13c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d140:	b909      	cbnz	r1, 800d146 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800d142:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800d146:	2803      	cmp	r0, #3
 800d148:	d004      	beq.n	800d154 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800d14a:	b240      	sxtb	r0, r0
 800d14c:	b002      	add	sp, #8
 800d14e:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800d150:	2002      	movs	r0, #2
 800d152:	e7ee      	b.n	800d132 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d154:	6861      	ldr	r1, [r4, #4]
 800d156:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d15a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d15e:	6059      	str	r1, [r3, #4]
 800d160:	e7f3      	b.n	800d14a <RegionEU868DlChannelReq+0x32>
 800d162:	bf00      	nop
 800d164:	20000c38 	.word	0x20000c38

0800d168 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d168:	4770      	bx	lr
	...

0800d16c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d16e:	b097      	sub	sp, #92	; 0x5c
 800d170:	4604      	mov	r4, r0
 800d172:	460f      	mov	r7, r1
 800d174:	4616      	mov	r6, r2
 800d176:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d178:	2100      	movs	r1, #0
 800d17a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800d17e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d182:	9111      	str	r1, [sp, #68]	; 0x44
 800d184:	9112      	str	r1, [sp, #72]	; 0x48
 800d186:	9113      	str	r1, [sp, #76]	; 0x4c
 800d188:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d18a:	2307      	movs	r3, #7
 800d18c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d190:	4b34      	ldr	r3, [pc, #208]	; (800d264 <RegionEU868NextChannel+0xf8>)
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	2201      	movs	r2, #1
 800d196:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d19a:	f7ff f895 	bl	800c2c8 <RegionCommonCountChannels>
 800d19e:	b938      	cbnz	r0, 800d1b0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d1a0:	4b30      	ldr	r3, [pc, #192]	; (800d264 <RegionEU868NextChannel+0xf8>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d1a8:	f043 0307 	orr.w	r3, r3, #7
 800d1ac:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d1b0:	7a63      	ldrb	r3, [r4, #9]
 800d1b2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d1b6:	7a23      	ldrb	r3, [r4, #8]
 800d1b8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d1bc:	4b29      	ldr	r3, [pc, #164]	; (800d264 <RegionEU868NextChannel+0xf8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800d1c4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d1c6:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d1c8:	4b27      	ldr	r3, [pc, #156]	; (800d268 <RegionEU868NextChannel+0xfc>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d1ce:	2310      	movs	r3, #16
 800d1d0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d1d4:	f10d 030a 	add.w	r3, sp, #10
 800d1d8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d1de:	6863      	ldr	r3, [r4, #4]
 800d1e0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d1e2:	7aa3      	ldrb	r3, [r4, #10]
 800d1e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d1e8:	2306      	movs	r3, #6
 800d1ea:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d1ee:	ab0c      	add	r3, sp, #48	; 0x30
 800d1f0:	f104 020c 	add.w	r2, r4, #12
 800d1f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1f8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d1fc:	7d23      	ldrb	r3, [r4, #20]
 800d1fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d202:	8ae1      	ldrh	r1, [r4, #22]
 800d204:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d208:	f7ff fb66 	bl	800c8d8 <GetTimeOnAir>
 800d20c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d20e:	ab03      	add	r3, sp, #12
 800d210:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d212:	9601      	str	r6, [sp, #4]
 800d214:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800d21e:	aa11      	add	r2, sp, #68	; 0x44
 800d220:	4629      	mov	r1, r5
 800d222:	a809      	add	r0, sp, #36	; 0x24
 800d224:	f7ff fa52 	bl	800c6cc <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d228:	4604      	mov	r4, r0
 800d22a:	b120      	cbz	r0, 800d236 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d22c:	280c      	cmp	r0, #12
 800d22e:	d00f      	beq.n	800d250 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d230:	4620      	mov	r0, r4
 800d232:	b017      	add	sp, #92	; 0x5c
 800d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d236:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800d23a:	3901      	subs	r1, #1
 800d23c:	f001 fe90 	bl	800ef60 <randr>
 800d240:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800d244:	eb0d 0003 	add.w	r0, sp, r3
 800d248:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d24c:	703b      	strb	r3, [r7, #0]
 800d24e:	e7ef      	b.n	800d230 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d250:	4b04      	ldr	r3, [pc, #16]	; (800d264 <RegionEU868NextChannel+0xf8>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d258:	f043 0307 	orr.w	r3, r3, #7
 800d25c:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 800d260:	e7e6      	b.n	800d230 <RegionEU868NextChannel+0xc4>
 800d262:	bf00      	nop
 800d264:	20000c38 	.word	0x20000c38
 800d268:	20000c34 	.word	0x20000c34

0800d26c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d276:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d278:	2d02      	cmp	r5, #2
 800d27a:	d94f      	bls.n	800d31c <RegionEU868ChannelAdd+0xb0>
 800d27c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800d27e:	2d0f      	cmp	r5, #15
 800d280:	d84e      	bhi.n	800d320 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d282:	6803      	ldr	r3, [r0, #0]
 800d284:	7a18      	ldrb	r0, [r3, #8]
 800d286:	f340 0003 	sbfx	r0, r0, #0, #4
 800d28a:	2207      	movs	r2, #7
 800d28c:	2100      	movs	r1, #0
 800d28e:	b240      	sxtb	r0, r0
 800d290:	f7fe ffbf 	bl	800c212 <RegionCommonValueInRange>
 800d294:	2800      	cmp	r0, #0
 800d296:	d03d      	beq.n	800d314 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800d298:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	7a18      	ldrb	r0, [r3, #8]
 800d29e:	f340 1003 	sbfx	r0, r0, #4, #4
 800d2a2:	2207      	movs	r2, #7
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	b240      	sxtb	r0, r0
 800d2a8:	f7fe ffb3 	bl	800c212 <RegionCommonValueInRange>
 800d2ac:	b900      	cbnz	r0, 800d2b0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800d2ae:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d2b0:	6820      	ldr	r0, [r4, #0]
 800d2b2:	7a03      	ldrb	r3, [r0, #8]
 800d2b4:	f343 0203 	sbfx	r2, r3, #0, #4
 800d2b8:	b252      	sxtb	r2, r2
 800d2ba:	f343 1303 	sbfx	r3, r3, #4, #4
 800d2be:	b25b      	sxtb	r3, r3
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	dd00      	ble.n	800d2c6 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800d2c4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d2c6:	f10d 0107 	add.w	r1, sp, #7
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	f7ff fab0 	bl	800c830 <VerifyRfFreq>
 800d2d0:	b310      	cbz	r0, 800d318 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800d2d2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d2d4:	b106      	cbz	r6, 800d2d8 <RegionEU868ChannelAdd+0x6c>
 800d2d6:	bb33      	cbnz	r3, 800d326 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800d2d8:	bb3e      	cbnz	r6, 800d32a <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d2da:	bb43      	cbnz	r3, 800d32e <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d2dc:	4f15      	ldr	r7, [pc, #84]	; (800d334 <RegionEU868ChannelAdd+0xc8>)
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	006e      	lsls	r6, r5, #1
 800d2e2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d2e6:	220c      	movs	r2, #12
 800d2e8:	6821      	ldr	r1, [r4, #0]
 800d2ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d2ee:	f001 fe44 	bl	800ef7a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	442e      	add	r6, r5
 800d2f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2fe:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d300:	2301      	movs	r3, #1
 800d302:	fa03 f505 	lsl.w	r5, r3, r5
 800d306:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 800d30a:	431d      	orrs	r5, r3
 800d30c:	f8a2 5480 	strh.w	r5, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 800d310:	2000      	movs	r0, #0
 800d312:	e006      	b.n	800d322 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800d314:	2601      	movs	r6, #1
 800d316:	e7c0      	b.n	800d29a <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800d318:	2301      	movs	r3, #1
 800d31a:	e7db      	b.n	800d2d4 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d31c:	2006      	movs	r0, #6
 800d31e:	e000      	b.n	800d322 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d320:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d322:	b003      	add	sp, #12
 800d324:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d326:	2006      	movs	r0, #6
 800d328:	e7fb      	b.n	800d322 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d32a:	2005      	movs	r0, #5
 800d32c:	e7f9      	b.n	800d322 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d32e:	2004      	movs	r0, #4
 800d330:	e7f7      	b.n	800d322 <RegionEU868ChannelAdd+0xb6>
 800d332:	bf00      	nop
 800d334:	20000c38 	.word	0x20000c38

0800d338 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d338:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d33a:	2902      	cmp	r1, #2
 800d33c:	d801      	bhi.n	800d342 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800d33e:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800d340:	4770      	bx	lr
{
 800d342:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d344:	4b09      	ldr	r3, [pc, #36]	; (800d36c <RegionEU868ChannelsRemove+0x34>)
 800d346:	6818      	ldr	r0, [r3, #0]
 800d348:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d34c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d350:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d354:	2200      	movs	r2, #0
 800d356:	f840 200c 	str.w	r2, [r0, ip]
 800d35a:	605a      	str	r2, [r3, #4]
 800d35c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d35e:	2210      	movs	r2, #16
 800d360:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d364:	f7fe ff97 	bl	800c296 <RegionCommonChanDisable>
}
 800d368:	bd08      	pop	{r3, pc}
 800d36a:	bf00      	nop
 800d36c:	20000c38 	.word	0x20000c38

0800d370 <RegionEU868ApplyCFList>:
{
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d374:	2350      	movs	r3, #80	; 0x50
 800d376:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d37a:	7903      	ldrb	r3, [r0, #4]
 800d37c:	2b10      	cmp	r3, #16
 800d37e:	d136      	bne.n	800d3ee <RegionEU868ApplyCFList+0x7e>
 800d380:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d382:	6803      	ldr	r3, [r0, #0]
 800d384:	7bdd      	ldrb	r5, [r3, #15]
 800d386:	2d00      	cmp	r5, #0
 800d388:	d131      	bne.n	800d3ee <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d38a:	2403      	movs	r4, #3
 800d38c:	e01b      	b.n	800d3c6 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d38e:	6832      	ldr	r2, [r6, #0]
 800d390:	5d53      	ldrb	r3, [r2, r5]
 800d392:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d394:	442a      	add	r2, r5
 800d396:	7851      	ldrb	r1, [r2, #1]
 800d398:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d39c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d39e:	7892      	ldrb	r2, [r2, #2]
 800d3a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3a4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800d3a6:	2264      	movs	r2, #100	; 0x64
 800d3a8:	fb02 f303 	mul.w	r3, r2, r3
 800d3ac:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	9304      	str	r3, [sp, #16]
 800d3b2:	e011      	b.n	800d3d8 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800d3b4:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800d3b8:	4668      	mov	r0, sp
 800d3ba:	f7ff ffbd 	bl	800d338 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d3be:	3503      	adds	r5, #3
 800d3c0:	b2ed      	uxtb	r5, r5
 800d3c2:	3401      	adds	r4, #1
 800d3c4:	b2e4      	uxtb	r4, r4
 800d3c6:	2c0f      	cmp	r4, #15
 800d3c8:	d811      	bhi.n	800d3ee <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d3ca:	2c07      	cmp	r4, #7
 800d3cc:	d9df      	bls.n	800d38e <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d3d2:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d3d6:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d3d8:	9b03      	ldr	r3, [sp, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d0ea      	beq.n	800d3b4 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d3de:	ab03      	add	r3, sp, #12
 800d3e0:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d3e2:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800d3e6:	a801      	add	r0, sp, #4
 800d3e8:	f7ff ff40 	bl	800d26c <RegionEU868ChannelAdd>
 800d3ec:	e7e7      	b.n	800d3be <RegionEU868ApplyCFList+0x4e>
}
 800d3ee:	b006      	add	sp, #24
 800d3f0:	bd70      	pop	{r4, r5, r6, pc}

0800d3f2 <RegionEU868NewChannelReq>:
{
 800d3f2:	b500      	push	{lr}
 800d3f4:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d3f6:	6803      	ldr	r3, [r0, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	b952      	cbnz	r2, 800d412 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d3fc:	7903      	ldrb	r3, [r0, #4]
 800d3fe:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d402:	a801      	add	r0, sp, #4
 800d404:	f7ff ff98 	bl	800d338 <RegionEU868ChannelsRemove>
 800d408:	b1d0      	cbz	r0, 800d440 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d40a:	2003      	movs	r0, #3
}
 800d40c:	b005      	add	sp, #20
 800d40e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d412:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d414:	7903      	ldrb	r3, [r0, #4]
 800d416:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d41a:	a802      	add	r0, sp, #8
 800d41c:	f7ff ff26 	bl	800d26c <RegionEU868ChannelAdd>
 800d420:	2806      	cmp	r0, #6
 800d422:	d80b      	bhi.n	800d43c <RegionEU868NewChannelReq+0x4a>
 800d424:	e8df f000 	tbb	[pc, r0]
 800d428:	0a0a0a04 	.word	0x0a0a0a04
 800d42c:	060e      	.short	0x060e
 800d42e:	08          	.byte	0x08
 800d42f:	00          	.byte	0x00
 800d430:	2003      	movs	r0, #3
 800d432:	e7eb      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800d434:	2001      	movs	r0, #1
                break;
 800d436:	e7e9      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d438:	2000      	movs	r0, #0
                break;
 800d43a:	e7e7      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d43c:	2000      	movs	r0, #0
                break;
 800d43e:	e7e5      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800d440:	2000      	movs	r0, #0
 800d442:	e7e3      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800d444:	2002      	movs	r0, #2
 800d446:	e7e1      	b.n	800d40c <RegionEU868NewChannelReq+0x1a>

0800d448 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800d44c:	4b12      	ldr	r3, [pc, #72]	; (800d498 <RegionEU868SetContinuousWave+0x50>)
 800d44e:	6819      	ldr	r1, [r3, #0]
 800d450:	4d12      	ldr	r5, [pc, #72]	; (800d49c <RegionEU868SetContinuousWave+0x54>)
 800d452:	682b      	ldr	r3, [r5, #0]
 800d454:	7802      	ldrb	r2, [r0, #0]
 800d456:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d45a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d45e:	7a53      	ldrb	r3, [r2, #9]
 800d460:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d464:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d468:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d46c:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d470:	f7ff f995 	bl	800c79e <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d474:	682a      	ldr	r2, [r5, #0]
 800d476:	7823      	ldrb	r3, [r4, #0]
 800d478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d47c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d480:	68a2      	ldr	r2, [r4, #8]
 800d482:	6861      	ldr	r1, [r4, #4]
 800d484:	f7ff f8a6 	bl	800c5d4 <RegionCommonComputeTxPower>
 800d488:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d48a:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <RegionEU868SetContinuousWave+0x58>)
 800d48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48e:	89a2      	ldrh	r2, [r4, #12]
 800d490:	4628      	mov	r0, r5
 800d492:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800d494:	bd38      	pop	{r3, r4, r5, pc}
 800d496:	bf00      	nop
 800d498:	20000c34 	.word	0x20000c34
 800d49c:	20000c38 	.word	0x20000c38
 800d4a0:	08012ec4 	.word	0x08012ec4

0800d4a4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800d4a4:	1a88      	subs	r0, r1, r2
 800d4a6:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	db01      	blt.n	800d4b0 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800d4ac:	b2c0      	uxtb	r0, r0
 800d4ae:	4770      	bx	lr
        datarate = DR_0;
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e7fb      	b.n	800d4ac <RegionEU868ApplyDrOffset+0x8>

0800d4b4 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d4b8:	4b10      	ldr	r3, [pc, #64]	; (800d4fc <VerifyRfFreq+0x48>)
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	4798      	blx	r3
 800d4be:	b1c8      	cbz	r0, 800d4f4 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800d4c0:	4b0f      	ldr	r3, [pc, #60]	; (800d500 <VerifyRfFreq+0x4c>)
 800d4c2:	4423      	add	r3, r4
 800d4c4:	4a0f      	ldr	r2, [pc, #60]	; (800d504 <VerifyRfFreq+0x50>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d813      	bhi.n	800d4f2 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800d4ca:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800d4ce:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800d4d2:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800d4d6:	fba2 1203 	umull	r1, r2, r2, r3
 800d4da:	0c92      	lsrs	r2, r2, #18
 800d4dc:	490a      	ldr	r1, [pc, #40]	; (800d508 <VerifyRfFreq+0x54>)
 800d4de:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800d4e2:	b942      	cbnz	r2, 800d4f6 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <VerifyRfFreq+0x58>)
 800d4e6:	4423      	add	r3, r4
 800d4e8:	4a09      	ldr	r2, [pc, #36]	; (800d510 <VerifyRfFreq+0x5c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d902      	bls.n	800d4f4 <VerifyRfFreq+0x40>
    {
        return false;
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	e000      	b.n	800d4f4 <VerifyRfFreq+0x40>
        return false;
 800d4f2:	2000      	movs	r0, #0
    }
    return true;
}
 800d4f4:	bd10      	pop	{r4, pc}
        return false;
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e7fc      	b.n	800d4f4 <VerifyRfFreq+0x40>
 800d4fa:	bf00      	nop
 800d4fc:	08012ec4 	.word	0x08012ec4
 800d500:	c8f78f60 	.word	0xc8f78f60
 800d504:	00401640 	.word	0x00401640
 800d508:	000927c0 	.word	0x000927c0
 800d50c:	ca37fea0 	.word	0xca37fea0
 800d510:	01808580 	.word	0x01808580

0800d514 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d514:	b570      	push	{r4, r5, r6, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800d51a:	4b0a      	ldr	r3, [pc, #40]	; (800d544 <GetTimeOnAir+0x30>)
 800d51c:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800d51e:	490a      	ldr	r1, [pc, #40]	; (800d548 <GetTimeOnAir+0x34>)
 800d520:	f7ff f942 	bl	800c7a8 <RegionCommonGetBandwidth>
 800d524:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <GetTimeOnAir+0x38>)
 800d528:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800d52a:	2001      	movs	r0, #1
 800d52c:	9003      	str	r0, [sp, #12]
 800d52e:	b2e4      	uxtb	r4, r4
 800d530:	9402      	str	r4, [sp, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	9201      	str	r2, [sp, #4]
 800d536:	2208      	movs	r2, #8
 800d538:	9200      	str	r2, [sp, #0]
 800d53a:	4603      	mov	r3, r0
 800d53c:	4632      	mov	r2, r6
 800d53e:	47a8      	blx	r5
}
 800d540:	b004      	add	sp, #16
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	08012930 	.word	0x08012930
 800d548:	080128dc 	.word	0x080128dc
 800d54c:	08012ec4 	.word	0x08012ec4

0800d550 <LimitTxPower>:
{
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	4606      	mov	r6, r0
 800d554:	4615      	mov	r5, r2
 800d556:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800d558:	f7ff f921 	bl	800c79e <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800d55c:	2d04      	cmp	r5, #4
 800d55e:	d105      	bne.n	800d56c <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800d560:	4634      	mov	r4, r6
 800d562:	2e02      	cmp	r6, #2
 800d564:	bfb8      	it	lt
 800d566:	2402      	movlt	r4, #2
}
 800d568:	4620      	mov	r0, r4
 800d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56c:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800d56e:	2204      	movs	r2, #4
 800d570:	2100      	movs	r1, #0
 800d572:	4638      	mov	r0, r7
 800d574:	f7fe fea8 	bl	800c2c8 <RegionCommonCountChannels>
 800d578:	2831      	cmp	r0, #49	; 0x31
 800d57a:	d8f5      	bhi.n	800d568 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800d57c:	4634      	mov	r4, r6
 800d57e:	2e05      	cmp	r6, #5
 800d580:	bfb8      	it	lt
 800d582:	2405      	movlt	r4, #5
 800d584:	e7f0      	b.n	800d568 <LimitTxPower+0x18>
	...

0800d588 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800d588:	b500      	push	{lr}
 800d58a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d58c:	2300      	movs	r3, #0
 800d58e:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800d590:	7803      	ldrb	r3, [r0, #0]
 800d592:	3b01      	subs	r3, #1
 800d594:	2b38      	cmp	r3, #56	; 0x38
 800d596:	d820      	bhi.n	800d5da <RegionUS915GetPhyParam+0x52>
 800d598:	e8df f003 	tbb	[pc, r3]
 800d59c:	1f1f1f1d 	.word	0x1f1f1f1d
 800d5a0:	1f1f1f1f 	.word	0x1f1f1f1f
 800d5a4:	3f3c1f1f 	.word	0x3f3c1f1f
 800d5a8:	4e1f4842 	.word	0x4e1f4842
 800d5ac:	5e5a5652 	.word	0x5e5a5652
 800d5b0:	6f1f6662 	.word	0x6f1f6662
 800d5b4:	817b7572 	.word	0x817b7572
 800d5b8:	881f1f84 	.word	0x881f1f84
 800d5bc:	1f1f248b 	.word	0x1f1f248b
 800d5c0:	1f1f1f1f 	.word	0x1f1f1f1f
 800d5c4:	1f1f1f1f 	.word	0x1f1f1f1f
 800d5c8:	8e1f1f1f 	.word	0x8e1f1f1f
 800d5cc:	1fa29f95 	.word	0x1fa29f95
 800d5d0:	b2afaca5 	.word	0xb2afaca5
 800d5d4:	b8          	.byte	0xb8
 800d5d5:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800d5d6:	2308      	movs	r3, #8
 800d5d8:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800d5da:	9804      	ldr	r0, [sp, #16]
 800d5dc:	9005      	str	r0, [sp, #20]
}
 800d5de:	b007      	add	sp, #28
 800d5e0:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800d5e4:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d5e8:	f88d 3004 	strb.w	r3, [sp, #4]
 800d5ec:	2304      	movs	r3, #4
 800d5ee:	f88d 3005 	strb.w	r3, [sp, #5]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f88d 3006 	strb.w	r3, [sp, #6]
 800d5f8:	2348      	movs	r3, #72	; 0x48
 800d5fa:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d5fe:	4b47      	ldr	r3, [pc, #284]	; (800d71c <RegionUS915GetPhyParam+0x194>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d606:	9202      	str	r2, [sp, #8]
 800d608:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d60a:	a801      	add	r0, sp, #4
 800d60c:	f7ff f8a8 	bl	800c760 <RegionCommonGetNextLowerTxDr>
 800d610:	9004      	str	r0, [sp, #16]
            break;
 800d612:	e7e2      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d614:	2340      	movs	r3, #64	; 0x40
 800d616:	9304      	str	r3, [sp, #16]
            break;
 800d618:	e7df      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d61a:	2320      	movs	r3, #32
 800d61c:	9304      	str	r3, [sp, #16]
            break;
 800d61e:	e7dc      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800d620:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d624:	4a3e      	ldr	r2, [pc, #248]	; (800d720 <RegionUS915GetPhyParam+0x198>)
 800d626:	5cd3      	ldrb	r3, [r2, r3]
 800d628:	9304      	str	r3, [sp, #16]
            break;
 800d62a:	e7d6      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800d62c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d630:	4a3c      	ldr	r2, [pc, #240]	; (800d724 <RegionUS915GetPhyParam+0x19c>)
 800d632:	5cd3      	ldrb	r3, [r2, r3]
 800d634:	9304      	str	r3, [sp, #16]
            break;
 800d636:	e7d0      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800d638:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d63c:	9304      	str	r3, [sp, #16]
            break;
 800d63e:	e7cc      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d644:	9304      	str	r3, [sp, #16]
            break;
 800d646:	e7c8      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d648:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d64c:	9304      	str	r3, [sp, #16]
            break;
 800d64e:	e7c4      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d650:	f241 3388 	movw	r3, #5000	; 0x1388
 800d654:	9304      	str	r3, [sp, #16]
            break;
 800d656:	e7c0      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d658:	f241 7370 	movw	r3, #6000	; 0x1770
 800d65c:	9304      	str	r3, [sp, #16]
            break;
 800d65e:	e7bc      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800d660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d664:	9304      	str	r3, [sp, #16]
            break;
 800d666:	e7b8      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800d668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d66c:	482e      	ldr	r0, [pc, #184]	; (800d728 <RegionUS915GetPhyParam+0x1a0>)
 800d66e:	f001 fc77 	bl	800ef60 <randr>
 800d672:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800d676:	9004      	str	r0, [sp, #16]
            break;
 800d678:	e7af      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800d67a:	4b2c      	ldr	r3, [pc, #176]	; (800d72c <RegionUS915GetPhyParam+0x1a4>)
 800d67c:	9304      	str	r3, [sp, #16]
            break;
 800d67e:	e7ac      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 800d680:	2308      	movs	r3, #8
 800d682:	9304      	str	r3, [sp, #16]
            break;
 800d684:	e7a9      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d686:	4b25      	ldr	r3, [pc, #148]	; (800d71c <RegionUS915GetPhyParam+0x194>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800d68e:	9304      	str	r3, [sp, #16]
            break;
 800d690:	e7a3      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d692:	4b22      	ldr	r3, [pc, #136]	; (800d71c <RegionUS915GetPhyParam+0x194>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 800d69a:	9304      	str	r3, [sp, #16]
            break;
 800d69c:	e79d      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800d69e:	2348      	movs	r3, #72	; 0x48
 800d6a0:	9304      	str	r3, [sp, #16]
            break;
 800d6a2:	e79a      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d6a4:	4b1d      	ldr	r3, [pc, #116]	; (800d71c <RegionUS915GetPhyParam+0x194>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	9304      	str	r3, [sp, #16]
            break;
 800d6aa:	e796      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800d6ac:	4b20      	ldr	r3, [pc, #128]	; (800d730 <RegionUS915GetPhyParam+0x1a8>)
 800d6ae:	9304      	str	r3, [sp, #16]
            break;
 800d6b0:	e793      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	9304      	str	r3, [sp, #16]
            break;
 800d6b6:	e790      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d6b8:	4a1e      	ldr	r2, [pc, #120]	; (800d734 <RegionUS915GetPhyParam+0x1ac>)
 800d6ba:	491c      	ldr	r1, [pc, #112]	; (800d72c <RegionUS915GetPhyParam+0x1a4>)
 800d6bc:	7900      	ldrb	r0, [r0, #4]
 800d6be:	f7fe fcd9 	bl	800c074 <RegionBaseUSCalcDownlinkFrequency>
 800d6c2:	9004      	str	r0, [sp, #16]
            break;
 800d6c4:	e789      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800d6c6:	2317      	movs	r3, #23
 800d6c8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800d6cc:	2305      	movs	r3, #5
 800d6ce:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800d6d8:	e77f      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800d6da:	2308      	movs	r3, #8
 800d6dc:	9304      	str	r3, [sp, #16]
            break;
 800d6de:	e77c      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	9304      	str	r3, [sp, #16]
            break;
 800d6e4:	e779      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800d6e6:	4a13      	ldr	r2, [pc, #76]	; (800d734 <RegionUS915GetPhyParam+0x1ac>)
 800d6e8:	4910      	ldr	r1, [pc, #64]	; (800d72c <RegionUS915GetPhyParam+0x1a4>)
 800d6ea:	7900      	ldrb	r0, [r0, #4]
 800d6ec:	f7fe fcc2 	bl	800c074 <RegionBaseUSCalcDownlinkFrequency>
 800d6f0:	9004      	str	r0, [sp, #16]
            break;
 800d6f2:	e772      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800d6f4:	2308      	movs	r3, #8
 800d6f6:	9304      	str	r3, [sp, #16]
            break;
 800d6f8:	e76f      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800d6fa:	2308      	movs	r3, #8
 800d6fc:	9304      	str	r3, [sp, #16]
            break;
 800d6fe:	e76c      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800d700:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d704:	4a0c      	ldr	r2, [pc, #48]	; (800d738 <RegionUS915GetPhyParam+0x1b0>)
 800d706:	5cd3      	ldrb	r3, [r2, r3]
 800d708:	9304      	str	r3, [sp, #16]
            break;
 800d70a:	e766      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800d70c:	490b      	ldr	r1, [pc, #44]	; (800d73c <RegionUS915GetPhyParam+0x1b4>)
 800d70e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d712:	f7ff f849 	bl	800c7a8 <RegionCommonGetBandwidth>
 800d716:	9004      	str	r0, [sp, #16]
            break;
 800d718:	e75f      	b.n	800d5da <RegionUS915GetPhyParam+0x52>
 800d71a:	bf00      	nop
 800d71c:	20000c40 	.word	0x20000c40
 800d720:	08012950 	.word	0x08012950
 800d724:	08012940 	.word	0x08012940
 800d728:	fffffc18 	.word	0xfffffc18
 800d72c:	370870a0 	.word	0x370870a0
 800d730:	4200999a 	.word	0x4200999a
 800d734:	000927c0 	.word	0x000927c0
 800d738:	08012930 	.word	0x08012930
 800d73c:	080128dc 	.word	0x080128dc

0800d740 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d740:	b510      	push	{r4, lr}
 800d742:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d744:	4b0b      	ldr	r3, [pc, #44]	; (800d774 <RegionUS915SetBandTxDone+0x34>)
 800d746:	681c      	ldr	r4, [r3, #0]
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <RegionUS915SetBandTxDone+0x38>)
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	7803      	ldrb	r3, [r0, #0]
 800d74e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d752:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d756:	7a5b      	ldrb	r3, [r3, #9]
 800d758:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d75c:	6903      	ldr	r3, [r0, #16]
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	68c3      	ldr	r3, [r0, #12]
 800d762:	7842      	ldrb	r2, [r0, #1]
 800d764:	6881      	ldr	r1, [r0, #8]
 800d766:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d76a:	f7fe fdd2 	bl	800c312 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800d76e:	b002      	add	sp, #8
 800d770:	bd10      	pop	{r4, pc}
 800d772:	bf00      	nop
 800d774:	20000c3c 	.word	0x20000c3c
 800d778:	20000c40 	.word	0x20000c40

0800d77c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800d77c:	b510      	push	{r4, lr}
 800d77e:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800d780:	2301      	movs	r3, #1
 800d782:	f8ad 3000 	strh.w	r3, [sp]
 800d786:	2300      	movs	r3, #0
 800d788:	f88d 3002 	strb.w	r3, [sp, #2]
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	9303      	str	r3, [sp, #12]
 800d792:	9304      	str	r3, [sp, #16]
 800d794:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800d798:	7a04      	ldrb	r4, [r0, #8]
 800d79a:	b17c      	cbz	r4, 800d7bc <RegionUS915InitDefaults+0x40>
 800d79c:	3c01      	subs	r4, #1
 800d79e:	b2e4      	uxtb	r4, r4
 800d7a0:	2c01      	cmp	r4, #1
 800d7a2:	f200 8082 	bhi.w	800d8aa <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d7a6:	4b42      	ldr	r3, [pc, #264]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d7a8:	6818      	ldr	r0, [r3, #0]
 800d7aa:	2206      	movs	r2, #6
 800d7ac:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d7b0:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d7b4:	f7fe fd9e 	bl	800c2f4 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e074      	b.n	800d8a6 <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d7bc:	6803      	ldr	r3, [r0, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d073      	beq.n	800d8aa <RegionUS915InitDefaults+0x12e>
 800d7c2:	6842      	ldr	r2, [r0, #4]
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	d070      	beq.n	800d8aa <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800d7c8:	493a      	ldr	r1, [pc, #232]	; (800d8b4 <RegionUS915InitDefaults+0x138>)
 800d7ca:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d7cc:	4938      	ldr	r1, [pc, #224]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d7ce:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800d7d6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800d7da:	2218      	movs	r2, #24
 800d7dc:	4669      	mov	r1, sp
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 fbcb 	bl	800ef7a <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800d7e4:	e011      	b.n	800d80a <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800d7e6:	4b32      	ldr	r3, [pc, #200]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4933      	ldr	r1, [pc, #204]	; (800d8b8 <RegionUS915InitDefaults+0x13c>)
 800d7ec:	4a33      	ldr	r2, [pc, #204]	; (800d8bc <RegionUS915InitDefaults+0x140>)
 800d7ee:	fb01 2204 	mla	r2, r1, r4, r2
 800d7f2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d7f6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800d7fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800d7fe:	2230      	movs	r2, #48	; 0x30
 800d800:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d802:	2200      	movs	r2, #0
 800d804:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800d806:	3401      	adds	r4, #1
 800d808:	b2e4      	uxtb	r4, r4
 800d80a:	2c3f      	cmp	r4, #63	; 0x3f
 800d80c:	d9eb      	bls.n	800d7e6 <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800d80e:	2340      	movs	r3, #64	; 0x40
 800d810:	2b47      	cmp	r3, #71	; 0x47
 800d812:	d814      	bhi.n	800d83e <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800d814:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800d818:	4a25      	ldr	r2, [pc, #148]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d81a:	6812      	ldr	r2, [r2, #0]
 800d81c:	4c28      	ldr	r4, [pc, #160]	; (800d8c0 <RegionUS915InitDefaults+0x144>)
 800d81e:	4929      	ldr	r1, [pc, #164]	; (800d8c4 <RegionUS915InitDefaults+0x148>)
 800d820:	fb04 1100 	mla	r1, r4, r0, r1
 800d824:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d828:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800d82c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800d830:	2144      	movs	r1, #68	; 0x44
 800d832:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800d834:	2100      	movs	r1, #0
 800d836:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800d838:	3301      	adds	r3, #1
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	e7e8      	b.n	800d810 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800d83e:	4c1c      	ldr	r4, [pc, #112]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d840:	6820      	ldr	r0, [r4, #0]
 800d842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d846:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800d84a:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800d84e:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800d852:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800d856:	23ff      	movs	r3, #255	; 0xff
 800d858:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d85c:	2300      	movs	r3, #0
 800d85e:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d862:	2206      	movs	r2, #6
 800d864:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800d868:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d86c:	f7fe fd42 	bl	800c2f4 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800d870:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <RegionUS915InitDefaults+0x138>)
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	6821      	ldr	r1, [r4, #0]
 800d876:	2206      	movs	r2, #6
 800d878:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800d87c:	3090      	adds	r0, #144	; 0x90
 800d87e:	f7fe fd39 	bl	800c2f4 <RegionCommonChanMaskCopy>
            break;
 800d882:	e012      	b.n	800d8aa <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d884:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <RegionUS915InitDefaults+0x138>)
 800d886:	6811      	ldr	r1, [r2, #0]
 800d888:	4a09      	ldr	r2, [pc, #36]	; (800d8b0 <RegionUS915InitDefaults+0x134>)
 800d88a:	6812      	ldr	r2, [r2, #0]
 800d88c:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800d890:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800d894:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d898:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800d89c:	4022      	ands	r2, r4
 800d89e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b05      	cmp	r3, #5
 800d8a8:	d9ec      	bls.n	800d884 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800d8aa:	b006      	add	sp, #24
 800d8ac:	bd10      	pop	{r4, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20000c40 	.word	0x20000c40
 800d8b4:	20000c3c 	.word	0x20000c3c
 800d8b8:	00030d40 	.word	0x00030d40
 800d8bc:	35c80160 	.word	0x35c80160
 800d8c0:	00186a00 	.word	0x00186a00
 800d8c4:	35d2afc0 	.word	0x35d2afc0

0800d8c8 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d8c8:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800d8ca:	290a      	cmp	r1, #10
 800d8cc:	d829      	bhi.n	800d922 <RegionUS915Verify+0x5a>
 800d8ce:	e8df f001 	tbb	[pc, r1]
 800d8d2:	2806      	.short	0x2806
 800d8d4:	0a282828 	.word	0x0a282828
 800d8d8:	1e28140a 	.word	0x1e28140a
 800d8dc:	1e          	.byte	0x1e
 800d8dd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800d8de:	6800      	ldr	r0, [r0, #0]
 800d8e0:	f7ff fde8 	bl	800d4b4 <VerifyRfFreq>
 800d8e4:	e01e      	b.n	800d924 <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800d8e6:	2204      	movs	r2, #4
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	f990 0000 	ldrsb.w	r0, [r0]
 800d8ee:	f7fe fc90 	bl	800c212 <RegionCommonValueInRange>
 800d8f2:	3800      	subs	r0, #0
 800d8f4:	bf18      	it	ne
 800d8f6:	2001      	movne	r0, #1
 800d8f8:	e014      	b.n	800d924 <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800d8fa:	220d      	movs	r2, #13
 800d8fc:	2108      	movs	r1, #8
 800d8fe:	f990 0000 	ldrsb.w	r0, [r0]
 800d902:	f7fe fc86 	bl	800c212 <RegionCommonValueInRange>
 800d906:	3800      	subs	r0, #0
 800d908:	bf18      	it	ne
 800d90a:	2001      	movne	r0, #1
 800d90c:	e00a      	b.n	800d924 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800d90e:	220e      	movs	r2, #14
 800d910:	2100      	movs	r1, #0
 800d912:	f990 0000 	ldrsb.w	r0, [r0]
 800d916:	f7fe fc7c 	bl	800c212 <RegionCommonValueInRange>
 800d91a:	3800      	subs	r0, #0
 800d91c:	bf18      	it	ne
 800d91e:	2001      	movne	r0, #1
 800d920:	e000      	b.n	800d924 <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 800d922:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800d924:	bd08      	pop	{r3, pc}
	...

0800d928 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800d928:	7903      	ldrb	r3, [r0, #4]
 800d92a:	2b10      	cmp	r3, #16
 800d92c:	d138      	bne.n	800d9a0 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800d92e:	6803      	ldr	r3, [r0, #0]
 800d930:	7bdb      	ldrb	r3, [r3, #15]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d134      	bne.n	800d9a0 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d936:	2200      	movs	r2, #0
 800d938:	4613      	mov	r3, r2
 800d93a:	2a04      	cmp	r2, #4
 800d93c:	d82f      	bhi.n	800d99e <RegionUS915ApplyCFList+0x76>
{
 800d93e:	b530      	push	{r4, r5, lr}
 800d940:	e012      	b.n	800d968 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800d942:	4d18      	ldr	r5, [pc, #96]	; (800d9a4 <RegionUS915ApplyCFList+0x7c>)
 800d944:	682d      	ldr	r5, [r5, #0]
 800d946:	f501 7c10 	add.w	ip, r1, #576	; 0x240
 800d94a:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 800d94e:	3148      	adds	r1, #72	; 0x48
 800d950:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 800d954:	ea04 040c 	and.w	r4, r4, ip
 800d958:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800d95c:	3301      	adds	r3, #1
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	3202      	adds	r2, #2
 800d962:	b2d2      	uxtb	r2, r2
 800d964:	2b04      	cmp	r3, #4
 800d966:	d819      	bhi.n	800d99c <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800d968:	6805      	ldr	r5, [r0, #0]
 800d96a:	490f      	ldr	r1, [pc, #60]	; (800d9a8 <RegionUS915ApplyCFList+0x80>)
 800d96c:	680c      	ldr	r4, [r1, #0]
 800d96e:	4619      	mov	r1, r3
 800d970:	f815 c002 	ldrb.w	ip, [r5, r2]
 800d974:	f503 7510 	add.w	r5, r3, #576	; 0x240
 800d978:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800d97c:	f8d0 e000 	ldr.w	lr, [r0]
 800d980:	4496      	add	lr, r2
 800d982:	f89e e001 	ldrb.w	lr, [lr, #1]
 800d986:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800d98a:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800d98e:	2b04      	cmp	r3, #4
 800d990:	d1d7      	bne.n	800d942 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800d992:	fa5f fc8c 	uxtb.w	ip, ip
 800d996:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 800d99a:	e7d2      	b.n	800d942 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800d99c:	bd30      	pop	{r4, r5, pc}
 800d99e:	4770      	bx	lr
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	20000c3c 	.word	0x20000c3c
 800d9a8:	20000c40 	.word	0x20000c40

0800d9ac <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d9ac:	b570      	push	{r4, r5, r6, lr}
 800d9ae:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800d9b0:	2204      	movs	r2, #4
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6800      	ldr	r0, [r0, #0]
 800d9b6:	f7fe fc87 	bl	800c2c8 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800d9ba:	2801      	cmp	r0, #1
 800d9bc:	d033      	beq.n	800da26 <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800d9be:	792c      	ldrb	r4, [r5, #4]
 800d9c0:	b11c      	cbz	r4, 800d9ca <RegionUS915ChanMaskSet+0x1e>
 800d9c2:	2c01      	cmp	r4, #1
 800d9c4:	d025      	beq.n	800da12 <RegionUS915ChanMaskSet+0x66>
 800d9c6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d9ca:	4e18      	ldr	r6, [pc, #96]	; (800da2c <RegionUS915ChanMaskSet+0x80>)
 800d9cc:	6830      	ldr	r0, [r6, #0]
 800d9ce:	2206      	movs	r2, #6
 800d9d0:	6829      	ldr	r1, [r5, #0]
 800d9d2:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800d9d6:	f7fe fc8d 	bl	800c2f4 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800d9da:	6835      	ldr	r5, [r6, #0]
 800d9dc:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 800d9e0:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800d9ea:	e00e      	b.n	800da0a <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800d9ec:	4b10      	ldr	r3, [pc, #64]	; (800da30 <RegionUS915ChanMaskSet+0x84>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	f504 7310 	add.w	r3, r4, #576	; 0x240
 800d9f4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800d9f8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800d9fc:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800da00:	4003      	ands	r3, r0
 800da02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800da06:	3401      	adds	r4, #1
 800da08:	b2e4      	uxtb	r4, r4
 800da0a:	2c05      	cmp	r4, #5
 800da0c:	d9ee      	bls.n	800d9ec <RegionUS915ChanMaskSet+0x40>
    return true;
 800da0e:	2001      	movs	r0, #1
 800da10:	e7da      	b.n	800d9c8 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800da12:	4b06      	ldr	r3, [pc, #24]	; (800da2c <RegionUS915ChanMaskSet+0x80>)
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	2206      	movs	r2, #6
 800da18:	6829      	ldr	r1, [r5, #0]
 800da1a:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 800da1e:	f7fe fc69 	bl	800c2f4 <RegionCommonChanMaskCopy>
    return true;
 800da22:	2001      	movs	r0, #1
            break;
 800da24:	e7d0      	b.n	800d9c8 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800da26:	2000      	movs	r0, #0
 800da28:	e7ce      	b.n	800d9c8 <RegionUS915ChanMaskSet+0x1c>
 800da2a:	bf00      	nop
 800da2c:	20000c40 	.word	0x20000c40
 800da30:	20000c3c 	.word	0x20000c3c

0800da34 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da36:	b083      	sub	sp, #12
 800da38:	460e      	mov	r6, r1
 800da3a:	4617      	mov	r7, r2
 800da3c:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800da3e:	280d      	cmp	r0, #13
 800da40:	bfa8      	it	ge
 800da42:	200d      	movge	r0, #13
 800da44:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800da46:	4d0f      	ldr	r5, [pc, #60]	; (800da84 <RegionUS915ComputeRxWindowParameters+0x50>)
 800da48:	4629      	mov	r1, r5
 800da4a:	f7fe fead 	bl	800c7a8 <RegionCommonGetBandwidth>
 800da4e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800da50:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800da54:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800da58:	4a0b      	ldr	r2, [pc, #44]	; (800da88 <RegionUS915ComputeRxWindowParameters+0x54>)
 800da5a:	5cd0      	ldrb	r0, [r2, r3]
 800da5c:	f7fe fd70 	bl	800c540 <RegionCommonComputeSymbolTimeLoRa>
 800da60:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800da62:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <RegionUS915ComputeRxWindowParameters+0x58>)
 800da64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da66:	4798      	blx	r3
 800da68:	4603      	mov	r3, r0
 800da6a:	f104 020c 	add.w	r2, r4, #12
 800da6e:	9201      	str	r2, [sp, #4]
 800da70:	3408      	adds	r4, #8
 800da72:	9400      	str	r4, [sp, #0]
 800da74:	463a      	mov	r2, r7
 800da76:	4631      	mov	r1, r6
 800da78:	4628      	mov	r0, r5
 800da7a:	f7fe fd6f 	bl	800c55c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800da7e:	b003      	add	sp, #12
 800da80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da82:	bf00      	nop
 800da84:	080128dc 	.word	0x080128dc
 800da88:	08012930 	.word	0x08012930
 800da8c:	08012ec4 	.word	0x08012ec4

0800da90 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800da90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da94:	b08b      	sub	sp, #44	; 0x2c
 800da96:	4604      	mov	r4, r0
 800da98:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800da9a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800da9e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800daa0:	4b22      	ldr	r3, [pc, #136]	; (800db2c <RegionUS915RxConfig+0x9c>)
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	4798      	blx	r3
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d13d      	bne.n	800db26 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800daaa:	7ce3      	ldrb	r3, [r4, #19]
 800daac:	b933      	cbnz	r3, 800dabc <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800daae:	7827      	ldrb	r7, [r4, #0]
 800dab0:	f007 0307 	and.w	r3, r7, #7
 800dab4:	4a1e      	ldr	r2, [pc, #120]	; (800db30 <RegionUS915RxConfig+0xa0>)
 800dab6:	4f1f      	ldr	r7, [pc, #124]	; (800db34 <RegionUS915RxConfig+0xa4>)
 800dab8:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800dabc:	4b1e      	ldr	r3, [pc, #120]	; (800db38 <RegionUS915RxConfig+0xa8>)
 800dabe:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800dac2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800db2c <RegionUS915RxConfig+0x9c>
 800dac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800daca:	4638      	mov	r0, r7
 800dacc:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800dace:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800dad2:	7ca3      	ldrb	r3, [r4, #18]
 800dad4:	9309      	str	r3, [sp, #36]	; 0x24
 800dad6:	2001      	movs	r0, #1
 800dad8:	9008      	str	r0, [sp, #32]
 800dada:	2200      	movs	r2, #0
 800dadc:	9207      	str	r2, [sp, #28]
 800dade:	9206      	str	r2, [sp, #24]
 800dae0:	9205      	str	r2, [sp, #20]
 800dae2:	9204      	str	r2, [sp, #16]
 800dae4:	9203      	str	r2, [sp, #12]
 800dae6:	8923      	ldrh	r3, [r4, #8]
 800dae8:	9302      	str	r3, [sp, #8]
 800daea:	2308      	movs	r3, #8
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	9200      	str	r2, [sp, #0]
 800daf0:	4603      	mov	r3, r0
 800daf2:	464a      	mov	r2, r9
 800daf4:	78a1      	ldrb	r1, [r4, #2]
 800daf6:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800daf8:	7c63      	ldrb	r3, [r4, #17]
 800dafa:	b18b      	cbz	r3, 800db20 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800dafc:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <RegionUS915RxConfig+0xac>)
 800dafe:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <RegionUS915RxConfig+0x9c>)
 800db02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db04:	310d      	adds	r1, #13
 800db06:	b2c9      	uxtb	r1, r1
 800db08:	2001      	movs	r0, #1
 800db0a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800db0c:	4632      	mov	r2, r6
 800db0e:	4639      	mov	r1, r7
 800db10:	7ce0      	ldrb	r0, [r4, #19]
 800db12:	f7fe fe5b 	bl	800c7cc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800db16:	702e      	strb	r6, [r5, #0]
    return true;
 800db18:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800db1a:	b00b      	add	sp, #44	; 0x2c
 800db1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <RegionUS915RxConfig+0xb0>)
 800db22:	5d99      	ldrb	r1, [r3, r6]
 800db24:	e7ec      	b.n	800db00 <RegionUS915RxConfig+0x70>
        return false;
 800db26:	2000      	movs	r0, #0
 800db28:	e7f7      	b.n	800db1a <RegionUS915RxConfig+0x8a>
 800db2a:	bf00      	nop
 800db2c:	08012ec4 	.word	0x08012ec4
 800db30:	000927c0 	.word	0x000927c0
 800db34:	370870a0 	.word	0x370870a0
 800db38:	08012930 	.word	0x08012930
 800db3c:	08012940 	.word	0x08012940
 800db40:	08012950 	.word	0x08012950

0800db44 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800db44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db48:	b08d      	sub	sp, #52	; 0x34
 800db4a:	4604      	mov	r4, r0
 800db4c:	468b      	mov	fp, r1
 800db4e:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800db50:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800db54:	4b32      	ldr	r3, [pc, #200]	; (800dc20 <RegionUS915TxConfig+0xdc>)
 800db56:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800db5a:	4b32      	ldr	r3, [pc, #200]	; (800dc24 <RegionUS915TxConfig+0xe0>)
 800db5c:	6818      	ldr	r0, [r3, #0]
 800db5e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800dc28 <RegionUS915TxConfig+0xe4>
 800db62:	f8d9 3000 	ldr.w	r3, [r9]
 800db66:	7821      	ldrb	r1, [r4, #0]
 800db68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800db6c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800db70:	7a49      	ldrb	r1, [r1, #9]
 800db72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800db76:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800db7a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800db7e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800db82:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800db86:	f7ff fce3 	bl	800d550 <LimitTxPower>
 800db8a:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800db8c:	4927      	ldr	r1, [pc, #156]	; (800dc2c <RegionUS915TxConfig+0xe8>)
 800db8e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800db92:	f7fe fe09 	bl	800c7a8 <RegionCommonGetBandwidth>
 800db96:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800db98:	2200      	movs	r2, #0
 800db9a:	4925      	ldr	r1, [pc, #148]	; (800dc30 <RegionUS915TxConfig+0xec>)
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7fe fd19 	bl	800c5d4 <RegionCommonComputeTxPower>
 800dba2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800dba4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800dc34 <RegionUS915TxConfig+0xf0>
 800dba8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800dbac:	f8d9 1000 	ldr.w	r1, [r9]
 800dbb0:	7823      	ldrb	r3, [r4, #0]
 800dbb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbb6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800dbba:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800dbbc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dbc0:	9308      	str	r3, [sp, #32]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	9207      	str	r2, [sp, #28]
 800dbc6:	9206      	str	r2, [sp, #24]
 800dbc8:	9205      	str	r2, [sp, #20]
 800dbca:	2501      	movs	r5, #1
 800dbcc:	9504      	str	r5, [sp, #16]
 800dbce:	9203      	str	r2, [sp, #12]
 800dbd0:	2308      	movs	r3, #8
 800dbd2:	9302      	str	r3, [sp, #8]
 800dbd4:	9501      	str	r5, [sp, #4]
 800dbd6:	f8cd a000 	str.w	sl, [sp]
 800dbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800dbe4:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800dbe6:	f8d9 2000 	ldr.w	r2, [r9]
 800dbea:	7823      	ldrb	r3, [r4, #0]
 800dbec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dbf0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800dbf4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dbf8:	f7fe fe0a 	bl	800c810 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800dbfc:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800dc00:	7b21      	ldrb	r1, [r4, #12]
 800dc02:	4628      	mov	r0, r5
 800dc04:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800dc06:	89a1      	ldrh	r1, [r4, #12]
 800dc08:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800dc0c:	f7ff fc82 	bl	800d514 <GetTimeOnAir>
 800dc10:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800dc12:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800dc16:	4628      	mov	r0, r5
 800dc18:	b00d      	add	sp, #52	; 0x34
 800dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1e:	bf00      	nop
 800dc20:	08012930 	.word	0x08012930
 800dc24:	20000c3c 	.word	0x20000c3c
 800dc28:	20000c40 	.word	0x20000c40
 800dc2c:	080128dc 	.word	0x080128dc
 800dc30:	41f00000 	.word	0x41f00000
 800dc34:	08012ec4 	.word	0x08012ec4

0800dc38 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dc38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc3c:	b091      	sub	sp, #68	; 0x44
 800dc3e:	4605      	mov	r5, r0
 800dc40:	4688      	mov	r8, r1
 800dc42:	4617      	mov	r7, r2
 800dc44:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800dc46:	2400      	movs	r4, #0
 800dc48:	940e      	str	r4, [sp, #56]	; 0x38
 800dc4a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 800dc4e:	940b      	str	r4, [sp, #44]	; 0x2c
 800dc50:	940c      	str	r4, [sp, #48]	; 0x30
 800dc52:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800dc54:	4b9c      	ldr	r3, [pc, #624]	; (800dec8 <RegionUS915LinkAdrReq+0x290>)
 800dc56:	6819      	ldr	r1, [r3, #0]
 800dc58:	2206      	movs	r2, #6
 800dc5a:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800dc5e:	a80b      	add	r0, sp, #44	; 0x2c
 800dc60:	f7fe fb48 	bl	800c2f4 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800dc64:	e00d      	b.n	800dc82 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800dc66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc6a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800dc6e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800dc72:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800dc76:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800dc7a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800dc7e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800dc82:	7a2b      	ldrb	r3, [r5, #8]
 800dc84:	42a3      	cmp	r3, r4
 800dc86:	f240 8081 	bls.w	800dd8c <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800dc8a:	6868      	ldr	r0, [r5, #4]
 800dc8c:	a90e      	add	r1, sp, #56	; 0x38
 800dc8e:	4420      	add	r0, r4
 800dc90:	f7fe fbe0 	bl	800c454 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800dc94:	2800      	cmp	r0, #0
 800dc96:	d079      	beq.n	800dd8c <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800dc98:	4404      	add	r4, r0
 800dc9a:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800dc9c:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800dca0:	f1bc 0f06 	cmp.w	ip, #6
 800dca4:	d0df      	beq.n	800dc66 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800dca6:	f1bc 0f07 	cmp.w	ip, #7
 800dcaa:	d00a      	beq.n	800dcc2 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800dcac:	f1bc 0f05 	cmp.w	ip, #5
 800dcb0:	d068      	beq.n	800dd84 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800dcb2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800dcb6:	aa10      	add	r2, sp, #64	; 0x40
 800dcb8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800dcbc:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800dcc0:	e7df      	b.n	800dc82 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800dcc8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800dccc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800dcd0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800dcd4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800dcd8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800dcdc:	e7d1      	b.n	800dc82 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800dcde:	aa10      	add	r2, sp, #64	; 0x40
 800dce0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800dce4:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800dce8:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800dcec:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800dcf0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800dcfa:	3101      	adds	r1, #1
 800dcfc:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800dcfe:	f10c 0c01 	add.w	ip, ip, #1
 800dd02:	fa5f fc8c 	uxtb.w	ip, ip
 800dd06:	f1bc 0f07 	cmp.w	ip, #7
 800dd0a:	d8ba      	bhi.n	800dc82 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800dd0c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800dd10:	2301      	movs	r3, #1
 800dd12:	fa03 f30c 	lsl.w	r3, r3, ip
 800dd16:	421a      	tst	r2, r3
 800dd18:	d011      	beq.n	800dd3e <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800dd1a:	f01c 0f01 	tst.w	ip, #1
 800dd1e:	d1de      	bne.n	800dcde <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800dd20:	aa10      	add	r2, sp, #64	; 0x40
 800dd22:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800dd26:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800dd2a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800dd2e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800dd32:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dd36:	4313      	orrs	r3, r2
 800dd38:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800dd3c:	e7df      	b.n	800dcfe <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800dd3e:	f01c 0f01 	tst.w	ip, #1
 800dd42:	d10f      	bne.n	800dd64 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800dd44:	aa10      	add	r2, sp, #64	; 0x40
 800dd46:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800dd4a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800dd4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dd52:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800dd56:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dd5a:	ea22 0303 	bic.w	r3, r2, r3
 800dd5e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800dd62:	e7cc      	b.n	800dcfe <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800dd64:	aa10      	add	r2, sp, #64	; 0x40
 800dd66:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800dd6a:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800dd6e:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800dd72:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800dd76:	ea22 0303 	bic.w	r3, r2, r3
 800dd7a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800dd7e:	3101      	adds	r1, #1
 800dd80:	b2c9      	uxtb	r1, r1
 800dd82:	e7bc      	b.n	800dcfe <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800dd84:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800dd88:	4661      	mov	r1, ip
 800dd8a:	e7bc      	b.n	800dd06 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800dd8c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	dd58      	ble.n	800de46 <RegionUS915LinkAdrReq+0x20e>
 800dd94:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800dd98:	2302      	movs	r3, #2
 800dd9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800dd9e:	7a6b      	ldrb	r3, [r5, #9]
 800dda0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800dda4:	a809      	add	r0, sp, #36	; 0x24
 800dda6:	f7ff fbef 	bl	800d588 <RegionUS915GetPhyParam>
 800ddaa:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800ddac:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ddb0:	7aab      	ldrb	r3, [r5, #10]
 800ddb2:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ddb6:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800ddba:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ddbe:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800ddc2:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ddc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ddca:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ddce:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ddd2:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ddd6:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ddda:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ddde:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800dde2:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800dde6:	2348      	movs	r3, #72	; 0x48
 800dde8:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800ddec:	ab0b      	add	r3, sp, #44	; 0x2c
 800ddee:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ddf0:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ddfa:	4b33      	ldr	r3, [pc, #204]	; (800dec8 <RegionUS915LinkAdrReq+0x290>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800de00:	230e      	movs	r3, #14
 800de02:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800de06:	2300      	movs	r3, #0
 800de08:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800de10:	ab0e      	add	r3, sp, #56	; 0x38
 800de12:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800de16:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800de1a:	4668      	mov	r0, sp
 800de1c:	f7fe fb38 	bl	800c490 <RegionCommonLinkAdrReqVerifyParams>
 800de20:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800de22:	2807      	cmp	r0, #7
 800de24:	d01c      	beq.n	800de60 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800de26:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800de2a:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800de2e:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800de32:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800de34:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800de38:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800de3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de3c:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800de3e:	4628      	mov	r0, r5
 800de40:	b011      	add	sp, #68	; 0x44
 800de42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800de46:	2204      	movs	r2, #4
 800de48:	2100      	movs	r1, #0
 800de4a:	a80b      	add	r0, sp, #44	; 0x2c
 800de4c:	f7fe fa3c 	bl	800c2c8 <RegionCommonCountChannels>
 800de50:	2801      	cmp	r0, #1
 800de52:	d902      	bls.n	800de5a <RegionUS915LinkAdrReq+0x222>
 800de54:	f04f 0907 	mov.w	r9, #7
 800de58:	e79e      	b.n	800dd98 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800de5a:	f04f 0906 	mov.w	r9, #6
 800de5e:	e79b      	b.n	800dd98 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800de60:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800dec8 <RegionUS915LinkAdrReq+0x290>
 800de64:	f8d9 0000 	ldr.w	r0, [r9]
 800de68:	2206      	movs	r2, #6
 800de6a:	a90b      	add	r1, sp, #44	; 0x2c
 800de6c:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 800de70:	f7fe fa40 	bl	800c2f4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800de74:	4b15      	ldr	r3, [pc, #84]	; (800decc <RegionUS915LinkAdrReq+0x294>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f8d9 2000 	ldr.w	r2, [r9]
 800de7c:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 800de80:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 800de84:	4001      	ands	r1, r0
 800de86:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800de8a:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 800de8e:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 800de92:	4001      	ands	r1, r0
 800de94:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800de98:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 800de9c:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 800dea0:	4001      	ands	r1, r0
 800dea2:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800dea6:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 800deaa:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 800deae:	4001      	ands	r1, r0
 800deb0:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800deb4:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 800deb8:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800debc:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 800dec0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800dec4:	e7af      	b.n	800de26 <RegionUS915LinkAdrReq+0x1ee>
 800dec6:	bf00      	nop
 800dec8:	20000c40 	.word	0x20000c40
 800decc:	20000c3c 	.word	0x20000c3c

0800ded0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800ded4:	6840      	ldr	r0, [r0, #4]
 800ded6:	f7ff faed 	bl	800d4b4 <VerifyRfFreq>
 800deda:	b310      	cbz	r0, 800df22 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800dedc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800dede:	220d      	movs	r2, #13
 800dee0:	2108      	movs	r1, #8
 800dee2:	f994 0000 	ldrsb.w	r0, [r4]
 800dee6:	f7fe f994 	bl	800c212 <RegionCommonValueInRange>
 800deea:	b908      	cbnz	r0, 800def0 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800deec:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800def0:	2207      	movs	r2, #7
 800def2:	2105      	movs	r1, #5
 800def4:	f994 0000 	ldrsb.w	r0, [r4]
 800def8:	f7fe f98b 	bl	800c212 <RegionCommonValueInRange>
 800defc:	2801      	cmp	r0, #1
 800defe:	d003      	beq.n	800df08 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800df00:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800df04:	2b0d      	cmp	r3, #13
 800df06:	dd01      	ble.n	800df0c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800df08:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800df0c:	2203      	movs	r2, #3
 800df0e:	2100      	movs	r1, #0
 800df10:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800df14:	f7fe f97d 	bl	800c212 <RegionCommonValueInRange>
 800df18:	b908      	cbnz	r0, 800df1e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800df1a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800df1e:	4628      	mov	r0, r5
 800df20:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800df22:	2506      	movs	r5, #6
 800df24:	e7db      	b.n	800dede <RegionUS915RxParamSetupReq+0xe>

0800df26 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800df26:	f04f 30ff 	mov.w	r0, #4294967295
 800df2a:	4770      	bx	lr

0800df2c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800df2c:	f04f 30ff 	mov.w	r0, #4294967295
 800df30:	4770      	bx	lr

0800df32 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800df32:	f04f 30ff 	mov.w	r0, #4294967295
 800df36:	4770      	bx	lr

0800df38 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800df38:	b9b1      	cbnz	r1, 800df68 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800df3a:	4b10      	ldr	r3, [pc, #64]	; (800df7c <RegionUS915AlternateDr+0x44>)
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800df42:	3301      	adds	r3, #1
 800df44:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800df48:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <RegionUS915AlternateDr+0x44>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <RegionUS915AlternateDr+0x48>)
 800df52:	fba3 1302 	umull	r1, r3, r3, r2
 800df56:	085b      	lsrs	r3, r3, #1
 800df58:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df62:	d009      	beq.n	800df78 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800df64:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800df66:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800df68:	4b04      	ldr	r3, [pc, #16]	; (800df7c <RegionUS915AlternateDr+0x44>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 800df70:	3b01      	subs	r3, #1
 800df72:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 800df76:	e7e7      	b.n	800df48 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 800df78:	2004      	movs	r0, #4
 800df7a:	4770      	bx	lr
 800df7c:	20000c3c 	.word	0x20000c3c
 800df80:	38e38e39 	.word	0x38e38e39

0800df84 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	b0a4      	sub	sp, #144	; 0x90
 800df8a:	4604      	mov	r4, r0
 800df8c:	460e      	mov	r6, r1
 800df8e:	4690      	mov	r8, r2
 800df90:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800df92:	2500      	movs	r5, #0
 800df94:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800df98:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800df9c:	9511      	str	r5, [sp, #68]	; 0x44
 800df9e:	2244      	movs	r2, #68	; 0x44
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	a812      	add	r0, sp, #72	; 0x48
 800dfa4:	f004 f85c 	bl	8012060 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800dfa8:	4b4e      	ldr	r3, [pc, #312]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	2204      	movs	r2, #4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	3090      	adds	r0, #144	; 0x90
 800dfb2:	f7fe f989 	bl	800c2c8 <RegionCommonCountChannels>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d054      	beq.n	800e064 <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800dfba:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	dd0a      	ble.n	800dfd8 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800dfc2:	4b48      	ldr	r3, [pc, #288]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800dfca:	b92a      	cbnz	r2, 800dfd8 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800dfcc:	4a46      	ldr	r2, [pc, #280]	; (800e0e8 <RegionUS915NextChannel+0x164>)
 800dfce:	6812      	ldr	r2, [r2, #0]
 800dfd0:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 800dfd4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800dfd8:	7a63      	ldrb	r3, [r4, #9]
 800dfda:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800dfde:	7a23      	ldrb	r3, [r4, #8]
 800dfe0:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800dfe4:	4b3f      	ldr	r3, [pc, #252]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800dfec:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800dfee:	4a3e      	ldr	r2, [pc, #248]	; (800e0e8 <RegionUS915NextChannel+0x164>)
 800dff0:	6812      	ldr	r2, [r2, #0]
 800dff2:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800dff4:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800dff6:	2348      	movs	r3, #72	; 0x48
 800dff8:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e004:	6863      	ldr	r3, [r4, #4]
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e008:	7aa3      	ldrb	r3, [r4, #10]
 800e00a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800e00e:	2301      	movs	r3, #1
 800e010:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e014:	ab0c      	add	r3, sp, #48	; 0x30
 800e016:	f104 020c 	add.w	r2, r4, #12
 800e01a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e01e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e022:	7d23      	ldrb	r3, [r4, #20]
 800e024:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e028:	8ae1      	ldrh	r1, [r4, #22]
 800e02a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e02e:	f7ff fa71 	bl	800d514 <GetTimeOnAir>
 800e032:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e034:	ab03      	add	r3, sp, #12
 800e036:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e038:	f8cd 8004 	str.w	r8, [sp, #4]
 800e03c:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800e046:	aa11      	add	r2, sp, #68	; 0x44
 800e048:	4639      	mov	r1, r7
 800e04a:	a809      	add	r0, sp, #36	; 0x24
 800e04c:	f7fe fb3e 	bl	800c6cc <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e050:	4605      	mov	r5, r0
 800e052:	2800      	cmp	r0, #0
 800e054:	d141      	bne.n	800e0da <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 800e056:	7a63      	ldrb	r3, [r4, #9]
 800e058:	b99b      	cbnz	r3, 800e082 <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800e05a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800e05e:	b1eb      	cbz	r3, 800e09c <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800e060:	4603      	mov	r3, r0
 800e062:	e029      	b.n	800e0b8 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800e064:	4d1f      	ldr	r5, [pc, #124]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800e066:	6828      	ldr	r0, [r5, #0]
 800e068:	4b1f      	ldr	r3, [pc, #124]	; (800e0e8 <RegionUS915NextChannel+0x164>)
 800e06a:	6819      	ldr	r1, [r3, #0]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800e072:	3090      	adds	r0, #144	; 0x90
 800e074:	f7fe f93e 	bl	800c2f4 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800e080:	e79b      	b.n	800dfba <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e082:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800e086:	3901      	subs	r1, #1
 800e088:	f000 ff6a 	bl	800ef60 <randr>
 800e08c:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800e090:	eb0d 0003 	add.w	r0, sp, r3
 800e094:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800e098:	7033      	strb	r3, [r6, #0]
 800e09a:	e017      	b.n	800e0cc <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800e09e:	6818      	ldr	r0, [r3, #0]
 800e0a0:	4632      	mov	r2, r6
 800e0a2:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800e0a6:	3090      	adds	r0, #144	; 0x90
 800e0a8:	f7fd ff96 	bl	800bfd8 <RegionBaseUSComputeNext125kHzJoinChannel>
 800e0ac:	2803      	cmp	r0, #3
 800e0ae:	d10d      	bne.n	800e0cc <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800e0b0:	4605      	mov	r5, r0
 800e0b2:	e012      	b.n	800e0da <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800e0b8:	4a0a      	ldr	r2, [pc, #40]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800e0ba:	6812      	ldr	r2, [r2, #0]
 800e0bc:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 800e0c0:	4118      	asrs	r0, r3
 800e0c2:	f010 0f01 	tst.w	r0, #1
 800e0c6:	d0f5      	beq.n	800e0b4 <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 800e0c8:	3340      	adds	r3, #64	; 0x40
 800e0ca:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800e0cc:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <RegionUS915NextChannel+0x160>)
 800e0ce:	6818      	ldr	r0, [r3, #0]
 800e0d0:	2248      	movs	r2, #72	; 0x48
 800e0d2:	7831      	ldrb	r1, [r6, #0]
 800e0d4:	3090      	adds	r0, #144	; 0x90
 800e0d6:	f7fe f8de 	bl	800c296 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800e0da:	4628      	mov	r0, r5
 800e0dc:	b024      	add	sp, #144	; 0x90
 800e0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20000c3c 	.word	0x20000c3c
 800e0e8:	20000c40 	.word	0x20000c40

0800e0ec <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800e0f0:	4b14      	ldr	r3, [pc, #80]	; (800e144 <RegionUS915SetContinuousWave+0x58>)
 800e0f2:	6819      	ldr	r1, [r3, #0]
 800e0f4:	4d14      	ldr	r5, [pc, #80]	; (800e148 <RegionUS915SetContinuousWave+0x5c>)
 800e0f6:	682b      	ldr	r3, [r5, #0]
 800e0f8:	7802      	ldrb	r2, [r0, #0]
 800e0fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e0fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e102:	7a52      	ldrb	r2, [r2, #9]
 800e104:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e108:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e10c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800e110:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800e114:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800e118:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e11c:	f7ff fa18 	bl	800d550 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800e120:	682a      	ldr	r2, [r5, #0]
 800e122:	7823      	ldrb	r3, [r4, #0]
 800e124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e128:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800e12c:	2200      	movs	r2, #0
 800e12e:	4907      	ldr	r1, [pc, #28]	; (800e14c <RegionUS915SetContinuousWave+0x60>)
 800e130:	f7fe fa50 	bl	800c5d4 <RegionCommonComputeTxPower>
 800e134:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e136:	4b06      	ldr	r3, [pc, #24]	; (800e150 <RegionUS915SetContinuousWave+0x64>)
 800e138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13a:	89a2      	ldrh	r2, [r4, #12]
 800e13c:	4628      	mov	r0, r5
 800e13e:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800e140:	bd38      	pop	{r3, r4, r5, pc}
 800e142:	bf00      	nop
 800e144:	20000c3c 	.word	0x20000c3c
 800e148:	20000c40 	.word	0x20000c40
 800e14c:	41f00000 	.word	0x41f00000
 800e150:	08012ec4 	.word	0x08012ec4

0800e154 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800e154:	4b04      	ldr	r3, [pc, #16]	; (800e168 <RegionUS915ApplyDrOffset+0x14>)
 800e156:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e15a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800e15c:	2800      	cmp	r0, #0
 800e15e:	db01      	blt.n	800e164 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800e160:	b2c0      	uxtb	r0, r0
 800e162:	4770      	bx	lr
        datarate = DR_0;
 800e164:	2000      	movs	r0, #0
 800e166:	e7fb      	b.n	800e160 <RegionUS915ApplyDrOffset+0xc>
 800e168:	0801291c 	.word	0x0801291c

0800e16c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e16c:	b510      	push	{r4, lr}
 800e16e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e170:	2210      	movs	r2, #16
 800e172:	2100      	movs	r1, #0
 800e174:	30f1      	adds	r0, #241	; 0xf1
 800e176:	f000 ff18 	bl	800efaa <memset1>
    ctx->M_n = 0;
 800e17a:	2100      	movs	r1, #0
 800e17c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e180:	22f0      	movs	r2, #240	; 0xf0
 800e182:	4620      	mov	r0, r4
 800e184:	f000 ff11 	bl	800efaa <memset1>
}
 800e188:	bd10      	pop	{r4, pc}

0800e18a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e18a:	b508      	push	{r3, lr}
 800e18c:	4602      	mov	r2, r0
 800e18e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e190:	2110      	movs	r1, #16
 800e192:	f000 fb3b 	bl	800e80c <lorawan_aes_set_key>
}
 800e196:	bd08      	pop	{r3, pc}

0800e198 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e1a4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d054      	beq.n	800e256 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e1ac:	f1c3 0810 	rsb	r8, r3, #16
 800e1b0:	4647      	mov	r7, r8
 800e1b2:	4590      	cmp	r8, r2
 800e1b4:	bf28      	it	cs
 800e1b6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e1b8:	f200 1001 	addw	r0, r0, #257	; 0x101
 800e1bc:	b2ba      	uxth	r2, r7
 800e1be:	4418      	add	r0, r3
 800e1c0:	f000 fedb 	bl	800ef7a <memcpy1>
        ctx->M_n += mlen;
 800e1c4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e1c8:	443b      	add	r3, r7
 800e1ca:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e1ce:	2b0f      	cmp	r3, #15
 800e1d0:	d94d      	bls.n	800e26e <AES_CMAC_Update+0xd6>
 800e1d2:	45b0      	cmp	r8, r6
 800e1d4:	d24b      	bcs.n	800e26e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e008      	b.n	800e1ec <AES_CMAC_Update+0x54>
 800e1da:	18e2      	adds	r2, r4, r3
 800e1dc:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800e1e0:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800e1e4:	4041      	eors	r1, r0
 800e1e6:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	2b0f      	cmp	r3, #15
 800e1ee:	ddf4      	ble.n	800e1da <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1f0:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800e1f4:	2210      	movs	r2, #16
 800e1f6:	4641      	mov	r1, r8
 800e1f8:	4668      	mov	r0, sp
 800e1fa:	f000 febe 	bl	800ef7a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e1fe:	4622      	mov	r2, r4
 800e200:	4669      	mov	r1, sp
 800e202:	4668      	mov	r0, sp
 800e204:	f000 fb84 	bl	800e910 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e208:	2210      	movs	r2, #16
 800e20a:	4669      	mov	r1, sp
 800e20c:	4640      	mov	r0, r8
 800e20e:	f000 feb4 	bl	800ef7a <memcpy1>

        data += mlen;
 800e212:	443d      	add	r5, r7
        len -= mlen;
 800e214:	1bf6      	subs	r6, r6, r7
 800e216:	e01e      	b.n	800e256 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e218:	eb04 0e03 	add.w	lr, r4, r3
 800e21c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800e220:	5cea      	ldrb	r2, [r5, r3]
 800e222:	ea8c 0c02 	eor.w	ip, ip, r2
 800e226:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800e22a:	3301      	adds	r3, #1
 800e22c:	2b0f      	cmp	r3, #15
 800e22e:	ddf3      	ble.n	800e218 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e230:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800e234:	2210      	movs	r2, #16
 800e236:	4639      	mov	r1, r7
 800e238:	4668      	mov	r0, sp
 800e23a:	f000 fe9e 	bl	800ef7a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e23e:	4622      	mov	r2, r4
 800e240:	4669      	mov	r1, sp
 800e242:	4668      	mov	r0, sp
 800e244:	f000 fb64 	bl	800e910 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e248:	2210      	movs	r2, #16
 800e24a:	4669      	mov	r1, sp
 800e24c:	4638      	mov	r0, r7
 800e24e:	f000 fe94 	bl	800ef7a <memcpy1>

        data += 16;
 800e252:	3510      	adds	r5, #16
        len -= 16;
 800e254:	3e10      	subs	r6, #16
    while( len > 16 )
 800e256:	2e10      	cmp	r6, #16
 800e258:	d901      	bls.n	800e25e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e25a:	2300      	movs	r3, #0
 800e25c:	e7e6      	b.n	800e22c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e25e:	b2b2      	uxth	r2, r6
 800e260:	4629      	mov	r1, r5
 800e262:	f204 1001 	addw	r0, r4, #257	; 0x101
 800e266:	f000 fe88 	bl	800ef7a <memcpy1>
    ctx->M_n = len;
 800e26a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800e26e:	b004      	add	sp, #16
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e274 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e274:	b530      	push	{r4, r5, lr}
 800e276:	b089      	sub	sp, #36	; 0x24
 800e278:	4605      	mov	r5, r0
 800e27a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e27c:	2210      	movs	r2, #16
 800e27e:	2100      	movs	r1, #0
 800e280:	eb0d 0002 	add.w	r0, sp, r2
 800e284:	f000 fe91 	bl	800efaa <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e288:	4622      	mov	r2, r4
 800e28a:	a904      	add	r1, sp, #16
 800e28c:	4608      	mov	r0, r1
 800e28e:	f000 fb3f 	bl	800e910 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e292:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e296:	2b00      	cmp	r3, #0
 800e298:	db01      	blt.n	800e29e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e29a:	2300      	movs	r3, #0
 800e29c:	e030      	b.n	800e300 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2b0e      	cmp	r3, #14
 800e2a2:	dc11      	bgt.n	800e2c8 <AES_CMAC_Final+0x54>
 800e2a4:	f103 0220 	add.w	r2, r3, #32
 800e2a8:	eb0d 0102 	add.w	r1, sp, r2
 800e2ac:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	f103 0220 	add.w	r2, r3, #32
 800e2b6:	446a      	add	r2, sp
 800e2b8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e2bc:	09d2      	lsrs	r2, r2, #7
 800e2be:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e2c2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e2c6:	e7eb      	b.n	800e2a0 <AES_CMAC_Final+0x2c>
 800e2c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e2d4:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e2d8:	f88d 301f 	strb.w	r3, [sp, #31]
 800e2dc:	e017      	b.n	800e30e <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e2de:	f103 0220 	add.w	r2, r3, #32
 800e2e2:	eb0d 0102 	add.w	r1, sp, r2
 800e2e6:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	f103 0220 	add.w	r2, r3, #32
 800e2f0:	446a      	add	r2, sp
 800e2f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e2f6:	09d2      	lsrs	r2, r2, #7
 800e2f8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e2fc:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e300:	2b0e      	cmp	r3, #14
 800e302:	ddec      	ble.n	800e2de <AES_CMAC_Final+0x6a>
 800e304:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e30e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800e312:	2810      	cmp	r0, #16
 800e314:	d014      	beq.n	800e340 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e316:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db30      	blt.n	800e380 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e31e:	2300      	movs	r3, #0
 800e320:	e041      	b.n	800e3a6 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e322:	18e1      	adds	r1, r4, r3
 800e324:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e328:	f103 0020 	add.w	r0, r3, #32
 800e32c:	4468      	add	r0, sp
 800e32e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e332:	4042      	eors	r2, r0
 800e334:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e338:	3301      	adds	r3, #1
 800e33a:	2b0f      	cmp	r3, #15
 800e33c:	ddf1      	ble.n	800e322 <AES_CMAC_Final+0xae>
 800e33e:	e059      	b.n	800e3f4 <AES_CMAC_Final+0x180>
 800e340:	2300      	movs	r3, #0
 800e342:	e7fa      	b.n	800e33a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e344:	f103 0220 	add.w	r2, r3, #32
 800e348:	eb0d 0102 	add.w	r1, sp, r2
 800e34c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e350:	3301      	adds	r3, #1
 800e352:	f103 0220 	add.w	r2, r3, #32
 800e356:	446a      	add	r2, sp
 800e358:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e35c:	09d2      	lsrs	r2, r2, #7
 800e35e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e362:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e366:	2b0e      	cmp	r3, #14
 800e368:	ddec      	ble.n	800e344 <AES_CMAC_Final+0xd0>
 800e36a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e376:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800e37a:	f88d 301f 	strb.w	r3, [sp, #31]
 800e37e:	e019      	b.n	800e3b4 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e380:	2300      	movs	r3, #0
 800e382:	e7f0      	b.n	800e366 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e384:	f103 0220 	add.w	r2, r3, #32
 800e388:	eb0d 0102 	add.w	r1, sp, r2
 800e38c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e390:	3301      	adds	r3, #1
 800e392:	f103 0220 	add.w	r2, r3, #32
 800e396:	446a      	add	r2, sp
 800e398:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e39c:	09d2      	lsrs	r2, r2, #7
 800e39e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e3a2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e3a6:	2b0e      	cmp	r3, #14
 800e3a8:	ddec      	ble.n	800e384 <AES_CMAC_Final+0x110>
 800e3aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e3b4:	4420      	add	r0, r4
 800e3b6:	2380      	movs	r3, #128	; 0x80
 800e3b8:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e3bc:	e003      	b.n	800e3c6 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e3be:	4423      	add	r3, r4
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e3c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800e3d0:	2b0f      	cmp	r3, #15
 800e3d2:	d9f4      	bls.n	800e3be <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e00b      	b.n	800e3f0 <AES_CMAC_Final+0x17c>
 800e3d8:	18e1      	adds	r1, r4, r3
 800e3da:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800e3de:	f103 0020 	add.w	r0, r3, #32
 800e3e2:	4468      	add	r0, sp
 800e3e4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e3e8:	4042      	eors	r2, r0
 800e3ea:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	2b0f      	cmp	r3, #15
 800e3f2:	ddf1      	ble.n	800e3d8 <AES_CMAC_Final+0x164>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	e009      	b.n	800e40c <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e3f8:	18e2      	adds	r2, r4, r3
 800e3fa:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800e3fe:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800e402:	ea8c 0c01 	eor.w	ip, ip, r1
 800e406:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800e40a:	3301      	adds	r3, #1
 800e40c:	2b0f      	cmp	r3, #15
 800e40e:	ddf3      	ble.n	800e3f8 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e410:	2210      	movs	r2, #16
 800e412:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800e416:	4668      	mov	r0, sp
 800e418:	f000 fdaf 	bl	800ef7a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e41c:	4622      	mov	r2, r4
 800e41e:	4629      	mov	r1, r5
 800e420:	4668      	mov	r0, sp
 800e422:	f000 fa75 	bl	800e910 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e426:	2210      	movs	r2, #16
 800e428:	2100      	movs	r1, #0
 800e42a:	eb0d 0002 	add.w	r0, sp, r2
 800e42e:	f000 fdbc 	bl	800efaa <memset1>
}
 800e432:	b009      	add	sp, #36	; 0x24
 800e434:	bd30      	pop	{r4, r5, pc}

0800e436 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e436:	780b      	ldrb	r3, [r1, #0]
 800e438:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e43a:	784b      	ldrb	r3, [r1, #1]
 800e43c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e43e:	788b      	ldrb	r3, [r1, #2]
 800e440:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e442:	78cb      	ldrb	r3, [r1, #3]
 800e444:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e446:	790b      	ldrb	r3, [r1, #4]
 800e448:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e44a:	794b      	ldrb	r3, [r1, #5]
 800e44c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e44e:	798b      	ldrb	r3, [r1, #6]
 800e450:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e452:	79cb      	ldrb	r3, [r1, #7]
 800e454:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e456:	7a0b      	ldrb	r3, [r1, #8]
 800e458:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e45a:	7a4b      	ldrb	r3, [r1, #9]
 800e45c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e45e:	7a8b      	ldrb	r3, [r1, #10]
 800e460:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e462:	7acb      	ldrb	r3, [r1, #11]
 800e464:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e466:	7b0b      	ldrb	r3, [r1, #12]
 800e468:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e46a:	7b4b      	ldrb	r3, [r1, #13]
 800e46c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e46e:	7b8b      	ldrb	r3, [r1, #14]
 800e470:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e472:	7bcb      	ldrb	r3, [r1, #15]
 800e474:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e476:	4770      	bx	lr

0800e478 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e478:	e004      	b.n	800e484 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e47e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e482:	461a      	mov	r2, r3
 800e484:	1e53      	subs	r3, r2, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2a00      	cmp	r2, #0
 800e48a:	d1f6      	bne.n	800e47a <copy_block_nn+0x2>
}
 800e48c:	4770      	bx	lr

0800e48e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e48e:	780b      	ldrb	r3, [r1, #0]
 800e490:	7802      	ldrb	r2, [r0, #0]
 800e492:	4053      	eors	r3, r2
 800e494:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e496:	784b      	ldrb	r3, [r1, #1]
 800e498:	7842      	ldrb	r2, [r0, #1]
 800e49a:	4053      	eors	r3, r2
 800e49c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e49e:	788b      	ldrb	r3, [r1, #2]
 800e4a0:	7882      	ldrb	r2, [r0, #2]
 800e4a2:	4053      	eors	r3, r2
 800e4a4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e4a6:	78cb      	ldrb	r3, [r1, #3]
 800e4a8:	78c2      	ldrb	r2, [r0, #3]
 800e4aa:	4053      	eors	r3, r2
 800e4ac:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e4ae:	790b      	ldrb	r3, [r1, #4]
 800e4b0:	7902      	ldrb	r2, [r0, #4]
 800e4b2:	4053      	eors	r3, r2
 800e4b4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e4b6:	794b      	ldrb	r3, [r1, #5]
 800e4b8:	7942      	ldrb	r2, [r0, #5]
 800e4ba:	4053      	eors	r3, r2
 800e4bc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e4be:	798b      	ldrb	r3, [r1, #6]
 800e4c0:	7982      	ldrb	r2, [r0, #6]
 800e4c2:	4053      	eors	r3, r2
 800e4c4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e4c6:	79cb      	ldrb	r3, [r1, #7]
 800e4c8:	79c2      	ldrb	r2, [r0, #7]
 800e4ca:	4053      	eors	r3, r2
 800e4cc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e4ce:	7a0b      	ldrb	r3, [r1, #8]
 800e4d0:	7a02      	ldrb	r2, [r0, #8]
 800e4d2:	4053      	eors	r3, r2
 800e4d4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e4d6:	7a4b      	ldrb	r3, [r1, #9]
 800e4d8:	7a42      	ldrb	r2, [r0, #9]
 800e4da:	4053      	eors	r3, r2
 800e4dc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e4de:	7a8b      	ldrb	r3, [r1, #10]
 800e4e0:	7a82      	ldrb	r2, [r0, #10]
 800e4e2:	4053      	eors	r3, r2
 800e4e4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e4e6:	7acb      	ldrb	r3, [r1, #11]
 800e4e8:	7ac2      	ldrb	r2, [r0, #11]
 800e4ea:	4053      	eors	r3, r2
 800e4ec:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e4ee:	7b0b      	ldrb	r3, [r1, #12]
 800e4f0:	7b02      	ldrb	r2, [r0, #12]
 800e4f2:	4053      	eors	r3, r2
 800e4f4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e4f6:	7b4b      	ldrb	r3, [r1, #13]
 800e4f8:	7b42      	ldrb	r2, [r0, #13]
 800e4fa:	4053      	eors	r3, r2
 800e4fc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e4fe:	7b8b      	ldrb	r3, [r1, #14]
 800e500:	7b82      	ldrb	r2, [r0, #14]
 800e502:	4053      	eors	r3, r2
 800e504:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e506:	7bcb      	ldrb	r3, [r1, #15]
 800e508:	7bc2      	ldrb	r2, [r0, #15]
 800e50a:	4053      	eors	r3, r2
 800e50c:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e50e:	4770      	bx	lr

0800e510 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e510:	780b      	ldrb	r3, [r1, #0]
 800e512:	f892 c000 	ldrb.w	ip, [r2]
 800e516:	ea83 030c 	eor.w	r3, r3, ip
 800e51a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e51c:	784b      	ldrb	r3, [r1, #1]
 800e51e:	f892 c001 	ldrb.w	ip, [r2, #1]
 800e522:	ea83 030c 	eor.w	r3, r3, ip
 800e526:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e528:	788b      	ldrb	r3, [r1, #2]
 800e52a:	f892 c002 	ldrb.w	ip, [r2, #2]
 800e52e:	ea83 030c 	eor.w	r3, r3, ip
 800e532:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e534:	78cb      	ldrb	r3, [r1, #3]
 800e536:	f892 c003 	ldrb.w	ip, [r2, #3]
 800e53a:	ea83 030c 	eor.w	r3, r3, ip
 800e53e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e540:	790b      	ldrb	r3, [r1, #4]
 800e542:	f892 c004 	ldrb.w	ip, [r2, #4]
 800e546:	ea83 030c 	eor.w	r3, r3, ip
 800e54a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e54c:	794b      	ldrb	r3, [r1, #5]
 800e54e:	f892 c005 	ldrb.w	ip, [r2, #5]
 800e552:	ea83 030c 	eor.w	r3, r3, ip
 800e556:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e558:	798b      	ldrb	r3, [r1, #6]
 800e55a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800e55e:	ea83 030c 	eor.w	r3, r3, ip
 800e562:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e564:	79cb      	ldrb	r3, [r1, #7]
 800e566:	f892 c007 	ldrb.w	ip, [r2, #7]
 800e56a:	ea83 030c 	eor.w	r3, r3, ip
 800e56e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e570:	7a0b      	ldrb	r3, [r1, #8]
 800e572:	f892 c008 	ldrb.w	ip, [r2, #8]
 800e576:	ea83 030c 	eor.w	r3, r3, ip
 800e57a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e57c:	7a4b      	ldrb	r3, [r1, #9]
 800e57e:	f892 c009 	ldrb.w	ip, [r2, #9]
 800e582:	ea83 030c 	eor.w	r3, r3, ip
 800e586:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e588:	7a8b      	ldrb	r3, [r1, #10]
 800e58a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e58e:	ea83 030c 	eor.w	r3, r3, ip
 800e592:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e594:	7acb      	ldrb	r3, [r1, #11]
 800e596:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800e59a:	ea83 030c 	eor.w	r3, r3, ip
 800e59e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e5a0:	7b0b      	ldrb	r3, [r1, #12]
 800e5a2:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800e5a6:	ea83 030c 	eor.w	r3, r3, ip
 800e5aa:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e5ac:	7b4b      	ldrb	r3, [r1, #13]
 800e5ae:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e5b2:	ea83 030c 	eor.w	r3, r3, ip
 800e5b6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e5b8:	7b8b      	ldrb	r3, [r1, #14]
 800e5ba:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800e5be:	ea83 030c 	eor.w	r3, r3, ip
 800e5c2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5c4:	7bcb      	ldrb	r3, [r1, #15]
 800e5c6:	7bd2      	ldrb	r2, [r2, #15]
 800e5c8:	4053      	eors	r3, r2
 800e5ca:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e5cc:	4770      	bx	lr

0800e5ce <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e5ce:	b508      	push	{r3, lr}
    xor_block(d, k);
 800e5d0:	f7ff ff5d 	bl	800e48e <xor_block>
}
 800e5d4:	bd08      	pop	{r3, pc}
	...

0800e5d8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e5d8:	7802      	ldrb	r2, [r0, #0]
 800e5da:	4b18      	ldr	r3, [pc, #96]	; (800e63c <shift_sub_rows+0x64>)
 800e5dc:	5c9a      	ldrb	r2, [r3, r2]
 800e5de:	7002      	strb	r2, [r0, #0]
 800e5e0:	7902      	ldrb	r2, [r0, #4]
 800e5e2:	5c9a      	ldrb	r2, [r3, r2]
 800e5e4:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e5e6:	7a02      	ldrb	r2, [r0, #8]
 800e5e8:	5c9a      	ldrb	r2, [r3, r2]
 800e5ea:	7202      	strb	r2, [r0, #8]
 800e5ec:	7b02      	ldrb	r2, [r0, #12]
 800e5ee:	5c9a      	ldrb	r2, [r3, r2]
 800e5f0:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e5f2:	7842      	ldrb	r2, [r0, #1]
 800e5f4:	7941      	ldrb	r1, [r0, #5]
 800e5f6:	5c59      	ldrb	r1, [r3, r1]
 800e5f8:	7041      	strb	r1, [r0, #1]
 800e5fa:	7a41      	ldrb	r1, [r0, #9]
 800e5fc:	5c59      	ldrb	r1, [r3, r1]
 800e5fe:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e600:	7b41      	ldrb	r1, [r0, #13]
 800e602:	5c59      	ldrb	r1, [r3, r1]
 800e604:	7241      	strb	r1, [r0, #9]
 800e606:	5c9a      	ldrb	r2, [r3, r2]
 800e608:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e60a:	7882      	ldrb	r2, [r0, #2]
 800e60c:	7a81      	ldrb	r1, [r0, #10]
 800e60e:	5c59      	ldrb	r1, [r3, r1]
 800e610:	7081      	strb	r1, [r0, #2]
 800e612:	5c9a      	ldrb	r2, [r3, r2]
 800e614:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e616:	7982      	ldrb	r2, [r0, #6]
 800e618:	7b81      	ldrb	r1, [r0, #14]
 800e61a:	5c59      	ldrb	r1, [r3, r1]
 800e61c:	7181      	strb	r1, [r0, #6]
 800e61e:	5c9a      	ldrb	r2, [r3, r2]
 800e620:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e622:	7bc2      	ldrb	r2, [r0, #15]
 800e624:	7ac1      	ldrb	r1, [r0, #11]
 800e626:	5c59      	ldrb	r1, [r3, r1]
 800e628:	73c1      	strb	r1, [r0, #15]
 800e62a:	79c1      	ldrb	r1, [r0, #7]
 800e62c:	5c59      	ldrb	r1, [r3, r1]
 800e62e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e630:	78c1      	ldrb	r1, [r0, #3]
 800e632:	5c59      	ldrb	r1, [r3, r1]
 800e634:	71c1      	strb	r1, [r0, #7]
 800e636:	5c9b      	ldrb	r3, [r3, r2]
 800e638:	70c3      	strb	r3, [r0, #3]
}
 800e63a:	4770      	bx	lr
 800e63c:	08012b60 	.word	0x08012b60

0800e640 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	4604      	mov	r4, r0
    block_copy(st, dt);
 800e648:	4601      	mov	r1, r0
 800e64a:	4668      	mov	r0, sp
 800e64c:	f7ff fef3 	bl	800e436 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e650:	f89d c000 	ldrb.w	ip, [sp]
 800e654:	4b6a      	ldr	r3, [pc, #424]	; (800e800 <mix_sub_columns+0x1c0>)
 800e656:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e65a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e65e:	4a69      	ldr	r2, [pc, #420]	; (800e804 <mix_sub_columns+0x1c4>)
 800e660:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e664:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800e668:	4967      	ldr	r1, [pc, #412]	; (800e808 <mix_sub_columns+0x1c8>)
 800e66a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e66e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800e672:	5dce      	ldrb	r6, [r1, r7]
 800e674:	ea80 0009 	eor.w	r0, r0, r9
 800e678:	4068      	eors	r0, r5
 800e67a:	4070      	eors	r0, r6
 800e67c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e67e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e682:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e686:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e68a:	ea80 0a0a 	eor.w	sl, r0, sl
 800e68e:	ea89 090a 	eor.w	r9, r9, sl
 800e692:	ea86 0609 	eor.w	r6, r6, r9
 800e696:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e698:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e69c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e6a0:	5dd6      	ldrb	r6, [r2, r7]
 800e6a2:	ea80 0008 	eor.w	r0, r0, r8
 800e6a6:	ea8e 0000 	eor.w	r0, lr, r0
 800e6aa:	4070      	eors	r0, r6
 800e6ac:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e6ae:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e6b2:	5dd8      	ldrb	r0, [r3, r7]
 800e6b4:	ea86 0608 	eor.w	r6, r6, r8
 800e6b8:	4075      	eors	r5, r6
 800e6ba:	4045      	eors	r5, r0
 800e6bc:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e6be:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e6c2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e6c6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800e6ca:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e6ce:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800e6d2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e6d6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800e6da:	5dce      	ldrb	r6, [r1, r7]
 800e6dc:	ea80 0009 	eor.w	r0, r0, r9
 800e6e0:	4068      	eors	r0, r5
 800e6e2:	4070      	eors	r0, r6
 800e6e4:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e6e6:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e6ea:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e6ee:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e6f2:	ea80 0a0a 	eor.w	sl, r0, sl
 800e6f6:	ea89 090a 	eor.w	r9, r9, sl
 800e6fa:	ea86 0609 	eor.w	r6, r6, r9
 800e6fe:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e700:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e704:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e708:	5dd6      	ldrb	r6, [r2, r7]
 800e70a:	ea80 0008 	eor.w	r0, r0, r8
 800e70e:	ea8e 0000 	eor.w	r0, lr, r0
 800e712:	4070      	eors	r0, r6
 800e714:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e716:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e71a:	5dd8      	ldrb	r0, [r3, r7]
 800e71c:	ea86 0608 	eor.w	r6, r6, r8
 800e720:	4075      	eors	r5, r6
 800e722:	4045      	eors	r5, r0
 800e724:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e726:	f89d c008 	ldrb.w	ip, [sp, #8]
 800e72a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e72e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800e732:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e736:	f89d e002 	ldrb.w	lr, [sp, #2]
 800e73a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e73e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800e742:	5dce      	ldrb	r6, [r1, r7]
 800e744:	ea80 0009 	eor.w	r0, r0, r9
 800e748:	4068      	eors	r0, r5
 800e74a:	4070      	eors	r0, r6
 800e74c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e74e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e752:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e756:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e75a:	ea80 0a0a 	eor.w	sl, r0, sl
 800e75e:	ea89 090a 	eor.w	r9, r9, sl
 800e762:	ea86 0609 	eor.w	r6, r6, r9
 800e766:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e768:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e76c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e770:	5dd6      	ldrb	r6, [r2, r7]
 800e772:	ea80 0008 	eor.w	r0, r0, r8
 800e776:	ea8e 0000 	eor.w	r0, lr, r0
 800e77a:	4070      	eors	r0, r6
 800e77c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e77e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e782:	5dd8      	ldrb	r0, [r3, r7]
 800e784:	ea86 0608 	eor.w	r6, r6, r8
 800e788:	4075      	eors	r5, r6
 800e78a:	4045      	eors	r5, r0
 800e78c:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e78e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800e792:	5d98      	ldrb	r0, [r3, r6]
 800e794:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800e798:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e79c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800e7a0:	f811 c007 	ldrb.w	ip, [r1, r7]
 800e7a4:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e7a8:	f811 e005 	ldrb.w	lr, [r1, r5]
 800e7ac:	ea80 0009 	eor.w	r0, r0, r9
 800e7b0:	ea8c 0000 	eor.w	r0, ip, r0
 800e7b4:	ea8e 0000 	eor.w	r0, lr, r0
 800e7b8:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e7ba:	5d88      	ldrb	r0, [r1, r6]
 800e7bc:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e7c0:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e7c4:	ea80 0a0a 	eor.w	sl, r0, sl
 800e7c8:	ea89 090a 	eor.w	r9, r9, sl
 800e7cc:	ea8e 0e09 	eor.w	lr, lr, r9
 800e7d0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e7d4:	f811 1008 	ldrb.w	r1, [r1, r8]
 800e7d8:	f813 e007 	ldrb.w	lr, [r3, r7]
 800e7dc:	5d57      	ldrb	r7, [r2, r5]
 800e7de:	4048      	eors	r0, r1
 800e7e0:	ea8e 0000 	eor.w	r0, lr, r0
 800e7e4:	4078      	eors	r0, r7
 800e7e6:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e7e8:	5d92      	ldrb	r2, [r2, r6]
 800e7ea:	5d5b      	ldrb	r3, [r3, r5]
 800e7ec:	4051      	eors	r1, r2
 800e7ee:	ea8c 0c01 	eor.w	ip, ip, r1
 800e7f2:	ea83 0c0c 	eor.w	ip, r3, ip
 800e7f6:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800e7fa:	b004      	add	sp, #16
 800e7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e800:	08012960 	.word	0x08012960
 800e804:	08012a60 	.word	0x08012a60
 800e808:	08012b60 	.word	0x08012b60

0800e80c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e810:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800e812:	f1a1 0310 	sub.w	r3, r1, #16
 800e816:	b2da      	uxtb	r2, r3
 800e818:	2a10      	cmp	r2, #16
 800e81a:	d807      	bhi.n	800e82c <lorawan_aes_set_key+0x20>
 800e81c:	460d      	mov	r5, r1
 800e81e:	2301      	movs	r3, #1
 800e820:	4093      	lsls	r3, r2
 800e822:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e82a:	b92b      	cbnz	r3, 800e838 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800e832:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800e834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800e838:	460a      	mov	r2, r1
 800e83a:	4601      	mov	r1, r0
 800e83c:	4620      	mov	r0, r4
 800e83e:	f7ff fe1b 	bl	800e478 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e842:	f105 031c 	add.w	r3, r5, #28
 800e846:	b2db      	uxtb	r3, r3
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800e84e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e852:	3b01      	subs	r3, #1
 800e854:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e858:	462b      	mov	r3, r5
 800e85a:	f04f 0c01 	mov.w	ip, #1
 800e85e:	e023      	b.n	800e8a8 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800e860:	2d18      	cmp	r5, #24
 800e862:	d901      	bls.n	800e868 <lorawan_aes_set_key+0x5c>
 800e864:	2a10      	cmp	r2, #16
 800e866:	d047      	beq.n	800e8f8 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800e868:	1b5a      	subs	r2, r3, r5
 800e86a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e86c:	f814 9002 	ldrb.w	r9, [r4, r2]
 800e870:	ea89 0808 	eor.w	r8, r9, r8
 800e874:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e878:	f102 0801 	add.w	r8, r2, #1
 800e87c:	f814 8008 	ldrb.w	r8, [r4, r8]
 800e880:	f100 0901 	add.w	r9, r0, #1
 800e884:	ea88 0707 	eor.w	r7, r8, r7
 800e888:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e88c:	1c97      	adds	r7, r2, #2
 800e88e:	5de7      	ldrb	r7, [r4, r7]
 800e890:	f100 0802 	add.w	r8, r0, #2
 800e894:	407e      	eors	r6, r7
 800e896:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e89a:	3203      	adds	r2, #3
 800e89c:	5ca6      	ldrb	r6, [r4, r2]
 800e89e:	1cc2      	adds	r2, r0, #3
 800e8a0:	4071      	eors	r1, r6
 800e8a2:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	4573      	cmp	r3, lr
 800e8aa:	d22c      	bcs.n	800e906 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	1f1a      	subs	r2, r3, #4
 800e8b0:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800e8b4:	1eda      	subs	r2, r3, #3
 800e8b6:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800e8b8:	1e9a      	subs	r2, r3, #2
 800e8ba:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800e8bc:	1e5a      	subs	r2, r3, #1
 800e8be:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800e8c0:	fbb3 f2f5 	udiv	r2, r3, r5
 800e8c4:	fb05 3212 	mls	r2, r5, r2, r3
 800e8c8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800e8cc:	d1c8      	bne.n	800e860 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800e8ce:	4a0f      	ldr	r2, [pc, #60]	; (800e90c <lorawan_aes_set_key+0x100>)
 800e8d0:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e8d4:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800e8d8:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800e8da:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800e8dc:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800e8e0:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800e8e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e8e8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800e8ec:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800e8f0:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800e8f4:	46c8      	mov	r8, r9
 800e8f6:	e7b7      	b.n	800e868 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800e8f8:	4a04      	ldr	r2, [pc, #16]	; (800e90c <lorawan_aes_set_key+0x100>)
 800e8fa:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800e8fe:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800e900:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800e902:	5c51      	ldrb	r1, [r2, r1]
 800e904:	e7b0      	b.n	800e868 <lorawan_aes_set_key+0x5c>
    return 0;
 800e906:	2000      	movs	r0, #0
 800e908:	e794      	b.n	800e834 <lorawan_aes_set_key+0x28>
 800e90a:	bf00      	nop
 800e90c:	08012b60 	.word	0x08012b60

0800e910 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800e910:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800e914:	b31b      	cbz	r3, 800e95e <lorawan_aes_encrypt+0x4e>
{
 800e916:	b570      	push	{r4, r5, r6, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	460e      	mov	r6, r1
 800e91c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e91e:	4601      	mov	r1, r0
 800e920:	4668      	mov	r0, sp
 800e922:	f7ff fdf5 	bl	800e510 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e926:	2401      	movs	r4, #1
 800e928:	e009      	b.n	800e93e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e92a:	4668      	mov	r0, sp
 800e92c:	f7ff fe88 	bl	800e640 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e930:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800e934:	4668      	mov	r0, sp
 800e936:	f7ff fe4a 	bl	800e5ce <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e93a:	3401      	adds	r4, #1
 800e93c:	b2e4      	uxtb	r4, r4
 800e93e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800e942:	42a3      	cmp	r3, r4
 800e944:	d8f1      	bhi.n	800e92a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e946:	4668      	mov	r0, sp
 800e948:	f7ff fe46 	bl	800e5d8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e94c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800e950:	4669      	mov	r1, sp
 800e952:	4630      	mov	r0, r6
 800e954:	f7ff fddc 	bl	800e510 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e958:	2000      	movs	r0, #0
}
 800e95a:	b004      	add	sp, #16
 800e95c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800e95e:	20ff      	movs	r0, #255	; 0xff
}
 800e960:	4770      	bx	lr
	...

0800e964 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e964:	2300      	movs	r3, #0
 800e966:	2b09      	cmp	r3, #9
 800e968:	d817      	bhi.n	800e99a <GetKeyByID+0x36>
{
 800e96a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e96c:	4a0c      	ldr	r2, [pc, #48]	; (800e9a0 <GetKeyByID+0x3c>)
 800e96e:	6814      	ldr	r4, [r2, #0]
 800e970:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e974:	4422      	add	r2, r4
 800e976:	7c12      	ldrb	r2, [r2, #16]
 800e978:	4282      	cmp	r2, r0
 800e97a:	d006      	beq.n	800e98a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e97c:	3301      	adds	r3, #1
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b09      	cmp	r3, #9
 800e982:	d9f3      	bls.n	800e96c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e984:	2003      	movs	r0, #3
}
 800e986:	bc10      	pop	{r4}
 800e988:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e98a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800e98e:	f10c 0c10 	add.w	ip, ip, #16
 800e992:	4464      	add	r4, ip
 800e994:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e996:	2000      	movs	r0, #0
 800e998:	e7f5      	b.n	800e986 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e99a:	2003      	movs	r0, #3
}
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	20000c44 	.word	0x20000c44

0800e9a4 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	b0cc      	sub	sp, #304	; 0x130
 800e9aa:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e9ac:	b3a9      	cbz	r1, 800ea1a <ComputeCmac+0x76>
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	4617      	mov	r7, r2
 800e9b2:	461c      	mov	r4, r3
 800e9b4:	4688      	mov	r8, r1
 800e9b6:	b396      	cbz	r6, 800ea1e <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e9b8:	a802      	add	r0, sp, #8
 800e9ba:	f7ff fbd7 	bl	800e16c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e9be:	a901      	add	r1, sp, #4
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f7ff ffcf 	bl	800e964 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	b118      	cbz	r0, 800e9d2 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	b04c      	add	sp, #304	; 0x130
 800e9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e9d2:	9901      	ldr	r1, [sp, #4]
 800e9d4:	3101      	adds	r1, #1
 800e9d6:	a802      	add	r0, sp, #8
 800e9d8:	f7ff fbd7 	bl	800e18a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800e9dc:	b125      	cbz	r5, 800e9e8 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800e9de:	2210      	movs	r2, #16
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	a802      	add	r0, sp, #8
 800e9e4:	f7ff fbd8 	bl	800e198 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e9e8:	463a      	mov	r2, r7
 800e9ea:	4641      	mov	r1, r8
 800e9ec:	a802      	add	r0, sp, #8
 800e9ee:	f7ff fbd3 	bl	800e198 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e9f2:	a902      	add	r1, sp, #8
 800e9f4:	a848      	add	r0, sp, #288	; 0x120
 800e9f6:	f7ff fc3d 	bl	800e274 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800e9fa:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800e9fe:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800ea02:	041b      	lsls	r3, r3, #16
 800ea04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea08:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800ea0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800ea10:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ea14:	4313      	orrs	r3, r2
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	e7d7      	b.n	800e9ca <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800ea1a:	2402      	movs	r4, #2
 800ea1c:	e7d5      	b.n	800e9ca <ComputeCmac+0x26>
 800ea1e:	2402      	movs	r4, #2
 800ea20:	e7d3      	b.n	800e9ca <ComputeCmac+0x26>
	...

0800ea24 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ea24:	b140      	cbz	r0, 800ea38 <SecureElementInit+0x14>
{
 800ea26:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ea28:	4a04      	ldr	r2, [pc, #16]	; (800ea3c <SecureElementInit+0x18>)
 800ea2a:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ea2c:	22c0      	movs	r2, #192	; 0xc0
 800ea2e:	4904      	ldr	r1, [pc, #16]	; (800ea40 <SecureElementInit+0x1c>)
 800ea30:	f000 faa3 	bl	800ef7a <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ea34:	2000      	movs	r0, #0
}
 800ea36:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ea38:	2002      	movs	r0, #2
}
 800ea3a:	4770      	bx	lr
 800ea3c:	20000c44 	.word	0x20000c44
 800ea40:	0803e500 	.word	0x0803e500

0800ea44 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ea44:	2300      	movs	r3, #0
 800ea46:	2b09      	cmp	r3, #9
 800ea48:	d817      	bhi.n	800ea7a <SecureElementGetKeyByID+0x36>
{
 800ea4a:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ea4c:	4a0c      	ldr	r2, [pc, #48]	; (800ea80 <SecureElementGetKeyByID+0x3c>)
 800ea4e:	6814      	ldr	r4, [r2, #0]
 800ea50:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ea54:	4422      	add	r2, r4
 800ea56:	7c12      	ldrb	r2, [r2, #16]
 800ea58:	4282      	cmp	r2, r0
 800ea5a:	d006      	beq.n	800ea6a <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b09      	cmp	r3, #9
 800ea62:	d9f3      	bls.n	800ea4c <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ea64:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ea66:	bc10      	pop	{r4}
 800ea68:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800ea6a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800ea6e:	f10c 0c10 	add.w	ip, ip, #16
 800ea72:	4464      	add	r4, ip
 800ea74:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ea76:	2000      	movs	r0, #0
 800ea78:	e7f5      	b.n	800ea66 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ea7a:	2003      	movs	r0, #3
}
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	20000c44 	.word	0x20000c44

0800ea84 <PrintKey>:
{
 800ea84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea88:	b095      	sub	sp, #84	; 0x54
 800ea8a:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ea8c:	a913      	add	r1, sp, #76	; 0x4c
 800ea8e:	f7ff ffd9 	bl	800ea44 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d154      	bne.n	800eb40 <PrintKey+0xbc>
        if (key == APP_KEY)
 800ea96:	b1b4      	cbz	r4, 800eac6 <PrintKey+0x42>
        else if (key == NWK_KEY)
 800ea98:	2c01      	cmp	r4, #1
 800ea9a:	d054      	beq.n	800eb46 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800ea9c:	2c03      	cmp	r4, #3
 800ea9e:	d059      	beq.n	800eb54 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800eaa0:	2c02      	cmp	r4, #2
 800eaa2:	d05e      	beq.n	800eb62 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800eaa4:	2c04      	cmp	r4, #4
 800eaa6:	d063      	beq.n	800eb70 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800eaa8:	2c7f      	cmp	r4, #127	; 0x7f
 800eaaa:	d068      	beq.n	800eb7e <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800eaac:	2c80      	cmp	r4, #128	; 0x80
 800eaae:	d06d      	beq.n	800eb8c <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800eab0:	2c81      	cmp	r4, #129	; 0x81
 800eab2:	d072      	beq.n	800eb9a <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800eab4:	2c82      	cmp	r4, #130	; 0x82
 800eab6:	d10c      	bne.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800eab8:	4b3b      	ldr	r3, [pc, #236]	; (800eba8 <PrintKey+0x124>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	4611      	mov	r1, r2
 800eabe:	2002      	movs	r0, #2
 800eac0:	f002 fcf6 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eac4:	e005      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800eac6:	4b39      	ldr	r3, [pc, #228]	; (800ebac <PrintKey+0x128>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	4611      	mov	r1, r2
 800eacc:	2002      	movs	r0, #2
 800eace:	f002 fcef 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ead2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ead4:	785a      	ldrb	r2, [r3, #1]
 800ead6:	9210      	str	r2, [sp, #64]	; 0x40
 800ead8:	7899      	ldrb	r1, [r3, #2]
 800eada:	9111      	str	r1, [sp, #68]	; 0x44
 800eadc:	78da      	ldrb	r2, [r3, #3]
 800eade:	7919      	ldrb	r1, [r3, #4]
 800eae0:	7958      	ldrb	r0, [r3, #5]
 800eae2:	799c      	ldrb	r4, [r3, #6]
 800eae4:	79dd      	ldrb	r5, [r3, #7]
 800eae6:	7a1e      	ldrb	r6, [r3, #8]
 800eae8:	7a5f      	ldrb	r7, [r3, #9]
 800eaea:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800eaee:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800eaf2:	f893 800c 	ldrb.w	r8, [r3, #12]
 800eaf6:	f893 900d 	ldrb.w	r9, [r3, #13]
 800eafa:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800eafe:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800eb02:	7c1b      	ldrb	r3, [r3, #16]
 800eb04:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb06:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800eb0a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800eb0e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eb12:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800eb16:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800eb1a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800eb1e:	9708      	str	r7, [sp, #32]
 800eb20:	9607      	str	r6, [sp, #28]
 800eb22:	9506      	str	r5, [sp, #24]
 800eb24:	9405      	str	r4, [sp, #20]
 800eb26:	9004      	str	r0, [sp, #16]
 800eb28:	9103      	str	r1, [sp, #12]
 800eb2a:	9202      	str	r2, [sp, #8]
 800eb2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb2e:	9101      	str	r1, [sp, #4]
 800eb30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb32:	9200      	str	r2, [sp, #0]
 800eb34:	4b1e      	ldr	r3, [pc, #120]	; (800ebb0 <PrintKey+0x12c>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	4611      	mov	r1, r2
 800eb3a:	2002      	movs	r0, #2
 800eb3c:	f002 fcb8 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb40:	b015      	add	sp, #84	; 0x54
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800eb46:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <PrintKey+0x130>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	2002      	movs	r0, #2
 800eb4e:	f002 fcaf 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb52:	e7be      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800eb54:	4b18      	ldr	r3, [pc, #96]	; (800ebb8 <PrintKey+0x134>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	4611      	mov	r1, r2
 800eb5a:	2002      	movs	r0, #2
 800eb5c:	f002 fca8 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb60:	e7b7      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800eb62:	4b16      	ldr	r3, [pc, #88]	; (800ebbc <PrintKey+0x138>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	4611      	mov	r1, r2
 800eb68:	2002      	movs	r0, #2
 800eb6a:	f002 fca1 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb6e:	e7b0      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800eb70:	4b13      	ldr	r3, [pc, #76]	; (800ebc0 <PrintKey+0x13c>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	4611      	mov	r1, r2
 800eb76:	2002      	movs	r0, #2
 800eb78:	f002 fc9a 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb7c:	e7a9      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800eb7e:	4b11      	ldr	r3, [pc, #68]	; (800ebc4 <PrintKey+0x140>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	4611      	mov	r1, r2
 800eb84:	2002      	movs	r0, #2
 800eb86:	f002 fc93 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb8a:	e7a2      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800eb8c:	4b0e      	ldr	r3, [pc, #56]	; (800ebc8 <PrintKey+0x144>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4611      	mov	r1, r2
 800eb92:	2002      	movs	r0, #2
 800eb94:	f002 fc8c 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eb98:	e79b      	b.n	800ead2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <PrintKey+0x148>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4611      	mov	r1, r2
 800eba0:	2002      	movs	r0, #2
 800eba2:	f002 fc85 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800eba6:	e794      	b.n	800ead2 <PrintKey+0x4e>
 800eba8:	08012d20 	.word	0x08012d20
 800ebac:	08012c60 	.word	0x08012c60
 800ebb0:	08012d38 	.word	0x08012d38
 800ebb4:	08012c78 	.word	0x08012c78
 800ebb8:	08012c90 	.word	0x08012c90
 800ebbc:	08012ca8 	.word	0x08012ca8
 800ebc0:	08012cc0 	.word	0x08012cc0
 800ebc4:	08012cd8 	.word	0x08012cd8
 800ebc8:	08012cf0 	.word	0x08012cf0
 800ebcc:	08012d08 	.word	0x08012d08

0800ebd0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd2:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ebd4:	4b28      	ldr	r3, [pc, #160]	; (800ec78 <SecureElementPrintKeys+0xa8>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	4611      	mov	r1, r2
 800ebda:	2002      	movs	r0, #2
 800ebdc:	f002 fc68 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	f7ff ff4f 	bl	800ea84 <PrintKey>
    PrintKey(NWK_KEY);
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	f7ff ff4c 	bl	800ea84 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ebec:	4b23      	ldr	r3, [pc, #140]	; (800ec7c <SecureElementPrintKeys+0xac>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	2002      	movs	r0, #2
 800ebf4:	f002 fc5c 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ebf8:	2003      	movs	r0, #3
 800ebfa:	f7ff ff43 	bl	800ea84 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ebfe:	2002      	movs	r0, #2
 800ec00:	f7ff ff40 	bl	800ea84 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800ec04:	4b1e      	ldr	r3, [pc, #120]	; (800ec80 <SecureElementPrintKeys+0xb0>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	4611      	mov	r1, r2
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f002 fc50 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ec10:	4c1c      	ldr	r4, [pc, #112]	; (800ec84 <SecureElementPrintKeys+0xb4>)
 800ec12:	6823      	ldr	r3, [r4, #0]
 800ec14:	781a      	ldrb	r2, [r3, #0]
 800ec16:	7859      	ldrb	r1, [r3, #1]
 800ec18:	7898      	ldrb	r0, [r3, #2]
 800ec1a:	78dd      	ldrb	r5, [r3, #3]
 800ec1c:	791e      	ldrb	r6, [r3, #4]
 800ec1e:	795f      	ldrb	r7, [r3, #5]
 800ec20:	f893 c006 	ldrb.w	ip, [r3, #6]
 800ec24:	79db      	ldrb	r3, [r3, #7]
 800ec26:	9307      	str	r3, [sp, #28]
 800ec28:	f8cd c018 	str.w	ip, [sp, #24]
 800ec2c:	9705      	str	r7, [sp, #20]
 800ec2e:	9604      	str	r6, [sp, #16]
 800ec30:	9503      	str	r5, [sp, #12]
 800ec32:	9002      	str	r0, [sp, #8]
 800ec34:	9101      	str	r1, [sp, #4]
 800ec36:	9200      	str	r2, [sp, #0]
 800ec38:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <SecureElementPrintKeys+0xb8>)
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	2002      	movs	r0, #2
 800ec40:	f002 fc36 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	7a1a      	ldrb	r2, [r3, #8]
 800ec48:	7a59      	ldrb	r1, [r3, #9]
 800ec4a:	7a98      	ldrb	r0, [r3, #10]
 800ec4c:	7adc      	ldrb	r4, [r3, #11]
 800ec4e:	7b1d      	ldrb	r5, [r3, #12]
 800ec50:	7b5e      	ldrb	r6, [r3, #13]
 800ec52:	7b9f      	ldrb	r7, [r3, #14]
 800ec54:	7bdb      	ldrb	r3, [r3, #15]
 800ec56:	9307      	str	r3, [sp, #28]
 800ec58:	9706      	str	r7, [sp, #24]
 800ec5a:	9605      	str	r6, [sp, #20]
 800ec5c:	9504      	str	r5, [sp, #16]
 800ec5e:	9403      	str	r4, [sp, #12]
 800ec60:	9002      	str	r0, [sp, #8]
 800ec62:	9101      	str	r1, [sp, #4]
 800ec64:	9200      	str	r2, [sp, #0]
 800ec66:	4b09      	ldr	r3, [pc, #36]	; (800ec8c <SecureElementPrintKeys+0xbc>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	2002      	movs	r0, #2
 800ec6e:	f002 fc1f 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800ec72:	2000      	movs	r0, #0
 800ec74:	b009      	add	sp, #36	; 0x24
 800ec76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec78:	08012d8c 	.word	0x08012d8c
 800ec7c:	08012da4 	.word	0x08012da4
 800ec80:	08012dbc 	.word	0x08012dbc
 800ec84:	20000c44 	.word	0x20000c44
 800ec88:	08012dd4 	.word	0x08012dd4
 800ec8c:	08012e14 	.word	0x08012e14

0800ec90 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ec90:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ec92:	2004      	movs	r0, #4
 800ec94:	f7ff fef6 	bl	800ea84 <PrintKey>
    PrintKey(MC_KE_KEY);
 800ec98:	207f      	movs	r0, #127	; 0x7f
 800ec9a:	f7ff fef3 	bl	800ea84 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800ec9e:	2002      	movs	r0, #2
 800eca0:	f7ff fef0 	bl	800ea84 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800eca4:	2003      	movs	r0, #3
 800eca6:	f7ff feed 	bl	800ea84 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800ecaa:	2000      	movs	r0, #0
 800ecac:	bd08      	pop	{r3, pc}

0800ecae <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ecae:	2b7e      	cmp	r3, #126	; 0x7e
 800ecb0:	d80a      	bhi.n	800ecc8 <SecureElementComputeAesCmac+0x1a>
{
 800ecb2:	b500      	push	{lr}
 800ecb4:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ecb6:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ecba:	f8cd c000 	str.w	ip, [sp]
 800ecbe:	f7ff fe71 	bl	800e9a4 <ComputeCmac>
}
 800ecc2:	b003      	add	sp, #12
 800ecc4:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecc8:	2003      	movs	r0, #3
}
 800ecca:	4770      	bx	lr

0800eccc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800eccc:	b190      	cbz	r0, 800ecf4 <SecureElementVerifyAesCmac+0x28>
{
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	468c      	mov	ip, r1
 800ecd4:	4614      	mov	r4, r2
 800ecd6:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800ecd8:	2000      	movs	r0, #0
 800ecda:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ecdc:	aa03      	add	r2, sp, #12
 800ecde:	9200      	str	r2, [sp, #0]
 800ece0:	4662      	mov	r2, ip
 800ece2:	f7ff fe5f 	bl	800e9a4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ece6:	b918      	cbnz	r0, 800ecf0 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800ece8:	9b03      	ldr	r3, [sp, #12]
 800ecea:	42a3      	cmp	r3, r4
 800ecec:	d000      	beq.n	800ecf0 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ecee:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800ecf0:	b004      	add	sp, #16
 800ecf2:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ecf4:	2002      	movs	r0, #2
}
 800ecf6:	4770      	bx	lr

0800ecf8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800ecf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfc:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800ecfe:	b350      	cbz	r0, 800ed56 <SecureElementAesEncrypt+0x5e>
 800ed00:	460c      	mov	r4, r1
 800ed02:	4615      	mov	r5, r2
 800ed04:	461e      	mov	r6, r3
 800ed06:	4607      	mov	r7, r0
 800ed08:	b343      	cbz	r3, 800ed5c <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800ed0a:	f011 0f0f 	tst.w	r1, #15
 800ed0e:	d128      	bne.n	800ed62 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ed10:	22f0      	movs	r2, #240	; 0xf0
 800ed12:	2100      	movs	r1, #0
 800ed14:	a801      	add	r0, sp, #4
 800ed16:	f000 f948 	bl	800efaa <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ed1a:	4669      	mov	r1, sp
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f7ff fe21 	bl	800e964 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ed22:	4680      	mov	r8, r0
 800ed24:	b118      	cbz	r0, 800ed2e <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800ed26:	4640      	mov	r0, r8
 800ed28:	b03e      	add	sp, #248	; 0xf8
 800ed2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800ed2e:	aa01      	add	r2, sp, #4
 800ed30:	2110      	movs	r1, #16
 800ed32:	9800      	ldr	r0, [sp, #0]
 800ed34:	3001      	adds	r0, #1
 800ed36:	f7ff fd69 	bl	800e80c <lorawan_aes_set_key>
        uint8_t block = 0;
 800ed3a:	4645      	mov	r5, r8
        while( size != 0 )
 800ed3c:	e008      	b.n	800ed50 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800ed3e:	aa01      	add	r2, sp, #4
 800ed40:	1971      	adds	r1, r6, r5
 800ed42:	1978      	adds	r0, r7, r5
 800ed44:	f7ff fde4 	bl	800e910 <lorawan_aes_encrypt>
            block = block + 16;
 800ed48:	3510      	adds	r5, #16
 800ed4a:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800ed4c:	3c10      	subs	r4, #16
 800ed4e:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800ed50:	2c00      	cmp	r4, #0
 800ed52:	d1f4      	bne.n	800ed3e <SecureElementAesEncrypt+0x46>
 800ed54:	e7e7      	b.n	800ed26 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800ed56:	f04f 0802 	mov.w	r8, #2
 800ed5a:	e7e4      	b.n	800ed26 <SecureElementAesEncrypt+0x2e>
 800ed5c:	f04f 0802 	mov.w	r8, #2
 800ed60:	e7e1      	b.n	800ed26 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ed62:	f04f 0805 	mov.w	r8, #5
 800ed66:	e7de      	b.n	800ed26 <SecureElementAesEncrypt+0x2e>

0800ed68 <SecureElementSetKey>:
{
 800ed68:	b530      	push	{r4, r5, lr}
 800ed6a:	b085      	sub	sp, #20
    if( key == NULL )
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	d038      	beq.n	800ede2 <SecureElementSetKey+0x7a>
 800ed70:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed72:	2300      	movs	r3, #0
 800ed74:	2b09      	cmp	r3, #9
 800ed76:	d830      	bhi.n	800edda <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ed78:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <SecureElementSetKey+0x80>)
 800ed7a:	6811      	ldr	r1, [r2, #0]
 800ed7c:	461c      	mov	r4, r3
 800ed7e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ed82:	440a      	add	r2, r1
 800ed84:	7c12      	ldrb	r2, [r2, #16]
 800ed86:	4282      	cmp	r2, r0
 800ed88:	d002      	beq.n	800ed90 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	e7f1      	b.n	800ed74 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800ed90:	2880      	cmp	r0, #128	; 0x80
 800ed92:	d00a      	beq.n	800edaa <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ed94:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800ed98:	3310      	adds	r3, #16
 800ed9a:	440b      	add	r3, r1
 800ed9c:	2210      	movs	r2, #16
 800ed9e:	4661      	mov	r1, ip
 800eda0:	1c58      	adds	r0, r3, #1
 800eda2:	f000 f8ea 	bl	800ef7a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800eda6:	2500      	movs	r5, #0
 800eda8:	e018      	b.n	800eddc <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800edaa:	2300      	movs	r3, #0
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	9301      	str	r3, [sp, #4]
 800edb0:	9302      	str	r3, [sp, #8]
 800edb2:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800edb4:	466b      	mov	r3, sp
 800edb6:	227f      	movs	r2, #127	; 0x7f
 800edb8:	2110      	movs	r1, #16
 800edba:	4660      	mov	r0, ip
 800edbc:	f7ff ff9c 	bl	800ecf8 <SecureElementAesEncrypt>
 800edc0:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800edc2:	4b09      	ldr	r3, [pc, #36]	; (800ede8 <SecureElementSetKey+0x80>)
 800edc4:	6818      	ldr	r0, [r3, #0]
 800edc6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800edca:	3410      	adds	r4, #16
 800edcc:	4420      	add	r0, r4
 800edce:	2210      	movs	r2, #16
 800edd0:	4669      	mov	r1, sp
 800edd2:	3001      	adds	r0, #1
 800edd4:	f000 f8d1 	bl	800ef7a <memcpy1>
                return retval;
 800edd8:	e000      	b.n	800eddc <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800edda:	2503      	movs	r5, #3
}
 800eddc:	4628      	mov	r0, r5
 800edde:	b005      	add	sp, #20
 800ede0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ede2:	2502      	movs	r5, #2
 800ede4:	e7fa      	b.n	800eddc <SecureElementSetKey+0x74>
 800ede6:	bf00      	nop
 800ede8:	20000c44 	.word	0x20000c44

0800edec <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800edec:	b1d0      	cbz	r0, 800ee24 <SecureElementDeriveAndStoreKey+0x38>
{
 800edee:	b510      	push	{r4, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	4614      	mov	r4, r2
 800edf4:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800edf6:	2a7f      	cmp	r2, #127	; 0x7f
 800edf8:	d101      	bne.n	800edfe <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800edfa:	2904      	cmp	r1, #4
 800edfc:	d114      	bne.n	800ee28 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800edfe:	2300      	movs	r3, #0
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	9302      	str	r3, [sp, #8]
 800ee06:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800ee08:	466b      	mov	r3, sp
 800ee0a:	460a      	mov	r2, r1
 800ee0c:	2110      	movs	r1, #16
 800ee0e:	4660      	mov	r0, ip
 800ee10:	f7ff ff72 	bl	800ecf8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee14:	b108      	cbz	r0, 800ee1a <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ee16:	b004      	add	sp, #16
 800ee18:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800ee1a:	4669      	mov	r1, sp
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f7ff ffa3 	bl	800ed68 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee22:	e7f8      	b.n	800ee16 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800ee24:	2002      	movs	r0, #2
}
 800ee26:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee28:	2003      	movs	r0, #3
 800ee2a:	e7f4      	b.n	800ee16 <SecureElementDeriveAndStoreKey+0x2a>

0800ee2c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800ee2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee30:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800ee34:	9d07      	ldr	r5, [sp, #28]
 800ee36:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ee38:	b37b      	cbz	r3, 800ee9a <SecureElementProcessJoinAccept+0x6e>
 800ee3a:	4698      	mov	r8, r3
 800ee3c:	b37d      	cbz	r5, 800ee9e <SecureElementProcessJoinAccept+0x72>
 800ee3e:	b386      	cbz	r6, 800eea2 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ee40:	2c21      	cmp	r4, #33	; 0x21
 800ee42:	d830      	bhi.n	800eea6 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ee44:	b2a7      	uxth	r7, r4
 800ee46:	463a      	mov	r2, r7
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 f895 	bl	800ef7a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ee50:	1e79      	subs	r1, r7, #1
 800ee52:	1c6b      	adds	r3, r5, #1
 800ee54:	2201      	movs	r2, #1
 800ee56:	b289      	uxth	r1, r1
 800ee58:	eb08 0002 	add.w	r0, r8, r2
 800ee5c:	f7ff ff4c 	bl	800ecf8 <SecureElementAesEncrypt>
 800ee60:	bb20      	cbnz	r0, 800eeac <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ee62:	7aeb      	ldrb	r3, [r5, #11]
 800ee64:	09db      	lsrs	r3, r3, #7
 800ee66:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800ee68:	442c      	add	r4, r5
 800ee6a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800ee6e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800ee72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800ee76:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800ee7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800ee7e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800ee82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800ee86:	b99b      	cbnz	r3, 800eeb0 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ee88:	1f39      	subs	r1, r7, #4
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	b289      	uxth	r1, r1
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7ff ff1c 	bl	800eccc <SecureElementVerifyAesCmac>
 800ee94:	b140      	cbz	r0, 800eea8 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ee96:	2001      	movs	r0, #1
 800ee98:	e006      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800ee9a:	2002      	movs	r0, #2
 800ee9c:	e004      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>
 800ee9e:	2002      	movs	r0, #2
 800eea0:	e002      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>
 800eea2:	2002      	movs	r0, #2
 800eea4:	e000      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800eea6:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800eeac:	2007      	movs	r0, #7
 800eeae:	e7fb      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800eeb0:	2004      	movs	r0, #4
 800eeb2:	e7f9      	b.n	800eea8 <SecureElementProcessJoinAccept+0x7c>

0800eeb4 <SecureElementRandomNumber>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
    if( randomNum == NULL )
 800eeb4:	b138      	cbz	r0, 800eec6 <SecureElementRandomNumber+0x12>
{
 800eeb6:	b510      	push	{r4, lr}
 800eeb8:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 800eeba:	4b04      	ldr	r3, [pc, #16]	; (800eecc <SecureElementRandomNumber+0x18>)
 800eebc:	695b      	ldr	r3, [r3, #20]
 800eebe:	4798      	blx	r3
 800eec0:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800eec2:	2000      	movs	r0, #0
}
 800eec4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800eec6:	2002      	movs	r0, #2
}
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	08012ec4 	.word	0x08012ec4

0800eed0 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800eed0:	b140      	cbz	r0, 800eee4 <SecureElementSetDevEui+0x14>
{
 800eed2:	b508      	push	{r3, lr}
 800eed4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800eed6:	2208      	movs	r2, #8
 800eed8:	4b03      	ldr	r3, [pc, #12]	; (800eee8 <SecureElementSetDevEui+0x18>)
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	f000 f84d 	bl	800ef7a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800eee0:	2000      	movs	r0, #0
}
 800eee2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800eee4:	2002      	movs	r0, #2
}
 800eee6:	4770      	bx	lr
 800eee8:	20000c44 	.word	0x20000c44

0800eeec <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800eeec:	4b01      	ldr	r3, [pc, #4]	; (800eef4 <SecureElementGetDevEui+0x8>)
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	20000c44 	.word	0x20000c44

0800eef8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800eef8:	b148      	cbz	r0, 800ef0e <SecureElementSetJoinEui+0x16>
{
 800eefa:	b508      	push	{r3, lr}
 800eefc:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800eefe:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <SecureElementSetJoinEui+0x1c>)
 800ef00:	6818      	ldr	r0, [r3, #0]
 800ef02:	2208      	movs	r2, #8
 800ef04:	4410      	add	r0, r2
 800ef06:	f000 f838 	bl	800ef7a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ef0a:	2000      	movs	r0, #0
}
 800ef0c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ef0e:	2002      	movs	r0, #2
}
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20000c44 	.word	0x20000c44

0800ef18 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800ef18:	4b01      	ldr	r3, [pc, #4]	; (800ef20 <SecureElementGetJoinEui+0x8>)
 800ef1a:	6818      	ldr	r0, [r3, #0]
}
 800ef1c:	3008      	adds	r0, #8
 800ef1e:	4770      	bx	lr
 800ef20:	20000c44 	.word	0x20000c44

0800ef24 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800ef24:	4b09      	ldr	r3, [pc, #36]	; (800ef4c <rand1+0x28>)
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	4909      	ldr	r1, [pc, #36]	; (800ef50 <rand1+0x2c>)
 800ef2a:	f243 0039 	movw	r0, #12345	; 0x3039
 800ef2e:	fb01 0002 	mla	r0, r1, r2, r0
 800ef32:	6018      	str	r0, [r3, #0]
 800ef34:	2303      	movs	r3, #3
 800ef36:	fba3 2300 	umull	r2, r3, r3, r0
 800ef3a:	1ac2      	subs	r2, r0, r3
 800ef3c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ef40:	0f9b      	lsrs	r3, r3, #30
 800ef42:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800ef46:	1ac0      	subs	r0, r0, r3
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	20000114 	.word	0x20000114
 800ef50:	41c64e6d 	.word	0x41c64e6d

0800ef54 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800ef54:	4b01      	ldr	r3, [pc, #4]	; (800ef5c <srand1+0x8>)
 800ef56:	6018      	str	r0, [r3, #0]
}
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20000114 	.word	0x20000114

0800ef60 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800ef60:	b538      	push	{r3, r4, r5, lr}
 800ef62:	4605      	mov	r5, r0
 800ef64:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800ef66:	f7ff ffdd 	bl	800ef24 <rand1>
 800ef6a:	1b61      	subs	r1, r4, r5
 800ef6c:	3101      	adds	r1, #1
 800ef6e:	fb90 f3f1 	sdiv	r3, r0, r1
 800ef72:	fb01 0013 	mls	r0, r1, r3, r0
}
 800ef76:	4428      	add	r0, r5
 800ef78:	bd38      	pop	{r3, r4, r5, pc}

0800ef7a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800ef7a:	e004      	b.n	800ef86 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800ef7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef80:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800ef84:	461a      	mov	r2, r3
 800ef86:	1e53      	subs	r3, r2, #1
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	d1f6      	bne.n	800ef7c <memcpy1+0x2>
    }
}
 800ef8e:	4770      	bx	lr

0800ef90 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800ef90:	1e53      	subs	r3, r2, #1
 800ef92:	4418      	add	r0, r3
    while( size-- )
 800ef94:	e004      	b.n	800efa0 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800ef96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef9a:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800ef9e:	461a      	mov	r2, r3
 800efa0:	1e53      	subs	r3, r2, #1
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	2a00      	cmp	r2, #0
 800efa6:	d1f6      	bne.n	800ef96 <memcpyr+0x6>
    }
}
 800efa8:	4770      	bx	lr

0800efaa <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800efaa:	e002      	b.n	800efb2 <memset1+0x8>
    {
        *dst++ = value;
 800efac:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800efb0:	461a      	mov	r2, r3
 800efb2:	1e53      	subs	r3, r2, #1
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d1f8      	bne.n	800efac <memset1+0x2>
    }
}
 800efba:	4770      	bx	lr

0800efbc <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800efbc:	b1f0      	cbz	r0, 800effc <Crc32+0x40>
{
 800efbe:	b510      	push	{r4, lr}
 800efc0:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800efc2:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800efc6:	f04f 30ff 	mov.w	r0, #4294967295
 800efca:	e00e      	b.n	800efea <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800efcc:	f340 0c00 	sbfx	ip, r0, #0, #1
 800efd0:	4a0b      	ldr	r2, [pc, #44]	; (800f000 <Crc32+0x44>)
 800efd2:	ea0c 0202 	and.w	r2, ip, r2
 800efd6:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800efda:	3301      	adds	r3, #1
 800efdc:	b29b      	uxth	r3, r3
 800efde:	2b07      	cmp	r3, #7
 800efe0:	d9f4      	bls.n	800efcc <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800efe2:	f10e 0e01 	add.w	lr, lr, #1
 800efe6:	fa1f fe8e 	uxth.w	lr, lr
 800efea:	458e      	cmp	lr, r1
 800efec:	d204      	bcs.n	800eff8 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800efee:	f814 300e 	ldrb.w	r3, [r4, lr]
 800eff2:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800eff4:	2300      	movs	r3, #0
 800eff6:	e7f2      	b.n	800efde <Crc32+0x22>
        }
    }

    return ~crc;
 800eff8:	43c0      	mvns	r0, r0
}
 800effa:	bd10      	pop	{r4, pc}
        return 0;
 800effc:	2000      	movs	r0, #0
}
 800effe:	4770      	bx	lr
 800f000:	edb88320 	.word	0xedb88320

0800f004 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800f004:	2001      	movs	r0, #1
 800f006:	4770      	bx	lr

0800f008 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800f008:	280a      	cmp	r0, #10
 800f00a:	d807      	bhi.n	800f01c <RadioGetLoRaBandwidthInHz+0x14>
 800f00c:	e8df f000 	tbb	[pc, r0]
 800f010:	17110b20 	.word	0x17110b20
 800f014:	061e1c1a 	.word	0x061e1c1a
 800f018:	0e08      	.short	0x0e08
 800f01a:	14          	.byte	0x14
 800f01b:	00          	.byte	0x00
 800f01c:	2000      	movs	r0, #0
 800f01e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f020:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800f024:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f026:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800f02a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f02c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800f030:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f032:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800f036:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f038:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800f03c:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f03e:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800f042:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f044:	4804      	ldr	r0, [pc, #16]	; (800f058 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f046:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f048:	4804      	ldr	r0, [pc, #16]	; (800f05c <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f04a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f04c:	4804      	ldr	r0, [pc, #16]	; (800f060 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f04e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f050:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	0001e848 	.word	0x0001e848
 800f05c:	0003d090 	.word	0x0003d090
 800f060:	0007a120 	.word	0x0007a120

0800f064 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f064:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800f068:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f06a:	b953      	cbnz	r3, 800f082 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f06c:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800f06e:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f070:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f072:	b141      	cbz	r1, 800f086 <RadioGetGfskTimeOnAirNumerator+0x22>
 800f074:	2302      	movs	r3, #2
 800f076:	f89d 0000 	ldrb.w	r0, [sp]
 800f07a:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800f07c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f080:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f082:	2000      	movs	r0, #0
 800f084:	e7f3      	b.n	800f06e <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f086:	2300      	movs	r3, #0
 800f088:	e7f5      	b.n	800f076 <RadioGetGfskTimeOnAirNumerator+0x12>

0800f08a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f08a:	b570      	push	{r4, r5, r6, lr}
 800f08c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f090:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f094:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f096:	f1a1 0c05 	sub.w	ip, r1, #5
 800f09a:	f1bc 0f01 	cmp.w	ip, #1
 800f09e:	d932      	bls.n	800f106 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f0a0:	b918      	cbnz	r0, 800f0aa <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f0a2:	f1a1 060b 	sub.w	r6, r1, #11
 800f0a6:	2e01      	cmp	r6, #1
 800f0a8:	d935      	bls.n	800f116 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800f0aa:	2801      	cmp	r0, #1
 800f0ac:	d02f      	beq.n	800f10e <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f0ae:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f0b0:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f0b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f0b8:	b38d      	cbz	r5, 800f11e <RadioGetLoRaTimeOnAirNumerator+0x94>
 800f0ba:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f0be:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f0c0:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f0c2:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f0c6:	b36c      	cbz	r4, 800f124 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800f0c8:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f0cc:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f0ce:	2906      	cmp	r1, #6
 800f0d0:	d904      	bls.n	800f0dc <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f0d2:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f0d6:	b10e      	cbz	r6, 800f0dc <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f0d8:	1e88      	subs	r0, r1, #2
 800f0da:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f0dc:	f1bc 0f00 	cmp.w	ip, #0
 800f0e0:	db23      	blt.n	800f12a <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f0e2:	4484      	add	ip, r0
 800f0e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f0e8:	fb9c fcf0 	sdiv	ip, ip, r0
 800f0ec:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f0f0:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f0f4:	2906      	cmp	r1, #6
 800f0f6:	d801      	bhi.n	800f0fc <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800f0f8:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f0fc:	0080      	lsls	r0, r0, #2
 800f0fe:	3001      	adds	r0, #1
 800f100:	3902      	subs	r1, #2
}
 800f102:	4088      	lsls	r0, r1
 800f104:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f106:	2b0b      	cmp	r3, #11
 800f108:	d8ca      	bhi.n	800f0a0 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f10a:	230c      	movs	r3, #12
 800f10c:	e7c8      	b.n	800f0a0 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f10e:	290c      	cmp	r1, #12
 800f110:	d003      	beq.n	800f11a <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f112:	2600      	movs	r6, #0
 800f114:	e7cc      	b.n	800f0b0 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f116:	2601      	movs	r6, #1
 800f118:	e7ca      	b.n	800f0b0 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f11a:	2601      	movs	r6, #1
 800f11c:	e7c8      	b.n	800f0b0 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f11e:	f04f 0c00 	mov.w	ip, #0
 800f122:	e7cc      	b.n	800f0be <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f124:	f04f 0c14 	mov.w	ip, #20
 800f128:	e7d0      	b.n	800f0cc <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f12a:	f04f 0c00 	mov.w	ip, #0
 800f12e:	e7d8      	b.n	800f0e2 <RadioGetLoRaTimeOnAirNumerator+0x58>

0800f130 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f132:	b085      	sub	sp, #20
 800f134:	460e      	mov	r6, r1
 800f136:	4615      	mov	r5, r2
 800f138:	4619      	mov	r1, r3
 800f13a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800f13e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f142:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f146:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f14a:	b148      	cbz	r0, 800f160 <RadioTimeOnAir+0x30>
 800f14c:	2801      	cmp	r0, #1
 800f14e:	d012      	beq.n	800f176 <RadioTimeOnAir+0x46>
 800f150:	2501      	movs	r5, #1
 800f152:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800f154:	442c      	add	r4, r5
 800f156:	1e60      	subs	r0, r4, #1
}
 800f158:	fbb0 f0f5 	udiv	r0, r0, r5
 800f15c:	b005      	add	sp, #20
 800f15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f160:	f8cd c004 	str.w	ip, [sp, #4]
 800f164:	9700      	str	r7, [sp, #0]
 800f166:	4628      	mov	r0, r5
 800f168:	f7ff ff7c 	bl	800f064 <RadioGetGfskTimeOnAirNumerator>
 800f16c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f170:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f174:	e7ee      	b.n	800f154 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f176:	f8cd c008 	str.w	ip, [sp, #8]
 800f17a:	9701      	str	r7, [sp, #4]
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	4613      	mov	r3, r2
 800f180:	460a      	mov	r2, r1
 800f182:	4629      	mov	r1, r5
 800f184:	4630      	mov	r0, r6
 800f186:	f7ff ff80 	bl	800f08a <RadioGetLoRaTimeOnAirNumerator>
 800f18a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f18e:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f192:	4b03      	ldr	r3, [pc, #12]	; (800f1a0 <RadioTimeOnAir+0x70>)
 800f194:	5d98      	ldrb	r0, [r3, r6]
 800f196:	f7ff ff37 	bl	800f008 <RadioGetLoRaBandwidthInHz>
 800f19a:	4605      	mov	r5, r0
        break;
 800f19c:	e7da      	b.n	800f154 <RadioTimeOnAir+0x24>
 800f19e:	bf00      	nop
 800f1a0:	08012ec0 	.word	0x08012ec0

0800f1a4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f1a4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f1a6:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <RadioOnTxTimeoutProcess+0x18>)
 800f1a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f1ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f1ae:	4b04      	ldr	r3, [pc, #16]	; (800f1c0 <RadioOnTxTimeoutProcess+0x1c>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	b113      	cbz	r3, 800f1ba <RadioOnTxTimeoutProcess+0x16>
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	b103      	cbz	r3, 800f1ba <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f1b8:	4798      	blx	r3
    }
}
 800f1ba:	bd08      	pop	{r3, pc}
 800f1bc:	48000400 	.word	0x48000400
 800f1c0:	20000d48 	.word	0x20000d48

0800f1c4 <RadioOnTxTimeoutIrq>:
{
 800f1c4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f1c6:	f7ff ffed 	bl	800f1a4 <RadioOnTxTimeoutProcess>
}
 800f1ca:	bd08      	pop	{r3, pc}

0800f1cc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f1cc:	b508      	push	{r3, lr}
 800f1ce:	4b05      	ldr	r3, [pc, #20]	; (800f1e4 <RadioOnRxTimeoutProcess+0x18>)
 800f1d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f1d4:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f1d6:	4b04      	ldr	r3, [pc, #16]	; (800f1e8 <RadioOnRxTimeoutProcess+0x1c>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	b113      	cbz	r3, 800f1e2 <RadioOnRxTimeoutProcess+0x16>
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	b103      	cbz	r3, 800f1e2 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800f1e0:	4798      	blx	r3
    }
}
 800f1e2:	bd08      	pop	{r3, pc}
 800f1e4:	48000400 	.word	0x48000400
 800f1e8:	20000d48 	.word	0x20000d48

0800f1ec <RadioOnRxTimeoutIrq>:
{
 800f1ec:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f1ee:	f7ff ffed 	bl	800f1cc <RadioOnRxTimeoutProcess>
}
 800f1f2:	bd08      	pop	{r3, pc}

0800f1f4 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800f1f4:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e005      	b.n	800f206 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800f1fa:	5ccc      	ldrb	r4, [r1, r3]
 800f1fc:	43e4      	mvns	r4, r4
 800f1fe:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800f200:	2400      	movs	r4, #0
 800f202:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 800f204:	3301      	adds	r3, #1
 800f206:	429a      	cmp	r2, r3
 800f208:	dcf7      	bgt.n	800f1fa <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800f20a:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800f20c:	461c      	mov	r4, r3
 800f20e:	e013      	b.n	800f238 <payload_integration+0x44>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800f210:	f103 0c07 	add.w	ip, r3, #7
 800f214:	e024      	b.n	800f260 <payload_integration+0x6c>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800f216:	b2ed      	uxtb	r5, r5
 800f218:	5d4d      	ldrb	r5, [r1, r5]
 800f21a:	fa45 fe0e 	asr.w	lr, r5, lr
 800f21e:	f00e 0e01 	and.w	lr, lr, #1
        /* integration */
        prevInt ^= currBit;
 800f222:	ea84 040e 	eor.w	r4, r4, lr
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800f226:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800f22a:	fa04 fc0c 	lsl.w	ip, r4, ip
 800f22e:	5d46      	ldrb	r6, [r0, r5]
 800f230:	ea46 0c0c 	orr.w	ip, r6, ip
 800f234:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 800f238:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f23c:	da26      	bge.n	800f28c <payload_integration+0x98>
        index_bit = 7 - ( i % 8 );
 800f23e:	425d      	negs	r5, r3
 800f240:	f003 0c07 	and.w	ip, r3, #7
 800f244:	f005 0507 	and.w	r5, r5, #7
 800f248:	bf58      	it	pl
 800f24a:	f1c5 0c00 	rsbpl	ip, r5, #0
 800f24e:	fa5f fe8c 	uxtb.w	lr, ip
 800f252:	f1ce 0e07 	rsb	lr, lr, #7
 800f256:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800f25a:	469c      	mov	ip, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dbd7      	blt.n	800f210 <payload_integration+0x1c>
 800f260:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800f264:	3301      	adds	r3, #1
 800f266:	425e      	negs	r6, r3
 800f268:	f003 0c07 	and.w	ip, r3, #7
 800f26c:	f006 0607 	and.w	r6, r6, #7
 800f270:	bf58      	it	pl
 800f272:	f1c6 0c00 	rsbpl	ip, r6, #0
 800f276:	fa5f fc8c 	uxtb.w	ip, ip
 800f27a:	f1cc 0c07 	rsb	ip, ip, #7
 800f27e:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800f282:	461e      	mov	r6, r3
 800f284:	2b00      	cmp	r3, #0
 800f286:	dac6      	bge.n	800f216 <payload_integration+0x22>
 800f288:	1dde      	adds	r6, r3, #7
 800f28a:	e7c4      	b.n	800f216 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f28c:	01a3      	lsls	r3, r4, #6
 800f28e:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800f292:	b25b      	sxtb	r3, r3
 800f294:	b91c      	cbnz	r4, 800f29e <payload_integration+0xaa>
 800f296:	2120      	movs	r1, #32
 800f298:	430b      	orrs	r3, r1
 800f29a:	5483      	strb	r3, [r0, r2]
}
 800f29c:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f29e:	2100      	movs	r1, #0
 800f2a0:	e7fa      	b.n	800f298 <payload_integration+0xa4>
	...

0800f2a4 <RadioSetMaxPayloadLength>:
{
 800f2a4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f2a6:	2801      	cmp	r0, #1
 800f2a8:	d004      	beq.n	800f2b4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f2aa:	4b0a      	ldr	r3, [pc, #40]	; (800f2d4 <RadioSetMaxPayloadLength+0x30>)
 800f2ac:	7d5b      	ldrb	r3, [r3, #21]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d008      	beq.n	800f2c4 <RadioSetMaxPayloadLength+0x20>
}
 800f2b2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f2b4:	4b08      	ldr	r3, [pc, #32]	; (800f2d8 <RadioSetMaxPayloadLength+0x34>)
 800f2b6:	7019      	strb	r1, [r3, #0]
 800f2b8:	4806      	ldr	r0, [pc, #24]	; (800f2d4 <RadioSetMaxPayloadLength+0x30>)
 800f2ba:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2bc:	300e      	adds	r0, #14
 800f2be:	f001 fe27 	bl	8010f10 <SUBGRF_SetPacketParams>
 800f2c2:	e7f6      	b.n	800f2b2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f2c4:	4b04      	ldr	r3, [pc, #16]	; (800f2d8 <RadioSetMaxPayloadLength+0x34>)
 800f2c6:	7019      	strb	r1, [r3, #0]
 800f2c8:	4802      	ldr	r0, [pc, #8]	; (800f2d4 <RadioSetMaxPayloadLength+0x30>)
 800f2ca:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2cc:	300e      	adds	r0, #14
 800f2ce:	f001 fe1f 	bl	8010f10 <SUBGRF_SetPacketParams>
}
 800f2d2:	e7ee      	b.n	800f2b2 <RadioSetMaxPayloadLength+0xe>
 800f2d4:	20000d64 	.word	0x20000d64
 800f2d8:	20000118 	.word	0x20000118

0800f2dc <RadioRead>:
{
 800f2dc:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800f2de:	f001 fc93 	bl	8010c08 <SUBGRF_ReadRegister>
}
 800f2e2:	bd08      	pop	{r3, pc}

0800f2e4 <RadioWrite>:
{
 800f2e4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800f2e6:	f001 fb9d 	bl	8010a24 <SUBGRF_WriteRegister>
}
 800f2ea:	bd08      	pop	{r3, pc}

0800f2ec <RadioTxCw>:
{
 800f2ec:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f2ee:	f001 ff25 	bl	801113c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f2f2:	2101      	movs	r1, #1
 800f2f4:	f001 ff0e 	bl	8011114 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f2f8:	f001 fa26 	bl	8010748 <SUBGRF_SetTxContinuousWave>
}
 800f2fc:	bd08      	pop	{r3, pc}
	...

0800f300 <RadioTxPrbs>:
{
 800f300:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f302:	2101      	movs	r1, #1
 800f304:	4b07      	ldr	r3, [pc, #28]	; (800f324 <RadioTxPrbs+0x24>)
 800f306:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f30a:	f001 ff03 	bl	8011114 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f30e:	212d      	movs	r1, #45	; 0x2d
 800f310:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800f314:	f7ff ffe6 	bl	800f2e4 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f318:	f001 fa1d 	bl	8010756 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f31c:	4802      	ldr	r0, [pc, #8]	; (800f328 <RadioTxPrbs+0x28>)
 800f31e:	f001 f9af 	bl	8010680 <SUBGRF_SetTx>
}
 800f322:	bd08      	pop	{r3, pc}
 800f324:	20000d64 	.word	0x20000d64
 800f328:	000fffff 	.word	0x000fffff

0800f32c <RadioSetRxDutyCycle>:
{
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4604      	mov	r4, r0
 800f330:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f332:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800f336:	4e09      	ldr	r6, [pc, #36]	; (800f35c <RadioSetRxDutyCycle+0x30>)
 800f338:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f33a:	2300      	movs	r3, #0
 800f33c:	461a      	mov	r2, r3
 800f33e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f342:	4608      	mov	r0, r1
 800f344:	f001 faab 	bl	801089e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f348:	2100      	movs	r1, #0
 800f34a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800f34e:	f001 fee1 	bl	8011114 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f352:	4629      	mov	r1, r5
 800f354:	4620      	mov	r0, r4
 800f356:	f001 f9c7 	bl	80106e8 <SUBGRF_SetRxDutyCycle>
}
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	20000d64 	.word	0x20000d64

0800f360 <RadioRxBoosted>:
{
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800f364:	f001 ffbe 	bl	80112e4 <RFW_Is_Init>
 800f368:	2801      	cmp	r0, #1
 800f36a:	d019      	beq.n	800f3a0 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f36c:	2300      	movs	r3, #0
 800f36e:	461a      	mov	r2, r3
 800f370:	f240 2162 	movw	r1, #610	; 0x262
 800f374:	4608      	mov	r0, r1
 800f376:	f001 fa92 	bl	801089e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f37a:	b9a4      	cbnz	r4, 800f3a6 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f37c:	4c11      	ldr	r4, [pc, #68]	; (800f3c4 <RadioRxBoosted+0x64>)
 800f37e:	2100      	movs	r1, #0
 800f380:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f382:	4b11      	ldr	r3, [pc, #68]	; (800f3c8 <RadioRxBoosted+0x68>)
 800f384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f388:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f38a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f38e:	f001 fec1 	bl	8011114 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f392:	7863      	ldrb	r3, [r4, #1]
 800f394:	b183      	cbz	r3, 800f3b8 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f396:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f39a:	f001 fb53 	bl	8010a44 <SUBGRF_SetRxBoosted>
}
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800f3a0:	f001 ffa8 	bl	80112f4 <RFW_ReceiveInit>
 800f3a4:	e7e9      	b.n	800f37a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f3a6:	4d09      	ldr	r5, [pc, #36]	; (800f3cc <RadioRxBoosted+0x6c>)
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f002 fc74 	bl	8011c98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f002 fc2b 	bl	8011c0c <UTIL_TIMER_Start>
 800f3b6:	e7e1      	b.n	800f37c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <RadioRxBoosted+0x64>)
 800f3ba:	6898      	ldr	r0, [r3, #8]
 800f3bc:	0180      	lsls	r0, r0, #6
 800f3be:	f001 fb41 	bl	8010a44 <SUBGRF_SetRxBoosted>
}
 800f3c2:	e7ec      	b.n	800f39e <RadioRxBoosted+0x3e>
 800f3c4:	20000d64 	.word	0x20000d64
 800f3c8:	48000400 	.word	0x48000400
 800f3cc:	20000d4c 	.word	0x20000d4c

0800f3d0 <RadioStandby>:
{
 800f3d0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	f001 f93a 	bl	801064c <SUBGRF_SetStandby>
}
 800f3d8:	bd08      	pop	{r3, pc}

0800f3da <RadioGetStatus>:
{
 800f3da:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800f3dc:	f001 f930 	bl	8010640 <SUBGRF_GetOperatingMode>
 800f3e0:	2805      	cmp	r0, #5
 800f3e2:	d007      	beq.n	800f3f4 <RadioGetStatus+0x1a>
 800f3e4:	2807      	cmp	r0, #7
 800f3e6:	d007      	beq.n	800f3f8 <RadioGetStatus+0x1e>
 800f3e8:	2804      	cmp	r0, #4
 800f3ea:	d001      	beq.n	800f3f0 <RadioGetStatus+0x16>
            return RF_IDLE;
 800f3ec:	2000      	movs	r0, #0
}
 800f3ee:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800f3f0:	2002      	movs	r0, #2
 800f3f2:	e7fc      	b.n	800f3ee <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	e7fa      	b.n	800f3ee <RadioGetStatus+0x14>
            return RF_CAD;
 800f3f8:	2003      	movs	r0, #3
 800f3fa:	e7f8      	b.n	800f3ee <RadioGetStatus+0x14>

0800f3fc <RadioIrqProcess>:
{
 800f3fc:	b530      	push	{r4, r5, lr}
 800f3fe:	b083      	sub	sp, #12
    uint8_t size = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800f406:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800f408:	4ba5      	ldr	r3, [pc, #660]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f40a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f40e:	2b20      	cmp	r3, #32
 800f410:	d829      	bhi.n	800f466 <RadioIrqProcess+0x6a>
 800f412:	b21a      	sxth	r2, r3
 800f414:	2a00      	cmp	r2, #0
 800f416:	f000 8140 	beq.w	800f69a <RadioIrqProcess+0x29e>
 800f41a:	3b01      	subs	r3, #1
 800f41c:	2b1f      	cmp	r3, #31
 800f41e:	f200 813c 	bhi.w	800f69a <RadioIrqProcess+0x29e>
 800f422:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f426:	0063      	.short	0x0063
 800f428:	013a007f 	.word	0x013a007f
 800f42c:	013a00f7 	.word	0x013a00f7
 800f430:	013a013a 	.word	0x013a013a
 800f434:	013a0127 	.word	0x013a0127
 800f438:	013a013a 	.word	0x013a013a
 800f43c:	013a013a 	.word	0x013a013a
 800f440:	013a013a 	.word	0x013a013a
 800f444:	013a0134 	.word	0x013a0134
 800f448:	013a013a 	.word	0x013a013a
 800f44c:	013a013a 	.word	0x013a013a
 800f450:	013a013a 	.word	0x013a013a
 800f454:	013a013a 	.word	0x013a013a
 800f458:	013a013a 	.word	0x013a013a
 800f45c:	013a013a 	.word	0x013a013a
 800f460:	013a013a 	.word	0x013a013a
 800f464:	0155      	.short	0x0155
 800f466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f46a:	f000 80b3 	beq.w	800f5d4 <RadioIrqProcess+0x1d8>
 800f46e:	d928      	bls.n	800f4c2 <RadioIrqProcess+0xc6>
 800f470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f474:	f040 8111 	bne.w	800f69a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f478:	4b8a      	ldr	r3, [pc, #552]	; (800f6a4 <RadioIrqProcess+0x2a8>)
 800f47a:	2201      	movs	r2, #1
 800f47c:	2100      	movs	r1, #0
 800f47e:	2002      	movs	r0, #2
 800f480:	f002 f816 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f484:	f001 f8dc 	bl	8010640 <SUBGRF_GetOperatingMode>
 800f488:	2804      	cmp	r0, #4
 800f48a:	f000 80b0 	beq.w	800f5ee <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f48e:	f001 f8d7 	bl	8010640 <SUBGRF_GetOperatingMode>
 800f492:	2805      	cmp	r0, #5
 800f494:	f040 8101 	bne.w	800f69a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800f498:	4b83      	ldr	r3, [pc, #524]	; (800f6a8 <RadioIrqProcess+0x2ac>)
 800f49a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f49e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800f4a0:	4882      	ldr	r0, [pc, #520]	; (800f6ac <RadioIrqProcess+0x2b0>)
 800f4a2:	f002 fb59 	bl	8011b58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f001 f8d0 	bl	801064c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f4ac:	4b80      	ldr	r3, [pc, #512]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 80f2 	beq.w	800f69a <RadioIrqProcess+0x29e>
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 80ee 	beq.w	800f69a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800f4be:	4798      	blx	r3
 800f4c0:	e0eb      	b.n	800f69a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800f4c2:	2b40      	cmp	r3, #64	; 0x40
 800f4c4:	f000 811d 	beq.w	800f702 <RadioIrqProcess+0x306>
 800f4c8:	2b80      	cmp	r3, #128	; 0x80
 800f4ca:	f040 80e6 	bne.w	800f69a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f001 f8bc 	bl	801064c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f4d4:	4b76      	ldr	r3, [pc, #472]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f000 80de 	beq.w	800f69a <RadioIrqProcess+0x29e>
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 80da 	beq.w	800f69a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	4798      	blx	r3
 800f4ea:	e0d6      	b.n	800f69a <RadioIrqProcess+0x29e>
 800f4ec:	4b6e      	ldr	r3, [pc, #440]	; (800f6a8 <RadioIrqProcess+0x2ac>)
 800f4ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f4f2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800f4f4:	486f      	ldr	r0, [pc, #444]	; (800f6b4 <RadioIrqProcess+0x2b8>)
 800f4f6:	f002 fb2f 	bl	8011b58 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	f001 f8a6 	bl	801064c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f500:	f001 fef2 	bl	80112e8 <RFW_Is_LongPacketModeEnabled>
 800f504:	2801      	cmp	r0, #1
 800f506:	d00a      	beq.n	800f51e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f508:	4b69      	ldr	r3, [pc, #420]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 80c4 	beq.w	800f69a <RadioIrqProcess+0x29e>
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	f000 80c0 	beq.w	800f69a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800f51a:	4798      	blx	r3
 800f51c:	e0bd      	b.n	800f69a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800f51e:	f001 feec 	bl	80112fa <RFW_DeInit_TxLongPacket>
 800f522:	e7f1      	b.n	800f508 <RadioIrqProcess+0x10c>
 800f524:	4b60      	ldr	r3, [pc, #384]	; (800f6a8 <RadioIrqProcess+0x2ac>)
 800f526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f52a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800f52c:	485f      	ldr	r0, [pc, #380]	; (800f6ac <RadioIrqProcess+0x2b0>)
 800f52e:	f002 fb13 	bl	8011b58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f532:	4b5b      	ldr	r3, [pc, #364]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f534:	785b      	ldrb	r3, [r3, #1]
 800f536:	b303      	cbz	r3, 800f57a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f538:	22ff      	movs	r2, #255	; 0xff
 800f53a:	f10d 0107 	add.w	r1, sp, #7
 800f53e:	485e      	ldr	r0, [pc, #376]	; (800f6b8 <RadioIrqProcess+0x2bc>)
 800f540:	f001 fdce 	bl	80110e0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f544:	485d      	ldr	r0, [pc, #372]	; (800f6bc <RadioIrqProcess+0x2c0>)
 800f546:	f001 fa31 	bl	80109ac <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f54a:	4b59      	ldr	r3, [pc, #356]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 80a3 	beq.w	800f69a <RadioIrqProcess+0x29e>
 800f554:	689c      	ldr	r4, [r3, #8]
 800f556:	2c00      	cmp	r4, #0
 800f558:	f000 809f 	beq.w	800f69a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800f55c:	4b50      	ldr	r3, [pc, #320]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f55e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f562:	2b01      	cmp	r3, #1
 800f564:	d11d      	bne.n	800f5a2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800f566:	4a4e      	ldr	r2, [pc, #312]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f568:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800f56c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800f570:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f574:	4850      	ldr	r0, [pc, #320]	; (800f6b8 <RadioIrqProcess+0x2bc>)
 800f576:	47a0      	blx	r4
                break;
 800f578:	e08f      	b.n	800f69a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f57a:	2000      	movs	r0, #0
 800f57c:	f001 f866 	bl	801064c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f580:	2100      	movs	r1, #0
 800f582:	f640 1002 	movw	r0, #2306	; 0x902
 800f586:	f001 fa4d 	bl	8010a24 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f58a:	f640 1044 	movw	r0, #2372	; 0x944
 800f58e:	f001 fb3b 	bl	8010c08 <SUBGRF_ReadRegister>
 800f592:	f040 0102 	orr.w	r1, r0, #2
 800f596:	b2c9      	uxtb	r1, r1
 800f598:	f640 1044 	movw	r0, #2372	; 0x944
 800f59c:	f001 fa42 	bl	8010a24 <SUBGRF_WriteRegister>
 800f5a0:	e7ca      	b.n	800f538 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f5a2:	4c3f      	ldr	r4, [pc, #252]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f5a4:	4669      	mov	r1, sp
 800f5a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f5a8:	f001 fe4e 	bl	8011248 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800f5ac:	4b40      	ldr	r3, [pc, #256]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	689d      	ldr	r5, [r3, #8]
 800f5b2:	9b00      	ldr	r3, [sp, #0]
 800f5b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f5b8:	4a41      	ldr	r2, [pc, #260]	; (800f6c0 <RadioIrqProcess+0x2c4>)
 800f5ba:	fb82 1203 	smull	r1, r2, r2, r3
 800f5be:	17db      	asrs	r3, r3, #31
 800f5c0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800f5c4:	b25b      	sxtb	r3, r3
 800f5c6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800f5ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f5ce:	483a      	ldr	r0, [pc, #232]	; (800f6b8 <RadioIrqProcess+0x2bc>)
 800f5d0:	47a8      	blx	r5
                break;
 800f5d2:	e062      	b.n	800f69a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f001 f839 	bl	801064c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f5da:	4b35      	ldr	r3, [pc, #212]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d05b      	beq.n	800f69a <RadioIrqProcess+0x29e>
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d058      	beq.n	800f69a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	4798      	blx	r3
 800f5ec:	e055      	b.n	800f69a <RadioIrqProcess+0x29e>
 800f5ee:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <RadioIrqProcess+0x2ac>)
 800f5f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f5f4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800f5f6:	482f      	ldr	r0, [pc, #188]	; (800f6b4 <RadioIrqProcess+0x2b8>)
 800f5f8:	f002 faae 	bl	8011b58 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	f001 f825 	bl	801064c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f602:	4b2b      	ldr	r3, [pc, #172]	; (800f6b0 <RadioIrqProcess+0x2b4>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d047      	beq.n	800f69a <RadioIrqProcess+0x29e>
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d044      	beq.n	800f69a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800f610:	4798      	blx	r3
 800f612:	e042      	b.n	800f69a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800f614:	4b2b      	ldr	r3, [pc, #172]	; (800f6c4 <RadioIrqProcess+0x2c8>)
 800f616:	2201      	movs	r2, #1
 800f618:	2100      	movs	r1, #0
 800f61a:	2002      	movs	r0, #2
 800f61c:	f001 ff48 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f620:	4b1f      	ldr	r3, [pc, #124]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f622:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f624:	b3c9      	cbz	r1, 800f69a <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800f626:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f62a:	f640 1003 	movw	r0, #2307	; 0x903
 800f62e:	f7ff fe59 	bl	800f2e4 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800f632:	4c1b      	ldr	r4, [pc, #108]	; (800f6a0 <RadioIrqProcess+0x2a4>)
 800f634:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800f638:	f640 1004 	movw	r0, #2308	; 0x904
 800f63c:	f7ff fe52 	bl	800f2e4 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800f640:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800f644:	f640 1005 	movw	r0, #2309	; 0x905
 800f648:	f7ff fe4c 	bl	800f2e4 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800f64c:	f640 1002 	movw	r0, #2306	; 0x902
 800f650:	f7ff fe44 	bl	800f2dc <RadioRead>
 800f654:	f040 0101 	orr.w	r1, r0, #1
 800f658:	b2c9      	uxtb	r1, r1
 800f65a:	f640 1002 	movw	r0, #2306	; 0x902
 800f65e:	f7ff fe41 	bl	800f2e4 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800f662:	2200      	movs	r2, #0
 800f664:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f666:	4613      	mov	r3, r2
 800f668:	f240 2162 	movw	r1, #610	; 0x262
 800f66c:	4608      	mov	r0, r1
 800f66e:	f001 f916 	bl	801089e <SUBGRF_SetDioIrqParams>
 800f672:	e012      	b.n	800f69a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800f674:	4b14      	ldr	r3, [pc, #80]	; (800f6c8 <RadioIrqProcess+0x2cc>)
 800f676:	2201      	movs	r2, #1
 800f678:	2100      	movs	r1, #0
 800f67a:	2002      	movs	r0, #2
 800f67c:	f001 ff18 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800f680:	f001 fe30 	bl	80112e4 <RFW_Is_Init>
 800f684:	2801      	cmp	r0, #1
 800f686:	d108      	bne.n	800f69a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800f688:	f001 fe38 	bl	80112fc <RFW_ReceivePayload>
 800f68c:	e005      	b.n	800f69a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800f68e:	4b0f      	ldr	r3, [pc, #60]	; (800f6cc <RadioIrqProcess+0x2d0>)
 800f690:	2201      	movs	r2, #1
 800f692:	2100      	movs	r1, #0
 800f694:	2002      	movs	r0, #2
 800f696:	f001 ff0b 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
}
 800f69a:	b003      	add	sp, #12
 800f69c:	bd30      	pop	{r4, r5, pc}
 800f69e:	bf00      	nop
 800f6a0:	20000d64 	.word	0x20000d64
 800f6a4:	08012e54 	.word	0x08012e54
 800f6a8:	48000400 	.word	0x48000400
 800f6ac:	20000d4c 	.word	0x20000d4c
 800f6b0:	20000d48 	.word	0x20000d48
 800f6b4:	20000dc0 	.word	0x20000dc0
 800f6b8:	20000c48 	.word	0x20000c48
 800f6bc:	20000d88 	.word	0x20000d88
 800f6c0:	10624dd3 	.word	0x10624dd3
 800f6c4:	08012e68 	.word	0x08012e68
 800f6c8:	08012e74 	.word	0x08012e74
 800f6cc:	08012e80 	.word	0x08012e80
        TimerStop( &RxTimeoutTimer );
 800f6d0:	4817      	ldr	r0, [pc, #92]	; (800f730 <RadioIrqProcess+0x334>)
 800f6d2:	f002 fa41 	bl	8011b58 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f6d6:	4b17      	ldr	r3, [pc, #92]	; (800f734 <RadioIrqProcess+0x338>)
 800f6d8:	785b      	ldrb	r3, [r3, #1]
 800f6da:	b173      	cbz	r3, 800f6fa <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f6dc:	4b16      	ldr	r3, [pc, #88]	; (800f738 <RadioIrqProcess+0x33c>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d0da      	beq.n	800f69a <RadioIrqProcess+0x29e>
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d0d7      	beq.n	800f69a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800f6ea:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800f6ec:	4b13      	ldr	r3, [pc, #76]	; (800f73c <RadioIrqProcess+0x340>)
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	2100      	movs	r1, #0
 800f6f2:	2002      	movs	r0, #2
 800f6f4:	f001 fedc 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
 800f6f8:	e7cf      	b.n	800f69a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	f000 ffa6 	bl	801064c <SUBGRF_SetStandby>
 800f700:	e7ec      	b.n	800f6dc <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <RadioIrqProcess+0x344>)
 800f704:	2201      	movs	r2, #1
 800f706:	2100      	movs	r1, #0
 800f708:	2002      	movs	r0, #2
 800f70a:	f001 fed1 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800f70e:	4b09      	ldr	r3, [pc, #36]	; (800f734 <RadioIrqProcess+0x338>)
 800f710:	785b      	ldrb	r3, [r3, #1]
 800f712:	b143      	cbz	r3, 800f726 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f714:	4b08      	ldr	r3, [pc, #32]	; (800f738 <RadioIrqProcess+0x33c>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0be      	beq.n	800f69a <RadioIrqProcess+0x29e>
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d0bb      	beq.n	800f69a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800f722:	4798      	blx	r3
}
 800f724:	e7b9      	b.n	800f69a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f726:	2000      	movs	r0, #0
 800f728:	f000 ff90 	bl	801064c <SUBGRF_SetStandby>
 800f72c:	e7f2      	b.n	800f714 <RadioIrqProcess+0x318>
 800f72e:	bf00      	nop
 800f730:	20000d4c 	.word	0x20000d4c
 800f734:	20000d64 	.word	0x20000d64
 800f738:	20000d48 	.word	0x20000d48
 800f73c:	08012e8c 	.word	0x08012e8c
 800f740:	08012e98 	.word	0x08012e98

0800f744 <RadioOnDioIrq>:
{
 800f744:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800f746:	4b03      	ldr	r3, [pc, #12]	; (800f754 <RadioOnDioIrq+0x10>)
 800f748:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800f74c:	f7ff fe56 	bl	800f3fc <RadioIrqProcess>
}
 800f750:	bd08      	pop	{r3, pc}
 800f752:	bf00      	nop
 800f754:	20000d64 	.word	0x20000d64

0800f758 <RadioGetWakeupTime>:
{
 800f758:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800f75a:	f001 fd06 	bl	801116a <SUBGRF_GetRadioWakeUpTime>
}
 800f75e:	3003      	adds	r0, #3
 800f760:	bd08      	pop	{r3, pc}

0800f762 <RadioReadRegisters>:
{
 800f762:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f764:	f001 fc46 	bl	8010ff4 <SUBGRF_ReadRegisters>
}
 800f768:	bd08      	pop	{r3, pc}

0800f76a <RadioWriteRegisters>:
{
 800f76a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800f76c:	f001 fb8e 	bl	8010e8c <SUBGRF_WriteRegisters>
}
 800f770:	bd08      	pop	{r3, pc}

0800f772 <RadioRssi>:
{
 800f772:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800f774:	f001 f90c 	bl	8010990 <SUBGRF_GetRssiInst>
}
 800f778:	b200      	sxth	r0, r0
 800f77a:	bd08      	pop	{r3, pc}

0800f77c <RadioSetTxContinuousWave>:
{
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800f780:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f784:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800f788:	f001 f8c2 	bl	8010910 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800f78c:	4628      	mov	r0, r5
 800f78e:	f001 fcd5 	bl	801113c <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800f792:	2101      	movs	r1, #1
 800f794:	f001 fcbe 	bl	8011114 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f798:	f000 ffd6 	bl	8010748 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f79c:	4d04      	ldr	r5, [pc, #16]	; (800f7b0 <RadioSetTxContinuousWave+0x34>)
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f002 fa79 	bl	8011c98 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f002 fa30 	bl	8011c0c <UTIL_TIMER_Start>
}
 800f7ac:	bd38      	pop	{r3, r4, r5, pc}
 800f7ae:	bf00      	nop
 800f7b0:	20000dc0 	.word	0x20000dc0

0800f7b4 <RadioSetChannel>:
{
 800f7b4:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800f7b6:	f001 f8ab 	bl	8010910 <SUBGRF_SetRfFrequency>
}
 800f7ba:	bd08      	pop	{r3, pc}

0800f7bc <RadioStartCad>:
{
 800f7bc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f7be:	2100      	movs	r1, #0
 800f7c0:	4b07      	ldr	r3, [pc, #28]	; (800f7e0 <RadioStartCad+0x24>)
 800f7c2:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800f7c6:	f001 fca5 	bl	8011114 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800f7d2:	4608      	mov	r0, r1
 800f7d4:	f001 f863 	bl	801089e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800f7d8:	f000 ffaa 	bl	8010730 <SUBGRF_SetCad>
}
 800f7dc:	bd08      	pop	{r3, pc}
 800f7de:	bf00      	nop
 800f7e0:	20000d64 	.word	0x20000d64

0800f7e4 <RadioRx>:
{
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800f7e8:	f001 fd7c 	bl	80112e4 <RFW_Is_Init>
 800f7ec:	2801      	cmp	r0, #1
 800f7ee:	d019      	beq.n	800f824 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	f240 2162 	movw	r1, #610	; 0x262
 800f7f8:	4608      	mov	r0, r1
 800f7fa:	f001 f850 	bl	801089e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f7fe:	b9a4      	cbnz	r4, 800f82a <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f800:	4c11      	ldr	r4, [pc, #68]	; (800f848 <RadioRx+0x64>)
 800f802:	2100      	movs	r1, #0
 800f804:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f806:	4b11      	ldr	r3, [pc, #68]	; (800f84c <RadioRx+0x68>)
 800f808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f80c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f80e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800f812:	f001 fc7f 	bl	8011114 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f816:	7863      	ldrb	r3, [r4, #1]
 800f818:	b183      	cbz	r3, 800f83c <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800f81a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f81e:	f000 ff49 	bl	80106b4 <SUBGRF_SetRx>
}
 800f822:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800f824:	f001 fd66 	bl	80112f4 <RFW_ReceiveInit>
 800f828:	e7e9      	b.n	800f7fe <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f82a:	4d09      	ldr	r5, [pc, #36]	; (800f850 <RadioRx+0x6c>)
 800f82c:	4621      	mov	r1, r4
 800f82e:	4628      	mov	r0, r5
 800f830:	f002 fa32 	bl	8011c98 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f834:	4628      	mov	r0, r5
 800f836:	f002 f9e9 	bl	8011c0c <UTIL_TIMER_Start>
 800f83a:	e7e1      	b.n	800f800 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800f83c:	4b02      	ldr	r3, [pc, #8]	; (800f848 <RadioRx+0x64>)
 800f83e:	6898      	ldr	r0, [r3, #8]
 800f840:	0180      	lsls	r0, r0, #6
 800f842:	f000 ff37 	bl	80106b4 <SUBGRF_SetRx>
}
 800f846:	e7ec      	b.n	800f822 <RadioRx+0x3e>
 800f848:	20000d64 	.word	0x20000d64
 800f84c:	48000400 	.word	0x48000400
 800f850:	20000d4c 	.word	0x20000d4c

0800f854 <RadioSleep>:
{
 800f854:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800f856:	f04f 0004 	mov.w	r0, #4
 800f85a:	f001 fa2f 	bl	8010cbc <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800f85e:	2002      	movs	r0, #2
 800f860:	f7f2 f8b2 	bl	80019c8 <HAL_Delay>
}
 800f864:	bd08      	pop	{r3, pc}
	...

0800f868 <RadioSend>:
{
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	4605      	mov	r5, r0
 800f86e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800f870:	2300      	movs	r3, #0
 800f872:	461a      	mov	r2, r3
 800f874:	f240 2101 	movw	r1, #513	; 0x201
 800f878:	4608      	mov	r0, r1
 800f87a:	f001 f810 	bl	801089e <SUBGRF_SetDioIrqParams>
 800f87e:	4b5d      	ldr	r3, [pc, #372]	; (800f9f4 <RadioSend+0x18c>)
 800f880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f884:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f886:	4e5c      	ldr	r6, [pc, #368]	; (800f9f8 <RadioSend+0x190>)
 800f888:	2101      	movs	r1, #1
 800f88a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800f88e:	f001 fc41 	bl	8011114 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800f892:	7833      	ldrb	r3, [r6, #0]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d103      	bne.n	800f8a0 <RadioSend+0x38>
 800f898:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800f89c:	2b06      	cmp	r3, #6
 800f89e:	d013      	beq.n	800f8c8 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800f8a0:	f640 0089 	movw	r0, #2185	; 0x889
 800f8a4:	f001 f9b0 	bl	8010c08 <SUBGRF_ReadRegister>
 800f8a8:	f040 0104 	orr.w	r1, r0, #4
 800f8ac:	b2c9      	uxtb	r1, r1
 800f8ae:	f640 0089 	movw	r0, #2185	; 0x889
 800f8b2:	f001 f8b7 	bl	8010a24 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 800f8b6:	4b50      	ldr	r3, [pc, #320]	; (800f9f8 <RadioSend+0x190>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	2b04      	cmp	r3, #4
 800f8bc:	d819      	bhi.n	800f8f2 <RadioSend+0x8a>
 800f8be:	e8df f003 	tbb	[pc, r3]
 800f8c2:	0e23      	.short	0x0e23
 800f8c4:	4e23      	.short	0x4e23
 800f8c6:	5b          	.byte	0x5b
 800f8c7:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800f8c8:	f640 0089 	movw	r0, #2185	; 0x889
 800f8cc:	f001 f99c 	bl	8010c08 <SUBGRF_ReadRegister>
 800f8d0:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f8d4:	f640 0089 	movw	r0, #2185	; 0x889
 800f8d8:	f001 f8a4 	bl	8010a24 <SUBGRF_WriteRegister>
 800f8dc:	e7eb      	b.n	800f8b6 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800f8de:	4846      	ldr	r0, [pc, #280]	; (800f9f8 <RadioSend+0x190>)
 800f8e0:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8e2:	300e      	adds	r0, #14
 800f8e4:	f001 fb14 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f001 fbde 	bl	80110ae <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800f8f2:	4c42      	ldr	r4, [pc, #264]	; (800f9fc <RadioSend+0x194>)
 800f8f4:	4b40      	ldr	r3, [pc, #256]	; (800f9f8 <RadioSend+0x190>)
 800f8f6:	6859      	ldr	r1, [r3, #4]
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f002 f9cd 	bl	8011c98 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f8fe:	4620      	mov	r0, r4
 800f900:	f002 f984 	bl	8011c0c <UTIL_TIMER_Start>
}
 800f904:	b002      	add	sp, #8
 800f906:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800f908:	f001 fcec 	bl	80112e4 <RFW_Is_Init>
 800f90c:	2801      	cmp	r0, #1
 800f90e:	d00a      	beq.n	800f926 <RadioSend+0xbe>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800f910:	4839      	ldr	r0, [pc, #228]	; (800f9f8 <RadioSend+0x190>)
 800f912:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f914:	300e      	adds	r0, #14
 800f916:	f001 fafb 	bl	8010f10 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800f91a:	2200      	movs	r2, #0
 800f91c:	4621      	mov	r1, r4
 800f91e:	4628      	mov	r0, r5
 800f920:	f001 fbc5 	bl	80110ae <SUBGRF_SendPayload>
 800f924:	e7e5      	b.n	800f8f2 <RadioSend+0x8a>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800f926:	f10d 0207 	add.w	r2, sp, #7
 800f92a:	4621      	mov	r1, r4
 800f92c:	4628      	mov	r0, r5
 800f92e:	f001 fcde 	bl	80112ee <RFW_TransmitInit>
 800f932:	b968      	cbnz	r0, 800f950 <RadioSend+0xe8>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800f934:	4830      	ldr	r0, [pc, #192]	; (800f9f8 <RadioSend+0x190>)
 800f936:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f93a:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f93c:	300e      	adds	r0, #14
 800f93e:	f001 fae7 	bl	8010f10 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800f942:	2200      	movs	r2, #0
 800f944:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f948:	4628      	mov	r0, r5
 800f94a:	f001 fbb0 	bl	80110ae <SUBGRF_SendPayload>
 800f94e:	e7d0      	b.n	800f8f2 <RadioSend+0x8a>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800f950:	4b2b      	ldr	r3, [pc, #172]	; (800fa00 <RadioSend+0x198>)
 800f952:	2201      	movs	r2, #1
 800f954:	2100      	movs	r1, #0
 800f956:	2002      	movs	r0, #2
 800f958:	f001 fdaa 	bl	80114b0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800f95c:	e7d2      	b.n	800f904 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f95e:	4826      	ldr	r0, [pc, #152]	; (800f9f8 <RadioSend+0x190>)
 800f960:	2302      	movs	r3, #2
 800f962:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800f964:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f966:	300e      	adds	r0, #14
 800f968:	f001 fad2 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f96c:	2200      	movs	r2, #0
 800f96e:	4621      	mov	r1, r4
 800f970:	4628      	mov	r0, r5
 800f972:	f001 fb9c 	bl	80110ae <SUBGRF_SendPayload>
            break;
 800f976:	e7bc      	b.n	800f8f2 <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 800f978:	4622      	mov	r2, r4
 800f97a:	4629      	mov	r1, r5
 800f97c:	4821      	ldr	r0, [pc, #132]	; (800fa04 <RadioSend+0x19c>)
 800f97e:	f7ff fc39 	bl	800f1f4 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f982:	4e1d      	ldr	r6, [pc, #116]	; (800f9f8 <RadioSend+0x190>)
 800f984:	2302      	movs	r3, #2
 800f986:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800f988:	1c65      	adds	r5, r4, #1
 800f98a:	b2ed      	uxtb	r5, r5
 800f98c:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f98e:	f106 000e 	add.w	r0, r6, #14
 800f992:	f001 fabd 	bl	8010f10 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800f996:	2100      	movs	r1, #0
 800f998:	20f1      	movs	r0, #241	; 0xf1
 800f99a:	f7ff fca3 	bl	800f2e4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800f99e:	2100      	movs	r1, #0
 800f9a0:	20f0      	movs	r0, #240	; 0xf0
 800f9a2:	f7ff fc9f 	bl	800f2e4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800f9a6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f9a8:	2b64      	cmp	r3, #100	; 0x64
 800f9aa:	d019      	beq.n	800f9e0 <RadioSend+0x178>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800f9ac:	21e1      	movs	r1, #225	; 0xe1
 800f9ae:	20f3      	movs	r0, #243	; 0xf3
 800f9b0:	f7ff fc98 	bl	800f2e4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800f9b4:	2104      	movs	r1, #4
 800f9b6:	20f2      	movs	r0, #242	; 0xf2
 800f9b8:	f7ff fc94 	bl	800f2e4 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800f9bc:	00e1      	lsls	r1, r4, #3
 800f9be:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800f9c0:	0a09      	lsrs	r1, r1, #8
 800f9c2:	20f4      	movs	r0, #244	; 0xf4
 800f9c4:	f7ff fc8e 	bl	800f2e4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800f9c8:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800f9cc:	20f5      	movs	r0, #245	; 0xf5
 800f9ce:	f7ff fc89 	bl	800f2e4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800f9d2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	480a      	ldr	r0, [pc, #40]	; (800fa04 <RadioSend+0x19c>)
 800f9da:	f001 fb68 	bl	80110ae <SUBGRF_SendPayload>
            break;
 800f9de:	e788      	b.n	800f8f2 <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800f9e0:	2170      	movs	r1, #112	; 0x70
 800f9e2:	20f3      	movs	r0, #243	; 0xf3
 800f9e4:	f7ff fc7e 	bl	800f2e4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800f9e8:	211d      	movs	r1, #29
 800f9ea:	20f2      	movs	r0, #242	; 0xf2
 800f9ec:	f7ff fc7a 	bl	800f2e4 <RadioWrite>
 800f9f0:	e7e4      	b.n	800f9bc <RadioSend+0x154>
 800f9f2:	bf00      	nop
 800f9f4:	48000400 	.word	0x48000400
 800f9f8:	20000d64 	.word	0x20000d64
 800f9fc:	20000dc0 	.word	0x20000dc0
 800fa00:	08012ea8 	.word	0x08012ea8
 800fa04:	20000c48 	.word	0x20000c48

0800fa08 <RadioRandom>:
{
 800fa08:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 ff44 	bl	801089e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800fa16:	f001 fafd 	bl	8011014 <SUBGRF_GetRandom>
}
 800fa1a:	bd08      	pop	{r3, pc}

0800fa1c <RadioSetModem>:
{
 800fa1c:	b510      	push	{r4, lr}
 800fa1e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800fa20:	4b1c      	ldr	r3, [pc, #112]	; (800fa94 <RadioSetModem+0x78>)
 800fa22:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800fa24:	f001 fc6b 	bl	80112fe <RFW_SetRadioModem>
    switch( modem )
 800fa28:	2c05      	cmp	r4, #5
 800fa2a:	d804      	bhi.n	800fa36 <RadioSetModem+0x1a>
 800fa2c:	e8df f004 	tbb	[pc, r4]
 800fa30:	1d03110a 	.word	0x1d03110a
 800fa34:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800fa36:	2003      	movs	r0, #3
 800fa38:	f001 f844 	bl	8010ac4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fa3c:	4b15      	ldr	r3, [pc, #84]	; (800fa94 <RadioSetModem+0x78>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	735a      	strb	r2, [r3, #13]
}
 800fa42:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fa44:	2000      	movs	r0, #0
 800fa46:	f001 f83d 	bl	8010ac4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fa4a:	4b12      	ldr	r3, [pc, #72]	; (800fa94 <RadioSetModem+0x78>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	735a      	strb	r2, [r3, #13]
        break;
 800fa50:	e7f7      	b.n	800fa42 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800fa52:	2001      	movs	r0, #1
 800fa54:	f001 f836 	bl	8010ac4 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800fa58:	4b0e      	ldr	r3, [pc, #56]	; (800fa94 <RadioSetModem+0x78>)
 800fa5a:	7b5a      	ldrb	r2, [r3, #13]
 800fa5c:	7b18      	ldrb	r0, [r3, #12]
 800fa5e:	4282      	cmp	r2, r0
 800fa60:	d0ef      	beq.n	800fa42 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800fa62:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800fa64:	f000 fade 	bl	8010024 <RadioSetPublicNetwork>
 800fa68:	e7eb      	b.n	800fa42 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fa6a:	2002      	movs	r0, #2
 800fa6c:	f001 f82a 	bl	8010ac4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fa70:	4b08      	ldr	r3, [pc, #32]	; (800fa94 <RadioSetModem+0x78>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	735a      	strb	r2, [r3, #13]
        break;
 800fa76:	e7e4      	b.n	800fa42 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800fa78:	2002      	movs	r0, #2
 800fa7a:	f001 f823 	bl	8010ac4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fa7e:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <RadioSetModem+0x78>)
 800fa80:	2200      	movs	r2, #0
 800fa82:	735a      	strb	r2, [r3, #13]
        break;
 800fa84:	e7dd      	b.n	800fa42 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800fa86:	2000      	movs	r0, #0
 800fa88:	f001 f81c 	bl	8010ac4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800fa8c:	4b01      	ldr	r3, [pc, #4]	; (800fa94 <RadioSetModem+0x78>)
 800fa8e:	2200      	movs	r2, #0
 800fa90:	735a      	strb	r2, [r3, #13]
}
 800fa92:	e7d6      	b.n	800fa42 <RadioSetModem+0x26>
 800fa94:	20000d64 	.word	0x20000d64

0800fa98 <RadioSetTxGenericConfig>:
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	b086      	sub	sp, #24
 800fa9e:	4605      	mov	r5, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	4617      	mov	r7, r2
 800faa4:	461e      	mov	r6, r3
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800faa6:	2100      	movs	r1, #0
 800faa8:	9104      	str	r1, [sp, #16]
 800faaa:	9105      	str	r1, [sp, #20]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800faac:	f001 fc19 	bl	80112e2 <RFW_DeInit>
    switch( modem )
 800fab0:	2d03      	cmp	r5, #3
 800fab2:	f200 8156 	bhi.w	800fd62 <RadioSetTxGenericConfig+0x2ca>
 800fab6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800faba:	007a      	.short	0x007a
 800fabc:	014000dd 	.word	0x014000dd
 800fac0:	0004      	.short	0x0004
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800fac2:	7ca2      	ldrb	r2, [r4, #18]
 800fac4:	2a08      	cmp	r2, #8
 800fac6:	f200 8159 	bhi.w	800fd7c <RadioSetTxGenericConfig+0x2e4>
        {
            return -1;
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800faca:	68a1      	ldr	r1, [r4, #8]
 800facc:	a804      	add	r0, sp, #16
 800face:	f001 fe05 	bl	80116dc <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 8154 	beq.w	800fd82 <RadioSetTxGenericConfig+0x2ea>
        {
            return -1;
        }
        else if (config->msk.BitRate<= 10000)
 800fada:	f242 7210 	movw	r2, #10000	; 0x2710
 800fade:	4293      	cmp	r3, r2
 800fae0:	d823      	bhi.n	800fb2a <RadioSetTxGenericConfig+0x92>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800fae2:	4bae      	ldr	r3, [pc, #696]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fae4:	2203      	movs	r2, #3
 800fae6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800fae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800faec:	6822      	ldr	r2, [r4, #0]
 800faee:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800faf0:	7ce2      	ldrb	r2, [r4, #19]
 800faf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          radio_modem= MODEM_MSK;
 800faf6:	2502      	movs	r5, #2
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800faf8:	6863      	ldr	r3, [r4, #4]
 800fafa:	00da      	lsls	r2, r3, #3
 800fafc:	4ba7      	ldr	r3, [pc, #668]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fafe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800fb00:	2204      	movs	r2, #4
 800fb02:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800fb04:	7ca2      	ldrb	r2, [r4, #18]
 800fb06:	00d2      	lsls	r2, r2, #3
 800fb08:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800fb0e:	7da3      	ldrb	r3, [r4, #22]
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d018      	beq.n	800fb46 <RadioSetTxGenericConfig+0xae>
 800fb14:	7d23      	ldrb	r3, [r4, #20]
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	d015      	beq.n	800fb46 <RadioSetTxGenericConfig+0xae>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800fb1a:	7d62      	ldrb	r2, [r4, #21]
 800fb1c:	4b9f      	ldr	r3, [pc, #636]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fb1e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800fb20:	7da2      	ldrb	r2, [r4, #22]
 800fb22:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800fb24:	7d22      	ldrb	r2, [r4, #20]
 800fb26:	755a      	strb	r2, [r3, #21]
 800fb28:	e026      	b.n	800fb78 <RadioSetTxGenericConfig+0xe0>
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fb2a:	4b9c      	ldr	r3, [pc, #624]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	739d      	strb	r5, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fb30:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800fb34:	6822      	ldr	r2, [r4, #0]
 800fb36:	63da      	str	r2, [r3, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800fb38:	7ce2      	ldrb	r2, [r4, #19]
 800fb3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800fb3e:	6822      	ldr	r2, [r4, #0]
 800fb40:	0892      	lsrs	r2, r2, #2
 800fb42:	641a      	str	r2, [r3, #64]	; 0x40
 800fb44:	e7d8      	b.n	800faf8 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800fb46:	7d62      	ldrb	r2, [r4, #21]
 800fb48:	f102 030f 	add.w	r3, r2, #15
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d901      	bls.n	800fb56 <RadioSetTxGenericConfig+0xbe>
 800fb52:	2a01      	cmp	r2, #1
 800fb54:	d128      	bne.n	800fba8 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig= config;
 800fb56:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800fb5e:	4a90      	ldr	r2, [pc, #576]	; (800fda0 <RadioSetTxGenericConfig+0x308>)
 800fb60:	4b90      	ldr	r3, [pc, #576]	; (800fda4 <RadioSetTxGenericConfig+0x30c>)
 800fb62:	6819      	ldr	r1, [r3, #0]
 800fb64:	a801      	add	r0, sp, #4
 800fb66:	f001 fbb9 	bl	80112dc <RFW_Init>
 800fb6a:	b9e8      	cbnz	r0, 800fba8 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800fb6c:	4b8b      	ldr	r3, [pc, #556]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800fb72:	2101      	movs	r1, #1
 800fb74:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800fb76:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800fb78:	f7ff fc2a 	bl	800f3d0 <RadioStandby>
        RadioSetModem( radio_modem );
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f7ff ff4d 	bl	800fa1c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fb82:	4d86      	ldr	r5, [pc, #536]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fb84:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800fb88:	f000 ffb6 	bl	8010af8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fb8c:	f105 000e 	add.w	r0, r5, #14
 800fb90:	f001 f9be 	bl	8010f10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800fb94:	a804      	add	r0, sp, #16
 800fb96:	f001 f989 	bl	8010eac <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800fb9a:	8a20      	ldrh	r0, [r4, #16]
 800fb9c:	f001 f8ae 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 800fba0:	89a0      	ldrh	r0, [r4, #12]
 800fba2:	f001 f9a0 	bl	8010ee6 <SUBGRF_SetCrcPolynomial>
        break;
 800fba6:	e0dc      	b.n	800fd62 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	e0e3      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 80e9 	beq.w	800fd88 <RadioSetTxGenericConfig+0x2f0>
        {
            return -1;
        }
        if( config->fsk.SyncWordLength > 8 )
 800fbb6:	7ca2      	ldrb	r2, [r4, #18]
 800fbb8:	2a08      	cmp	r2, #8
 800fbba:	f200 80e8 	bhi.w	800fd8e <RadioSetTxGenericConfig+0x2f6>
        {
            return -1;
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800fbbe:	68a1      	ldr	r1, [r4, #8]
 800fbc0:	a804      	add	r0, sp, #16
 800fbc2:	f001 fd8b 	bl	80116dc <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fbc6:	4b75      	ldr	r3, [pc, #468]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800fbce:	6821      	ldr	r1, [r4, #0]
 800fbd0:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800fbd2:	7ce1      	ldrb	r1, [r4, #19]
 800fbd4:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800fbd8:	69a1      	ldr	r1, [r4, #24]
 800fbda:	6419      	str	r1, [r3, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fbdc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800fbde:	6861      	ldr	r1, [r4, #4]
 800fbe0:	00c9      	lsls	r1, r1, #3
 800fbe2:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800fbe4:	2104      	movs	r1, #4
 800fbe6:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800fbe8:	7ca1      	ldrb	r1, [r4, #18]
 800fbea:	00c9      	lsls	r1, r1, #3
 800fbec:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800fbee:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800fbf0:	7da3      	ldrb	r3, [r4, #22]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d00a      	beq.n	800fc0c <RadioSetTxGenericConfig+0x174>
 800fbf6:	7d23      	ldrb	r3, [r4, #20]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d007      	beq.n	800fc0c <RadioSetTxGenericConfig+0x174>
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800fbfc:	7d62      	ldrb	r2, [r4, #21]
 800fbfe:	4b67      	ldr	r3, [pc, #412]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fc00:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800fc02:	7da2      	ldrb	r2, [r4, #22]
 800fc04:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800fc06:	7d22      	ldrb	r2, [r4, #20]
 800fc08:	755a      	strb	r2, [r3, #21]
 800fc0a:	e018      	b.n	800fc3e <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800fc0c:	7d62      	ldrb	r2, [r4, #21]
 800fc0e:	f102 030f 	add.w	r3, r2, #15
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d901      	bls.n	800fc1c <RadioSetTxGenericConfig+0x184>
 800fc18:	2a01      	cmp	r2, #1
 800fc1a:	d128      	bne.n	800fc6e <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800fc22:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800fc24:	4a5e      	ldr	r2, [pc, #376]	; (800fda0 <RadioSetTxGenericConfig+0x308>)
 800fc26:	4b5f      	ldr	r3, [pc, #380]	; (800fda4 <RadioSetTxGenericConfig+0x30c>)
 800fc28:	6819      	ldr	r1, [r3, #0]
 800fc2a:	a801      	add	r0, sp, #4
 800fc2c:	f001 fb56 	bl	80112dc <RFW_Init>
 800fc30:	b9e8      	cbnz	r0, 800fc6e <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800fc32:	4b5a      	ldr	r3, [pc, #360]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800fc38:	2101      	movs	r1, #1
 800fc3a:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800fc3c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800fc3e:	f7ff fbc7 	bl	800f3d0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800fc42:	2000      	movs	r0, #0
 800fc44:	f7ff feea 	bl	800fa1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fc48:	4d54      	ldr	r5, [pc, #336]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fc4a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800fc4e:	f000 ff53 	bl	8010af8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc52:	f105 000e 	add.w	r0, r5, #14
 800fc56:	f001 f95b 	bl	8010f10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800fc5a:	a804      	add	r0, sp, #16
 800fc5c:	f001 f926 	bl	8010eac <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800fc60:	8a20      	ldrh	r0, [r4, #16]
 800fc62:	f001 f84b 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800fc66:	89a0      	ldrh	r0, [r4, #12]
 800fc68:	f001 f93d 	bl	8010ee6 <SUBGRF_SetCrcPolynomial>
        break;
 800fc6c:	e079      	b.n	800fd62 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 800fc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc72:	e080      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fc74:	4b49      	ldr	r3, [pc, #292]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800fc7c:	7822      	ldrb	r2, [r4, #0]
 800fc7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800fc82:	7862      	ldrb	r2, [r4, #1]
 800fc84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800fc88:	78a2      	ldrb	r2, [r4, #2]
 800fc8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800fc8e:	78e3      	ldrb	r3, [r4, #3]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d033      	beq.n	800fcfc <RadioSetTxGenericConfig+0x264>
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d036      	beq.n	800fd06 <RadioSetTxGenericConfig+0x26e>
 800fc98:	b35b      	cbz	r3, 800fcf2 <RadioSetTxGenericConfig+0x25a>
            break;
          default:
            break;
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fc9a:	4d40      	ldr	r5, [pc, #256]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fc9c:	f04f 0801 	mov.w	r8, #1
 800fca0:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800fca4:	88a3      	ldrh	r3, [r4, #4]
 800fca6:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800fca8:	79a3      	ldrb	r3, [r4, #6]
 800fcaa:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800fcac:	79e3      	ldrb	r3, [r4, #7]
 800fcae:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800fcb2:	7a23      	ldrb	r3, [r4, #8]
 800fcb4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21

        RadioStandby( );
 800fcb8:	f7ff fb8a 	bl	800f3d0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800fcbc:	4640      	mov	r0, r8
 800fcbe:	f7ff fead 	bl	800fa1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fcc2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800fcc6:	f000 ff17 	bl	8010af8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fcca:	f105 000e 	add.w	r0, r5, #14
 800fcce:	f001 f91f 	bl	8010f10 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800fcd2:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800fcd6:	2b06      	cmp	r3, #6
 800fcd8:	d024      	beq.n	800fd24 <RadioSetTxGenericConfig+0x28c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
        }
        else
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800fcda:	f640 0089 	movw	r0, #2185	; 0x889
 800fcde:	f000 ff93 	bl	8010c08 <SUBGRF_ReadRegister>
 800fce2:	f040 0104 	orr.w	r1, r0, #4
 800fce6:	b2c9      	uxtb	r1, r1
 800fce8:	f640 0089 	movw	r0, #2185	; 0x889
 800fcec:	f000 fe9a 	bl	8010a24 <SUBGRF_WriteRegister>
 800fcf0:	e037      	b.n	800fd62 <RadioSetTxGenericConfig+0x2ca>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800fcf2:	4b2a      	ldr	r3, [pc, #168]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fcfa:	e7ce      	b.n	800fc9a <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800fcfc:	4b27      	ldr	r3, [pc, #156]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800fd04:	e7c9      	b.n	800fc9a <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800fd06:	7823      	ldrb	r3, [r4, #0]
 800fd08:	3b0b      	subs	r3, #11
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d904      	bls.n	800fd1a <RadioSetTxGenericConfig+0x282>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800fd10:	4b22      	ldr	r3, [pc, #136]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800fd18:	e7bf      	b.n	800fc9a <RadioSetTxGenericConfig+0x202>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800fd1a:	4b20      	ldr	r3, [pc, #128]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800fd22:	e7ba      	b.n	800fc9a <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800fd24:	f640 0089 	movw	r0, #2185	; 0x889
 800fd28:	f000 ff6e 	bl	8010c08 <SUBGRF_ReadRegister>
 800fd2c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800fd30:	f640 0089 	movw	r0, #2185	; 0x889
 800fd34:	f000 fe76 	bl	8010a24 <SUBGRF_WriteRegister>
 800fd38:	e013      	b.n	800fd62 <RadioSetTxGenericConfig+0x2ca>
        }
        // WORKAROUND END
        break;
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd42:	d227      	bcs.n	800fd94 <RadioSetTxGenericConfig+0x2fc>
        {
            return -1;
        }
        RadioSetModem( MODEM_BPSK );
 800fd44:	2003      	movs	r0, #3
 800fd46:	f7ff fe69 	bl	800fa1c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800fd4a:	4814      	ldr	r0, [pc, #80]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800fd52:	6823      	ldr	r3, [r4, #0]
 800fd54:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800fd56:	2316      	movs	r3, #22
 800fd58:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fd5c:	3038      	adds	r0, #56	; 0x38
 800fd5e:	f000 fecb 	bl	8010af8 <SUBGRF_SetModulationParams>
        break;
    default:
        break;
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800fd62:	4638      	mov	r0, r7
 800fd64:	f001 f9ea 	bl	801113c <SUBGRF_SetRfTxPower>
 800fd68:	4c0c      	ldr	r4, [pc, #48]	; (800fd9c <RadioSetTxGenericConfig+0x304>)
 800fd6a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800fd6e:	f001 fabd 	bl	80112ec <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800fd72:	6066      	str	r6, [r4, #4]
    return 0;
 800fd74:	2000      	movs	r0, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800fd76:	b006      	add	sp, #24
 800fd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	e7f9      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
            return -1;
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295
 800fd86:	e7f6      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
            return -1;
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8c:	e7f3      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
            return -1;
 800fd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd92:	e7f0      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
            return -1;
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	e7ed      	b.n	800fd76 <RadioSetTxGenericConfig+0x2de>
 800fd9a:	bf00      	nop
 800fd9c:	20000d64 	.word	0x20000d64
 800fda0:	20000dc0 	.word	0x20000dc0
 800fda4:	20000d48 	.word	0x20000d48

0800fda8 <RadioSetRxGenericConfig>:
{
 800fda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdac:	b086      	sub	sp, #24
 800fdae:	4606      	mov	r6, r0
 800fdb0:	460c      	mov	r4, r1
 800fdb2:	4615      	mov	r5, r2
 800fdb4:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800fdbc:	f001 fa91 	bl	80112e2 <RFW_DeInit>
    if( rxContinuous != 0 )
 800fdc0:	b105      	cbz	r5, 800fdc4 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800fdc2:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800fdc4:	3d00      	subs	r5, #0
 800fdc6:	bf18      	it	ne
 800fdc8:	2501      	movne	r5, #1
 800fdca:	4b93      	ldr	r3, [pc, #588]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fdcc:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800fdce:	b136      	cbz	r6, 800fdde <RadioSetRxGenericConfig+0x36>
 800fdd0:	2e01      	cmp	r6, #1
 800fdd2:	f000 808f 	beq.w	800fef4 <RadioSetRxGenericConfig+0x14c>
 800fdd6:	2000      	movs	r0, #0
}
 800fdd8:	b006      	add	sp, #24
 800fdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800fdde:	68a3      	ldr	r3, [r4, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	f000 810d 	beq.w	8010000 <RadioSetRxGenericConfig+0x258>
 800fde6:	68e3      	ldr	r3, [r4, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 810c 	beq.w	8010006 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800fdee:	7fa2      	ldrb	r2, [r4, #30]
 800fdf0:	2a08      	cmp	r2, #8
 800fdf2:	f200 810b 	bhi.w	801000c <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800fdf6:	6921      	ldr	r1, [r4, #16]
 800fdf8:	a804      	add	r0, sp, #16
 800fdfa:	f001 fc6f 	bl	80116dc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800fdfe:	6820      	ldr	r0, [r4, #0]
 800fe00:	3800      	subs	r0, #0
 800fe02:	bf18      	it	ne
 800fe04:	2001      	movne	r0, #1
 800fe06:	f000 fcad 	bl	8010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fe0a:	4d83      	ldr	r5, [pc, #524]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fe0c:	2600      	movs	r6, #0
 800fe0e:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800fe12:	68a3      	ldr	r3, [r4, #8]
 800fe14:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800fe16:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fe1a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800fe1e:	6860      	ldr	r0, [r4, #4]
 800fe20:	f001 f9fa 	bl	8011218 <SUBGRF_GetFskBandwidthRegValue>
 800fe24:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fe28:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800fe2a:	68e3      	ldr	r3, [r4, #12]
 800fe2c:	00db      	lsls	r3, r3, #3
 800fe2e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800fe30:	7fe3      	ldrb	r3, [r4, #31]
 800fe32:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800fe34:	7fa3      	ldrb	r3, [r4, #30]
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800fe3a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800fe3e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800fe40:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800fe44:	b973      	cbnz	r3, 800fe64 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800fe46:	6961      	ldr	r1, [r4, #20]
 800fe48:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800fe4a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800fe4e:	2a02      	cmp	r2, #2
 800fe50:	d012      	beq.n	800fe78 <RadioSetRxGenericConfig+0xd0>
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d010      	beq.n	800fe78 <RadioSetRxGenericConfig+0xd0>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800fe56:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800fe5a:	496f      	ldr	r1, [pc, #444]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fe5c:	75c8      	strb	r0, [r1, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800fe5e:	760a      	strb	r2, [r1, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800fe60:	754b      	strb	r3, [r1, #21]
 800fe62:	e023      	b.n	800feac <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	d003      	beq.n	800fe70 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800fe68:	4a6b      	ldr	r2, [pc, #428]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fe6a:	21ff      	movs	r1, #255	; 0xff
 800fe6c:	7591      	strb	r1, [r2, #22]
 800fe6e:	e7ec      	b.n	800fe4a <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800fe70:	4a69      	ldr	r2, [pc, #420]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fe72:	21ff      	movs	r1, #255	; 0xff
 800fe74:	7591      	strb	r1, [r2, #22]
 800fe76:	e7e8      	b.n	800fe4a <RadioSetRxGenericConfig+0xa2>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800fe78:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800fe7c:	f102 030f 	add.w	r3, r2, #15
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d901      	bls.n	800fe8a <RadioSetRxGenericConfig+0xe2>
 800fe86:	2a01      	cmp	r2, #1
 800fe88:	d131      	bne.n	800feee <RadioSetRxGenericConfig+0x146>
          ConfigGeneric.rtx = CONFIG_RX;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f88d 300c 	strb.w	r3, [sp, #12]
          ConfigGeneric.RxConfig = config;
 800fe90:	9402      	str	r4, [sp, #8]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800fe92:	4a62      	ldr	r2, [pc, #392]	; (801001c <RadioSetRxGenericConfig+0x274>)
 800fe94:	4b62      	ldr	r3, [pc, #392]	; (8010020 <RadioSetRxGenericConfig+0x278>)
 800fe96:	6819      	ldr	r1, [r3, #0]
 800fe98:	a801      	add	r0, sp, #4
 800fe9a:	f001 fa1f 	bl	80112dc <RFW_Init>
 800fe9e:	bb30      	cbnz	r0, 800feee <RadioSetRxGenericConfig+0x146>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800fea0:	4b5d      	ldr	r3, [pc, #372]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800fea2:	2200      	movs	r2, #0
 800fea4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800fea6:	2101      	movs	r1, #1
 800fea8:	75d9      	strb	r1, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800feaa:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800feac:	f7ff fa90 	bl	800f3d0 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800feb0:	2000      	movs	r0, #0
 800feb2:	f7ff fdb3 	bl	800fa1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800feb6:	4d58      	ldr	r5, [pc, #352]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800feb8:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800febc:	f000 fe1c 	bl	8010af8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fec0:	f105 000e 	add.w	r0, r5, #14
 800fec4:	f001 f824 	bl	8010f10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800fec8:	a804      	add	r0, sp, #16
 800feca:	f000 ffef 	bl	8010eac <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800fece:	8ba0      	ldrh	r0, [r4, #28]
 800fed0:	f000 ff14 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800fed4:	8b20      	ldrh	r0, [r4, #24]
 800fed6:	f001 f806 	bl	8010ee6 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800feda:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fede:	fb03 f707 	mul.w	r7, r3, r7
 800fee2:	68a3      	ldr	r3, [r4, #8]
 800fee4:	fbb7 f7f3 	udiv	r7, r7, r3
 800fee8:	60af      	str	r7, [r5, #8]
    return status;
 800feea:	2000      	movs	r0, #0
        break;
 800feec:	e774      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
            return -1;
 800feee:	f04f 30ff 	mov.w	r0, #4294967295
 800fef2:	e771      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 800fef4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f000 808b 	beq.w	8010012 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800fefc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d055      	beq.n	800ffb0 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 800ff04:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ff08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ff0a:	3800      	subs	r0, #0
 800ff0c:	bf18      	it	ne
 800ff0e:	2001      	movne	r0, #1
 800ff10:	f000 fc28 	bl	8010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800ff14:	b2f8      	uxtb	r0, r7
 800ff16:	f000 fdb3 	bl	8010a80 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ff1a:	4b3f      	ldr	r3, [pc, #252]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800ff22:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800ff26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800ff2a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ff2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800ff32:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800ff36:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800ff3a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d03e      	beq.n	800ffc0 <RadioSetRxGenericConfig+0x218>
 800ff42:	2b02      	cmp	r3, #2
 800ff44:	d041      	beq.n	800ffca <RadioSetRxGenericConfig+0x222>
 800ff46:	b3b3      	cbz	r3, 800ffb6 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ff48:	4d33      	ldr	r5, [pc, #204]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ff4a:	2601      	movs	r6, #1
 800ff4c:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ff4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ff50:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800ff52:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800ff56:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ff58:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800ff5c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ff60:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800ff64:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800ff68:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 800ff6c:	f7ff fa30 	bl	800f3d0 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7ff fd53 	bl	800fa1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ff76:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800ff7a:	f000 fdbd 	bl	8010af8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ff7e:	f105 000e 	add.w	r0, r5, #14
 800ff82:	f000 ffc5 	bl	8010f10 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800ff86:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800ff8a:	42b3      	cmp	r3, r6
 800ff8c:	d02d      	beq.n	800ffea <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800ff8e:	f240 7036 	movw	r0, #1846	; 0x736
 800ff92:	f000 fe39 	bl	8010c08 <SUBGRF_ReadRegister>
 800ff96:	f040 0104 	orr.w	r1, r0, #4
 800ff9a:	b2c9      	uxtb	r1, r1
 800ff9c:	f240 7036 	movw	r0, #1846	; 0x736
 800ffa0:	f000 fd40 	bl	8010a24 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800ffa4:	4b1c      	ldr	r3, [pc, #112]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ffa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffaa:	609a      	str	r2, [r3, #8]
    return status;
 800ffac:	2000      	movs	r0, #0
        break;
 800ffae:	e713      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800ffb0:	f894 8014 	ldrb.w	r8, [r4, #20]
 800ffb4:	e7a8      	b.n	800ff08 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ffb6:	4b18      	ldr	r3, [pc, #96]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ffbe:	e7c3      	b.n	800ff48 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ffc0:	4b15      	ldr	r3, [pc, #84]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ffc8:	e7be      	b.n	800ff48 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ffca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ffce:	3b0b      	subs	r3, #11
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d904      	bls.n	800ffe0 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ffd6:	4b10      	ldr	r3, [pc, #64]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ffde:	e7b3      	b.n	800ff48 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ffe0:	4b0d      	ldr	r3, [pc, #52]	; (8010018 <RadioSetRxGenericConfig+0x270>)
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ffe8:	e7ae      	b.n	800ff48 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800ffea:	f240 7036 	movw	r0, #1846	; 0x736
 800ffee:	f000 fe0b 	bl	8010c08 <SUBGRF_ReadRegister>
 800fff2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800fff6:	f240 7036 	movw	r0, #1846	; 0x736
 800fffa:	f000 fd13 	bl	8010a24 <SUBGRF_WriteRegister>
 800fffe:	e7d1      	b.n	800ffa4 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	e6e8      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
 8010006:	f04f 30ff 	mov.w	r0, #4294967295
 801000a:	e6e5      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
            return -1;
 801000c:	f04f 30ff 	mov.w	r0, #4294967295
 8010010:	e6e2      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
            return -1;
 8010012:	f04f 30ff 	mov.w	r0, #4294967295
 8010016:	e6df      	b.n	800fdd8 <RadioSetRxGenericConfig+0x30>
 8010018:	20000d64 	.word	0x20000d64
 801001c:	20000d4c 	.word	0x20000d4c
 8010020:	20000d48 	.word	0x20000d48

08010024 <RadioSetPublicNetwork>:
{
 8010024:	b510      	push	{r4, lr}
 8010026:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010028:	4b0e      	ldr	r3, [pc, #56]	; (8010064 <RadioSetPublicNetwork+0x40>)
 801002a:	7318      	strb	r0, [r3, #12]
 801002c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801002e:	2001      	movs	r0, #1
 8010030:	f7ff fcf4 	bl	800fa1c <RadioSetModem>
    if( enable == true )
 8010034:	b154      	cbz	r4, 801004c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8010036:	2134      	movs	r1, #52	; 0x34
 8010038:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801003c:	f000 fcf2 	bl	8010a24 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010040:	2144      	movs	r1, #68	; 0x44
 8010042:	f240 7041 	movw	r0, #1857	; 0x741
 8010046:	f000 fced 	bl	8010a24 <SUBGRF_WriteRegister>
}
 801004a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801004c:	2114      	movs	r1, #20
 801004e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010052:	f000 fce7 	bl	8010a24 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8010056:	2124      	movs	r1, #36	; 0x24
 8010058:	f240 7041 	movw	r0, #1857	; 0x741
 801005c:	f000 fce2 	bl	8010a24 <SUBGRF_WriteRegister>
}
 8010060:	e7f3      	b.n	801004a <RadioSetPublicNetwork+0x26>
 8010062:	bf00      	nop
 8010064:	20000d64 	.word	0x20000d64

08010068 <RadioSetTxConfig>:
{
 8010068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	b083      	sub	sp, #12
 801006e:	4604      	mov	r4, r0
 8010070:	460d      	mov	r5, r1
 8010072:	4691      	mov	r9, r2
 8010074:	461f      	mov	r7, r3
 8010076:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801007a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 801007e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8010082:	f001 f92e 	bl	80112e2 <RFW_DeInit>
    switch( modem )
 8010086:	2c01      	cmp	r4, #1
 8010088:	d056      	beq.n	8010138 <RadioSetTxConfig+0xd0>
 801008a:	2c04      	cmp	r4, #4
 801008c:	f000 80a3 	beq.w	80101d6 <RadioSetTxConfig+0x16e>
 8010090:	b164      	cbz	r4, 80100ac <RadioSetTxConfig+0x44>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010092:	4628      	mov	r0, r5
 8010094:	f001 f852 	bl	801113c <SUBGRF_SetRfTxPower>
 8010098:	4c57      	ldr	r4, [pc, #348]	; (80101f8 <RadioSetTxConfig+0x190>)
 801009a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801009e:	f001 f925 	bl	80112ec <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80100a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100a4:	6063      	str	r3, [r4, #4]
}
 80100a6:	b003      	add	sp, #12
 80100a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80100ac:	4c52      	ldr	r4, [pc, #328]	; (80101f8 <RadioSetTxConfig+0x190>)
 80100ae:	f04f 0b00 	mov.w	fp, #0
 80100b2:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80100b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100b8:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80100ba:	230b      	movs	r3, #11
 80100bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80100c0:	4638      	mov	r0, r7
 80100c2:	f001 f8a9 	bl	8011218 <SUBGRF_GetFskBandwidthRegValue>
 80100c6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80100ca:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80100ce:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80100d2:	00f6      	lsls	r6, r6, #3
 80100d4:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80100d6:	2304      	movs	r3, #4
 80100d8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80100da:	2318      	movs	r3, #24
 80100dc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80100de:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80100e2:	f088 0801 	eor.w	r8, r8, #1
 80100e6:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 80100ea:	f1ba 0f00 	cmp.w	sl, #0
 80100ee:	d01f      	beq.n	8010130 <RadioSetTxConfig+0xc8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80100f0:	22f2      	movs	r2, #242	; 0xf2
 80100f2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80100f4:	4c40      	ldr	r4, [pc, #256]	; (80101f8 <RadioSetTxConfig+0x190>)
 80100f6:	2301      	movs	r3, #1
 80100f8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80100fa:	f7ff f969 	bl	800f3d0 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80100fe:	2000      	movs	r0, #0
 8010100:	f7ff fc8c 	bl	800fa1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010104:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010108:	f000 fcf6 	bl	8010af8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801010c:	f104 000e 	add.w	r0, r4, #14
 8010110:	f000 fefe 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010114:	4a39      	ldr	r2, [pc, #228]	; (80101fc <RadioSetTxConfig+0x194>)
 8010116:	466b      	mov	r3, sp
 8010118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801011c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010120:	4618      	mov	r0, r3
 8010122:	f000 fec3 	bl	8010eac <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010126:	f240 10ff 	movw	r0, #511	; 0x1ff
 801012a:	f000 fde7 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
            break;
 801012e:	e7b0      	b.n	8010092 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010130:	4b31      	ldr	r3, [pc, #196]	; (80101f8 <RadioSetTxConfig+0x190>)
 8010132:	2201      	movs	r2, #1
 8010134:	75da      	strb	r2, [r3, #23]
 8010136:	e7dd      	b.n	80100f4 <RadioSetTxConfig+0x8c>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010138:	4a2f      	ldr	r2, [pc, #188]	; (80101f8 <RadioSetTxConfig+0x190>)
 801013a:	2301      	movs	r3, #1
 801013c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010148:	492d      	ldr	r1, [pc, #180]	; (8010200 <RadioSetTxConfig+0x198>)
 801014a:	5dc9      	ldrb	r1, [r1, r7]
 801014c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010150:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8010154:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010158:	b91f      	cbnz	r7, 8010162 <RadioSetTxConfig+0xfa>
 801015a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801015c:	3a0b      	subs	r2, #11
 801015e:	2a01      	cmp	r2, #1
 8010160:	d92b      	bls.n	80101ba <RadioSetTxConfig+0x152>
 8010162:	2f01      	cmp	r7, #1
 8010164:	d026      	beq.n	80101b4 <RadioSetTxConfig+0x14c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010166:	4a24      	ldr	r2, [pc, #144]	; (80101f8 <RadioSetTxConfig+0x190>)
 8010168:	2100      	movs	r1, #0
 801016a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801016e:	4a22      	ldr	r2, [pc, #136]	; (80101f8 <RadioSetTxConfig+0x190>)
 8010170:	2101      	movs	r1, #1
 8010172:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010174:	3b05      	subs	r3, #5
 8010176:	b2db      	uxtb	r3, r3
 8010178:	428b      	cmp	r3, r1
 801017a:	d923      	bls.n	80101c4 <RadioSetTxConfig+0x15c>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801017c:	4b1e      	ldr	r3, [pc, #120]	; (80101f8 <RadioSetTxConfig+0x190>)
 801017e:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010180:	4c1d      	ldr	r4, [pc, #116]	; (80101f8 <RadioSetTxConfig+0x190>)
 8010182:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010186:	4b1f      	ldr	r3, [pc, #124]	; (8010204 <RadioSetTxConfig+0x19c>)
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801018c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010190:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010194:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010198:	f7ff f91a 	bl	800f3d0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801019c:	2001      	movs	r0, #1
 801019e:	f7ff fc3d 	bl	800fa1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80101a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80101a6:	f000 fca7 	bl	8010af8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80101aa:	f104 000e 	add.w	r0, r4, #14
 80101ae:	f000 feaf 	bl	8010f10 <SUBGRF_SetPacketParams>
            break;
 80101b2:	e76e      	b.n	8010092 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80101b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101b6:	2a0c      	cmp	r2, #12
 80101b8:	d1d5      	bne.n	8010166 <RadioSetTxConfig+0xfe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80101ba:	4a0f      	ldr	r2, [pc, #60]	; (80101f8 <RadioSetTxConfig+0x190>)
 80101bc:	2101      	movs	r1, #1
 80101be:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80101c2:	e7d4      	b.n	801016e <RadioSetTxConfig+0x106>
                if( preambleLen < 12 )
 80101c4:	2e0b      	cmp	r6, #11
 80101c6:	d803      	bhi.n	80101d0 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80101c8:	4613      	mov	r3, r2
 80101ca:	220c      	movs	r2, #12
 80101cc:	839a      	strh	r2, [r3, #28]
 80101ce:	e7d7      	b.n	8010180 <RadioSetTxConfig+0x118>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80101d0:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <RadioSetTxConfig+0x190>)
 80101d2:	839e      	strh	r6, [r3, #28]
 80101d4:	e7d4      	b.n	8010180 <RadioSetTxConfig+0x118>
            RadioSetModem(MODEM_SIGFOX_TX);
 80101d6:	2004      	movs	r0, #4
 80101d8:	f7ff fc20 	bl	800fa1c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80101dc:	4806      	ldr	r0, [pc, #24]	; (80101f8 <RadioSetTxConfig+0x190>)
 80101de:	2302      	movs	r3, #2
 80101e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80101e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101e6:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80101e8:	2316      	movs	r3, #22
 80101ea:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80101ee:	3038      	adds	r0, #56	; 0x38
 80101f0:	f000 fc82 	bl	8010af8 <SUBGRF_SetModulationParams>
            break;
 80101f4:	e74d      	b.n	8010092 <RadioSetTxConfig+0x2a>
 80101f6:	bf00      	nop
 80101f8:	20000d64 	.word	0x20000d64
 80101fc:	080121c8 	.word	0x080121c8
 8010200:	08012ec0 	.word	0x08012ec0
 8010204:	20000118 	.word	0x20000118

08010208 <RadioSetRxConfig>:
{
 8010208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020c:	b087      	sub	sp, #28
 801020e:	4604      	mov	r4, r0
 8010210:	460e      	mov	r6, r1
 8010212:	4615      	mov	r5, r2
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 801021a:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 801021e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8010222:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8010226:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 801022a:	4bab      	ldr	r3, [pc, #684]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 801022c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8010230:	f001 f857 	bl	80112e2 <RFW_DeInit>
    if( rxContinuous == true )
 8010234:	f1b8 0f00 	cmp.w	r8, #0
 8010238:	d001      	beq.n	801023e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 801023a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801023e:	b16f      	cbz	r7, 801025c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8010240:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8010244:	4ba5      	ldr	r3, [pc, #660]	; (80104dc <RadioSetRxConfig+0x2d4>)
 8010246:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8010248:	2c01      	cmp	r4, #1
 801024a:	f000 80d2 	beq.w	80103f2 <RadioSetRxConfig+0x1ea>
 801024e:	2c05      	cmp	r4, #5
 8010250:	d008      	beq.n	8010264 <RadioSetRxConfig+0x5c>
 8010252:	2c00      	cmp	r4, #0
 8010254:	d07c      	beq.n	8010350 <RadioSetRxConfig+0x148>
}
 8010256:	b007      	add	sp, #28
 8010258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 801025c:	4b9f      	ldr	r3, [pc, #636]	; (80104dc <RadioSetRxConfig+0x2d4>)
 801025e:	22ff      	movs	r2, #255	; 0xff
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	e7f1      	b.n	8010248 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8010264:	2001      	movs	r0, #1
 8010266:	f000 fa7d 	bl	8010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801026a:	4c9b      	ldr	r4, [pc, #620]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 801026c:	2700      	movs	r7, #0
 801026e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010272:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8010274:	2309      	movs	r3, #9
 8010276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801027a:	f44f 7348 	mov.w	r3, #800	; 0x320
 801027e:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010280:	4630      	mov	r0, r6
 8010282:	f000 ffc9 	bl	8011218 <SUBGRF_GetFskBandwidthRegValue>
 8010286:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801028a:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801028c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010290:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8010294:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8010296:	2310      	movs	r3, #16
 8010298:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801029a:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801029c:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801029e:	4b8f      	ldr	r3, [pc, #572]	; (80104dc <RadioSetRxConfig+0x2d4>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80102a4:	2301      	movs	r3, #1
 80102a6:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80102a8:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80102aa:	2005      	movs	r0, #5
 80102ac:	f7ff fbb6 	bl	800fa1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80102b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80102b4:	f000 fc20 	bl	8010af8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80102b8:	f104 000e 	add.w	r0, r4, #14
 80102bc:	f000 fe28 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80102c0:	ab02      	add	r3, sp, #8
 80102c2:	4a87      	ldr	r2, [pc, #540]	; (80104e0 <RadioSetRxConfig+0x2d8>)
 80102c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80102cc:	4618      	mov	r0, r3
 80102ce:	f000 fded 	bl	8010eac <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80102d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80102d6:	f000 fd11 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80102da:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80102de:	f7fe fffd 	bl	800f2dc <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80102e2:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 80102e6:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80102ea:	f7fe fffb 	bl	800f2e4 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80102ee:	2104      	movs	r1, #4
 80102f0:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80102f4:	f7fe fff6 	bl	800f2e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80102f8:	f640 009b 	movw	r0, #2203	; 0x89b
 80102fc:	f7fe ffee 	bl	800f2dc <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8010300:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8010304:	f041 0108 	orr.w	r1, r1, #8
 8010308:	f640 009b 	movw	r0, #2203	; 0x89b
 801030c:	f7fe ffea 	bl	800f2e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8010310:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8010314:	f7fe ffe2 	bl	800f2dc <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8010318:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801031c:	f041 0118 	orr.w	r1, r1, #24
 8010320:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8010324:	f7fe ffde 	bl	800f2e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8010328:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801032c:	f7fe ffd6 	bl	800f2dc <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8010330:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8010334:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8010338:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801033c:	f7fe ffd2 	bl	800f2e4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010340:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010344:	fb03 fa0a 	mul.w	sl, r3, sl
 8010348:	fbba f5f5 	udiv	r5, sl, r5
 801034c:	60a5      	str	r5, [r4, #8]
            break;
 801034e:	e782      	b.n	8010256 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010350:	2000      	movs	r0, #0
 8010352:	f000 fa07 	bl	8010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010356:	4c60      	ldr	r4, [pc, #384]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 8010358:	f04f 0800 	mov.w	r8, #0
 801035c:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010360:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010362:	230b      	movs	r3, #11
 8010364:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010368:	4630      	mov	r0, r6
 801036a:	f000 ff55 	bl	8011218 <SUBGRF_GetFskBandwidthRegValue>
 801036e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010372:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010376:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801037a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801037e:	2304      	movs	r3, #4
 8010380:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010382:	2318      	movs	r3, #24
 8010384:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010386:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801038a:	f087 0701 	eor.w	r7, r7, #1
 801038e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010390:	4b52      	ldr	r3, [pc, #328]	; (80104dc <RadioSetRxConfig+0x2d4>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010396:	f1bb 0f00 	cmp.w	fp, #0
 801039a:	d026      	beq.n	80103ea <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801039c:	22f2      	movs	r2, #242	; 0xf2
 801039e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80103a0:	4c4d      	ldr	r4, [pc, #308]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 80103a2:	2301      	movs	r3, #1
 80103a4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80103a6:	f7ff f813 	bl	800f3d0 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80103aa:	2000      	movs	r0, #0
 80103ac:	f7ff fb36 	bl	800fa1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80103b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80103b4:	f000 fba0 	bl	8010af8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80103b8:	f104 000e 	add.w	r0, r4, #14
 80103bc:	f000 fda8 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80103c0:	4a48      	ldr	r2, [pc, #288]	; (80104e4 <RadioSetRxConfig+0x2dc>)
 80103c2:	ab04      	add	r3, sp, #16
 80103c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80103cc:	4618      	mov	r0, r3
 80103ce:	f000 fd6d 	bl	8010eac <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80103d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80103d6:	f000 fc91 	bl	8010cfc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80103da:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80103de:	fb03 fa0a 	mul.w	sl, r3, sl
 80103e2:	fbba f5f5 	udiv	r5, sl, r5
 80103e6:	60a5      	str	r5, [r4, #8]
            break;
 80103e8:	e735      	b.n	8010256 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80103ea:	4b3b      	ldr	r3, [pc, #236]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	75da      	strb	r2, [r3, #23]
 80103f0:	e7d6      	b.n	80103a0 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80103f2:	2000      	movs	r0, #0
 80103f4:	f000 f9b6 	bl	8010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80103f8:	4a37      	ldr	r2, [pc, #220]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 80103fa:	2301      	movs	r3, #1
 80103fc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010400:	b2eb      	uxtb	r3, r5
 8010402:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010406:	4938      	ldr	r1, [pc, #224]	; (80104e8 <RadioSetRxConfig+0x2e0>)
 8010408:	5d89      	ldrb	r1, [r1, r6]
 801040a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801040e:	9901      	ldr	r1, [sp, #4]
 8010410:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010414:	b91e      	cbnz	r6, 801041e <RadioSetRxConfig+0x216>
 8010416:	f1a5 020b 	sub.w	r2, r5, #11
 801041a:	2a01      	cmp	r2, #1
 801041c:	d941      	bls.n	80104a2 <RadioSetRxConfig+0x29a>
 801041e:	2e01      	cmp	r6, #1
 8010420:	d03d      	beq.n	801049e <RadioSetRxConfig+0x296>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010422:	4a2d      	ldr	r2, [pc, #180]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 8010424:	2100      	movs	r1, #0
 8010426:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801042a:	4a2b      	ldr	r2, [pc, #172]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 801042c:	2101      	movs	r1, #1
 801042e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010430:	3b05      	subs	r3, #5
 8010432:	b2db      	uxtb	r3, r3
 8010434:	428b      	cmp	r3, r1
 8010436:	d939      	bls.n	80104ac <RadioSetRxConfig+0x2a4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010438:	4b27      	ldr	r3, [pc, #156]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 801043a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801043e:	4c26      	ldr	r4, [pc, #152]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 8010440:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010442:	4b26      	ldr	r3, [pc, #152]	; (80104dc <RadioSetRxConfig+0x2d4>)
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010448:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801044c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8010450:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010454:	f7fe ffbc 	bl	800f3d0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010458:	2001      	movs	r0, #1
 801045a:	f7ff fadf 	bl	800fa1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801045e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010462:	f000 fb49 	bl	8010af8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010466:	f104 000e 	add.w	r0, r4, #14
 801046a:	f000 fd51 	bl	8010f10 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801046e:	fa5f f08a 	uxtb.w	r0, sl
 8010472:	f000 fb05 	bl	8010a80 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010476:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801047a:	2b01      	cmp	r3, #1
 801047c:	d021      	beq.n	80104c2 <RadioSetRxConfig+0x2ba>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801047e:	f240 7036 	movw	r0, #1846	; 0x736
 8010482:	f000 fbc1 	bl	8010c08 <SUBGRF_ReadRegister>
 8010486:	f040 0104 	orr.w	r1, r0, #4
 801048a:	b2c9      	uxtb	r1, r1
 801048c:	f240 7036 	movw	r0, #1846	; 0x736
 8010490:	f000 fac8 	bl	8010a24 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010494:	4b10      	ldr	r3, [pc, #64]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 8010496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801049a:	609a      	str	r2, [r3, #8]
}
 801049c:	e6db      	b.n	8010256 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801049e:	2d0c      	cmp	r5, #12
 80104a0:	d1bf      	bne.n	8010422 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80104a2:	4a0d      	ldr	r2, [pc, #52]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 80104a4:	2101      	movs	r1, #1
 80104a6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80104aa:	e7be      	b.n	801042a <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 80104ac:	f1b9 0f0b 	cmp.w	r9, #11
 80104b0:	d803      	bhi.n	80104ba <RadioSetRxConfig+0x2b2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80104b2:	4613      	mov	r3, r2
 80104b4:	220c      	movs	r2, #12
 80104b6:	839a      	strh	r2, [r3, #28]
 80104b8:	e7c1      	b.n	801043e <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80104ba:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <RadioSetRxConfig+0x2d0>)
 80104bc:	f8a3 901c 	strh.w	r9, [r3, #28]
 80104c0:	e7bd      	b.n	801043e <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80104c2:	f240 7036 	movw	r0, #1846	; 0x736
 80104c6:	f000 fb9f 	bl	8010c08 <SUBGRF_ReadRegister>
 80104ca:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80104ce:	f240 7036 	movw	r0, #1846	; 0x736
 80104d2:	f000 faa7 	bl	8010a24 <SUBGRF_WriteRegister>
 80104d6:	e7dd      	b.n	8010494 <RadioSetRxConfig+0x28c>
 80104d8:	20000d64 	.word	0x20000d64
 80104dc:	20000118 	.word	0x20000118
 80104e0:	080121d0 	.word	0x080121d0
 80104e4:	080121c8 	.word	0x080121c8
 80104e8:	08012ec0 	.word	0x08012ec0

080104ec <RadioIsChannelFree>:
{
 80104ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ee:	b08b      	sub	sp, #44	; 0x2c
 80104f0:	4604      	mov	r4, r0
 80104f2:	460f      	mov	r7, r1
 80104f4:	4616      	mov	r6, r2
 80104f6:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80104f8:	f7fe ff6a 	bl	800f3d0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80104fc:	2000      	movs	r0, #0
 80104fe:	f7ff fa8d 	bl	800fa1c <RadioSetModem>
    RadioSetChannel( freq );
 8010502:	4620      	mov	r0, r4
 8010504:	f7ff f956 	bl	800f7b4 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8010508:	2301      	movs	r3, #1
 801050a:	9309      	str	r3, [sp, #36]	; 0x24
 801050c:	2400      	movs	r4, #0
 801050e:	9408      	str	r4, [sp, #32]
 8010510:	9407      	str	r4, [sp, #28]
 8010512:	9406      	str	r4, [sp, #24]
 8010514:	9405      	str	r4, [sp, #20]
 8010516:	9404      	str	r4, [sp, #16]
 8010518:	9403      	str	r4, [sp, #12]
 801051a:	9402      	str	r4, [sp, #8]
 801051c:	2303      	movs	r3, #3
 801051e:	9301      	str	r3, [sp, #4]
 8010520:	9700      	str	r7, [sp, #0]
 8010522:	4623      	mov	r3, r4
 8010524:	f44f 7216 	mov.w	r2, #600	; 0x258
 8010528:	4639      	mov	r1, r7
 801052a:	4620      	mov	r0, r4
 801052c:	f7ff fe6c 	bl	8010208 <RadioSetRxConfig>
    RadioRx( 0 );
 8010530:	4620      	mov	r0, r4
 8010532:	f7ff f957 	bl	800f7e4 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8010536:	f7ff f90f 	bl	800f758 <RadioGetWakeupTime>
 801053a:	f7f1 fa45 	bl	80019c8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 801053e:	f001 facb 	bl	8011ad8 <UTIL_TIMER_GetCurrentTime>
 8010542:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010544:	4620      	mov	r0, r4
 8010546:	f001 fad1 	bl	8011aec <UTIL_TIMER_GetElapsedTime>
 801054a:	42a8      	cmp	r0, r5
 801054c:	d206      	bcs.n	801055c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 801054e:	2000      	movs	r0, #0
 8010550:	f7ff f90f 	bl	800f772 <RadioRssi>
        if( rssi > rssiThresh )
 8010554:	42b0      	cmp	r0, r6
 8010556:	ddf5      	ble.n	8010544 <RadioIsChannelFree+0x58>
            status = false;
 8010558:	2400      	movs	r4, #0
 801055a:	e000      	b.n	801055e <RadioIsChannelFree+0x72>
    bool status = true;
 801055c:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801055e:	f7fe ff37 	bl	800f3d0 <RadioStandby>
}
 8010562:	4620      	mov	r0, r4
 8010564:	b00b      	add	sp, #44	; 0x2c
 8010566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010568 <RadioInit>:
{
 8010568:	b570      	push	{r4, r5, r6, lr}
 801056a:	b082      	sub	sp, #8
    RadioEvents = events;
 801056c:	4b1d      	ldr	r3, [pc, #116]	; (80105e4 <RadioInit+0x7c>)
 801056e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8010570:	4d1d      	ldr	r5, [pc, #116]	; (80105e8 <RadioInit+0x80>)
 8010572:	2400      	movs	r4, #0
 8010574:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8010576:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8010578:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801057a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 801057c:	481b      	ldr	r0, [pc, #108]	; (80105ec <RadioInit+0x84>)
 801057e:	f000 fb67 	bl	8010c50 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8010582:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8010584:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8010586:	f000 f8fa 	bl	801077e <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801058a:	4621      	mov	r1, r4
 801058c:	4620      	mov	r0, r4
 801058e:	f000 f9f1 	bl	8010974 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8010592:	2204      	movs	r2, #4
 8010594:	4621      	mov	r1, r4
 8010596:	2001      	movs	r0, #1
 8010598:	f000 fbc9 	bl	8010d2e <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801059c:	4623      	mov	r3, r4
 801059e:	4622      	mov	r2, r4
 80105a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105a4:	4608      	mov	r0, r1
 80105a6:	f000 f97a 	bl	801089e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80105aa:	f7ff f953 	bl	800f854 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80105ae:	4e10      	ldr	r6, [pc, #64]	; (80105f0 <RadioInit+0x88>)
 80105b0:	9400      	str	r4, [sp, #0]
 80105b2:	4b10      	ldr	r3, [pc, #64]	; (80105f4 <RadioInit+0x8c>)
 80105b4:	4622      	mov	r2, r4
 80105b6:	f04f 31ff 	mov.w	r1, #4294967295
 80105ba:	4630      	mov	r0, r6
 80105bc:	f001 fa6e 	bl	8011a9c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80105c0:	4d0d      	ldr	r5, [pc, #52]	; (80105f8 <RadioInit+0x90>)
 80105c2:	9400      	str	r4, [sp, #0]
 80105c4:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <RadioInit+0x94>)
 80105c6:	4622      	mov	r2, r4
 80105c8:	f04f 31ff 	mov.w	r1, #4294967295
 80105cc:	4628      	mov	r0, r5
 80105ce:	f001 fa65 	bl	8011a9c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80105d2:	4630      	mov	r0, r6
 80105d4:	f001 fac0 	bl	8011b58 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80105d8:	4628      	mov	r0, r5
 80105da:	f001 fabd 	bl	8011b58 <UTIL_TIMER_Stop>
}
 80105de:	b002      	add	sp, #8
 80105e0:	bd70      	pop	{r4, r5, r6, pc}
 80105e2:	bf00      	nop
 80105e4:	20000d48 	.word	0x20000d48
 80105e8:	20000d64 	.word	0x20000d64
 80105ec:	0800f745 	.word	0x0800f745
 80105f0:	20000dc0 	.word	0x20000dc0
 80105f4:	0800f1c5 	.word	0x0800f1c5
 80105f8:	20000d4c 	.word	0x20000d4c
 80105fc:	0800f1ed 	.word	0x0800f1ed

08010600 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010600:	b510      	push	{r4, lr}
 8010602:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010604:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010608:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801060a:	460a      	mov	r2, r1
 801060c:	4601      	mov	r1, r0
 801060e:	4803      	ldr	r0, [pc, #12]	; (801061c <SUBGRF_WriteCommand+0x1c>)
 8010610:	f7f4 ff80 	bl	8005514 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010614:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8010618:	bd10      	pop	{r4, pc}
 801061a:	bf00      	nop
 801061c:	200001cc 	.word	0x200001cc

08010620 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010620:	b510      	push	{r4, lr}
 8010622:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010624:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010628:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801062a:	460a      	mov	r2, r1
 801062c:	4601      	mov	r1, r0
 801062e:	4803      	ldr	r0, [pc, #12]	; (801063c <SUBGRF_ReadCommand+0x1c>)
 8010630:	f7f4 ffc6 	bl	80055c0 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010634:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop
 801063c:	200001cc 	.word	0x200001cc

08010640 <SUBGRF_GetOperatingMode>:
}
 8010640:	4b01      	ldr	r3, [pc, #4]	; (8010648 <SUBGRF_GetOperatingMode+0x8>)
 8010642:	7818      	ldrb	r0, [r3, #0]
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	20000dde 	.word	0x20000dde

0801064c <SUBGRF_SetStandby>:
{
 801064c:	b500      	push	{lr}
 801064e:	b083      	sub	sp, #12
 8010650:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010654:	2201      	movs	r2, #1
 8010656:	f10d 0107 	add.w	r1, sp, #7
 801065a:	2080      	movs	r0, #128	; 0x80
 801065c:	f7ff ffd0 	bl	8010600 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010664:	b92b      	cbnz	r3, 8010672 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8010666:	4b05      	ldr	r3, [pc, #20]	; (801067c <SUBGRF_SetStandby+0x30>)
 8010668:	2201      	movs	r2, #1
 801066a:	701a      	strb	r2, [r3, #0]
}
 801066c:	b003      	add	sp, #12
 801066e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8010672:	4b02      	ldr	r3, [pc, #8]	; (801067c <SUBGRF_SetStandby+0x30>)
 8010674:	2202      	movs	r2, #2
 8010676:	701a      	strb	r2, [r3, #0]
}
 8010678:	e7f8      	b.n	801066c <SUBGRF_SetStandby+0x20>
 801067a:	bf00      	nop
 801067c:	20000dde 	.word	0x20000dde

08010680 <SUBGRF_SetTx>:
{
 8010680:	b500      	push	{lr}
 8010682:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010684:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <SUBGRF_SetTx+0x30>)
 8010686:	2204      	movs	r2, #4
 8010688:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801068a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801068e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010692:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010696:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801069a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801069e:	2203      	movs	r2, #3
 80106a0:	a901      	add	r1, sp, #4
 80106a2:	2083      	movs	r0, #131	; 0x83
 80106a4:	f7ff ffac 	bl	8010600 <SUBGRF_WriteCommand>
}
 80106a8:	b003      	add	sp, #12
 80106aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80106ae:	bf00      	nop
 80106b0:	20000dde 	.word	0x20000dde

080106b4 <SUBGRF_SetRx>:
{
 80106b4:	b500      	push	{lr}
 80106b6:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80106b8:	4b0a      	ldr	r3, [pc, #40]	; (80106e4 <SUBGRF_SetRx+0x30>)
 80106ba:	2205      	movs	r2, #5
 80106bc:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80106be:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80106c2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80106c6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80106ca:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80106ce:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80106d2:	2203      	movs	r2, #3
 80106d4:	a901      	add	r1, sp, #4
 80106d6:	2082      	movs	r0, #130	; 0x82
 80106d8:	f7ff ff92 	bl	8010600 <SUBGRF_WriteCommand>
}
 80106dc:	b003      	add	sp, #12
 80106de:	f85d fb04 	ldr.w	pc, [sp], #4
 80106e2:	bf00      	nop
 80106e4:	20000dde 	.word	0x20000dde

080106e8 <SUBGRF_SetRxDutyCycle>:
{
 80106e8:	b500      	push	{lr}
 80106ea:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80106ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80106f0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80106f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80106f8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80106fc:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010700:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010704:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010708:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801070c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010710:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010714:	2206      	movs	r2, #6
 8010716:	4669      	mov	r1, sp
 8010718:	2094      	movs	r0, #148	; 0x94
 801071a:	f7ff ff71 	bl	8010600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801071e:	4b03      	ldr	r3, [pc, #12]	; (801072c <SUBGRF_SetRxDutyCycle+0x44>)
 8010720:	2206      	movs	r2, #6
 8010722:	701a      	strb	r2, [r3, #0]
}
 8010724:	b003      	add	sp, #12
 8010726:	f85d fb04 	ldr.w	pc, [sp], #4
 801072a:	bf00      	nop
 801072c:	20000dde 	.word	0x20000dde

08010730 <SUBGRF_SetCad>:
{
 8010730:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010732:	2200      	movs	r2, #0
 8010734:	4611      	mov	r1, r2
 8010736:	20c5      	movs	r0, #197	; 0xc5
 8010738:	f7ff ff62 	bl	8010600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801073c:	4b01      	ldr	r3, [pc, #4]	; (8010744 <SUBGRF_SetCad+0x14>)
 801073e:	2207      	movs	r2, #7
 8010740:	701a      	strb	r2, [r3, #0]
}
 8010742:	bd08      	pop	{r3, pc}
 8010744:	20000dde 	.word	0x20000dde

08010748 <SUBGRF_SetTxContinuousWave>:
{
 8010748:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801074a:	2200      	movs	r2, #0
 801074c:	4611      	mov	r1, r2
 801074e:	20d1      	movs	r0, #209	; 0xd1
 8010750:	f7ff ff56 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010754:	bd08      	pop	{r3, pc}

08010756 <SUBGRF_SetTxInfinitePreamble>:
{
 8010756:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010758:	2200      	movs	r2, #0
 801075a:	4611      	mov	r1, r2
 801075c:	20d2      	movs	r0, #210	; 0xd2
 801075e:	f7ff ff4f 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010762:	bd08      	pop	{r3, pc}

08010764 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8010764:	b500      	push	{lr}
 8010766:	b083      	sub	sp, #12
 8010768:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801076c:	2201      	movs	r2, #1
 801076e:	f10d 0107 	add.w	r1, sp, #7
 8010772:	209f      	movs	r0, #159	; 0x9f
 8010774:	f7ff ff44 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010778:	b003      	add	sp, #12
 801077a:	f85d fb04 	ldr.w	pc, [sp], #4

0801077e <SUBGRF_SetRegulatorMode>:
{
 801077e:	b500      	push	{lr}
 8010780:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010782:	f7f2 f931 	bl	80029e8 <RBI_IsDCDC>
 8010786:	2801      	cmp	r0, #1
 8010788:	d00b      	beq.n	80107a2 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 801078a:	2300      	movs	r3, #0
 801078c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010790:	2201      	movs	r2, #1
 8010792:	f10d 0107 	add.w	r1, sp, #7
 8010796:	2096      	movs	r0, #150	; 0x96
 8010798:	f7ff ff32 	bl	8010600 <SUBGRF_WriteCommand>
}
 801079c:	b003      	add	sp, #12
 801079e:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80107a2:	2301      	movs	r3, #1
 80107a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80107a8:	e7f2      	b.n	8010790 <SUBGRF_SetRegulatorMode+0x12>

080107aa <SUBGRF_Calibrate>:
{
 80107aa:	b500      	push	{lr}
 80107ac:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80107ae:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80107b2:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80107b6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80107b8:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80107bc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80107be:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80107c2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80107c4:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80107c8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80107ca:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80107ce:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80107d0:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80107d4:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80107d6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80107da:	2201      	movs	r2, #1
 80107dc:	f10d 0107 	add.w	r1, sp, #7
 80107e0:	2089      	movs	r0, #137	; 0x89
 80107e2:	f7ff ff0d 	bl	8010600 <SUBGRF_WriteCommand>
}
 80107e6:	b003      	add	sp, #12
 80107e8:	f85d fb04 	ldr.w	pc, [sp], #4

080107ec <SUBGRF_CalibrateImage>:
{
 80107ec:	b500      	push	{lr}
 80107ee:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80107f0:	4b1c      	ldr	r3, [pc, #112]	; (8010864 <SUBGRF_CalibrateImage+0x78>)
 80107f2:	4298      	cmp	r0, r3
 80107f4:	d90d      	bls.n	8010812 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80107f6:	23e1      	movs	r3, #225	; 0xe1
 80107f8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80107fc:	23e9      	movs	r3, #233	; 0xe9
 80107fe:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010802:	2202      	movs	r2, #2
 8010804:	a901      	add	r1, sp, #4
 8010806:	2098      	movs	r0, #152	; 0x98
 8010808:	f7ff fefa 	bl	8010600 <SUBGRF_WriteCommand>
}
 801080c:	b003      	add	sp, #12
 801080e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8010812:	4b15      	ldr	r3, [pc, #84]	; (8010868 <SUBGRF_CalibrateImage+0x7c>)
 8010814:	4298      	cmp	r0, r3
 8010816:	d906      	bls.n	8010826 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8010818:	23d7      	movs	r3, #215	; 0xd7
 801081a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 801081e:	23db      	movs	r3, #219	; 0xdb
 8010820:	f88d 3005 	strb.w	r3, [sp, #5]
 8010824:	e7ed      	b.n	8010802 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8010826:	4b11      	ldr	r3, [pc, #68]	; (801086c <SUBGRF_CalibrateImage+0x80>)
 8010828:	4298      	cmp	r0, r3
 801082a:	d906      	bls.n	801083a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 801082c:	23c1      	movs	r3, #193	; 0xc1
 801082e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8010832:	23c5      	movs	r3, #197	; 0xc5
 8010834:	f88d 3005 	strb.w	r3, [sp, #5]
 8010838:	e7e3      	b.n	8010802 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 801083a:	4b0d      	ldr	r3, [pc, #52]	; (8010870 <SUBGRF_CalibrateImage+0x84>)
 801083c:	4298      	cmp	r0, r3
 801083e:	d906      	bls.n	801084e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010840:	2375      	movs	r3, #117	; 0x75
 8010842:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8010846:	2381      	movs	r3, #129	; 0x81
 8010848:	f88d 3005 	strb.w	r3, [sp, #5]
 801084c:	e7d9      	b.n	8010802 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 801084e:	4b09      	ldr	r3, [pc, #36]	; (8010874 <SUBGRF_CalibrateImage+0x88>)
 8010850:	4298      	cmp	r0, r3
 8010852:	d9d6      	bls.n	8010802 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 8010854:	236b      	movs	r3, #107	; 0x6b
 8010856:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 801085a:	236f      	movs	r3, #111	; 0x6f
 801085c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010860:	e7cf      	b.n	8010802 <SUBGRF_CalibrateImage+0x16>
 8010862:	bf00      	nop
 8010864:	35a4e900 	.word	0x35a4e900
 8010868:	32a9f880 	.word	0x32a9f880
 801086c:	2de54480 	.word	0x2de54480
 8010870:	1b6b0b00 	.word	0x1b6b0b00
 8010874:	1954fc40 	.word	0x1954fc40

08010878 <SUBGRF_SetPaConfig>:
{
 8010878:	b500      	push	{lr}
 801087a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 801087c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010880:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010884:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8010888:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801088c:	2204      	movs	r2, #4
 801088e:	eb0d 0102 	add.w	r1, sp, r2
 8010892:	2095      	movs	r0, #149	; 0x95
 8010894:	f7ff feb4 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010898:	b003      	add	sp, #12
 801089a:	f85d fb04 	ldr.w	pc, [sp], #4

0801089e <SUBGRF_SetDioIrqParams>:
{
 801089e:	b500      	push	{lr}
 80108a0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80108a2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80108a6:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80108aa:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80108ae:	0a08      	lsrs	r0, r1, #8
 80108b0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80108b4:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80108b8:	0a11      	lsrs	r1, r2, #8
 80108ba:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80108be:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80108c2:	0a1a      	lsrs	r2, r3, #8
 80108c4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80108c8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80108cc:	2208      	movs	r2, #8
 80108ce:	4669      	mov	r1, sp
 80108d0:	4610      	mov	r0, r2
 80108d2:	f7ff fe95 	bl	8010600 <SUBGRF_WriteCommand>
}
 80108d6:	b003      	add	sp, #12
 80108d8:	f85d fb04 	ldr.w	pc, [sp], #4

080108dc <SUBGRF_SetTcxoMode>:
{
 80108dc:	b500      	push	{lr}
 80108de:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80108e0:	f000 0007 	and.w	r0, r0, #7
 80108e4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80108e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108ec:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80108f0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80108f4:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80108f8:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80108fc:	2204      	movs	r2, #4
 80108fe:	eb0d 0102 	add.w	r1, sp, r2
 8010902:	2097      	movs	r0, #151	; 0x97
 8010904:	f7ff fe7c 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010908:	b003      	add	sp, #12
 801090a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010910 <SUBGRF_SetRfFrequency>:
{
 8010910:	b510      	push	{r4, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8010916:	4b12      	ldr	r3, [pc, #72]	; (8010960 <SUBGRF_SetRfFrequency+0x50>)
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	b1d3      	cbz	r3, 8010952 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801091c:	4a11      	ldr	r2, [pc, #68]	; (8010964 <SUBGRF_SetRfFrequency+0x54>)
 801091e:	2300      	movs	r3, #0
 8010920:	0660      	lsls	r0, r4, #25
 8010922:	09e1      	lsrs	r1, r4, #7
 8010924:	f7f0 fa1e 	bl	8000d64 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010928:	0e03      	lsrs	r3, r0, #24
 801092a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801092e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010932:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8010936:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801093a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801093e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010942:	2204      	movs	r2, #4
 8010944:	eb0d 0102 	add.w	r1, sp, r2
 8010948:	2086      	movs	r0, #134	; 0x86
 801094a:	f7ff fe59 	bl	8010600 <SUBGRF_WriteCommand>
}
 801094e:	b002      	add	sp, #8
 8010950:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8010952:	f7ff ff4b 	bl	80107ec <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8010956:	4b02      	ldr	r3, [pc, #8]	; (8010960 <SUBGRF_SetRfFrequency+0x50>)
 8010958:	2201      	movs	r2, #1
 801095a:	701a      	strb	r2, [r3, #0]
 801095c:	e7de      	b.n	801091c <SUBGRF_SetRfFrequency+0xc>
 801095e:	bf00      	nop
 8010960:	20000ddc 	.word	0x20000ddc
 8010964:	01e84800 	.word	0x01e84800

08010968 <SUBGRF_GetPacketType>:
}
 8010968:	4b01      	ldr	r3, [pc, #4]	; (8010970 <SUBGRF_GetPacketType+0x8>)
 801096a:	7818      	ldrb	r0, [r3, #0]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	20000ddf 	.word	0x20000ddf

08010974 <SUBGRF_SetBufferBaseAddress>:
{
 8010974:	b500      	push	{lr}
 8010976:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8010978:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 801097c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010980:	2202      	movs	r2, #2
 8010982:	a901      	add	r1, sp, #4
 8010984:	208f      	movs	r0, #143	; 0x8f
 8010986:	f7ff fe3b 	bl	8010600 <SUBGRF_WriteCommand>
}
 801098a:	b003      	add	sp, #12
 801098c:	f85d fb04 	ldr.w	pc, [sp], #4

08010990 <SUBGRF_GetRssiInst>:
{
 8010990:	b500      	push	{lr}
 8010992:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010994:	2201      	movs	r2, #1
 8010996:	a901      	add	r1, sp, #4
 8010998:	2015      	movs	r0, #21
 801099a:	f7ff fe41 	bl	8010620 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801099e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80109a2:	4240      	negs	r0, r0
}
 80109a4:	1040      	asrs	r0, r0, #1
 80109a6:	b003      	add	sp, #12
 80109a8:	f85d fb04 	ldr.w	pc, [sp], #4

080109ac <SUBGRF_GetPacketStatus>:
{
 80109ac:	b510      	push	{r4, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80109b2:	2203      	movs	r2, #3
 80109b4:	a901      	add	r1, sp, #4
 80109b6:	2014      	movs	r0, #20
 80109b8:	f7ff fe32 	bl	8010620 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80109bc:	f7ff ffd4 	bl	8010968 <SUBGRF_GetPacketType>
 80109c0:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80109c2:	b148      	cbz	r0, 80109d8 <SUBGRF_GetPacketStatus+0x2c>
 80109c4:	2801      	cmp	r0, #1
 80109c6:	d018      	beq.n	80109fa <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80109c8:	2214      	movs	r2, #20
 80109ca:	2100      	movs	r1, #0
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 fe90 	bl	80116f2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80109d2:	230f      	movs	r3, #15
 80109d4:	7023      	strb	r3, [r4, #0]
}
 80109d6:	e00e      	b.n	80109f6 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80109d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80109dc:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80109de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80109e2:	425b      	negs	r3, r3
 80109e4:	105b      	asrs	r3, r3, #1
 80109e6:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80109e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80109ec:	425b      	negs	r3, r3
 80109ee:	105b      	asrs	r3, r3, #1
 80109f0:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	60a3      	str	r3, [r4, #8]
}
 80109f6:	b002      	add	sp, #8
 80109f8:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80109fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80109fe:	425b      	negs	r3, r3
 8010a00:	105b      	asrs	r3, r3, #1
 8010a02:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8010a04:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8010a08:	3302      	adds	r3, #2
 8010a0a:	109b      	asrs	r3, r3, #2
 8010a0c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010a0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a12:	425b      	negs	r3, r3
 8010a14:	105b      	asrs	r3, r3, #1
 8010a16:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010a18:	4b01      	ldr	r3, [pc, #4]	; (8010a20 <SUBGRF_GetPacketStatus+0x74>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6123      	str	r3, [r4, #16]
            break;
 8010a1e:	e7ea      	b.n	80109f6 <SUBGRF_GetPacketStatus+0x4a>
 8010a20:	20000dd8 	.word	0x20000dd8

08010a24 <SUBGRF_WriteRegister>:
{
 8010a24:	b500      	push	{lr}
 8010a26:	b083      	sub	sp, #12
 8010a28:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	f10d 0207 	add.w	r2, sp, #7
 8010a32:	4601      	mov	r1, r0
 8010a34:	4802      	ldr	r0, [pc, #8]	; (8010a40 <SUBGRF_WriteRegister+0x1c>)
 8010a36:	f7f4 fcc9 	bl	80053cc <HAL_SUBGHZ_WriteRegisters>
}
 8010a3a:	b003      	add	sp, #12
 8010a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a40:	200001cc 	.word	0x200001cc

08010a44 <SUBGRF_SetRxBoosted>:
{
 8010a44:	b510      	push	{r4, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8010a4a:	4b0c      	ldr	r3, [pc, #48]	; (8010a7c <SUBGRF_SetRxBoosted+0x38>)
 8010a4c:	2205      	movs	r2, #5
 8010a4e:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010a50:	2197      	movs	r1, #151	; 0x97
 8010a52:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8010a56:	f7ff ffe5 	bl	8010a24 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010a5a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010a5e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010a62:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010a66:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010a6a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010a6e:	2203      	movs	r2, #3
 8010a70:	a901      	add	r1, sp, #4
 8010a72:	2082      	movs	r0, #130	; 0x82
 8010a74:	f7ff fdc4 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010a78:	b002      	add	sp, #8
 8010a7a:	bd10      	pop	{r4, pc}
 8010a7c:	20000dde 	.word	0x20000dde

08010a80 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010a80:	b500      	push	{lr}
 8010a82:	b083      	sub	sp, #12
 8010a84:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8010a88:	2201      	movs	r2, #1
 8010a8a:	f10d 0107 	add.w	r1, sp, #7
 8010a8e:	20a0      	movs	r0, #160	; 0xa0
 8010a90:	f7ff fdb6 	bl	8010600 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a98:	2b3f      	cmp	r3, #63	; 0x3f
 8010a9a:	d90f      	bls.n	8010abc <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8010a9c:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010a9e:	2200      	movs	r2, #0
        while( mant > 31 )
 8010aa0:	e002      	b.n	8010aa8 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010aa2:	089b      	lsrs	r3, r3, #2
            exp++;
 8010aa4:	1c51      	adds	r1, r2, #1
 8010aa6:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8010aa8:	2b1f      	cmp	r3, #31
 8010aaa:	d8fa      	bhi.n	8010aa2 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8010aac:	00d9      	lsls	r1, r3, #3
 8010aae:	b2c9      	uxtb	r1, r1
 8010ab0:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010ab2:	b2c9      	uxtb	r1, r1
 8010ab4:	f240 7006 	movw	r0, #1798	; 0x706
 8010ab8:	f7ff ffb4 	bl	8010a24 <SUBGRF_WriteRegister>
}
 8010abc:	b003      	add	sp, #12
 8010abe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010ac4 <SUBGRF_SetPacketType>:
{
 8010ac4:	b500      	push	{lr}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8010acc:	b2c3      	uxtb	r3, r0
 8010ace:	4a09      	ldr	r2, [pc, #36]	; (8010af4 <SUBGRF_SetPacketType+0x30>)
 8010ad0:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8010ad2:	b143      	cbz	r3, 8010ae6 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f10d 0107 	add.w	r1, sp, #7
 8010ada:	208a      	movs	r0, #138	; 0x8a
 8010adc:	f7ff fd90 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010ae0:	b003      	add	sp, #12
 8010ae2:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8010aec:	f7ff ff9a 	bl	8010a24 <SUBGRF_WriteRegister>
 8010af0:	e7f0      	b.n	8010ad4 <SUBGRF_SetPacketType+0x10>
 8010af2:	bf00      	nop
 8010af4:	20000ddf 	.word	0x20000ddf

08010af8 <SUBGRF_SetModulationParams>:
{
 8010af8:	b510      	push	{r4, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010afe:	4b3e      	ldr	r3, [pc, #248]	; (8010bf8 <SUBGRF_SetModulationParams+0x100>)
 8010b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b04:	ab02      	add	r3, sp, #8
 8010b06:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8010b0a:	7820      	ldrb	r0, [r4, #0]
 8010b0c:	4b3b      	ldr	r3, [pc, #236]	; (8010bfc <SUBGRF_SetModulationParams+0x104>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	4298      	cmp	r0, r3
 8010b12:	d106      	bne.n	8010b22 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8010b14:	7823      	ldrb	r3, [r4, #0]
 8010b16:	2b03      	cmp	r3, #3
 8010b18:	d82c      	bhi.n	8010b74 <SUBGRF_SetModulationParams+0x7c>
 8010b1a:	e8df f003 	tbb	[pc, r3]
 8010b1e:	4205      	.short	0x4205
 8010b20:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010b22:	f7ff ffcf 	bl	8010ac4 <SUBGRF_SetPacketType>
 8010b26:	e7f5      	b.n	8010b14 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010b28:	6862      	ldr	r2, [r4, #4]
 8010b2a:	4b35      	ldr	r3, [pc, #212]	; (8010c00 <SUBGRF_SetModulationParams+0x108>)
 8010b2c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010b30:	0c1a      	lsrs	r2, r3, #16
 8010b32:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010b36:	0a1a      	lsrs	r2, r3, #8
 8010b38:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010b3c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010b40:	7b23      	ldrb	r3, [r4, #12]
 8010b42:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010b46:	7b63      	ldrb	r3, [r4, #13]
 8010b48:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8010b4c:	68a1      	ldr	r1, [r4, #8]
 8010b4e:	4a2d      	ldr	r2, [pc, #180]	; (8010c04 <SUBGRF_SetModulationParams+0x10c>)
 8010b50:	2300      	movs	r3, #0
 8010b52:	0648      	lsls	r0, r1, #25
 8010b54:	09c9      	lsrs	r1, r1, #7
 8010b56:	f7f0 f905 	bl	8000d64 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010b5a:	0c03      	lsrs	r3, r0, #16
 8010b5c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8010b60:	0a03      	lsrs	r3, r0, #8
 8010b62:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8010b66:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010b6a:	2208      	movs	r2, #8
 8010b6c:	4669      	mov	r1, sp
 8010b6e:	208b      	movs	r0, #139	; 0x8b
 8010b70:	f7ff fd46 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010b74:	b002      	add	sp, #8
 8010b76:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010b78:	6922      	ldr	r2, [r4, #16]
 8010b7a:	4b21      	ldr	r3, [pc, #132]	; (8010c00 <SUBGRF_SetModulationParams+0x108>)
 8010b7c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010b80:	0c1a      	lsrs	r2, r3, #16
 8010b82:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010b86:	0a1a      	lsrs	r2, r3, #8
 8010b88:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010b8c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010b90:	7d23      	ldrb	r3, [r4, #20]
 8010b92:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010b96:	2204      	movs	r2, #4
 8010b98:	4669      	mov	r1, sp
 8010b9a:	208b      	movs	r0, #139	; 0x8b
 8010b9c:	f7ff fd30 	bl	8010600 <SUBGRF_WriteCommand>
        break;
 8010ba0:	e7e8      	b.n	8010b74 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010ba2:	7e23      	ldrb	r3, [r4, #24]
 8010ba4:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010ba8:	7e63      	ldrb	r3, [r4, #25]
 8010baa:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8010bae:	7ea3      	ldrb	r3, [r4, #26]
 8010bb0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010bb4:	7ee3      	ldrb	r3, [r4, #27]
 8010bb6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010bba:	2204      	movs	r2, #4
 8010bbc:	4669      	mov	r1, sp
 8010bbe:	208b      	movs	r0, #139	; 0x8b
 8010bc0:	f7ff fd1e 	bl	8010600 <SUBGRF_WriteCommand>
        break;
 8010bc4:	e7d6      	b.n	8010b74 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8010bc6:	6862      	ldr	r2, [r4, #4]
 8010bc8:	4b0d      	ldr	r3, [pc, #52]	; (8010c00 <SUBGRF_SetModulationParams+0x108>)
 8010bca:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010bce:	0c1a      	lsrs	r2, r3, #16
 8010bd0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010bd4:	0a1a      	lsrs	r2, r3, #8
 8010bd6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010bda:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010bde:	7b23      	ldrb	r3, [r4, #12]
 8010be0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8010be4:	7b63      	ldrb	r3, [r4, #13]
 8010be6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010bea:	2205      	movs	r2, #5
 8010bec:	4669      	mov	r1, sp
 8010bee:	208b      	movs	r0, #139	; 0x8b
 8010bf0:	f7ff fd06 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010bf4:	e7be      	b.n	8010b74 <SUBGRF_SetModulationParams+0x7c>
 8010bf6:	bf00      	nop
 8010bf8:	080121d8 	.word	0x080121d8
 8010bfc:	20000ddf 	.word	0x20000ddf
 8010c00:	3d090000 	.word	0x3d090000
 8010c04:	01e84800 	.word	0x01e84800

08010c08 <SUBGRF_ReadRegister>:
{
 8010c08:	b500      	push	{lr}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8010c0e:	2301      	movs	r3, #1
 8010c10:	f10d 0207 	add.w	r2, sp, #7
 8010c14:	4803      	ldr	r0, [pc, #12]	; (8010c24 <SUBGRF_ReadRegister+0x1c>)
 8010c16:	f7f4 fc29 	bl	800546c <HAL_SUBGHZ_ReadRegisters>
}
 8010c1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010c1e:	b003      	add	sp, #12
 8010c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c24:	200001cc 	.word	0x200001cc

08010c28 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8010c28:	b510      	push	{r4, lr}
 8010c2a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8010c2c:	f7f1 fedc 	bl	80029e8 <RBI_IsDCDC>
 8010c30:	2801      	cmp	r0, #1
 8010c32:	d000      	beq.n	8010c36 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8010c34:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8010c36:	f640 1023 	movw	r0, #2339	; 0x923
 8010c3a:	f7ff ffe5 	bl	8010c08 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8010c3e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010c42:	4321      	orrs	r1, r4
 8010c44:	f640 1023 	movw	r0, #2339	; 0x923
 8010c48:	f7ff feec 	bl	8010a24 <SUBGRF_WriteRegister>
}
 8010c4c:	e7f2      	b.n	8010c34 <Radio_SMPS_Set+0xc>
	...

08010c50 <SUBGRF_Init>:
{
 8010c50:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8010c52:	b108      	cbz	r0, 8010c58 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8010c54:	4a16      	ldr	r2, [pc, #88]	; (8010cb0 <SUBGRF_Init+0x60>)
 8010c56:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8010c58:	f7f0 fdc6 	bl	80017e8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010c5c:	2002      	movs	r0, #2
 8010c5e:	f7ff ffe3 	bl	8010c28 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010c62:	2000      	movs	r0, #0
 8010c64:	4b13      	ldr	r3, [pc, #76]	; (8010cb4 <SUBGRF_Init+0x64>)
 8010c66:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8010c68:	f7ff fcf0 	bl	801064c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010c6c:	f7f1 feba 	bl	80029e4 <RBI_IsTCXO>
 8010c70:	2801      	cmp	r0, #1
 8010c72:	d00f      	beq.n	8010c94 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010c74:	2110      	movs	r1, #16
 8010c76:	f640 1011 	movw	r0, #2321	; 0x911
 8010c7a:	f7ff fed3 	bl	8010a24 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010c7e:	2110      	movs	r1, #16
 8010c80:	f640 1012 	movw	r0, #2322	; 0x912
 8010c84:	f7ff fece 	bl	8010a24 <SUBGRF_WriteRegister>
    RBI_Init();
 8010c88:	f7f1 fe26 	bl	80028d8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8010c8c:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <SUBGRF_Init+0x68>)
 8010c8e:	2201      	movs	r2, #1
 8010c90:	701a      	strb	r2, [r3, #0]
}
 8010c92:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010c94:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010c98:	f7ff fe20 	bl	80108dc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	f640 1011 	movw	r0, #2321	; 0x911
 8010ca2:	f7ff febf 	bl	8010a24 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8010ca6:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8010caa:	f7ff fd7e 	bl	80107aa <SUBGRF_Calibrate>
 8010cae:	e7eb      	b.n	8010c88 <SUBGRF_Init+0x38>
 8010cb0:	20000de0 	.word	0x20000de0
 8010cb4:	20000ddc 	.word	0x20000ddc
 8010cb8:	20000dde 	.word	0x20000dde

08010cbc <SUBGRF_SetSleep>:
{
 8010cbc:	b510      	push	{r4, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	f7f1 fe4c 	bl	8002960 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010cc8:	2002      	movs	r0, #2
 8010cca:	f7ff ffad 	bl	8010c28 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010cce:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010cd2:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010cd6:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010cd8:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010cdc:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010cde:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f10d 0107 	add.w	r1, sp, #7
 8010ce8:	2084      	movs	r0, #132	; 0x84
 8010cea:	f7ff fc89 	bl	8010600 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010cee:	4b02      	ldr	r3, [pc, #8]	; (8010cf8 <SUBGRF_SetSleep+0x3c>)
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	701a      	strb	r2, [r3, #0]
}
 8010cf4:	b002      	add	sp, #8
 8010cf6:	bd10      	pop	{r4, pc}
 8010cf8:	20000dde 	.word	0x20000dde

08010cfc <SUBGRF_SetWhiteningSeed>:
{
 8010cfc:	b510      	push	{r4, lr}
 8010cfe:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8010d00:	f7ff fe32 	bl	8010968 <SUBGRF_GetPacketType>
 8010d04:	b100      	cbz	r0, 8010d08 <SUBGRF_SetWhiteningSeed+0xc>
}
 8010d06:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8010d08:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010d0c:	f7ff ff7c 	bl	8010c08 <SUBGRF_ReadRegister>
 8010d10:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8010d14:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8010d18:	4301      	orrs	r1, r0
 8010d1a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010d1e:	f7ff fe81 	bl	8010a24 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010d22:	b2e1      	uxtb	r1, r4
 8010d24:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8010d28:	f7ff fe7c 	bl	8010a24 <SUBGRF_WriteRegister>
}
 8010d2c:	e7eb      	b.n	8010d06 <SUBGRF_SetWhiteningSeed+0xa>

08010d2e <SUBGRF_SetTxParams>:
{
 8010d2e:	b570      	push	{r4, r5, r6, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	460c      	mov	r4, r1
 8010d34:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8010d36:	2801      	cmp	r0, #1
 8010d38:	d035      	beq.n	8010da6 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010d3a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010d3e:	f7ff ff63 	bl	8010c08 <SUBGRF_ReadRegister>
 8010d42:	f040 011e 	orr.w	r1, r0, #30
 8010d46:	b2c9      	uxtb	r1, r1
 8010d48:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8010d4c:	f7ff fe6a 	bl	8010a24 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010d50:	2001      	movs	r0, #1
 8010d52:	f7f1 fe4b 	bl	80029ec <RBI_GetRFOMaxPowerConfig>
 8010d56:	4605      	mov	r5, r0
        if (power > max_power)
 8010d58:	4284      	cmp	r4, r0
 8010d5a:	dd00      	ble.n	8010d5e <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010d5c:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010d5e:	2d14      	cmp	r5, #20
 8010d60:	d054      	beq.n	8010e0c <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010d62:	2d11      	cmp	r5, #17
 8010d64:	d05c      	beq.n	8010e20 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8010d66:	2d0e      	cmp	r5, #14
 8010d68:	d064      	beq.n	8010e34 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2107      	movs	r1, #7
 8010d70:	2004      	movs	r0, #4
 8010d72:	f7ff fd81 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010d76:	1b64      	subs	r4, r4, r5
 8010d78:	3416      	adds	r4, #22
 8010d7a:	b264      	sxtb	r4, r4
        if (power < -9)
 8010d7c:	f114 0f09 	cmn.w	r4, #9
 8010d80:	da01      	bge.n	8010d86 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8010d82:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8010d86:	2138      	movs	r1, #56	; 0x38
 8010d88:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010d8c:	f7ff fe4a 	bl	8010a24 <SUBGRF_WriteRegister>
    buf[0] = power;
 8010d90:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8010d94:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8010d98:	2202      	movs	r2, #2
 8010d9a:	a901      	add	r1, sp, #4
 8010d9c:	208e      	movs	r0, #142	; 0x8e
 8010d9e:	f7ff fc2f 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010da2:	b002      	add	sp, #8
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8010da6:	2000      	movs	r0, #0
 8010da8:	f7f1 fe20 	bl	80029ec <RBI_GetRFOMaxPowerConfig>
 8010dac:	4605      	mov	r5, r0
        if (power >  max_power)
 8010dae:	4284      	cmp	r4, r0
 8010db0:	dd00      	ble.n	8010db4 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010db2:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8010db4:	2d0e      	cmp	r5, #14
 8010db6:	d015      	beq.n	8010de4 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8010db8:	2d0a      	cmp	r5, #10
 8010dba:	d01d      	beq.n	8010df8 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	2006      	movs	r0, #6
 8010dc4:	f7ff fd58 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010dc8:	1b64      	subs	r4, r4, r5
 8010dca:	340e      	adds	r4, #14
 8010dcc:	b264      	sxtb	r4, r4
        if (power < -17)
 8010dce:	f114 0f11 	cmn.w	r4, #17
 8010dd2:	da01      	bge.n	8010dd8 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8010dd4:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8010dd8:	2118      	movs	r1, #24
 8010dda:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010dde:	f7ff fe21 	bl	8010a24 <SUBGRF_WriteRegister>
 8010de2:	e7d5      	b.n	8010d90 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8010de4:	2301      	movs	r3, #1
 8010de6:	461a      	mov	r2, r3
 8010de8:	2100      	movs	r1, #0
 8010dea:	2004      	movs	r0, #4
 8010dec:	f7ff fd44 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010df0:	1b64      	subs	r4, r4, r5
 8010df2:	340e      	adds	r4, #14
 8010df4:	b264      	sxtb	r4, r4
 8010df6:	e7ea      	b.n	8010dce <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8010df8:	2301      	movs	r3, #1
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7ff fd3a 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8010e04:	1b64      	subs	r4, r4, r5
 8010e06:	340d      	adds	r4, #13
 8010e08:	b264      	sxtb	r4, r4
 8010e0a:	e7e0      	b.n	8010dce <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	2200      	movs	r2, #0
 8010e10:	2105      	movs	r1, #5
 8010e12:	2003      	movs	r0, #3
 8010e14:	f7ff fd30 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010e18:	1b64      	subs	r4, r4, r5
 8010e1a:	3416      	adds	r4, #22
 8010e1c:	b264      	sxtb	r4, r4
 8010e1e:	e7ad      	b.n	8010d7c <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8010e20:	2301      	movs	r3, #1
 8010e22:	2200      	movs	r2, #0
 8010e24:	2103      	movs	r1, #3
 8010e26:	2002      	movs	r0, #2
 8010e28:	f7ff fd26 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010e2c:	1b64      	subs	r4, r4, r5
 8010e2e:	3416      	adds	r4, #22
 8010e30:	b264      	sxtb	r4, r4
 8010e32:	e7a3      	b.n	8010d7c <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8010e34:	2301      	movs	r3, #1
 8010e36:	2200      	movs	r2, #0
 8010e38:	2102      	movs	r1, #2
 8010e3a:	4608      	mov	r0, r1
 8010e3c:	f7ff fd1c 	bl	8010878 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010e40:	1b64      	subs	r4, r4, r5
 8010e42:	340e      	adds	r4, #14
 8010e44:	b264      	sxtb	r4, r4
 8010e46:	e799      	b.n	8010d7c <SUBGRF_SetTxParams+0x4e>

08010e48 <SUBGRF_GetRxBufferStatus>:
{
 8010e48:	b530      	push	{r4, r5, lr}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8010e50:	2202      	movs	r2, #2
 8010e52:	a901      	add	r1, sp, #4
 8010e54:	2013      	movs	r0, #19
 8010e56:	f7ff fbe3 	bl	8010620 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010e5a:	f7ff fd85 	bl	8010968 <SUBGRF_GetPacketType>
 8010e5e:	2801      	cmp	r0, #1
 8010e60:	d007      	beq.n	8010e72 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8010e62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e66:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8010e68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e6c:	7023      	strb	r3, [r4, #0]
}
 8010e6e:	b003      	add	sp, #12
 8010e70:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <SUBGRF_GetRxBufferStatus+0x40>)
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d1f2      	bne.n	8010e62 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010e7c:	f240 7002 	movw	r0, #1794	; 0x702
 8010e80:	f7ff fec2 	bl	8010c08 <SUBGRF_ReadRegister>
 8010e84:	7028      	strb	r0, [r5, #0]
 8010e86:	e7ef      	b.n	8010e68 <SUBGRF_GetRxBufferStatus+0x20>
 8010e88:	20000ddd 	.word	0x20000ddd

08010e8c <SUBGRF_WriteRegisters>:
{
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e90:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e94:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8010e96:	460a      	mov	r2, r1
 8010e98:	4601      	mov	r1, r0
 8010e9a:	4803      	ldr	r0, [pc, #12]	; (8010ea8 <SUBGRF_WriteRegisters+0x1c>)
 8010e9c:	f7f4 fa96 	bl	80053cc <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ea0:	f384 8810 	msr	PRIMASK, r4
}
 8010ea4:	bd10      	pop	{r4, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200001cc 	.word	0x200001cc

08010eac <SUBGRF_SetSyncWord>:
{
 8010eac:	b508      	push	{r3, lr}
 8010eae:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010eb0:	2208      	movs	r2, #8
 8010eb2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8010eb6:	f7ff ffe9 	bl	8010e8c <SUBGRF_WriteRegisters>
}
 8010eba:	2000      	movs	r0, #0
 8010ebc:	bd08      	pop	{r3, pc}

08010ebe <SUBGRF_SetCrcSeed>:
{
 8010ebe:	b500      	push	{lr}
 8010ec0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8010ec2:	0a03      	lsrs	r3, r0, #8
 8010ec4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8010ec8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010ecc:	f7ff fd4c 	bl	8010968 <SUBGRF_GetPacketType>
 8010ed0:	b110      	cbz	r0, 8010ed8 <SUBGRF_SetCrcSeed+0x1a>
}
 8010ed2:	b003      	add	sp, #12
 8010ed4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8010ed8:	2202      	movs	r2, #2
 8010eda:	a901      	add	r1, sp, #4
 8010edc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8010ee0:	f7ff ffd4 	bl	8010e8c <SUBGRF_WriteRegisters>
}
 8010ee4:	e7f5      	b.n	8010ed2 <SUBGRF_SetCrcSeed+0x14>

08010ee6 <SUBGRF_SetCrcPolynomial>:
{
 8010ee6:	b500      	push	{lr}
 8010ee8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8010eea:	0a03      	lsrs	r3, r0, #8
 8010eec:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010ef0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8010ef4:	f7ff fd38 	bl	8010968 <SUBGRF_GetPacketType>
 8010ef8:	b110      	cbz	r0, 8010f00 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8010efa:	b003      	add	sp, #12
 8010efc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010f00:	2202      	movs	r2, #2
 8010f02:	a901      	add	r1, sp, #4
 8010f04:	f240 60be 	movw	r0, #1726	; 0x6be
 8010f08:	f7ff ffc0 	bl	8010e8c <SUBGRF_WriteRegisters>
}
 8010f0c:	e7f5      	b.n	8010efa <SUBGRF_SetCrcPolynomial+0x14>
	...

08010f10 <SUBGRF_SetPacketParams>:
{
 8010f10:	b510      	push	{r4, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010f16:	ab01      	add	r3, sp, #4
 8010f18:	4a33      	ldr	r2, [pc, #204]	; (8010fe8 <SUBGRF_SetPacketParams+0xd8>)
 8010f1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8010f1c:	c303      	stmia	r3!, {r0, r1}
 8010f1e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010f20:	7820      	ldrb	r0, [r4, #0]
 8010f22:	4b32      	ldr	r3, [pc, #200]	; (8010fec <SUBGRF_SetPacketParams+0xdc>)
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	4298      	cmp	r0, r3
 8010f28:	d106      	bne.n	8010f38 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8010f2a:	7823      	ldrb	r3, [r4, #0]
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	d82a      	bhi.n	8010f86 <SUBGRF_SetPacketParams+0x76>
 8010f30:	e8df f003 	tbb	[pc, r3]
 8010f34:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010f38:	f7ff fdc4 	bl	8010ac4 <SUBGRF_SetPacketType>
 8010f3c:	e7f5      	b.n	8010f2a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010f3e:	7a63      	ldrb	r3, [r4, #9]
 8010f40:	2bf1      	cmp	r3, #241	; 0xf1
 8010f42:	d022      	beq.n	8010f8a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010f44:	2bf2      	cmp	r3, #242	; 0xf2
 8010f46:	d02a      	beq.n	8010f9e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010f48:	8862      	ldrh	r2, [r4, #2]
 8010f4a:	0a11      	lsrs	r1, r2, #8
 8010f4c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8010f50:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010f54:	7922      	ldrb	r2, [r4, #4]
 8010f56:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8010f5a:	7962      	ldrb	r2, [r4, #5]
 8010f5c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010f60:	79a2      	ldrb	r2, [r4, #6]
 8010f62:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010f66:	79e2      	ldrb	r2, [r4, #7]
 8010f68:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8010f6c:	7a22      	ldrb	r2, [r4, #8]
 8010f6e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8010f72:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010f76:	7aa3      	ldrb	r3, [r4, #10]
 8010f78:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8010f7c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8010f7e:	a901      	add	r1, sp, #4
 8010f80:	208c      	movs	r0, #140	; 0x8c
 8010f82:	f7ff fb3d 	bl	8010600 <SUBGRF_WriteCommand>
}
 8010f86:	b004      	add	sp, #16
 8010f88:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010f8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010f8e:	f7ff ff96 	bl	8010ebe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010f92:	f248 0005 	movw	r0, #32773	; 0x8005
 8010f96:	f7ff ffa6 	bl	8010ee6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	e7d4      	b.n	8010f48 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8010f9e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010fa2:	f7ff ff8c 	bl	8010ebe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010fa6:	f241 0021 	movw	r0, #4129	; 0x1021
 8010faa:	f7ff ff9c 	bl	8010ee6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8010fae:	2306      	movs	r3, #6
 8010fb0:	e7ca      	b.n	8010f48 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8010fb2:	7b23      	ldrb	r3, [r4, #12]
 8010fb4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8010fb8:	2201      	movs	r2, #1
        break;
 8010fba:	e7e0      	b.n	8010f7e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8010fbc:	89e3      	ldrh	r3, [r4, #14]
 8010fbe:	0a1a      	lsrs	r2, r3, #8
 8010fc0:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8010fc4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8010fc8:	7c23      	ldrb	r3, [r4, #16]
 8010fca:	4a09      	ldr	r2, [pc, #36]	; (8010ff0 <SUBGRF_SetPacketParams+0xe0>)
 8010fcc:	7013      	strb	r3, [r2, #0]
 8010fce:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8010fd2:	7c63      	ldrb	r3, [r4, #17]
 8010fd4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010fd8:	7ca3      	ldrb	r3, [r4, #18]
 8010fda:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8010fde:	7ce3      	ldrb	r3, [r4, #19]
 8010fe0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8010fe4:	2206      	movs	r2, #6
        break;
 8010fe6:	e7ca      	b.n	8010f7e <SUBGRF_SetPacketParams+0x6e>
 8010fe8:	080121e0 	.word	0x080121e0
 8010fec:	20000ddf 	.word	0x20000ddf
 8010ff0:	20000ddd 	.word	0x20000ddd

08010ff4 <SUBGRF_ReadRegisters>:
{
 8010ff4:	b510      	push	{r4, lr}
 8010ff6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ff8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010ffc:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8010ffe:	460a      	mov	r2, r1
 8011000:	4601      	mov	r1, r0
 8011002:	4803      	ldr	r0, [pc, #12]	; (8011010 <SUBGRF_ReadRegisters+0x1c>)
 8011004:	f7f4 fa32 	bl	800546c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011008:	f384 8810 	msr	PRIMASK, r4
}
 801100c:	bd10      	pop	{r4, pc}
 801100e:	bf00      	nop
 8011010:	200001cc 	.word	0x200001cc

08011014 <SUBGRF_GetRandom>:
{
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011018:	2600      	movs	r6, #0
 801101a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801101c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011020:	f7ff fdf2 	bl	8010c08 <SUBGRF_ReadRegister>
 8011024:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011026:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 801102a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801102e:	f7ff fcf9 	bl	8010a24 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8011032:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011036:	f7ff fde7 	bl	8010c08 <SUBGRF_ReadRegister>
 801103a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801103c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8011040:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011044:	f7ff fcee 	bl	8010a24 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011048:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801104c:	f7ff fb32 	bl	80106b4 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8011050:	2204      	movs	r2, #4
 8011052:	eb0d 0102 	add.w	r1, sp, r2
 8011056:	f640 0019 	movw	r0, #2073	; 0x819
 801105a:	f7ff ffcb 	bl	8010ff4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff faf4 	bl	801064c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8011064:	4629      	mov	r1, r5
 8011066:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801106a:	f7ff fcdb 	bl	8010a24 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801106e:	4621      	mov	r1, r4
 8011070:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011074:	f7ff fcd6 	bl	8010a24 <SUBGRF_WriteRegister>
}
 8011078:	9801      	ldr	r0, [sp, #4]
 801107a:	b002      	add	sp, #8
 801107c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011080 <SUBGRF_WriteBuffer>:
{
 8011080:	b510      	push	{r4, lr}
 8011082:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011084:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011088:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801108a:	460a      	mov	r2, r1
 801108c:	4601      	mov	r1, r0
 801108e:	4803      	ldr	r0, [pc, #12]	; (801109c <SUBGRF_WriteBuffer+0x1c>)
 8011090:	f7f4 fb42 	bl	8005718 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011094:	f384 8810 	msr	PRIMASK, r4
}
 8011098:	bd10      	pop	{r4, pc}
 801109a:	bf00      	nop
 801109c:	200001cc 	.word	0x200001cc

080110a0 <SUBGRF_SetPayload>:
{
 80110a0:	b508      	push	{r3, lr}
 80110a2:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80110a4:	4601      	mov	r1, r0
 80110a6:	2000      	movs	r0, #0
 80110a8:	f7ff ffea 	bl	8011080 <SUBGRF_WriteBuffer>
}
 80110ac:	bd08      	pop	{r3, pc}

080110ae <SUBGRF_SendPayload>:
{
 80110ae:	b510      	push	{r4, lr}
 80110b0:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80110b2:	f7ff fff5 	bl	80110a0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7ff fae2 	bl	8010680 <SUBGRF_SetTx>
}
 80110bc:	bd10      	pop	{r4, pc}
	...

080110c0 <SUBGRF_ReadBuffer>:
{
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80110c8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80110ca:	460a      	mov	r2, r1
 80110cc:	4601      	mov	r1, r0
 80110ce:	4803      	ldr	r0, [pc, #12]	; (80110dc <SUBGRF_ReadBuffer+0x1c>)
 80110d0:	f7f4 fb6c 	bl	80057ac <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110d4:	f384 8810 	msr	PRIMASK, r4
}
 80110d8:	bd10      	pop	{r4, pc}
 80110da:	bf00      	nop
 80110dc:	200001cc 	.word	0x200001cc

080110e0 <SUBGRF_GetPayload>:
{
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	4606      	mov	r6, r0
 80110e6:	460c      	mov	r4, r1
 80110e8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80110ea:	2300      	movs	r3, #0
 80110ec:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80110f0:	f10d 0107 	add.w	r1, sp, #7
 80110f4:	4620      	mov	r0, r4
 80110f6:	f7ff fea7 	bl	8010e48 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80110fa:	7822      	ldrb	r2, [r4, #0]
 80110fc:	42aa      	cmp	r2, r5
 80110fe:	d902      	bls.n	8011106 <SUBGRF_GetPayload+0x26>
        return 1;
 8011100:	2001      	movs	r0, #1
}
 8011102:	b002      	add	sp, #8
 8011104:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011106:	4631      	mov	r1, r6
 8011108:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801110c:	f7ff ffd8 	bl	80110c0 <SUBGRF_ReadBuffer>
    return 0;
 8011110:	2000      	movs	r0, #0
 8011112:	e7f6      	b.n	8011102 <SUBGRF_GetPayload+0x22>

08011114 <SUBGRF_SetSwitch>:
{
 8011114:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011116:	2901      	cmp	r1, #1
 8011118:	d003      	beq.n	8011122 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801111a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 801111c:	f7f1 fc20 	bl	8002960 <RBI_ConfigRFSwitch>
}
 8011120:	bd10      	pop	{r4, pc}
 8011122:	4604      	mov	r4, r0
 8011124:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011126:	2c01      	cmp	r4, #1
 8011128:	d003      	beq.n	8011132 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801112a:	2c02      	cmp	r4, #2
 801112c:	d1f6      	bne.n	801111c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801112e:	2003      	movs	r0, #3
 8011130:	e7f4      	b.n	801111c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8011132:	2004      	movs	r0, #4
 8011134:	f7ff fd78 	bl	8010c28 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011138:	2002      	movs	r0, #2
 801113a:	e7f6      	b.n	801112a <SUBGRF_SetSwitch+0x16>

0801113c <SUBGRF_SetRfTxPower>:
{
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011140:	f7f1 fc4e 	bl	80029e0 <RBI_GetTxConfig>
    switch (TxConfig)
 8011144:	b148      	cbz	r0, 801115a <SUBGRF_SetRfTxPower+0x1e>
 8011146:	2802      	cmp	r0, #2
 8011148:	d10d      	bne.n	8011166 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801114a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801114c:	2202      	movs	r2, #2
 801114e:	4621      	mov	r1, r4
 8011150:	4628      	mov	r0, r5
 8011152:	f7ff fdec 	bl	8010d2e <SUBGRF_SetTxParams>
}
 8011156:	4628      	mov	r0, r5
 8011158:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801115a:	2c0f      	cmp	r4, #15
 801115c:	dc01      	bgt.n	8011162 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801115e:	2501      	movs	r5, #1
 8011160:	e7f4      	b.n	801114c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8011162:	2502      	movs	r5, #2
 8011164:	e7f2      	b.n	801114c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8011166:	2501      	movs	r5, #1
 8011168:	e7f0      	b.n	801114c <SUBGRF_SetRfTxPower+0x10>

0801116a <SUBGRF_GetRadioWakeUpTime>:
}
 801116a:	200a      	movs	r0, #10
 801116c:	4770      	bx	lr
	...

08011170 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011170:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011172:	4b02      	ldr	r3, [pc, #8]	; (801117c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2001      	movs	r0, #1
 8011178:	4798      	blx	r3
}
 801117a:	bd08      	pop	{r3, pc}
 801117c:	20000de0 	.word	0x20000de0

08011180 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011180:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011182:	4b02      	ldr	r3, [pc, #8]	; (801118c <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2002      	movs	r0, #2
 8011188:	4798      	blx	r3
}
 801118a:	bd08      	pop	{r3, pc}
 801118c:	20000de0 	.word	0x20000de0

08011190 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011190:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011192:	4b02      	ldr	r3, [pc, #8]	; (801119c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2040      	movs	r0, #64	; 0x40
 8011198:	4798      	blx	r3
}
 801119a:	bd08      	pop	{r3, pc}
 801119c:	20000de0 	.word	0x20000de0

080111a0 <HAL_SUBGHZ_CADStatusCallback>:
{
 80111a0:	b508      	push	{r3, lr}
    switch (cadstatus)
 80111a2:	b111      	cbz	r1, 80111aa <HAL_SUBGHZ_CADStatusCallback+0xa>
 80111a4:	2901      	cmp	r1, #1
 80111a6:	d005      	beq.n	80111b4 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80111a8:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80111aa:	4b05      	ldr	r3, [pc, #20]	; (80111c0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2080      	movs	r0, #128	; 0x80
 80111b0:	4798      	blx	r3
            break;
 80111b2:	e7f9      	b.n	80111a8 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80111b4:	4b02      	ldr	r3, [pc, #8]	; (80111c0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80111bc:	4798      	blx	r3
}
 80111be:	e7f3      	b.n	80111a8 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80111c0:	20000de0 	.word	0x20000de0

080111c4 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80111c4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80111c6:	4b03      	ldr	r3, [pc, #12]	; (80111d4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80111ce:	4798      	blx	r3
}
 80111d0:	bd08      	pop	{r3, pc}
 80111d2:	bf00      	nop
 80111d4:	20000de0 	.word	0x20000de0

080111d8 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80111d8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80111da:	4b02      	ldr	r3, [pc, #8]	; (80111e4 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2020      	movs	r0, #32
 80111e0:	4798      	blx	r3
}
 80111e2:	bd08      	pop	{r3, pc}
 80111e4:	20000de0 	.word	0x20000de0

080111e8 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80111e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80111ea:	4b02      	ldr	r3, [pc, #8]	; (80111f4 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2004      	movs	r0, #4
 80111f0:	4798      	blx	r3
}
 80111f2:	bd08      	pop	{r3, pc}
 80111f4:	20000de0 	.word	0x20000de0

080111f8 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80111f8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80111fa:	4b02      	ldr	r3, [pc, #8]	; (8011204 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2008      	movs	r0, #8
 8011200:	4798      	blx	r3
}
 8011202:	bd08      	pop	{r3, pc}
 8011204:	20000de0 	.word	0x20000de0

08011208 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011208:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801120a:	4b02      	ldr	r3, [pc, #8]	; (8011214 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2010      	movs	r0, #16
 8011210:	4798      	blx	r3
}
 8011212:	bd08      	pop	{r3, pc}
 8011214:	20000de0 	.word	0x20000de0

08011218 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011218:	4601      	mov	r1, r0
 801121a:	b188      	cbz	r0, 8011240 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801121c:	2300      	movs	r3, #0
 801121e:	2b15      	cmp	r3, #21
 8011220:	d80d      	bhi.n	801123e <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8011222:	4618      	mov	r0, r3
 8011224:	4a07      	ldr	r2, [pc, #28]	; (8011244 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011226:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801122a:	428a      	cmp	r2, r1
 801122c:	d802      	bhi.n	8011234 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801122e:	3301      	adds	r3, #1
 8011230:	b2db      	uxtb	r3, r3
 8011232:	e7f4      	b.n	801121e <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011234:	4b03      	ldr	r3, [pc, #12]	; (8011244 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011236:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801123a:	7900      	ldrb	r0, [r0, #4]
 801123c:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801123e:	e7fe      	b.n	801123e <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8011240:	201f      	movs	r0, #31
}
 8011242:	4770      	bx	lr
 8011244:	08012f48 	.word	0x08012f48

08011248 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	4606      	mov	r6, r0
 801124e:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011250:	4b1d      	ldr	r3, [pc, #116]	; (80112c8 <SUBGRF_GetCFO+0x80>)
 8011252:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011254:	f640 0007 	movw	r0, #2055	; 0x807
 8011258:	f7ff fcd6 	bl	8010c08 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801125c:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8011260:	3308      	adds	r3, #8
 8011262:	446b      	add	r3, sp
 8011264:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011268:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801126c:	3b01      	subs	r3, #1
 801126e:	fa05 f303 	lsl.w	r3, r5, r3
 8011272:	4d16      	ldr	r5, [pc, #88]	; (80112cc <SUBGRF_GetCFO+0x84>)
 8011274:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011278:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801127c:	2a07      	cmp	r2, #7
 801127e:	d921      	bls.n	80112c4 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8011280:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8011282:	fb00 f202 	mul.w	r2, r0, r2
 8011286:	2a03      	cmp	r2, #3
 8011288:	d800      	bhi.n	801128c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801128a:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801128c:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011290:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8011294:	f7ff fcb8 	bl	8010c08 <SUBGRF_ReadRegister>
 8011298:	0200      	lsls	r0, r0, #8
 801129a:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801129e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80112a2:	f7ff fcb1 	bl	8010c08 <SUBGRF_ReadRegister>
 80112a6:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80112a8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80112ac:	d003      	beq.n	80112b6 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80112ae:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80112b2:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80112b6:	096d      	lsrs	r5, r5, #5
 80112b8:	fb05 f000 	mul.w	r0, r5, r0
 80112bc:	11c0      	asrs	r0, r0, #7
 80112be:	6020      	str	r0, [r4, #0]
}
 80112c0:	b002      	add	sp, #8
 80112c2:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80112c4:	2002      	movs	r0, #2
 80112c6:	e7dc      	b.n	8011282 <SUBGRF_GetCFO+0x3a>
 80112c8:	0c0a0804 	.word	0x0c0a0804
 80112cc:	01e84800 	.word	0x01e84800

080112d0 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80112d0:	f04f 30ff 	mov.w	r0, #4294967295
 80112d4:	4770      	bx	lr

080112d6 <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80112d6:	f04f 30ff 	mov.w	r0, #4294967295
 80112da:	4770      	bx	lr

080112dc <RFW_Init>:
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
#endif
}
 80112dc:	f04f 30ff 	mov.w	r0, #4294967295
 80112e0:	4770      	bx	lr

080112e2 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80112e2:	4770      	bx	lr

080112e4 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80112e4:	2000      	movs	r0, #0
 80112e6:	4770      	bx	lr

080112e8 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80112e8:	2000      	movs	r0, #0
 80112ea:	4770      	bx	lr

080112ec <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80112ec:	4770      	bx	lr

080112ee <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 80112ee:	f04f 30ff 	mov.w	r0, #4294967295
 80112f2:	4770      	bx	lr

080112f4 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 80112f4:	f04f 30ff 	mov.w	r0, #4294967295
 80112f8:	4770      	bx	lr

080112fa <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80112fa:	4770      	bx	lr

080112fc <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80112fc:	4770      	bx	lr

080112fe <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80112fe:	4770      	bx	lr

08011300 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011300:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011302:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011306:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011308:	4b1e      	ldr	r3, [pc, #120]	; (8011384 <TRACE_AllocateBufer+0x84>)
 801130a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801130e:	8a1a      	ldrh	r2, [r3, #16]
 8011310:	4594      	cmp	ip, r2
 8011312:	d011      	beq.n	8011338 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011314:	4594      	cmp	ip, r2
 8011316:	d921      	bls.n	801135c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011318:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 801131c:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801131e:	4283      	cmp	r3, r0
 8011320:	d81f      	bhi.n	8011362 <TRACE_AllocateBufer+0x62>
 8011322:	4282      	cmp	r2, r0
 8011324:	d91d      	bls.n	8011362 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011326:	4b17      	ldr	r3, [pc, #92]	; (8011384 <TRACE_AllocateBufer+0x84>)
 8011328:	2401      	movs	r4, #1
 801132a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801132c:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011330:	2400      	movs	r4, #0
 8011332:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011334:	4613      	mov	r3, r2
 8011336:	e014      	b.n	8011362 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011338:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 801133c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801133e:	4298      	cmp	r0, r3
 8011340:	d30f      	bcc.n	8011362 <TRACE_AllocateBufer+0x62>
 8011342:	4282      	cmp	r2, r0
 8011344:	d90d      	bls.n	8011362 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011346:	4b0f      	ldr	r3, [pc, #60]	; (8011384 <TRACE_AllocateBufer+0x84>)
 8011348:	2401      	movs	r4, #1
 801134a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801134c:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011350:	f04f 0c00 	mov.w	ip, #0
 8011354:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011358:	4613      	mov	r3, r2
 801135a:	e002      	b.n	8011362 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801135c:	eba2 030c 	sub.w	r3, r2, ip
 8011360:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011362:	4283      	cmp	r3, r0
 8011364:	d90a      	bls.n	801137c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8011366:	4a07      	ldr	r2, [pc, #28]	; (8011384 <TRACE_AllocateBufer+0x84>)
 8011368:	8a53      	ldrh	r3, [r2, #18]
 801136a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801136c:	4403      	add	r3, r0
 801136e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011372:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011374:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011376:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801137a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	e7f9      	b.n	8011376 <TRACE_AllocateBufer+0x76>
 8011382:	bf00      	nop
 8011384:	200011e4 	.word	0x200011e4

08011388 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011388:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801138c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801138e:	4a03      	ldr	r2, [pc, #12]	; (801139c <TRACE_Lock+0x14>)
 8011390:	8ad3      	ldrh	r3, [r2, #22]
 8011392:	3301      	adds	r3, #1
 8011394:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011396:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801139a:	4770      	bx	lr
 801139c:	200011e4 	.word	0x200011e4

080113a0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113a4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80113a6:	4a03      	ldr	r2, [pc, #12]	; (80113b4 <TRACE_UnLock+0x14>)
 80113a8:	8ad3      	ldrh	r3, [r2, #22]
 80113aa:	3b01      	subs	r3, #1
 80113ac:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113ae:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80113b2:	4770      	bx	lr
 80113b4:	200011e4 	.word	0x200011e4

080113b8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80113b8:	4b02      	ldr	r3, [pc, #8]	; (80113c4 <TRACE_IsLocked+0xc>)
 80113ba:	8ad8      	ldrh	r0, [r3, #22]
}
 80113bc:	3800      	subs	r0, #0
 80113be:	bf18      	it	ne
 80113c0:	2001      	movne	r0, #1
 80113c2:	4770      	bx	lr
 80113c4:	200011e4 	.word	0x200011e4

080113c8 <UTIL_ADV_TRACE_Init>:
{
 80113c8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80113ca:	2218      	movs	r2, #24
 80113cc:	2100      	movs	r1, #0
 80113ce:	4807      	ldr	r0, [pc, #28]	; (80113ec <UTIL_ADV_TRACE_Init+0x24>)
 80113d0:	f000 f98f 	bl	80116f2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80113d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80113d8:	2100      	movs	r1, #0
 80113da:	4805      	ldr	r0, [pc, #20]	; (80113f0 <UTIL_ADV_TRACE_Init+0x28>)
 80113dc:	f000 f989 	bl	80116f2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80113e0:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <UTIL_ADV_TRACE_Init+0x2c>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4804      	ldr	r0, [pc, #16]	; (80113f8 <UTIL_ADV_TRACE_Init+0x30>)
 80113e6:	4798      	blx	r3
}
 80113e8:	bd08      	pop	{r3, pc}
 80113ea:	bf00      	nop
 80113ec:	200011e4 	.word	0x200011e4
 80113f0:	20000de4 	.word	0x20000de4
 80113f4:	08012250 	.word	0x08012250
 80113f8:	0801157d 	.word	0x0801157d

080113fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80113fc:	4b01      	ldr	r3, [pc, #4]	; (8011404 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80113fe:	6058      	str	r0, [r3, #4]
}
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	200011e4 	.word	0x200011e4

08011408 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011408:	4b01      	ldr	r3, [pc, #4]	; (8011410 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801140a:	7218      	strb	r0, [r3, #8]
}
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	200011e4 	.word	0x200011e4

08011414 <TRACE_Send>:
{
 8011414:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011416:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801141a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 801141c:	f7ff ffcc 	bl	80113b8 <TRACE_IsLocked>
 8011420:	b118      	cbz	r0, 801142a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011422:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011426:	2000      	movs	r0, #0
}
 8011428:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801142a:	f7ff ffad 	bl	8011388 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801142e:	4b1d      	ldr	r3, [pc, #116]	; (80114a4 <TRACE_Send+0x90>)
 8011430:	8a1a      	ldrh	r2, [r3, #16]
 8011432:	8a5b      	ldrh	r3, [r3, #18]
 8011434:	429a      	cmp	r2, r3
 8011436:	d02e      	beq.n	8011496 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011438:	491a      	ldr	r1, [pc, #104]	; (80114a4 <TRACE_Send+0x90>)
 801143a:	7889      	ldrb	r1, [r1, #2]
 801143c:	2901      	cmp	r1, #1
 801143e:	d017      	beq.n	8011470 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011440:	4a18      	ldr	r2, [pc, #96]	; (80114a4 <TRACE_Send+0x90>)
 8011442:	7892      	ldrb	r2, [r2, #2]
 8011444:	b932      	cbnz	r2, 8011454 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011446:	4a17      	ldr	r2, [pc, #92]	; (80114a4 <TRACE_Send+0x90>)
 8011448:	8a12      	ldrh	r2, [r2, #16]
 801144a:	4293      	cmp	r3, r2
 801144c:	d91e      	bls.n	801148c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801144e:	1a9b      	subs	r3, r3, r2
 8011450:	4a14      	ldr	r2, [pc, #80]	; (80114a4 <TRACE_Send+0x90>)
 8011452:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011454:	4e13      	ldr	r6, [pc, #76]	; (80114a4 <TRACE_Send+0x90>)
 8011456:	8a33      	ldrh	r3, [r6, #16]
 8011458:	4d13      	ldr	r5, [pc, #76]	; (80114a8 <TRACE_Send+0x94>)
 801145a:	441d      	add	r5, r3
 801145c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011460:	f7f0 fa98 	bl	8001994 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011464:	4b11      	ldr	r3, [pc, #68]	; (80114ac <TRACE_Send+0x98>)
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	8ab1      	ldrh	r1, [r6, #20]
 801146a:	4628      	mov	r0, r5
 801146c:	4798      	blx	r3
 801146e:	e7db      	b.n	8011428 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011470:	480c      	ldr	r0, [pc, #48]	; (80114a4 <TRACE_Send+0x90>)
 8011472:	8801      	ldrh	r1, [r0, #0]
 8011474:	1a8a      	subs	r2, r1, r2
 8011476:	b292      	uxth	r2, r2
 8011478:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801147a:	2102      	movs	r1, #2
 801147c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801147e:	2100      	movs	r1, #0
 8011480:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011482:	2a00      	cmp	r2, #0
 8011484:	d1dc      	bne.n	8011440 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011486:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011488:	8201      	strh	r1, [r0, #16]
 801148a:	e7d9      	b.n	8011440 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801148c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011490:	4a04      	ldr	r2, [pc, #16]	; (80114a4 <TRACE_Send+0x90>)
 8011492:	8293      	strh	r3, [r2, #20]
 8011494:	e7de      	b.n	8011454 <TRACE_Send+0x40>
      TRACE_UnLock();
 8011496:	f7ff ff83 	bl	80113a0 <TRACE_UnLock>
 801149a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801149e:	2000      	movs	r0, #0
}
 80114a0:	e7c2      	b.n	8011428 <TRACE_Send+0x14>
 80114a2:	bf00      	nop
 80114a4:	200011e4 	.word	0x200011e4
 80114a8:	20000de4 	.word	0x20000de4
 80114ac:	08012250 	.word	0x08012250

080114b0 <UTIL_ADV_TRACE_COND_FSend>:
{
 80114b0:	b408      	push	{r3}
 80114b2:	b530      	push	{r4, r5, lr}
 80114b4:	b086      	sub	sp, #24
 80114b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80114b8:	2300      	movs	r3, #0
 80114ba:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80114be:	4b2c      	ldr	r3, [pc, #176]	; (8011570 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80114c0:	7a1b      	ldrb	r3, [r3, #8]
 80114c2:	4283      	cmp	r3, r0
 80114c4:	d34d      	bcc.n	8011562 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80114c6:	4b2a      	ldr	r3, [pc, #168]	; (8011570 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	ea31 0303 	bics.w	r3, r1, r3
 80114ce:	d14b      	bne.n	8011568 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80114d0:	4b27      	ldr	r3, [pc, #156]	; (8011570 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	b123      	cbz	r3, 80114e0 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80114d6:	b11a      	cbz	r2, 80114e0 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80114d8:	f10d 0102 	add.w	r1, sp, #2
 80114dc:	a801      	add	r0, sp, #4
 80114de:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80114e0:	ab0a      	add	r3, sp, #40	; 0x28
 80114e2:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80114e4:	4622      	mov	r2, r4
 80114e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114ea:	4822      	ldr	r0, [pc, #136]	; (8011574 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80114ec:	f000 fcd0 	bl	8011e90 <tiny_vsnprintf_like>
 80114f0:	b285      	uxth	r5, r0
  TRACE_Lock();
 80114f2:	f7ff ff49 	bl	8011388 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80114f6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80114fa:	4428      	add	r0, r5
 80114fc:	4669      	mov	r1, sp
 80114fe:	b280      	uxth	r0, r0
 8011500:	f7ff fefe 	bl	8011300 <TRACE_AllocateBufer>
 8011504:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011508:	d026      	beq.n	8011558 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801150a:	2300      	movs	r3, #0
 801150c:	e00d      	b.n	801152a <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801150e:	f8bd 2000 	ldrh.w	r2, [sp]
 8011512:	f103 0118 	add.w	r1, r3, #24
 8011516:	4469      	add	r1, sp
 8011518:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 801151c:	4916      	ldr	r1, [pc, #88]	; (8011578 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 801151e:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8011520:	3201      	adds	r2, #1
 8011522:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8011526:	3301      	adds	r3, #1
 8011528:	b29b      	uxth	r3, r3
 801152a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801152e:	429a      	cmp	r2, r3
 8011530:	d8ed      	bhi.n	801150e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011532:	f8bd 0000 	ldrh.w	r0, [sp]
 8011536:	9b05      	ldr	r3, [sp, #20]
 8011538:	4622      	mov	r2, r4
 801153a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801153e:	4c0e      	ldr	r4, [pc, #56]	; (8011578 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011540:	4420      	add	r0, r4
 8011542:	f000 fca5 	bl	8011e90 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8011546:	f7ff ff2b 	bl	80113a0 <TRACE_UnLock>
    return TRACE_Send();
 801154a:	f7ff ff63 	bl	8011414 <TRACE_Send>
}
 801154e:	b006      	add	sp, #24
 8011550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011554:	b001      	add	sp, #4
 8011556:	4770      	bx	lr
  TRACE_UnLock();
 8011558:	f7ff ff22 	bl	80113a0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801155c:	f06f 0002 	mvn.w	r0, #2
 8011560:	e7f5      	b.n	801154e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8011562:	f06f 0004 	mvn.w	r0, #4
 8011566:	e7f2      	b.n	801154e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8011568:	f06f 0005 	mvn.w	r0, #5
 801156c:	e7ef      	b.n	801154e <UTIL_ADV_TRACE_COND_FSend+0x9e>
 801156e:	bf00      	nop
 8011570:	200011e4 	.word	0x200011e4
 8011574:	200011fc 	.word	0x200011fc
 8011578:	20000de4 	.word	0x20000de4

0801157c <TRACE_TxCpltCallback>:
{
 801157c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801157e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011582:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8011584:	4b25      	ldr	r3, [pc, #148]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 8011586:	789b      	ldrb	r3, [r3, #2]
 8011588:	2b02      	cmp	r3, #2
 801158a:	d016      	beq.n	80115ba <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801158c:	4a23      	ldr	r2, [pc, #140]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 801158e:	8a13      	ldrh	r3, [r2, #16]
 8011590:	8a90      	ldrh	r0, [r2, #20]
 8011592:	4403      	add	r3, r0
 8011594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011598:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801159a:	4b20      	ldr	r3, [pc, #128]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 801159c:	8a1a      	ldrh	r2, [r3, #16]
 801159e:	8a5b      	ldrh	r3, [r3, #18]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d003      	beq.n	80115ac <TRACE_TxCpltCallback+0x30>
 80115a4:	481d      	ldr	r0, [pc, #116]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115a6:	8ac0      	ldrh	r0, [r0, #22]
 80115a8:	2801      	cmp	r0, #1
 80115aa:	d00b      	beq.n	80115c4 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115ac:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80115b0:	f7f0 f9f6 	bl	80019a0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80115b4:	f7ff fef4 	bl	80113a0 <TRACE_UnLock>
}
 80115b8:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80115ba:	4b18      	ldr	r3, [pc, #96]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115bc:	2200      	movs	r2, #0
 80115be:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80115c0:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80115c2:	e7ea      	b.n	801159a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80115c4:	4815      	ldr	r0, [pc, #84]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115c6:	7880      	ldrb	r0, [r0, #2]
 80115c8:	2801      	cmp	r0, #1
 80115ca:	d014      	beq.n	80115f6 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80115cc:	4a13      	ldr	r2, [pc, #76]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115ce:	7892      	ldrb	r2, [r2, #2]
 80115d0:	b932      	cbnz	r2, 80115e0 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80115d2:	4a12      	ldr	r2, [pc, #72]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115d4:	8a12      	ldrh	r2, [r2, #16]
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d91b      	bls.n	8011612 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80115da:	1a9b      	subs	r3, r3, r2
 80115dc:	4a0f      	ldr	r2, [pc, #60]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115de:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80115e0:	4b0e      	ldr	r3, [pc, #56]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115e2:	8a1a      	ldrh	r2, [r3, #16]
 80115e4:	480e      	ldr	r0, [pc, #56]	; (8011620 <TRACE_TxCpltCallback+0xa4>)
 80115e6:	4410      	add	r0, r2
 80115e8:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80115ec:	4a0d      	ldr	r2, [pc, #52]	; (8011624 <TRACE_TxCpltCallback+0xa8>)
 80115ee:	68d2      	ldr	r2, [r2, #12]
 80115f0:	8a99      	ldrh	r1, [r3, #20]
 80115f2:	4790      	blx	r2
 80115f4:	e7e0      	b.n	80115b8 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80115f6:	4c09      	ldr	r4, [pc, #36]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 80115f8:	8820      	ldrh	r0, [r4, #0]
 80115fa:	1a82      	subs	r2, r0, r2
 80115fc:	b292      	uxth	r2, r2
 80115fe:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011600:	2002      	movs	r0, #2
 8011602:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011604:	2000      	movs	r0, #0
 8011606:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011608:	2a00      	cmp	r2, #0
 801160a:	d1df      	bne.n	80115cc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801160c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801160e:	8220      	strh	r0, [r4, #16]
 8011610:	e7dc      	b.n	80115cc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011612:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011616:	4a01      	ldr	r2, [pc, #4]	; (801161c <TRACE_TxCpltCallback+0xa0>)
 8011618:	8293      	strh	r3, [r2, #20]
 801161a:	e7e1      	b.n	80115e0 <TRACE_TxCpltCallback+0x64>
 801161c:	200011e4 	.word	0x200011e4
 8011620:	20000de4 	.word	0x20000de4
 8011624:	08012250 	.word	0x08012250

08011628 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011628:	2300      	movs	r3, #0
 801162a:	4a02      	ldr	r2, [pc, #8]	; (8011634 <UTIL_LPM_Init+0xc>)
 801162c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801162e:	4a02      	ldr	r2, [pc, #8]	; (8011638 <UTIL_LPM_Init+0x10>)
 8011630:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011632:	4770      	bx	lr
 8011634:	20001400 	.word	0x20001400
 8011638:	200013fc 	.word	0x200013fc

0801163c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801163c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011640:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8011642:	b141      	cbz	r1, 8011656 <UTIL_LPM_SetStopMode+0x1a>
 8011644:	2901      	cmp	r1, #1
 8011646:	d103      	bne.n	8011650 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8011648:	4906      	ldr	r1, [pc, #24]	; (8011664 <UTIL_LPM_SetStopMode+0x28>)
 801164a:	680a      	ldr	r2, [r1, #0]
 801164c:	4310      	orrs	r0, r2
 801164e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011650:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011654:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8011656:	4903      	ldr	r1, [pc, #12]	; (8011664 <UTIL_LPM_SetStopMode+0x28>)
 8011658:	680a      	ldr	r2, [r1, #0]
 801165a:	ea22 0000 	bic.w	r0, r2, r0
 801165e:	6008      	str	r0, [r1, #0]
      break;
 8011660:	e7f6      	b.n	8011650 <UTIL_LPM_SetStopMode+0x14>
 8011662:	bf00      	nop
 8011664:	20001400 	.word	0x20001400

08011668 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011668:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801166c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801166e:	b141      	cbz	r1, 8011682 <UTIL_LPM_SetOffMode+0x1a>
 8011670:	2901      	cmp	r1, #1
 8011672:	d103      	bne.n	801167c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011674:	4906      	ldr	r1, [pc, #24]	; (8011690 <UTIL_LPM_SetOffMode+0x28>)
 8011676:	680a      	ldr	r2, [r1, #0]
 8011678:	4310      	orrs	r0, r2
 801167a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801167c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011680:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8011682:	4903      	ldr	r1, [pc, #12]	; (8011690 <UTIL_LPM_SetOffMode+0x28>)
 8011684:	680a      	ldr	r2, [r1, #0]
 8011686:	ea22 0000 	bic.w	r0, r2, r0
 801168a:	6008      	str	r0, [r1, #0]
      break;
 801168c:	e7f6      	b.n	801167c <UTIL_LPM_SetOffMode+0x14>
 801168e:	bf00      	nop
 8011690:	200013fc 	.word	0x200013fc

08011694 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011694:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011696:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801169a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801169c:	4b0c      	ldr	r3, [pc, #48]	; (80116d0 <UTIL_LPM_EnterLowPower+0x3c>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	b13b      	cbz	r3, 80116b2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80116a2:	4d0c      	ldr	r5, [pc, #48]	; (80116d4 <UTIL_LPM_EnterLowPower+0x40>)
 80116a4:	682b      	ldr	r3, [r5, #0]
 80116a6:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80116a8:	686b      	ldr	r3, [r5, #4]
 80116aa:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116ac:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80116b0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80116b2:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <UTIL_LPM_EnterLowPower+0x44>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	b12b      	cbz	r3, 80116c4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80116b8:	4d06      	ldr	r5, [pc, #24]	; (80116d4 <UTIL_LPM_EnterLowPower+0x40>)
 80116ba:	68ab      	ldr	r3, [r5, #8]
 80116bc:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80116be:	68eb      	ldr	r3, [r5, #12]
 80116c0:	4798      	blx	r3
 80116c2:	e7f3      	b.n	80116ac <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80116c4:	4d03      	ldr	r5, [pc, #12]	; (80116d4 <UTIL_LPM_EnterLowPower+0x40>)
 80116c6:	692b      	ldr	r3, [r5, #16]
 80116c8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80116ca:	696b      	ldr	r3, [r5, #20]
 80116cc:	4798      	blx	r3
 80116ce:	e7ed      	b.n	80116ac <UTIL_LPM_EnterLowPower+0x18>
 80116d0:	20001400 	.word	0x20001400
 80116d4:	080121ec 	.word	0x080121ec
 80116d8:	200013fc 	.word	0x200013fc

080116dc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80116dc:	e004      	b.n	80116e8 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80116de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116e2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80116e6:	461a      	mov	r2, r3
 80116e8:	1e53      	subs	r3, r2, #1
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	2a00      	cmp	r2, #0
 80116ee:	d1f6      	bne.n	80116de <UTIL_MEM_cpy_8+0x2>
    }
}
 80116f0:	4770      	bx	lr

080116f2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80116f2:	e002      	b.n	80116fa <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80116f4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80116f8:	461a      	mov	r2, r3
 80116fa:	1e53      	subs	r3, r2, #1
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	2a00      	cmp	r2, #0
 8011700:	d1f8      	bne.n	80116f4 <UTIL_MEM_set_8+0x2>
  }
}
 8011702:	4770      	bx	lr

08011704 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011704:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011708:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801170a:	4a06      	ldr	r2, [pc, #24]	; (8011724 <UTIL_SEQ_SetTask+0x20>)
 801170c:	6813      	ldr	r3, [r2, #0]
 801170e:	4303      	orrs	r3, r0
 8011710:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011712:	4a05      	ldr	r2, [pc, #20]	; (8011728 <UTIL_SEQ_SetTask+0x24>)
 8011714:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8011718:	4318      	orrs	r0, r3
 801171a:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801171e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8011722:	4770      	bx	lr
 8011724:	20001428 	.word	0x20001428
 8011728:	20001420 	.word	0x20001420

0801172c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801172c:	4770      	bx	lr

0801172e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801172e:	4770      	bx	lr

08011730 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8011730:	0c03      	lsrs	r3, r0, #16
 8011732:	041b      	lsls	r3, r3, #16
 8011734:	b9b3      	cbnz	r3, 8011764 <SEQ_BitPosition+0x34>
 8011736:	0400      	lsls	r0, r0, #16
 8011738:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801173a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801173e:	d102      	bne.n	8011746 <SEQ_BitPosition+0x16>
 8011740:	3308      	adds	r3, #8
 8011742:	b2db      	uxtb	r3, r3
 8011744:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8011746:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801174a:	d102      	bne.n	8011752 <SEQ_BitPosition+0x22>
 801174c:	3304      	adds	r3, #4
 801174e:	b2db      	uxtb	r3, r3
 8011750:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011752:	0f00      	lsrs	r0, r0, #28
 8011754:	4a04      	ldr	r2, [pc, #16]	; (8011768 <SEQ_BitPosition+0x38>)
 8011756:	5c10      	ldrb	r0, [r2, r0]
 8011758:	4418      	add	r0, r3
 801175a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 801175c:	f1c0 001f 	rsb	r0, r0, #31
}
 8011760:	b2c0      	uxtb	r0, r0
 8011762:	4770      	bx	lr
uint8_t n = 0U;
 8011764:	2300      	movs	r3, #0
 8011766:	e7e8      	b.n	801173a <SEQ_BitPosition+0xa>
 8011768:	08012ff8 	.word	0x08012ff8

0801176c <UTIL_SEQ_Run>:
{
 801176c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 801176e:	4b43      	ldr	r3, [pc, #268]	; (801187c <UTIL_SEQ_Run+0x110>)
 8011770:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8011772:	4020      	ands	r0, r4
 8011774:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8011776:	4b42      	ldr	r3, [pc, #264]	; (8011880 <UTIL_SEQ_Run+0x114>)
 8011778:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801177a:	4b42      	ldr	r3, [pc, #264]	; (8011884 <UTIL_SEQ_Run+0x118>)
 801177c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 801177e:	4a42      	ldr	r2, [pc, #264]	; (8011888 <UTIL_SEQ_Run+0x11c>)
 8011780:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8011782:	4a42      	ldr	r2, [pc, #264]	; (801188c <UTIL_SEQ_Run+0x120>)
 8011784:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011786:	e030      	b.n	80117ea <UTIL_SEQ_Run+0x7e>
      counter++;
 8011788:	3301      	adds	r3, #1
 801178a:	e035      	b.n	80117f8 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801178c:	4d40      	ldr	r5, [pc, #256]	; (8011890 <UTIL_SEQ_Run+0x124>)
 801178e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011792:	6868      	ldr	r0, [r5, #4]
 8011794:	4010      	ands	r0, r2
 8011796:	f7ff ffcb 	bl	8011730 <SEQ_BitPosition>
 801179a:	493e      	ldr	r1, [pc, #248]	; (8011894 <UTIL_SEQ_Run+0x128>)
 801179c:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801179e:	686a      	ldr	r2, [r5, #4]
 80117a0:	2301      	movs	r3, #1
 80117a2:	fa03 f000 	lsl.w	r0, r3, r0
 80117a6:	ea22 0000 	bic.w	r0, r2, r0
 80117aa:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117ac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80117b0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80117b2:	680a      	ldr	r2, [r1, #0]
 80117b4:	fa03 f202 	lsl.w	r2, r3, r2
 80117b8:	ea6f 0c02 	mvn.w	ip, r2
 80117bc:	4830      	ldr	r0, [pc, #192]	; (8011880 <UTIL_SEQ_Run+0x114>)
 80117be:	6801      	ldr	r1, [r0, #0]
 80117c0:	ea21 0202 	bic.w	r2, r1, r2
 80117c4:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d12d      	bne.n	8011826 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117ca:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80117ce:	4b31      	ldr	r3, [pc, #196]	; (8011894 <UTIL_SEQ_Run+0x128>)
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	4b31      	ldr	r3, [pc, #196]	; (8011898 <UTIL_SEQ_Run+0x12c>)
 80117d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d8:	4798      	blx	r3
    local_taskset = TaskSet;
 80117da:	4b29      	ldr	r3, [pc, #164]	; (8011880 <UTIL_SEQ_Run+0x114>)
 80117dc:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 80117de:	4b29      	ldr	r3, [pc, #164]	; (8011884 <UTIL_SEQ_Run+0x118>)
 80117e0:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80117e2:	4a29      	ldr	r2, [pc, #164]	; (8011888 <UTIL_SEQ_Run+0x11c>)
 80117e4:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 80117e6:	4a29      	ldr	r2, [pc, #164]	; (801188c <UTIL_SEQ_Run+0x120>)
 80117e8:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80117ea:	4001      	ands	r1, r0
 80117ec:	4d23      	ldr	r5, [pc, #140]	; (801187c <UTIL_SEQ_Run+0x110>)
 80117ee:	682d      	ldr	r5, [r5, #0]
 80117f0:	4229      	tst	r1, r5
 80117f2:	d021      	beq.n	8011838 <UTIL_SEQ_Run+0xcc>
 80117f4:	4013      	ands	r3, r2
 80117f6:	d11f      	bne.n	8011838 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80117f8:	4a25      	ldr	r2, [pc, #148]	; (8011890 <UTIL_SEQ_Run+0x124>)
 80117fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80117fe:	4002      	ands	r2, r0
 8011800:	422a      	tst	r2, r5
 8011802:	d0c1      	beq.n	8011788 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011804:	4922      	ldr	r1, [pc, #136]	; (8011890 <UTIL_SEQ_Run+0x124>)
 8011806:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801180a:	4002      	ands	r2, r0
 801180c:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801180e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011812:	6849      	ldr	r1, [r1, #4]
 8011814:	4211      	tst	r1, r2
 8011816:	d1b9      	bne.n	801178c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011818:	491d      	ldr	r1, [pc, #116]	; (8011890 <UTIL_SEQ_Run+0x124>)
 801181a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801181e:	f04f 30ff 	mov.w	r0, #4294967295
 8011822:	6048      	str	r0, [r1, #4]
 8011824:	e7b2      	b.n	801178c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011826:	3b01      	subs	r3, #1
 8011828:	4919      	ldr	r1, [pc, #100]	; (8011890 <UTIL_SEQ_Run+0x124>)
 801182a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801182e:	ea0c 0202 	and.w	r2, ip, r2
 8011832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011836:	e7c6      	b.n	80117c6 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011838:	4b16      	ldr	r3, [pc, #88]	; (8011894 <UTIL_SEQ_Run+0x128>)
 801183a:	f04f 32ff 	mov.w	r2, #4294967295
 801183e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011840:	f7ff ff74 	bl	801172c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011844:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011848:	b672      	cpsid	i
  local_taskset = TaskSet;
 801184a:	4b0d      	ldr	r3, [pc, #52]	; (8011880 <UTIL_SEQ_Run+0x114>)
 801184c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801184e:	4a0d      	ldr	r2, [pc, #52]	; (8011884 <UTIL_SEQ_Run+0x118>)
 8011850:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011852:	4a0d      	ldr	r2, [pc, #52]	; (8011888 <UTIL_SEQ_Run+0x11c>)
 8011854:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011856:	4013      	ands	r3, r2
 8011858:	4a08      	ldr	r2, [pc, #32]	; (801187c <UTIL_SEQ_Run+0x110>)
 801185a:	6812      	ldr	r2, [r2, #0]
 801185c:	4213      	tst	r3, r2
 801185e:	d103      	bne.n	8011868 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8011860:	4b0a      	ldr	r3, [pc, #40]	; (801188c <UTIL_SEQ_Run+0x120>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	420b      	tst	r3, r1
 8011866:	d006      	beq.n	8011876 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011868:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801186c:	f7ff ff5f 	bl	801172e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8011870:	4b02      	ldr	r3, [pc, #8]	; (801187c <UTIL_SEQ_Run+0x110>)
 8011872:	601c      	str	r4, [r3, #0]
}
 8011874:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8011876:	f7f0 f82d 	bl	80018d4 <UTIL_SEQ_Idle>
 801187a:	e7f5      	b.n	8011868 <UTIL_SEQ_Run+0xfc>
 801187c:	2000011c 	.word	0x2000011c
 8011880:	20001428 	.word	0x20001428
 8011884:	20001408 	.word	0x20001408
 8011888:	20000120 	.word	0x20000120
 801188c:	2000140c 	.word	0x2000140c
 8011890:	20001420 	.word	0x20001420
 8011894:	20001404 	.word	0x20001404
 8011898:	20001410 	.word	0x20001410

0801189c <UTIL_SEQ_RegTask>:
{
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80118a4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80118a6:	f7ff ff43 	bl	8011730 <SEQ_BitPosition>
 80118aa:	4b03      	ldr	r3, [pc, #12]	; (80118b8 <UTIL_SEQ_RegTask+0x1c>)
 80118ac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118b0:	f385 8810 	msr	PRIMASK, r5
}
 80118b4:	bd38      	pop	{r3, r4, r5, pc}
 80118b6:	bf00      	nop
 80118b8:	20001410 	.word	0x20001410

080118bc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80118bc:	b082      	sub	sp, #8
 80118be:	b082      	sub	sp, #8
 80118c0:	f10d 0c08 	add.w	ip, sp, #8
 80118c4:	e90c 0006 	stmdb	ip, {r1, r2}
 80118c8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80118ca:	2200      	movs	r2, #0
 80118cc:	6002      	str	r2, [r0, #0]
 80118ce:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80118d0:	440b      	add	r3, r1
 80118d2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80118d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80118d8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80118dc:	440a      	add	r2, r1
 80118de:	b291      	uxth	r1, r2
 80118e0:	b212      	sxth	r2, r2
 80118e2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80118e4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80118e8:	db04      	blt.n	80118f4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80118ea:	3301      	adds	r3, #1
 80118ec:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80118ee:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80118f2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80118f4:	b002      	add	sp, #8
 80118f6:	b002      	add	sp, #8
 80118f8:	4770      	bx	lr

080118fa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80118fa:	b082      	sub	sp, #8
 80118fc:	b082      	sub	sp, #8
 80118fe:	f10d 0c08 	add.w	ip, sp, #8
 8011902:	e90c 0006 	stmdb	ip, {r1, r2}
 8011906:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8011908:	2200      	movs	r2, #0
 801190a:	6002      	str	r2, [r0, #0]
 801190c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801190e:	1acb      	subs	r3, r1, r3
 8011910:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011912:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011916:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801191a:	1a52      	subs	r2, r2, r1
 801191c:	b291      	uxth	r1, r2
 801191e:	b212      	sxth	r2, r2
 8011920:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8011922:	2a00      	cmp	r2, #0
 8011924:	db02      	blt.n	801192c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8011926:	b002      	add	sp, #8
 8011928:	b002      	add	sp, #8
 801192a:	4770      	bx	lr
    c.Seconds--;
 801192c:	3b01      	subs	r3, #1
 801192e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8011930:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8011934:	8081      	strh	r1, [r0, #4]
  return c;
 8011936:	e7f6      	b.n	8011926 <SysTimeSub+0x2c>

08011938 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8011938:	b530      	push	{r4, r5, lr}
 801193a:	b089      	sub	sp, #36	; 0x24
 801193c:	ac02      	add	r4, sp, #8
 801193e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011942:	2300      	movs	r3, #0
 8011944:	9304      	str	r3, [sp, #16]
 8011946:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801194a:	4d0b      	ldr	r5, [pc, #44]	; (8011978 <SysTimeSet+0x40>)
 801194c:	692b      	ldr	r3, [r5, #16]
 801194e:	a805      	add	r0, sp, #20
 8011950:	4798      	blx	r3
 8011952:	4603      	mov	r3, r0
 8011954:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8011956:	9a05      	ldr	r2, [sp, #20]
 8011958:	9200      	str	r2, [sp, #0]
 801195a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801195e:	a806      	add	r0, sp, #24
 8011960:	f7ff ffcb 	bl	80118fa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	9806      	ldr	r0, [sp, #24]
 8011968:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801196a:	68ab      	ldr	r3, [r5, #8]
 801196c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011970:	4798      	blx	r3
}
 8011972:	b009      	add	sp, #36	; 0x24
 8011974:	bd30      	pop	{r4, r5, pc}
 8011976:	bf00      	nop
 8011978:	08012210 	.word	0x08012210

0801197c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801197c:	b530      	push	{r4, r5, lr}
 801197e:	b087      	sub	sp, #28
 8011980:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011982:	2300      	movs	r3, #0
 8011984:	9304      	str	r3, [sp, #16]
 8011986:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801198a:	6003      	str	r3, [r0, #0]
 801198c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801198e:	4d0b      	ldr	r5, [pc, #44]	; (80119bc <SysTimeGet+0x40>)
 8011990:	692b      	ldr	r3, [r5, #16]
 8011992:	a805      	add	r0, sp, #20
 8011994:	4798      	blx	r3
 8011996:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011998:	68eb      	ldr	r3, [r5, #12]
 801199a:	4798      	blx	r3
 801199c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80119a0:	686b      	ldr	r3, [r5, #4]
 80119a2:	4798      	blx	r3
 80119a4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80119a6:	9b05      	ldr	r3, [sp, #20]
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	9b04      	ldr	r3, [sp, #16]
 80119ac:	aa02      	add	r2, sp, #8
 80119ae:	ca06      	ldmia	r2, {r1, r2}
 80119b0:	4620      	mov	r0, r4
 80119b2:	f7ff ff83 	bl	80118bc <SysTimeAdd>

  return sysTime;
}
 80119b6:	4620      	mov	r0, r4
 80119b8:	b007      	add	sp, #28
 80119ba:	bd30      	pop	{r4, r5, pc}
 80119bc:	08012210 	.word	0x08012210

080119c0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80119c0:	b530      	push	{r4, r5, lr}
 80119c2:	b083      	sub	sp, #12
 80119c4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80119c6:	2300      	movs	r3, #0
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80119ce:	4b06      	ldr	r3, [pc, #24]	; (80119e8 <SysTimeGetMcuTime+0x28>)
 80119d0:	691b      	ldr	r3, [r3, #16]
 80119d2:	466d      	mov	r5, sp
 80119d4:	a801      	add	r0, sp, #4
 80119d6:	4798      	blx	r3
 80119d8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80119da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80119de:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80119e2:	4620      	mov	r0, r4
 80119e4:	b003      	add	sp, #12
 80119e6:	bd30      	pop	{r4, r5, pc}
 80119e8:	08012210 	.word	0x08012210

080119ec <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	b089      	sub	sp, #36	; 0x24
 80119f0:	ac02      	add	r4, sp, #8
 80119f2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80119f6:	4d0c      	ldr	r5, [pc, #48]	; (8011a28 <SysTimeToMs+0x3c>)
 80119f8:	68eb      	ldr	r3, [r5, #12]
 80119fa:	4798      	blx	r3
 80119fc:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011a00:	686b      	ldr	r3, [r5, #4]
 8011a02:	4798      	blx	r3
 8011a04:	4603      	mov	r3, r0
 8011a06:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8011a08:	9a07      	ldr	r2, [sp, #28]
 8011a0a:	9200      	str	r2, [sp, #0]
 8011a0c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011a10:	a804      	add	r0, sp, #16
 8011a12:	f7ff ff72 	bl	80118fa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011a16:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8011a1a:	9a04      	ldr	r2, [sp, #16]
 8011a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011a20:	fb00 3002 	mla	r0, r0, r2, r3
 8011a24:	b009      	add	sp, #36	; 0x24
 8011a26:	bd30      	pop	{r4, r5, pc}
 8011a28:	08012210 	.word	0x08012210

08011a2c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011a2c:	b530      	push	{r4, r5, lr}
 8011a2e:	b087      	sub	sp, #28
 8011a30:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8011a32:	4b12      	ldr	r3, [pc, #72]	; (8011a7c <SysTimeFromMs+0x50>)
 8011a34:	fba3 2301 	umull	r2, r3, r3, r1
 8011a38:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011a3a:	9304      	str	r3, [sp, #16]
 8011a3c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8011a40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011a44:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8011a48:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	9302      	str	r3, [sp, #8]
 8011a50:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011a52:	4d0b      	ldr	r5, [pc, #44]	; (8011a80 <SysTimeFromMs+0x54>)
 8011a54:	68eb      	ldr	r3, [r5, #12]
 8011a56:	4798      	blx	r3
 8011a58:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011a5c:	686b      	ldr	r3, [r5, #4]
 8011a5e:	4798      	blx	r3
 8011a60:	4603      	mov	r3, r0
 8011a62:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8011a64:	9a03      	ldr	r2, [sp, #12]
 8011a66:	9200      	str	r2, [sp, #0]
 8011a68:	aa06      	add	r2, sp, #24
 8011a6a:	e912 0006 	ldmdb	r2, {r1, r2}
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f7ff ff24 	bl	80118bc <SysTimeAdd>
}
 8011a74:	4620      	mov	r0, r4
 8011a76:	b007      	add	sp, #28
 8011a78:	bd30      	pop	{r4, r5, pc}
 8011a7a:	bf00      	nop
 8011a7c:	10624dd3 	.word	0x10624dd3
 8011a80:	08012210 	.word	0x08012210

08011a84 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011a84:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011a86:	4b03      	ldr	r3, [pc, #12]	; (8011a94 <UTIL_TIMER_Init+0x10>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011a8c:	4b02      	ldr	r3, [pc, #8]	; (8011a98 <UTIL_TIMER_Init+0x14>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	4798      	blx	r3
}
 8011a92:	bd08      	pop	{r3, pc}
 8011a94:	2000142c 	.word	0x2000142c
 8011a98:	08012224 	.word	0x08012224

08011a9c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8011a9c:	b1a8      	cbz	r0, 8011aca <UTIL_TIMER_Create+0x2e>
{
 8011a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa0:	4617      	mov	r7, r2
 8011aa2:	461e      	mov	r6, r3
 8011aa4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8011aa6:	b193      	cbz	r3, 8011ace <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011aac:	4b09      	ldr	r3, [pc, #36]	; (8011ad4 <UTIL_TIMER_Create+0x38>)
 8011aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab0:	4608      	mov	r0, r1
 8011ab2:	4798      	blx	r3
 8011ab4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8011ab6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8011ab8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011aba:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011abc:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011abe:	9b06      	ldr	r3, [sp, #24]
 8011ac0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011ac2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011ac4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8011ac6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8011ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8011aca:	2001      	movs	r0, #1
}
 8011acc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011ace:	2001      	movs	r0, #1
 8011ad0:	e7fa      	b.n	8011ac8 <UTIL_TIMER_Create+0x2c>
 8011ad2:	bf00      	nop
 8011ad4:	08012224 	.word	0x08012224

08011ad8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011ad8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8011ada:	4c03      	ldr	r4, [pc, #12]	; (8011ae8 <UTIL_TIMER_GetCurrentTime+0x10>)
 8011adc:	69e3      	ldr	r3, [r4, #28]
 8011ade:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011ae2:	4798      	blx	r3
}
 8011ae4:	bd10      	pop	{r4, pc}
 8011ae6:	bf00      	nop
 8011ae8:	08012224 	.word	0x08012224

08011aec <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011af0:	4d05      	ldr	r5, [pc, #20]	; (8011b08 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8011af2:	69eb      	ldr	r3, [r5, #28]
 8011af4:	4798      	blx	r3
 8011af6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011afa:	4630      	mov	r0, r6
 8011afc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011afe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8011b00:	1a20      	subs	r0, r4, r0
 8011b02:	4798      	blx	r3
}
 8011b04:	bd70      	pop	{r4, r5, r6, pc}
 8011b06:	bf00      	nop
 8011b08:	08012224 	.word	0x08012224

08011b0c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <TimerExists+0x18>)
 8011b0e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8011b10:	e000      	b.n	8011b14 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8011b12:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8011b14:	b11b      	cbz	r3, 8011b1e <TimerExists+0x12>
    if( cur == TimerObject )
 8011b16:	4283      	cmp	r3, r0
 8011b18:	d1fb      	bne.n	8011b12 <TimerExists+0x6>
      return true;
 8011b1a:	2001      	movs	r0, #1
  }
  return false;
}
 8011b1c:	4770      	bx	lr
  return false;
 8011b1e:	2000      	movs	r0, #0
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	2000142c 	.word	0x2000142c

08011b28 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8011b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011b2c:	4e09      	ldr	r6, [pc, #36]	; (8011b54 <TimerSetTimeout+0x2c>)
 8011b2e:	6a33      	ldr	r3, [r6, #32]
 8011b30:	4798      	blx	r3
 8011b32:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8011b34:	2301      	movs	r3, #1
 8011b36:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8011b38:	6827      	ldr	r7, [r4, #0]
 8011b3a:	69b6      	ldr	r6, [r6, #24]
 8011b3c:	47b0      	blx	r6
 8011b3e:	4428      	add	r0, r5
 8011b40:	4287      	cmp	r7, r0
 8011b42:	d202      	bcs.n	8011b4a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011b44:	47b0      	blx	r6
 8011b46:	4405      	add	r5, r0
 8011b48:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011b4a:	4b02      	ldr	r3, [pc, #8]	; (8011b54 <TimerSetTimeout+0x2c>)
 8011b4c:	689b      	ldr	r3, [r3, #8]
 8011b4e:	6820      	ldr	r0, [r4, #0]
 8011b50:	4798      	blx	r3
}
 8011b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b54:	08012224 	.word	0x08012224

08011b58 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8011b58:	b368      	cbz	r0, 8011bb6 <UTIL_TIMER_Stop+0x5e>
{
 8011b5a:	b510      	push	{r4, lr}
 8011b5c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b5e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b62:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011b64:	4b15      	ldr	r3, [pc, #84]	; (8011bbc <UTIL_TIMER_Stop+0x64>)
 8011b66:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8011b6c:	b1e1      	cbz	r1, 8011ba8 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011b72:	4288      	cmp	r0, r1
 8011b74:	d006      	beq.n	8011b84 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011b76:	460b      	mov	r3, r1
        while( cur != NULL )
 8011b78:	b1b3      	cbz	r3, 8011ba8 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d011      	beq.n	8011ba2 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8011b7e:	4619      	mov	r1, r3
            cur = cur->Next;
 8011b80:	695b      	ldr	r3, [r3, #20]
 8011b82:	e7f9      	b.n	8011b78 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8011b84:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8011b86:	6948      	ldr	r0, [r1, #20]
 8011b88:	b120      	cbz	r0, 8011b94 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8011b8a:	4b0c      	ldr	r3, [pc, #48]	; (8011bbc <UTIL_TIMER_Stop+0x64>)
 8011b8c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8011b8e:	f7ff ffcb 	bl	8011b28 <TimerSetTimeout>
 8011b92:	e009      	b.n	8011ba8 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8011b94:	4b0a      	ldr	r3, [pc, #40]	; (8011bc0 <UTIL_TIMER_Stop+0x68>)
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	4798      	blx	r3
            TimerListHead = NULL;
 8011b9a:	4b08      	ldr	r3, [pc, #32]	; (8011bbc <UTIL_TIMER_Stop+0x64>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	601a      	str	r2, [r3, #0]
 8011ba0:	e002      	b.n	8011ba8 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8011ba2:	695b      	ldr	r3, [r3, #20]
 8011ba4:	b123      	cbz	r3, 8011bb0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8011ba6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ba8:	f384 8810 	msr	PRIMASK, r4
}
 8011bac:	2000      	movs	r0, #0
}
 8011bae:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	614b      	str	r3, [r1, #20]
 8011bb4:	e7f8      	b.n	8011ba8 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8011bb6:	2001      	movs	r0, #1
}
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	2000142c 	.word	0x2000142c
 8011bc0:	08012224 	.word	0x08012224

08011bc4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011bc4:	4b09      	ldr	r3, [pc, #36]	; (8011bec <TimerInsertTimer+0x28>)
 8011bc6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011bc8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8011bca:	e001      	b.n	8011bd0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011bcc:	461a      	mov	r2, r3
        next = next->Next;
 8011bce:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011bd0:	6951      	ldr	r1, [r2, #20]
 8011bd2:	b139      	cbz	r1, 8011be4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011bd4:	6819      	ldr	r1, [r3, #0]
 8011bd6:	f8d0 c000 	ldr.w	ip, [r0]
 8011bda:	458c      	cmp	ip, r1
 8011bdc:	d8f6      	bhi.n	8011bcc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011bde:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011be0:	6143      	str	r3, [r0, #20]
        return;
 8011be2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011be4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	6143      	str	r3, [r0, #20]
}
 8011bea:	4770      	bx	lr
 8011bec:	2000142c 	.word	0x2000142c

08011bf0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011bf0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011bf2:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <TimerInsertNewHeadTimer+0x18>)
 8011bf4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8011bf6:	b10b      	cbz	r3, 8011bfc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011bfc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011bfe:	4b02      	ldr	r3, [pc, #8]	; (8011c08 <TimerInsertNewHeadTimer+0x18>)
 8011c00:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8011c02:	f7ff ff91 	bl	8011b28 <TimerSetTimeout>
}
 8011c06:	bd08      	pop	{r3, pc}
 8011c08:	2000142c 	.word	0x2000142c

08011c0c <UTIL_TIMER_Start>:
{
 8011c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d036      	beq.n	8011c80 <UTIL_TIMER_Start+0x74>
 8011c12:	4604      	mov	r4, r0
 8011c14:	f7ff ff7a 	bl	8011b0c <TimerExists>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	d134      	bne.n	8011c86 <UTIL_TIMER_Start+0x7a>
 8011c1c:	7a65      	ldrb	r5, [r4, #9]
 8011c1e:	2d00      	cmp	r5, #0
 8011c20:	d133      	bne.n	8011c8a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c22:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c26:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8011c28:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011c2a:	4b19      	ldr	r3, [pc, #100]	; (8011c90 <UTIL_TIMER_Start+0x84>)
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	4798      	blx	r3
    if( ticks < minValue )
 8011c30:	4287      	cmp	r7, r0
 8011c32:	d300      	bcc.n	8011c36 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8011c34:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8011c36:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011c40:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8011c42:	4b14      	ldr	r3, [pc, #80]	; (8011c94 <UTIL_TIMER_Start+0x88>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	b183      	cbz	r3, 8011c6a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011c48:	4b11      	ldr	r3, [pc, #68]	; (8011c90 <UTIL_TIMER_Start+0x84>)
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	4418      	add	r0, r3
 8011c52:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011c54:	4b0f      	ldr	r3, [pc, #60]	; (8011c94 <UTIL_TIMER_Start+0x88>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4298      	cmp	r0, r3
 8011c5c:	d20c      	bcs.n	8011c78 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ff ffc6 	bl	8011bf0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c64:	f386 8810 	msr	PRIMASK, r6
}
 8011c68:	e00b      	b.n	8011c82 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8011c6a:	4b09      	ldr	r3, [pc, #36]	; (8011c90 <UTIL_TIMER_Start+0x84>)
 8011c6c:	691b      	ldr	r3, [r3, #16]
 8011c6e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011c70:	4620      	mov	r0, r4
 8011c72:	f7ff ffbd 	bl	8011bf0 <TimerInsertNewHeadTimer>
 8011c76:	e7f5      	b.n	8011c64 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff ffa3 	bl	8011bc4 <TimerInsertTimer>
 8011c7e:	e7f1      	b.n	8011c64 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011c80:	2501      	movs	r5, #1
}
 8011c82:	4628      	mov	r0, r5
 8011c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011c86:	2501      	movs	r5, #1
 8011c88:	e7fb      	b.n	8011c82 <UTIL_TIMER_Start+0x76>
 8011c8a:	2501      	movs	r5, #1
 8011c8c:	e7f9      	b.n	8011c82 <UTIL_TIMER_Start+0x76>
 8011c8e:	bf00      	nop
 8011c90:	08012224 	.word	0x08012224
 8011c94:	2000142c 	.word	0x2000142c

08011c98 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8011c98:	b198      	cbz	r0, 8011cc2 <UTIL_TIMER_SetPeriod+0x2a>
{
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011c9e:	4b0a      	ldr	r3, [pc, #40]	; (8011cc8 <UTIL_TIMER_SetPeriod+0x30>)
 8011ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca2:	4608      	mov	r0, r1
 8011ca4:	4798      	blx	r3
 8011ca6:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f7ff ff2f 	bl	8011b0c <TimerExists>
 8011cae:	b908      	cbnz	r0, 8011cb4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011cb0:	2000      	movs	r0, #0
}
 8011cb2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	f7ff ff4f 	bl	8011b58 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f7ff ffa6 	bl	8011c0c <UTIL_TIMER_Start>
 8011cc0:	e7f7      	b.n	8011cb2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011cc2:	2001      	movs	r0, #1
}
 8011cc4:	4770      	bx	lr
 8011cc6:	bf00      	nop
 8011cc8:	08012224 	.word	0x08012224

08011ccc <UTIL_TIMER_IRQ_Handler>:
{
 8011ccc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cce:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011cd2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011cd4:	4c1e      	ldr	r4, [pc, #120]	; (8011d50 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011cd6:	6963      	ldr	r3, [r4, #20]
 8011cd8:	4798      	blx	r3
 8011cda:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011cdc:	6923      	ldr	r3, [r4, #16]
 8011cde:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011ce0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011ce2:	4b1c      	ldr	r3, [pc, #112]	; (8011d54 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	b923      	cbnz	r3, 8011cf2 <UTIL_TIMER_IRQ_Handler+0x26>
 8011ce8:	e018      	b.n	8011d1c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8011cea:	2200      	movs	r2, #0
 8011cec:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8011cee:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8011cf0:	b1a3      	cbz	r3, 8011d1c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	42a2      	cmp	r2, r4
 8011cf6:	d9f8      	bls.n	8011cea <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8011cf8:	1a31      	subs	r1, r6, r0
 8011cfa:	440a      	add	r2, r1
 8011cfc:	601a      	str	r2, [r3, #0]
 8011cfe:	e7f6      	b.n	8011cee <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8011d00:	4b14      	ldr	r3, [pc, #80]	; (8011d54 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011d02:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8011d04:	6962      	ldr	r2, [r4, #20]
 8011d06:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8011d0c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8011d0e:	68e3      	ldr	r3, [r4, #12]
 8011d10:	6920      	ldr	r0, [r4, #16]
 8011d12:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011d14:	8963      	ldrh	r3, [r4, #10]
 8011d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d1a:	d012      	beq.n	8011d42 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011d1c:	4b0d      	ldr	r3, [pc, #52]	; (8011d54 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	b13b      	cbz	r3, 8011d32 <UTIL_TIMER_IRQ_Handler+0x66>
 8011d22:	681c      	ldr	r4, [r3, #0]
 8011d24:	2c00      	cmp	r4, #0
 8011d26:	d0eb      	beq.n	8011d00 <UTIL_TIMER_IRQ_Handler+0x34>
 8011d28:	4b09      	ldr	r3, [pc, #36]	; (8011d50 <UTIL_TIMER_IRQ_Handler+0x84>)
 8011d2a:	699b      	ldr	r3, [r3, #24]
 8011d2c:	4798      	blx	r3
 8011d2e:	4284      	cmp	r4, r0
 8011d30:	d3e6      	bcc.n	8011d00 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8011d32:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011d34:	6818      	ldr	r0, [r3, #0]
 8011d36:	b108      	cbz	r0, 8011d3c <UTIL_TIMER_IRQ_Handler+0x70>
 8011d38:	7a03      	ldrb	r3, [r0, #8]
 8011d3a:	b133      	cbz	r3, 8011d4a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d3c:	f385 8810 	msr	PRIMASK, r5
}
 8011d40:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8011d42:	4620      	mov	r0, r4
 8011d44:	f7ff ff62 	bl	8011c0c <UTIL_TIMER_Start>
 8011d48:	e7e8      	b.n	8011d1c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8011d4a:	f7ff feed 	bl	8011b28 <TimerSetTimeout>
 8011d4e:	e7f5      	b.n	8011d3c <UTIL_TIMER_IRQ_Handler+0x70>
 8011d50:	08012224 	.word	0x08012224
 8011d54:	2000142c 	.word	0x2000142c

08011d58 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8011d58:	4601      	mov	r1, r0
  int i = 0;
 8011d5a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011d5c:	e007      	b.n	8011d6e <ee_skip_atoi+0x16>
 8011d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d62:	1c53      	adds	r3, r2, #1
 8011d64:	600b      	str	r3, [r1, #0]
 8011d66:	7813      	ldrb	r3, [r2, #0]
 8011d68:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011d6c:	3830      	subs	r0, #48	; 0x30
 8011d6e:	680a      	ldr	r2, [r1, #0]
 8011d70:	7813      	ldrb	r3, [r2, #0]
 8011d72:	3b30      	subs	r3, #48	; 0x30
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	2b09      	cmp	r3, #9
 8011d78:	d9f1      	bls.n	8011d5e <ee_skip_atoi+0x6>
  return i;
}
 8011d7a:	4770      	bx	lr

08011d7c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8011d7c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8011d80:	b093      	sub	sp, #76	; 0x4c
 8011d82:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011d84:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8011d86:	f016 0f40 	tst.w	r6, #64	; 0x40
 8011d8a:	d110      	bne.n	8011dae <ee_number+0x32>
  char *dig = lower_digits;
 8011d8c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8011e88 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8011d90:	1e9f      	subs	r7, r3, #2
 8011d92:	2f22      	cmp	r7, #34	; 0x22
 8011d94:	d875      	bhi.n	8011e82 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8011d96:	f016 0401 	ands.w	r4, r6, #1
 8011d9a:	d00b      	beq.n	8011db4 <ee_number+0x38>
 8011d9c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8011da0:	f016 0f02 	tst.w	r6, #2
 8011da4:	d00f      	beq.n	8011dc6 <ee_number+0x4a>
  {
    if (num < 0)
 8011da6:	2a00      	cmp	r2, #0
 8011da8:	db07      	blt.n	8011dba <ee_number+0x3e>
  sign = 0;
 8011daa:	2700      	movs	r7, #0
 8011dac:	e00c      	b.n	8011dc8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8011dae:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8011e8c <ee_number+0x110>
 8011db2:	e7ed      	b.n	8011d90 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8011db4:	f04f 0e20 	mov.w	lr, #32
 8011db8:	e7f2      	b.n	8011da0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8011dba:	4252      	negs	r2, r2
      size--;
 8011dbc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011dbe:	3e01      	subs	r6, #1
 8011dc0:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8011dc2:	272d      	movs	r7, #45	; 0x2d
 8011dc4:	e000      	b.n	8011dc8 <ee_number+0x4c>
  sign = 0;
 8011dc6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011dc8:	bb5a      	cbnz	r2, 8011e22 <ee_number+0xa6>
    tmp[i++] = '0';
 8011dca:	2330      	movs	r3, #48	; 0x30
 8011dcc:	f88d 3004 	strb.w	r3, [sp, #4]
 8011dd0:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8011dd4:	45ac      	cmp	ip, r5
 8011dd6:	dd00      	ble.n	8011dda <ee_number+0x5e>
 8011dd8:	4665      	mov	r5, ip
  size -= precision;
 8011dda:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011ddc:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011dde:	b31c      	cbz	r4, 8011e28 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011de0:	b11f      	cbz	r7, 8011dea <ee_number+0x6e>
 8011de2:	f800 7b01 	strb.w	r7, [r0], #1
 8011de6:	3901      	subs	r1, #1
 8011de8:	d007      	beq.n	8011dfa <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f103 33ff 	add.w	r3, r3, #4294967295
 8011df0:	dd24      	ble.n	8011e3c <ee_number+0xc0>
 8011df2:	f800 eb01 	strb.w	lr, [r0], #1
 8011df6:	3901      	subs	r1, #1
 8011df8:	d1f7      	bne.n	8011dea <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8011dfa:	b013      	add	sp, #76	; 0x4c
 8011dfc:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011e00:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e04:	fb03 2216 	mls	r2, r3, r6, r2
 8011e08:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8011e0c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011e10:	446a      	add	r2, sp
 8011e12:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8011e16:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011e18:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8011e1c:	2a00      	cmp	r2, #0
 8011e1e:	d1ef      	bne.n	8011e00 <ee_number+0x84>
 8011e20:	e7d8      	b.n	8011dd4 <ee_number+0x58>
  i = 0;
 8011e22:	f04f 0c00 	mov.w	ip, #0
 8011e26:	e7f9      	b.n	8011e1c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e2e:	ddd7      	ble.n	8011de0 <ee_number+0x64>
 8011e30:	2220      	movs	r2, #32
 8011e32:	f800 2b01 	strb.w	r2, [r0], #1
 8011e36:	3901      	subs	r1, #1
 8011e38:	d1f6      	bne.n	8011e28 <ee_number+0xac>
 8011e3a:	e7de      	b.n	8011dfa <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8011e3c:	4565      	cmp	r5, ip
 8011e3e:	f105 35ff 	add.w	r5, r5, #4294967295
 8011e42:	dd05      	ble.n	8011e50 <ee_number+0xd4>
 8011e44:	2230      	movs	r2, #48	; 0x30
 8011e46:	f800 2b01 	strb.w	r2, [r0], #1
 8011e4a:	3901      	subs	r1, #1
 8011e4c:	d1f6      	bne.n	8011e3c <ee_number+0xc0>
 8011e4e:	e7d4      	b.n	8011dfa <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011e50:	4662      	mov	r2, ip
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e58:	dd09      	ble.n	8011e6e <ee_number+0xf2>
 8011e5a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8011e5e:	446a      	add	r2, sp
 8011e60:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8011e64:	f800 2b01 	strb.w	r2, [r0], #1
 8011e68:	3901      	subs	r1, #1
 8011e6a:	d1f1      	bne.n	8011e50 <ee_number+0xd4>
 8011e6c:	e7c5      	b.n	8011dfa <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e74:	ddc1      	ble.n	8011dfa <ee_number+0x7e>
 8011e76:	2220      	movs	r2, #32
 8011e78:	f800 2b01 	strb.w	r2, [r0], #1
 8011e7c:	3901      	subs	r1, #1
 8011e7e:	d1f6      	bne.n	8011e6e <ee_number+0xf2>
 8011e80:	e7bb      	b.n	8011dfa <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8011e82:	2000      	movs	r0, #0
 8011e84:	e7b9      	b.n	8011dfa <ee_number+0x7e>
 8011e86:	bf00      	nop
 8011e88:	08013030 	.word	0x08013030
 8011e8c:	08013008 	.word	0x08013008

08011e90 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e94:	b087      	sub	sp, #28
 8011e96:	9205      	str	r2, [sp, #20]
 8011e98:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8011e9a:	1e0f      	subs	r7, r1, #0
 8011e9c:	f340 80b8 	ble.w	8012010 <tiny_vsnprintf_like+0x180>
 8011ea0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	e004      	b.n	8011eb0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8011ea6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8011eaa:	9b05      	ldr	r3, [sp, #20]
 8011eac:	3301      	adds	r3, #1
 8011eae:	9305      	str	r3, [sp, #20]
 8011eb0:	9905      	ldr	r1, [sp, #20]
 8011eb2:	780a      	ldrb	r2, [r1, #0]
 8011eb4:	b922      	cbnz	r2, 8011ec0 <tiny_vsnprintf_like+0x30>
 8011eb6:	1ba3      	subs	r3, r4, r6
 8011eb8:	1e78      	subs	r0, r7, #1
 8011eba:	4283      	cmp	r3, r0
 8011ebc:	f2c0 80a2 	blt.w	8012004 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011ec0:	1ba3      	subs	r3, r4, r6
 8011ec2:	f107 38ff 	add.w	r8, r7, #4294967295
 8011ec6:	4543      	cmp	r3, r8
 8011ec8:	f280 809c 	bge.w	8012004 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011ecc:	2a25      	cmp	r2, #37	; 0x25
 8011ece:	d1ea      	bne.n	8011ea6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011ed0:	1c4b      	adds	r3, r1, #1
 8011ed2:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8011ed4:	784b      	ldrb	r3, [r1, #1]
 8011ed6:	2b30      	cmp	r3, #48	; 0x30
 8011ed8:	d020      	beq.n	8011f1c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011eda:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011ede:	3b30      	subs	r3, #48	; 0x30
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b09      	cmp	r3, #9
 8011ee4:	d91d      	bls.n	8011f22 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8011ee6:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8011eea:	9b05      	ldr	r3, [sp, #20]
 8011eec:	781a      	ldrb	r2, [r3, #0]
 8011eee:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8011ef2:	2b20      	cmp	r3, #32
 8011ef4:	d867      	bhi.n	8011fc6 <tiny_vsnprintf_like+0x136>
 8011ef6:	e8df f003 	tbb	[pc, r3]
 8011efa:	664a      	.short	0x664a
 8011efc:	66666666 	.word	0x66666666
 8011f00:	66666666 	.word	0x66666666
 8011f04:	66621e66 	.word	0x66621e66
 8011f08:	62666666 	.word	0x62666666
 8011f0c:	66666666 	.word	0x66666666
 8011f10:	66666666 	.word	0x66666666
 8011f14:	19662866 	.word	0x19662866
 8011f18:	6666      	.short	0x6666
 8011f1a:	7c          	.byte	0x7c
 8011f1b:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011f1c:	f04f 0901 	mov.w	r9, #1
 8011f20:	e7dd      	b.n	8011ede <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8011f22:	a805      	add	r0, sp, #20
 8011f24:	f7ff ff18 	bl	8011d58 <ee_skip_atoi>
 8011f28:	4605      	mov	r5, r0
 8011f2a:	e7de      	b.n	8011eea <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011f2c:	230a      	movs	r3, #10
 8011f2e:	e031      	b.n	8011f94 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011f30:	2320      	movs	r3, #32
 8011f32:	f804 3b01 	strb.w	r3, [r4], #1
 8011f36:	3d01      	subs	r5, #1
 8011f38:	2d00      	cmp	r5, #0
 8011f3a:	dcf9      	bgt.n	8011f30 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011f3c:	9b04      	ldr	r3, [sp, #16]
 8011f3e:	1d1a      	adds	r2, r3, #4
 8011f40:	9204      	str	r2, [sp, #16]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011f48:	e7af      	b.n	8011eaa <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011f4a:	9b04      	ldr	r3, [sp, #16]
 8011f4c:	1d1a      	adds	r2, r3, #4
 8011f4e:	9204      	str	r2, [sp, #16]
 8011f50:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8011f54:	f1b8 0f00 	cmp.w	r8, #0
 8011f58:	d003      	beq.n	8011f62 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8011f5a:	4640      	mov	r0, r8
 8011f5c:	f7ee f90c 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011f60:	e006      	b.n	8011f70 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8011f62:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012014 <tiny_vsnprintf_like+0x184>
 8011f66:	e7f8      	b.n	8011f5a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8011f68:	2220      	movs	r2, #32
 8011f6a:	f804 2b01 	strb.w	r2, [r4], #1
 8011f6e:	461d      	mov	r5, r3
 8011f70:	1e6b      	subs	r3, r5, #1
 8011f72:	4285      	cmp	r5, r0
 8011f74:	dcf8      	bgt.n	8011f68 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8011f76:	2200      	movs	r2, #0
 8011f78:	e006      	b.n	8011f88 <tiny_vsnprintf_like+0xf8>
 8011f7a:	4643      	mov	r3, r8
 8011f7c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011f80:	f804 1b01 	strb.w	r1, [r4], #1
 8011f84:	3201      	adds	r2, #1
 8011f86:	4698      	mov	r8, r3
 8011f88:	4282      	cmp	r2, r0
 8011f8a:	dbf6      	blt.n	8011f7a <tiny_vsnprintf_like+0xea>
 8011f8c:	e78d      	b.n	8011eaa <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8011f8e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8011f92:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8011f94:	f019 0f02 	tst.w	r9, #2
 8011f98:	d02f      	beq.n	8011ffa <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8011f9a:	9a04      	ldr	r2, [sp, #16]
 8011f9c:	1d11      	adds	r1, r2, #4
 8011f9e:	9104      	str	r1, [sp, #16]
 8011fa0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8011fa2:	1ba1      	subs	r1, r4, r6
 8011fa4:	f8cd 9008 	str.w	r9, [sp, #8]
 8011fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fac:	9001      	str	r0, [sp, #4]
 8011fae:	9500      	str	r5, [sp, #0]
 8011fb0:	eba8 0101 	sub.w	r1, r8, r1
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7ff fee1 	bl	8011d7c <ee_number>
 8011fba:	4604      	mov	r4, r0
 8011fbc:	e775      	b.n	8011eaa <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8011fbe:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8011fc2:	230a      	movs	r3, #10
 8011fc4:	e7e6      	b.n	8011f94 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8011fc6:	2a25      	cmp	r2, #37	; 0x25
 8011fc8:	d002      	beq.n	8011fd0 <tiny_vsnprintf_like+0x140>
 8011fca:	2325      	movs	r3, #37	; 0x25
 8011fcc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011fd0:	1ba3      	subs	r3, r4, r6
 8011fd2:	4598      	cmp	r8, r3
 8011fd4:	dd0f      	ble.n	8011ff6 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8011fd6:	9b05      	ldr	r3, [sp, #20]
 8011fd8:	781a      	ldrb	r2, [r3, #0]
 8011fda:	b13a      	cbz	r2, 8011fec <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011fdc:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011fe0:	1ba3      	subs	r3, r4, r6
 8011fe2:	4598      	cmp	r8, r3
 8011fe4:	f73f af61 	bgt.w	8011eaa <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011fe8:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8011fea:	e7d3      	b.n	8011f94 <tiny_vsnprintf_like+0x104>
          --fmt;
 8011fec:	3b01      	subs	r3, #1
 8011fee:	9305      	str	r3, [sp, #20]
 8011ff0:	e7f6      	b.n	8011fe0 <tiny_vsnprintf_like+0x150>
        base = 16;
 8011ff2:	2310      	movs	r3, #16
 8011ff4:	e7ce      	b.n	8011f94 <tiny_vsnprintf_like+0x104>
    base = 10;
 8011ff6:	230a      	movs	r3, #10
 8011ff8:	e7cc      	b.n	8011f94 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011ffa:	9a04      	ldr	r2, [sp, #16]
 8011ffc:	1d11      	adds	r1, r2, #4
 8011ffe:	9104      	str	r1, [sp, #16]
 8012000:	6812      	ldr	r2, [r2, #0]
 8012002:	e7ce      	b.n	8011fa2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8012004:	2300      	movs	r3, #0
 8012006:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012008:	1ba0      	subs	r0, r4, r6
}
 801200a:	b007      	add	sp, #28
 801200c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012010:	2000      	movs	r0, #0
 8012012:	e7fa      	b.n	801200a <tiny_vsnprintf_like+0x17a>
 8012014:	08013058 	.word	0x08013058

08012018 <__libc_init_array>:
 8012018:	b570      	push	{r4, r5, r6, lr}
 801201a:	4d0d      	ldr	r5, [pc, #52]	; (8012050 <__libc_init_array+0x38>)
 801201c:	4c0d      	ldr	r4, [pc, #52]	; (8012054 <__libc_init_array+0x3c>)
 801201e:	1b64      	subs	r4, r4, r5
 8012020:	10a4      	asrs	r4, r4, #2
 8012022:	2600      	movs	r6, #0
 8012024:	42a6      	cmp	r6, r4
 8012026:	d109      	bne.n	801203c <__libc_init_array+0x24>
 8012028:	4d0b      	ldr	r5, [pc, #44]	; (8012058 <__libc_init_array+0x40>)
 801202a:	4c0c      	ldr	r4, [pc, #48]	; (801205c <__libc_init_array+0x44>)
 801202c:	f000 f8a0 	bl	8012170 <_init>
 8012030:	1b64      	subs	r4, r4, r5
 8012032:	10a4      	asrs	r4, r4, #2
 8012034:	2600      	movs	r6, #0
 8012036:	42a6      	cmp	r6, r4
 8012038:	d105      	bne.n	8012046 <__libc_init_array+0x2e>
 801203a:	bd70      	pop	{r4, r5, r6, pc}
 801203c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012040:	4798      	blx	r3
 8012042:	3601      	adds	r6, #1
 8012044:	e7ee      	b.n	8012024 <__libc_init_array+0xc>
 8012046:	f855 3b04 	ldr.w	r3, [r5], #4
 801204a:	4798      	blx	r3
 801204c:	3601      	adds	r6, #1
 801204e:	e7f2      	b.n	8012036 <__libc_init_array+0x1e>
 8012050:	08013068 	.word	0x08013068
 8012054:	08013068 	.word	0x08013068
 8012058:	08013068 	.word	0x08013068
 801205c:	0801306c 	.word	0x0801306c

08012060 <memset>:
 8012060:	4402      	add	r2, r0
 8012062:	4603      	mov	r3, r0
 8012064:	4293      	cmp	r3, r2
 8012066:	d100      	bne.n	801206a <memset+0xa>
 8012068:	4770      	bx	lr
 801206a:	f803 1b01 	strb.w	r1, [r3], #1
 801206e:	e7f9      	b.n	8012064 <memset+0x4>

08012070 <floor>:
 8012070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012074:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8012078:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801207c:	2e13      	cmp	r6, #19
 801207e:	4602      	mov	r2, r0
 8012080:	460b      	mov	r3, r1
 8012082:	4607      	mov	r7, r0
 8012084:	460c      	mov	r4, r1
 8012086:	4605      	mov	r5, r0
 8012088:	dc33      	bgt.n	80120f2 <floor+0x82>
 801208a:	2e00      	cmp	r6, #0
 801208c:	da14      	bge.n	80120b8 <floor+0x48>
 801208e:	a334      	add	r3, pc, #208	; (adr r3, 8012160 <floor+0xf0>)
 8012090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012094:	f7ee fa5c 	bl	8000550 <__adddf3>
 8012098:	2200      	movs	r2, #0
 801209a:	2300      	movs	r3, #0
 801209c:	f7ee fc8c 	bl	80009b8 <__aeabi_dcmpgt>
 80120a0:	b138      	cbz	r0, 80120b2 <floor+0x42>
 80120a2:	2c00      	cmp	r4, #0
 80120a4:	da58      	bge.n	8012158 <floor+0xe8>
 80120a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80120aa:	431d      	orrs	r5, r3
 80120ac:	d001      	beq.n	80120b2 <floor+0x42>
 80120ae:	4c2e      	ldr	r4, [pc, #184]	; (8012168 <floor+0xf8>)
 80120b0:	2500      	movs	r5, #0
 80120b2:	4623      	mov	r3, r4
 80120b4:	462f      	mov	r7, r5
 80120b6:	e025      	b.n	8012104 <floor+0x94>
 80120b8:	4a2c      	ldr	r2, [pc, #176]	; (801216c <floor+0xfc>)
 80120ba:	fa42 f806 	asr.w	r8, r2, r6
 80120be:	ea01 0208 	and.w	r2, r1, r8
 80120c2:	4302      	orrs	r2, r0
 80120c4:	d01e      	beq.n	8012104 <floor+0x94>
 80120c6:	a326      	add	r3, pc, #152	; (adr r3, 8012160 <floor+0xf0>)
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	f7ee fa40 	bl	8000550 <__adddf3>
 80120d0:	2200      	movs	r2, #0
 80120d2:	2300      	movs	r3, #0
 80120d4:	f7ee fc70 	bl	80009b8 <__aeabi_dcmpgt>
 80120d8:	2800      	cmp	r0, #0
 80120da:	d0ea      	beq.n	80120b2 <floor+0x42>
 80120dc:	2c00      	cmp	r4, #0
 80120de:	bfbe      	ittt	lt
 80120e0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80120e4:	fa43 f606 	asrlt.w	r6, r3, r6
 80120e8:	19a4      	addlt	r4, r4, r6
 80120ea:	ea24 0408 	bic.w	r4, r4, r8
 80120ee:	2500      	movs	r5, #0
 80120f0:	e7df      	b.n	80120b2 <floor+0x42>
 80120f2:	2e33      	cmp	r6, #51	; 0x33
 80120f4:	dd0a      	ble.n	801210c <floor+0x9c>
 80120f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80120fa:	d103      	bne.n	8012104 <floor+0x94>
 80120fc:	f7ee fa28 	bl	8000550 <__adddf3>
 8012100:	4607      	mov	r7, r0
 8012102:	460b      	mov	r3, r1
 8012104:	4638      	mov	r0, r7
 8012106:	4619      	mov	r1, r3
 8012108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012110:	f04f 32ff 	mov.w	r2, #4294967295
 8012114:	fa22 f808 	lsr.w	r8, r2, r8
 8012118:	ea18 0f00 	tst.w	r8, r0
 801211c:	d0f2      	beq.n	8012104 <floor+0x94>
 801211e:	a310      	add	r3, pc, #64	; (adr r3, 8012160 <floor+0xf0>)
 8012120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012124:	f7ee fa14 	bl	8000550 <__adddf3>
 8012128:	2200      	movs	r2, #0
 801212a:	2300      	movs	r3, #0
 801212c:	f7ee fc44 	bl	80009b8 <__aeabi_dcmpgt>
 8012130:	2800      	cmp	r0, #0
 8012132:	d0be      	beq.n	80120b2 <floor+0x42>
 8012134:	2c00      	cmp	r4, #0
 8012136:	da02      	bge.n	801213e <floor+0xce>
 8012138:	2e14      	cmp	r6, #20
 801213a:	d103      	bne.n	8012144 <floor+0xd4>
 801213c:	3401      	adds	r4, #1
 801213e:	ea25 0508 	bic.w	r5, r5, r8
 8012142:	e7b6      	b.n	80120b2 <floor+0x42>
 8012144:	2301      	movs	r3, #1
 8012146:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801214a:	fa03 f606 	lsl.w	r6, r3, r6
 801214e:	4435      	add	r5, r6
 8012150:	42bd      	cmp	r5, r7
 8012152:	bf38      	it	cc
 8012154:	18e4      	addcc	r4, r4, r3
 8012156:	e7f2      	b.n	801213e <floor+0xce>
 8012158:	2500      	movs	r5, #0
 801215a:	462c      	mov	r4, r5
 801215c:	e7a9      	b.n	80120b2 <floor+0x42>
 801215e:	bf00      	nop
 8012160:	8800759c 	.word	0x8800759c
 8012164:	7e37e43c 	.word	0x7e37e43c
 8012168:	bff00000 	.word	0xbff00000
 801216c:	000fffff 	.word	0x000fffff

08012170 <_init>:
 8012170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012172:	bf00      	nop
 8012174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012176:	bc08      	pop	{r3}
 8012178:	469e      	mov	lr, r3
 801217a:	4770      	bx	lr

0801217c <_fini>:
 801217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217e:	bf00      	nop
 8012180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012182:	bc08      	pop	{r3}
 8012184:	469e      	mov	lr, r3
 8012186:	4770      	bx	lr
